* NeuroTorch
** Introduction
This package provides an implementation of a recurrent neural network trainer and simulator with pytorch.
Networks can have multiple neural populations with different connectivity types (all to all, sparse) that can be structured (tuned, low rank).
Network weights can be trained in a unsupervised or supervised manner just as vanilla RNNs in torch.

For more info look at the notebooks in ./notebooks and the configuration files in ./conf. 

** Installation

#+begin_src sh
  pip install -r requirements.txt
#+end_src

or alternatively using conda (I recomand using [[https://github.com/conda-forge/miniforge][miniforge]])

#+begin_src sh
  conda install --file conda_requirements.txt
#+end_src

** Basic Usage
Here is how to run a simulation

#+begin_src ipython
  # import the network class
  from src.network import Network

  # Define repository root
  repo_root = '/'

  # Choose a config file
  conf_file = './conf/conf_EI.yml'

  # Choose an output file
  output_file = 'results.txt'

  # Other parameters can be overwriten with kwargs
  # kwargs can be any of the args in the config file

  # initialize model
  model = Network(conf_file, output_file, repo_root, **kwargs)
  
  # run a forward pass
  rates = model()  
#+end_src

** Advanced Usage
*** Project Structure
#+begin_src sh
  .
  ├── conf  # contains configuration files in yaml format.
  │   ├── *.yml
  ├── notebooks  # contains ipython notebooks.
  │   ├── setup.py
  │   └── *.ipynb
  ├── org  # contains org notebooks.
  │   ├── /doc/*.org
  │   └── *.org
  ├── src  # contains source code.
  │   ├── activation.py  # contains custom activation functions.
  │   ├── connectivity.py  # contains custom connectivity profiles.
  │   ├── decode.py
  │   ├── lif_network.py  # implementation of a LIF network.
  │   ├── lif_neuron.py
  │   ├── lr_utils.py  # utils for low rank networks.
  │   ├── network.py  # core of the project.
  │   ├── plasticity.py  # contains STP.
  │   ├── plot_utils.py
  │   ├── sparse.py  # utils for large sparse matrices.
  │   ├── stimuli.py  # contains custom stimuli for behavioral tasks.
  │   ├── train.py  # utils to train networks.
  └── └── utils.py 
#+end_src

*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/doc/dynamics.org][Networks Dynamics]]
*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/tests/connectivity.org][Connectivity]]
*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/doc/neurotorch.org][Single Network Simulation and Batched Simulations]]
*** Networks Training
*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/tests/balance.org][Balanced Networks]]
*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/tests/stp.org][Short Term Plasticity]]
*** [[file:/LeonCarmin/NeuroTorch/src/branch/main/org/tests/stimuli.org][Behavioral Tasks]]
** Contributing
Feel free to contribute.

#+begin_example
MIT License
Copyright (c) [2023] [A. Mahrach]
#+end_example

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ./notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* RNN with torch
** Imports
#+begin_src ipython
  from src.network import Network
  from src.plot_utils import plot_con
#+end_src

#+RESULTS:
** Model
#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_bump.yml', 'bump', REPO_ROOT, VERBOSE=1)
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/NeuroTorch/conf/config_bump.yml
: Jab [-2.75]
: Ja0 [14.0]
: All to all connectivity 
: with strong cosine structure

** Connectivity
#+begin_src ipython
  print(model.Wab[0][0])
#+end_src

#+RESULTS:
: Linear(in_features=1000, out_features=1000, bias=True)


#+begin_src ipython 
  Cij = model.Wab[0][0].weight.data.cpu().detach().numpy()
  plot_con(Cij)
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/events.py:93: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   func(*args, **kwargs)
: /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   fig.canvas.print_figure(bytes_io, **kw)
[[file:./.ob-jupyter/aa149aec1a0d5d28cf86c680e8a17538536c1aad.png]]
:END:

** Simulation
#+begin_src ipython
  rates = model.run()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mRuntimeError[0m                              Traceback (most recent call last)
  Cell [0;32mIn[205], line 1[0m
  [0;32m----> 1[0m rates [38;5;241m=[39m [43mmodel[49m[38;5;241;43m.[39;49m[43mrun[49m[43m([49m[43m)[49m

  File [0;32m~/models/NeuroTorch/src/network.py:109[0m, in [0;36mNetwork.run[0;34m(self)[0m
  [1;32m    106[0m [38;5;28mself[39m[38;5;241m.[39mN_WINDOW [38;5;241m=[39m [38;5;28mint[39m([38;5;28mself[39m[38;5;241m.[39mT_WINDOW [38;5;241m/[39m [38;5;28mself[39m[38;5;241m.[39mDT)
  [1;32m    108[0m [38;5;28;01mfor[39;00m step [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mself[39m[38;5;241m.[39mN_STEPS): 
  [0;32m--> 109[0m     hidden [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mforward[49m[43m([49m[43mhidden[49m[43m)[49m
  [1;32m    111[0m     [38;5;28;01mif[39;00m step [38;5;241m%[39m [38;5;28mself[39m[38;5;241m.[39mN_WINDOW [38;5;241m==[39m [38;5;241m0[39m:
  [1;32m    112[0m         [38;5;28mself[39m[38;5;241m.[39mprint_activity(step, hidden)

  File [0;32m~/models/NeuroTorch/src/network.py:71[0m, in [0;36mNetwork.forward[0;34m(self, rates)[0m
  [1;32m     68[0m [38;5;28;01mdef[39;00m [38;5;21mforward[39m([38;5;28mself[39m, rates):
  [1;32m     70[0m     rec_input [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mupdate_rec_input(rates)
  [0;32m---> 71[0m     net_input [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mupdate_net_input[49m[43m([49m[43mrec_input[49m[43m)[49m
  [1;32m     72[0m     rates [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mupdate_rates(rates, net_input)
  [1;32m     74[0m     [38;5;28;01mreturn[39;00m rates

  File [0;32m~/models/NeuroTorch/src/network.py:57[0m, in [0;36mNetwork.update_net_input[0;34m(self, rec_input)[0m
  [1;32m     54[0m net_input[38;5;241m.[39mto([38;5;28mself[39m[38;5;241m.[39mdevice)
  [1;32m     56[0m [38;5;28;01mfor[39;00m i_pop [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mself[39m[38;5;241m.[39mN_POP):
  [0;32m---> 57[0m     net_input [38;5;241m=[39m [43mnet_input[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43mrec_input[49m[43m[[49m[43mi_pop[49m[43m][49m
  [1;32m     59[0m [38;5;28;01mreturn[39;00m net_input

  [0;31mRuntimeError[0m: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu!
#+end_example
:END:
** Analysis
#+begin_src ipython
  plt.imshow(rates.T, aspect='auto', cmap='jet', vmin=0, vmax=10)
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/43a571c81519c491b97a209cdfdb5ba594b43165.png]]

#+begin_src ipython
  plt.hist(rates[-1])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3d66f7851f27b4412a39b7c5bbfc2e49d5e3d5f3.png]]

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ./notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* RNN with torch
** Imports
#+begin_src ipython
  from src.network import Network
  from src.plot_utils import plot_con
#+end_src

#+RESULTS:
** Model
#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_bump.yml', 'bump', REPO_ROOT, VERBOSE=1, DEVICE='cpu', FLOAT_PRECISION=32)
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/NeuroTorch/conf/config_bump.yml
: Jab [-2.75]
: Ja0 [14.0]
: All to all connectivity 
: with strong cosine structure

** Connectivity
#+begin_src ipython
  print(model.Wab[0][0])
#+end_src

#+RESULTS:
: Linear(in_features=1000, out_features=1000, bias=True)

#+begin_src ipython 
  Cij = model.Wab[0][0].weight.data.cpu().detach().numpy()
  plot_con(Cij)
#+end_src

#+RESULTS:
:RESULTS:
: /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/events.py:93: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   func(*args, **kwargs)
: /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
:   fig.canvas.print_figure(bytes_io, **kw)
[[file:./.ob-jupyter/fbced4dfa5b6c3caf7b3666d418d4364170d9a9f.png]]
:END:

** Simulation
#+begin_src ipython
  rates = model.run()
#+end_src

#+RESULTS:
#+begin_example
  times (s) -1.0 rates (Hz) [0.74]
  times (s) -0.5 rates (Hz) [5.74]
  times (s) 0.0 rates (Hz) [5.89]
  times (s) 0.5 rates (Hz) [5.87]
  times (s) 1.0 rates (Hz) [5.89]
  times (s) 1.5 rates (Hz) [5.88]
  times (s) 2.0 rates (Hz) [5.87]
  times (s) 2.5 rates (Hz) [5.85]
  times (s) 3.0 rates (Hz) [5.88]
  times (s) 3.5 rates (Hz) [5.87]
  times (s) 4.0 rates (Hz) [5.9]
  times (s) 4.5 rates (Hz) [5.86]
  times (s) 5.0 rates (Hz) [5.87]
  times (s) 5.5 rates (Hz) [5.9]
  times (s) 6.0 rates (Hz) [5.87]
  times (s) 6.5 rates (Hz) [5.89]
  times (s) 7.0 rates (Hz) [5.88]
  times (s) 7.5 rates (Hz) [5.89]
  times (s) 8.0 rates (Hz) [5.87]
  times (s) 8.5 rates (Hz) [5.9]
  Elapsed (with compilation) = 2.69122190104099s
#+end_example

** Analysis
#+begin_src ipython
  plt.imshow(rates.T, aspect='auto', cmap='jet', vmin=0, vmax=10)
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7a813656dcc2dde27d235ccf6d5dd2e85c009e31.png]]
#
#+begin_src ipython

#+end_src

#+RESULTS:

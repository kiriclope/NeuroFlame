(undo-tree-save-format-version . 1)
"7bb4c0820925377d879ac080fee5f70212b4e168"
[nil nil nil nil (25888 9390 454345 572000) 0 nil]
([nil nil ((nil fontified nil 1680 . 1681) (nil fontified nil 1679 . 1680) (nil fontified nil 1678 . 1679) (nil fontified nil 1677 . 1678) (nil fontified nil 1676 . 1677) (nil fontified nil 1675 . 1676) (nil fontified nil 1674 . 1675) (nil fontified nil 1673 . 1674) (nil fontified nil 1672 . 1673) (nil fontified nil 1671 . 1672) (nil fontified nil 1670 . 1671) (nil fontified nil 1669 . 1670) (nil fontified nil 1668 . 1669) (nil fontified nil 1667 . 1668) (nil fontified nil 1666 . 1667) (nil fontified nil 1665 . 1666) (nil fontified nil 1664 . 1665) (nil fontified nil 1663 . 1664) (nil fontified nil 1662 . 1663) (nil fontified nil 1660 . 1662) (nil fontified nil 1659 . 1660) (nil fontified nil 1658 . 1659) (nil fontified nil 1656 . 1658) (nil fontified nil 1655 . 1656) (nil fontified nil 1654 . 1655) (nil fontified nil 1653 . 1654) (nil fontified nil 1652 . 1653) (nil fontified nil 1649 . 1652) (nil fontified nil 1646 . 1649) (nil fontified nil 1645 . 1646) (nil fontified nil 1639 . 1645) (nil fontified nil 1634 . 1639) (nil fontified nil 1633 . 1634) (nil fontified nil 1629 . 1633) (nil fontified nil 1623 . 1629) (nil fontified nil 1622 . 1623) (nil fontified nil 1621 . 1622) (nil fontified nil 1620 . 1621) (nil fontified nil 1619 . 1620) (nil fontified nil 1618 . 1619) (nil fontified nil 1617 . 1618) (nil fontified nil 1612 . 1617) (nil fontified nil 1611 . 1612) (nil fontified nil 1610 . 1611) (nil fontified nil 1607 . 1610) (nil fontified nil 1606 . 1607) (nil fontified nil 1605 . 1606) (nil fontified nil 1604 . 1605) (nil fontified nil 1603 . 1604) (nil fontified nil 1600 . 1603) (nil fontified nil 1599 . 1600) (nil fontified nil 1598 . 1599) (nil fontified nil 1596 . 1598) (nil fontified nil 1595 . 1596) (nil fontified nil 1592 . 1595) (nil fontified nil 1590 . 1592) (nil fontified nil 1589 . 1590) (nil fontified nil 1586 . 1589) (nil fontified nil 1585 . 1586) (nil fontified nil 1584 . 1585) (nil fontified nil 1583 . 1584) (nil fontified nil 1582 . 1583) (nil fontified nil 1581 . 1582) (nil fontified nil 1575 . 1581) (nil fontified nil 1574 . 1575) (nil fontified nil 1573 . 1574) (nil fontified nil 1572 . 1573) (nil fontified nil 1571 . 1572) (nil fontified nil 1570 . 1571) (nil fontified nil 1569 . 1570) (nil fontified nil 1568 . 1569) (nil fontified nil 1567 . 1568) (nil fontified nil 1566 . 1567) (nil fontified nil 1565 . 1566) (nil fontified nil 1564 . 1565) (nil fontified nil 1563 . 1564) (nil fontified nil 1562 . 1563) (nil fontified nil 1561 . 1562) (nil fontified nil 1560 . 1561) (nil fontified nil 1559 . 1560) (nil fontified nil 1558 . 1559) (nil fontified nil 1557 . 1558) (nil fontified nil 1556 . 1557) (nil fontified nil 1555 . 1556) (nil fontified nil 1554 . 1555) (nil fontified nil 1553 . 1554) (nil fontified nil 1552 . 1553) (nil fontified nil 1551 . 1552) (nil fontified nil 1550 . 1551) (nil fontified nil 1549 . 1550) (nil fontified nil 1548 . 1549) (nil fontified nil 1547 . 1548) (nil fontified nil 1546 . 1547) (nil fontified nil 1545 . 1546) (nil fontified nil 1544 . 1545) (nil fontified nil 1542 . 1544) (nil fontified nil 1541 . 1542) (nil fontified nil 1540 . 1541) (nil fontified nil 1539 . 1540) (nil fontified nil 1538 . 1539) (nil fontified nil 1537 . 1538) (nil fontified nil 1536 . 1537) (nil fontified nil 1530 . 1536) (nil fontified nil 1524 . 1530) (nil fontified nil 1523 . 1524) (nil fontified nil 1522 . 1523) (nil fontified nil 1521 . 1522) (nil fontified nil 1520 . 1521) (nil fontified nil 1513 . 1520) (nil fontified nil 1508 . 1513) (nil fontified nil 1507 . 1508) (nil fontified nil 1504 . 1507) (nil fontified nil 1499 . 1504) (nil fontified nil 1498 . 1499) (nil fontified nil 1497 . 1498) (nil fontified nil 1496 . 1497) (nil fontified nil 1495 . 1496) (nil fontified nil 1494 . 1495) (nil fontified nil 1493 . 1494) (nil fontified nil 1492 . 1493) (nil fontified nil 1491 . 1492) (nil fontified nil 1490 . 1491) (nil fontified nil 1489 . 1490) (nil fontified nil 1488 . 1489) (nil fontified nil 1487 . 1488) (nil fontified nil 1486 . 1487) (nil fontified nil 1485 . 1486) (nil fontified nil 1483 . 1485) (nil fontified nil 1482 . 1483) (nil fontified nil 1481 . 1482) (nil fontified nil 1478 . 1481) (nil fontified nil 1477 . 1478) (nil fontified nil 1476 . 1477) (nil fontified nil 1475 . 1476) (nil fontified nil 1474 . 1475) (nil fontified nil 1472 . 1474) (nil fontified nil 1471 . 1472) (nil fontified nil 1470 . 1471) (nil fontified nil 1464 . 1470) (nil fontified nil 1463 . 1464) (nil fontified nil 1461 . 1463) (nil fontified nil 1460 . 1461) (nil fontified nil 1459 . 1460) (nil fontified nil 1458 . 1459) (nil fontified nil 1457 . 1458) (nil fontified nil 1456 . 1457) (nil fontified nil 1451 . 1456) (nil fontified nil 1450 . 1451) (nil fontified nil 1445 . 1450) (nil fontified nil 1444 . 1445) (nil fontified nil 1438 . 1444) (nil fontified nil 1437 . 1438) (nil fontified nil 1435 . 1437) (nil fontified nil 1434 . 1435) (nil fontified nil 1433 . 1434) (nil fontified nil 1432 . 1433) (nil fontified nil 1425 . 1432) (nil fontified nil 1419 . 1425) (nil fontified nil 1418 . 1419) (nil fontified nil 1417 . 1418) (nil fontified nil 1412 . 1417) (nil fontified nil 1410 . 1412) (nil fontified nil 1406 . 1410) (nil fontified nil 1404 . 1406) (nil fontified nil 1403 . 1404) (nil fontified nil 1402 . 1403) (nil fontified nil 1401 . 1402) (nil fontified nil 1389 . 1401) (nil fontified nil 1385 . 1389) (nil fontified nil 1384 . 1385) (nil fontified nil 1383 . 1384) (nil fontified nil 1382 . 1383) (nil fontified nil 1381 . 1382) (nil fontified nil 1375 . 1381) (nil fontified nil 1373 . 1375) (nil fontified nil 1372 . 1373) (nil fontified nil 1371 . 1372) (nil fontified nil 1369 . 1371) (nil fontified nil 1368 . 1369) (nil fontified nil 1363 . 1368) (nil fontified nil 1362 . 1363) (nil fontified nil 1347 . 1362) (nil fontified nil 1343 . 1347) (nil fontified nil 1342 . 1343) (nil fontified nil 1336 . 1342) (nil fontified nil 1331 . 1336) (nil fontified nil 1330 . 1331) (nil fontified nil 1327 . 1330) (nil fontified nil 1326 . 1327) (nil fontified nil 1324 . 1326) (nil fontified nil 1322 . 1324) (nil fontified nil 1321 . 1322) (nil fontified nil 1320 . 1321) (nil fontified nil 1319 . 1320) (nil fontified nil 1318 . 1319) (nil fontified nil 1306 . 1318) (nil fontified nil 1302 . 1306) (nil fontified nil 1299 . 1302) (nil fontified nil 1298 . 1299) (nil fontified nil 1286 . 1298) (nil fontified nil 1280 . 1286) (nil fontified nil 1272 . 1280) (nil fontified nil 1270 . 1272) (nil fontified nil 1268 . 1270) (nil fontified nil 1267 . 1268) (nil fontified nil 1263 . 1267) (nil fontified nil 1262 . 1263) (nil fontified nil 1252 . 1262) (nil fontified nil 1251 . 1252) (nil fontified nil 1248 . 1251) (nil fontified nil 1246 . 1248) (nil fontified nil 1242 . 1246) (nil fontified nil 1241 . 1242) (nil fontified nil 1237 . 1241) (nil fontified nil 1235 . 1237) (nil fontified nil 1227 . 1235) (nil fontified nil 1221 . 1227) (nil fontified nil 1214 . 1221) (nil fontified nil 1212 . 1214) (nil fontified nil 1211 . 1212) (nil fontified nil 1210 . 1211) (nil fontified nil 1209 . 1210) (nil fontified nil 1200 . 1209) (nil fontified nil 1199 . 1200) (nil fontified nil 1198 . 1199) (nil fontified nil 1197 . 1198) (nil fontified nil 1186 . 1197) (nil fontified nil 1185 . 1186) (nil fontified nil 1179 . 1185) (nil fontified nil 1178 . 1179) (nil fontified nil 1174 . 1178) (nil fontified nil 1170 . 1174) (nil fontified nil 1169 . 1170) (nil fontified nil 1168 . 1169) (nil fontified nil 1160 . 1168) (nil fontified nil 1156 . 1160) (nil fontified nil 1155 . 1156) (nil fontified nil 1154 . 1155) (nil fontified nil 1146 . 1154) (nil fontified nil 1145 . 1146) (nil fontified nil 1144 . 1145) (nil fontified nil 1138 . 1144) (nil fontified nil 1129 . 1138) (nil fontified nil 1128 . 1129) (nil fontified nil 1127 . 1128) (nil fontified nil 1126 . 1127) (nil fontified nil 1117 . 1126) (nil fontified nil 1116 . 1117) (nil fontified nil 1115 . 1116) (nil fontified nil 1114 . 1115) (nil fontified nil 1106 . 1114) (nil fontified nil 1105 . 1106) (nil fontified nil 1101 . 1105) (nil fontified nil 1097 . 1101) (nil fontified nil 1096 . 1097) (nil fontified nil 1095 . 1096) (nil fontified nil 1087 . 1095) (nil fontified nil 1083 . 1087) (nil fontified nil 1082 . 1083) (nil fontified nil 1081 . 1082) (nil fontified nil 1073 . 1081) (nil fontified nil 1072 . 1073) (nil fontified nil 1071 . 1072) (nil fontified nil 1065 . 1071) (nil fontified nil 1064 . 1065) (nil fontified nil 1063 . 1064) (nil fontified nil 1055 . 1063) (nil fontified nil 1054 . 1055) (nil fontified nil 1053 . 1054) (nil fontified nil 1052 . 1053) (nil fontified nil 1051 . 1052) (nil fontified nil 1042 . 1051) (nil fontified nil 1041 . 1042) (nil fontified nil 1040 . 1041) (nil fontified nil 1039 . 1040) (nil fontified nil 1032 . 1039) (nil fontified nil 1031 . 1032) (nil fontified nil 1030 . 1031) (nil fontified nil 1029 . 1030) (nil fontified nil 1023 . 1029) (nil fontified nil 1022 . 1023) (nil fontified nil 1021 . 1022) (nil fontified nil 1020 . 1021) (nil fontified nil 1011 . 1020) (nil fontified nil 1010 . 1011) (nil fontified nil 1009 . 1010) (nil fontified nil 1003 . 1009) (nil fontified nil 1002 . 1003) (nil fontified nil 1001 . 1002) (nil fontified nil 1000 . 1001) (nil fontified nil 994 . 1000) (nil fontified nil 993 . 994) (nil fontified nil 989 . 993) (nil fontified nil 985 . 989) (nil fontified nil 984 . 985) (nil fontified nil 983 . 984) (nil fontified nil 982 . 983) (nil fontified nil 973 . 982) (nil fontified nil 969 . 973) (nil fontified nil 961 . 969) (nil fontified nil 959 . 961) (nil fontified nil 957 . 959) (nil fontified nil 953 . 957) (nil fontified nil 945 . 953) (nil fontified nil 943 . 945) (nil fontified nil 942 . 943) (nil fontified nil 941 . 942) (nil fontified nil 935 . 941) (nil fontified nil 934 . 935) (nil fontified nil 930 . 934) (nil fontified nil 926 . 930) (nil fontified nil 925 . 926) (nil fontified nil 924 . 925) (nil fontified nil 923 . 924) (nil fontified nil 922 . 923) (nil fontified nil 917 . 922) (nil fontified nil 916 . 917) (nil fontified nil 912 . 916) (nil fontified nil 908 . 912) (nil fontified nil 907 . 908) (nil fontified nil 906 . 907) (nil fontified nil 905 . 906) (nil fontified nil 896 . 905) (nil fontified nil 892 . 896) (nil fontified nil 884 . 892) (nil fontified nil 882 . 884) (nil fontified nil 881 . 882) (nil fontified nil 880 . 881) (nil fontified nil 876 . 880) (nil fontified nil 875 . 876) (nil fontified nil 872 . 875) (nil fontified nil 871 . 872) (nil fontified nil 869 . 871) (nil fontified nil 868 . 869) (nil fontified nil 863 . 868) (nil fontified nil 862 . 863) (nil fontified nil 860 . 862) (nil fontified nil 852 . 860) (nil fontified nil 850 . 852) (nil fontified nil 849 . 850) (nil fontified nil 848 . 849) (nil fontified nil 847 . 848) (nil fontified nil 846 . 847) (nil fontified nil 834 . 846) (nil fontified nil 830 . 834) (nil fontified nil 828 . 830) (nil fontified nil 827 . 828) (nil fontified nil 826 . 827) (nil fontified nil 822 . 826) (nil fontified nil 821 . 822) (nil fontified nil 809 . 821) (nil fontified nil 808 . 809) (nil fontified nil 807 . 808) (nil fontified nil 802 . 807) (nil fontified nil 793 . 802) (nil fontified nil 792 . 793) (nil fontified nil 791 . 792) (nil fontified nil 789 . 791) (nil fontified nil 788 . 789) (nil fontified nil 780 . 788) (nil fontified nil 775 . 780) (nil fontified nil 773 . 775) (nil fontified nil 769 . 773) (nil fontified nil 768 . 769) (nil fontified nil 761 . 768) (nil fontified nil 760 . 761) (nil fontified nil 757 . 760) (nil fontified nil 756 . 757) (nil fontified nil 751 . 756) (nil fontified nil 750 . 751) (nil fontified nil 749 . 750) (nil fontified nil 748 . 749) (nil fontified nil 743 . 748) (nil fontified nil 742 . 743) (nil fontified nil 735 . 742) (nil fontified nil 732 . 735) (nil fontified nil 731 . 732) (nil fontified nil 727 . 731) (nil fontified nil 723 . 727) (nil fontified nil 721 . 723) (nil fontified nil 719 . 721) (nil fontified nil 718 . 719) (nil fontified nil 707 . 718) (nil fontified nil 706 . 707) (nil fontified nil 702 . 706) (nil fontified nil 701 . 702) (nil fontified nil 700 . 701) (nil fontified nil 699 . 700) (nil fontified nil 697 . 699) (nil fontified nil 695 . 697) (nil fontified nil 694 . 695) (nil fontified nil 693 . 694) (nil fontified nil 692 . 693) (nil fontified nil 691 . 692) (nil fontified nil 690 . 691) (nil fontified nil 689 . 690) (nil fontified nil 688 . 689) (nil fontified nil 687 . 688) (nil fontified nil 686 . 687) (nil fontified nil 685 . 686) (nil fontified nil 684 . 685) (nil fontified nil 683 . 684) (nil fontified nil 682 . 683) (nil fontified nil 681 . 682) (nil fontified nil 680 . 681) (nil fontified nil 679 . 680) (nil fontified nil 678 . 679) (nil fontified nil 677 . 678) (nil fontified nil 676 . 677) (nil fontified nil 675 . 676) (nil fontified nil 674 . 675) (nil fontified nil 673 . 674) (nil fontified nil 672 . 673) (nil fontified nil 670 . 672) (nil fontified nil 669 . 670) (nil fontified nil 668 . 669) (nil fontified nil 656 . 668) (nil fontified nil 654 . 656) (nil fontified nil 646 . 654) (nil fontified nil 644 . 646) (nil fontified nil 635 . 644) (nil fontified nil 631 . 635) (nil fontified nil 627 . 631) (nil fontified nil 626 . 627) (nil fontified nil 624 . 626) (nil fontified nil 621 . 624) (nil fontified nil 613 . 621) (nil fontified nil 611 . 613) (nil fontified nil 610 . 611) (nil fontified nil 609 . 610) (nil fontified nil 608 . 609) (nil fontified nil 606 . 608) (nil fontified nil 605 . 606) (nil fontified nil 589 . 605) (nil fontified nil 588 . 589) (nil fontified nil 587 . 588) (nil fontified nil 585 . 587) (nil fontified nil 581 . 585) (nil fontified nil 580 . 581) (nil fontified nil 571 . 580) (nil fontified nil 570 . 571) (nil fontified nil 548 . 570) (nil fontified nil 547 . 548) (nil fontified nil 544 . 547) (nil fontified nil 542 . 544) (nil fontified nil 534 . 542) (nil fontified nil 532 . 534) (nil fontified nil 531 . 532) (nil fontified nil 530 . 531) (nil fontified nil 529 . 530) (nil fontified nil 526 . 529) (nil fontified nil 525 . 526) (nil fontified nil 495 . 525) (nil fontified nil 494 . 495) (nil fontified nil 484 . 494) (nil fontified nil 483 . 484) (nil fontified nil 482 . 483) (nil fontified nil 479 . 482) (nil fontified nil 478 . 479) (nil fontified nil 474 . 478) (nil fontified nil 473 . 474) (nil fontified nil 464 . 473) (nil fontified nil 463 . 464) (nil fontified nil 448 . 463) (nil fontified nil 446 . 448) (nil fontified nil 438 . 446) (nil fontified nil 436 . 438) (nil fontified nil 435 . 436) (nil fontified nil 434 . 435) (nil fontified nil 410 . 434) (nil fontified nil 408 . 410) (nil fontified nil 407 . 408) (nil fontified nil 406 . 407) (nil fontified nil 403 . 406) (nil fontified nil 402 . 403) (nil fontified nil 380 . 402) (nil fontified nil 376 . 380) (nil fontified nil 372 . 376) (nil fontified nil 364 . 372) (nil fontified nil 363 . 364) (nil fontified nil 362 . 363) (nil fontified nil 361 . 362) (nil fontified nil 360 . 361) (nil fontified nil 355 . 360) (nil fontified nil 354 . 355) (nil fontified nil 325 . 354) (nil fontified nil 324 . 325) (nil fontified nil 314 . 324) (nil fontified nil 313 . 314) (nil fontified nil 312 . 313) (nil fontified nil 309 . 312) (nil fontified nil 308 . 309) (nil fontified nil 304 . 308) (nil fontified nil 300 . 304) (nil fontified nil 293 . 300) (nil fontified nil 292 . 293) (nil fontified nil 290 . 292) (nil fontified nil 289 . 290) (nil fontified nil 287 . 289) (nil fontified nil 286 . 287) (nil fontified nil 276 . 286) (nil fontified nil 275 . 276) (nil fontified nil 273 . 275) (nil fontified nil 265 . 273) (nil fontified nil 263 . 265) (nil fontified nil 245 . 263) (nil fontified nil 243 . 245) (nil fontified nil 235 . 243) (nil fontified nil 233 . 235) (nil fontified nil 232 . 233) (nil fontified nil 231 . 232) (nil fontified nil 230 . 231) (nil fontified nil 227 . 230) (nil fontified nil 226 . 227) (nil fontified nil 224 . 226) (nil fontified nil 223 . 224) (nil fontified nil 222 . 223) (nil fontified nil 215 . 222) (nil fontified nil 214 . 215) (nil fontified nil 213 . 214) (nil fontified nil 207 . 213) (nil fontified nil 206 . 207) (nil fontified nil 202 . 206) (nil fontified nil 201 . 202) (nil fontified nil 199 . 201) (nil fontified nil 194 . 199) (nil fontified nil 192 . 194) (nil fontified nil 187 . 192) (nil fontified nil 186 . 187) (nil fontified nil 182 . 186) (nil fontified nil 181 . 182) (nil fontified nil 180 . 181) (nil fontified nil 178 . 180) (nil fontified nil 177 . 178) (nil fontified nil 173 . 177) (nil fontified nil 165 . 173) (nil fontified nil 164 . 165) (nil fontified nil 163 . 164) (nil fontified nil 150 . 163) (nil fontified nil 149 . 150) (nil fontified nil 148 . 149) (nil fontified nil 137 . 148) (nil fontified nil 136 . 137) (nil fontified nil 132 . 136) (nil fontified nil 131 . 132) (nil fontified nil 130 . 131) (nil fontified nil 122 . 130) (nil fontified nil 121 . 122) (nil fontified nil 120 . 121) (nil fontified nil 119 . 120) (nil fontified nil 110 . 119) (nil fontified nil 109 . 110) (nil fontified nil 108 . 109) (nil fontified nil 103 . 108) (nil fontified nil 95 . 103) (nil fontified nil 94 . 95) (nil fontified nil 93 . 94) (nil fontified nil 91 . 93) (nil fontified nil 90 . 91) (nil fontified nil 56 . 90) (nil fontified nil 52 . 56) (nil fontified nil 51 . 52) (nil fontified nil 43 . 51) (nil fontified nil 42 . 43) (nil fontified nil 39 . 42) (nil fontified nil 38 . 39) (nil fontified nil 37 . 38) (nil fontified nil 33 . 37) (nil fontified nil 31 . 33) (nil fontified nil 30 . 31) (nil fontified nil 21 . 30) (nil fontified nil 20 . 21) (nil fontified nil 9 . 20) (nil fontified nil 8 . 9) (nil fontified nil 3 . 8) (nil fontified nil 1 . 3) (1 . 1681) (t . -1)) nil (25888 9390 495129 778000) 0 nil])
([nil nil ((#("          " 0 2 (fontified nil src-block t font-lock-fontified t gptel response) 2 3 (fontified nil src-block t font-lock-fontified t) 3 4 (fontified nil src-block t font-lock-fontified t) 4 5 (fontified nil src-block t font-lock-fontified t) 5 6 (fontified nil src-block t font-lock-fontified t) 6 7 (fontified nil src-block t font-lock-fontified t) 7 8 (fontified nil src-block t font-lock-fontified t) 8 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 1594) (1586 . 1594) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 4 (fontified nil src-block t font-lock-fontified t gptel response) 4 5 (fontified nil src-block t font-lock-fontified t gptel response) 5 7 (fontified nil src-block t font-lock-fontified t) 7 10 (fontified nil src-block t font-lock-fontified t)) . 1521) (1513 . 1521) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t gptel response) 2 3 (fontified nil src-block t font-lock-fontified t gptel response) 3 4 (fontified nil src-block t font-lock-fontified t gptel response) 4 5 (fontified nil src-block t font-lock-fontified t) 5 6 (fontified nil src-block t font-lock-fontified t) 6 7 (fontified nil src-block t font-lock-fontified t) 7 8 (fontified nil src-block t font-lock-fontified t) 8 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 1480) (1472 . 1480) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 5 (fontified nil src-block t font-lock-fontified t gptel response) 5 6 (fontified nil src-block t font-lock-fontified t gptel response) 6 7 (fontified nil src-block t font-lock-fontified t) 7 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 1416) (1408 . 1416) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 4 (fontified nil src-block t font-lock-fontified t) 4 8 (fontified nil src-block t font-lock-fontified t gptel response) 8 10 (fontified nil src-block t font-lock-fontified t)) . 1344) (1336 . 1344) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 4 (fontified nil src-block t font-lock-fontified t gptel response) 4 10 (fontified nil src-block t font-lock-fontified t)) . 1315) (1307 . 1315) (#("      " 0 1 (fontified nil src-block t font-lock-fontified t) 1 3 (fontified nil src-block t font-lock-fontified t) 3 5 (fontified nil src-block t font-lock-fontified t) 5 6 (fontified nil src-block t font-lock-fontified t)) . 1263) (1259 . 1263) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1218) (1210 . 1218) (#("      " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 4 6 (fontified nil src-block t font-lock-fontified t)) . 1188) (1184 . 1188) (#("      " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 6 (fontified t src-block t font-lock-fontified t)) . 1183) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 3 (fontified nil src-block t font-lock-fontified t) 3 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1169) (1161 . 1169) (#("          " 0 1 (fontified nil rear-nonsticky t src-block t font-lock-fontified t) 1 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1088) (1080 . 1088) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil rear-nonsticky t src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1015) (1007 . 1015) (#("          " 0 9 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 9 10 (fontified nil src-block t font-lock-fontified t)) . 975) (967 . 975) (#("              " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t) 10 14 (fontified nil src-block t font-lock-fontified t)) . 929) (917 . 929) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t)) . 911) (903 . 911) (#("              " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t) 10 14 (fontified nil src-block t font-lock-fontified t)) . 856) (844 . 856) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t)) . 822) (814 . 822) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 766) (758 . 766) (#("      " 0 5 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 5 6 (fontified nil src-block t font-lock-fontified t)) . 723) (719 . 723) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 3 (fontified nil src-block t font-lock-fontified t gptel response) 3 4 (fontified nil src-block t font-lock-fontified t gptel response) 4 5 (fontified nil src-block t font-lock-fontified t gptel response) 5 6 (fontified nil src-block t font-lock-fontified t) 6 7 (fontified nil src-block t font-lock-fontified t) 7 8 (fontified nil src-block t font-lock-fontified t) 8 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 647) (639 . 647) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t gptel response) 2 10 (fontified nil src-block t font-lock-fontified t)) . 624) (616 . 624) (#("          " 0 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 553) (545 . 553) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t)) . 516) (508 . 516) (#("          " 0 9 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 9 10 (fontified nil src-block t font-lock-fontified t)) . 450) (442 . 450) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t)) . 424) (416 . 424) (#("              " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 10 14 (fontified nil src-block t font-lock-fontified t)) . 356) (344 . 356) (#("              " 0 2 (fontified nil src-block t font-lock-fontified t) 2 3 (fontified nil src-block t font-lock-fontified t) 3 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 10 14 (fontified nil src-block t font-lock-fontified t)) . 286) (274 . 286) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t)) . 257) (249 . 257) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 10 (fontified nil src-block t font-lock-fontified t)) . 229) (221 . 229) (#("          " 0 2 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 2 7 (fontified nil src-block t font-lock-fontified t) 7 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 190) (182 . 190) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 163) (155 . 163) (#("          " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 8 9 (fontified nil src-block t font-lock-fontified t) 9 10 (fontified nil src-block t font-lock-fontified t)) . 124) (116 . 124) (#("          " 0 1 (fontified nil src-block t font-lock-fontified t) 1 2 (fontified nil src-block t font-lock-fontified t) 2 10 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 97) (89 . 97) (#("      " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 4 5 (fontified nil src-block t font-lock-fontified t) 5 6 (fontified nil src-block t font-lock-fontified t)) . 35) (31 . 35) (#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -2) (undo-tree-id10 . -2) (undo-tree-id11 . -2) (undo-tree-id12 . -2) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -2) (undo-tree-id23 . -2) (undo-tree-id24 . -2) (undo-tree-id25 . -2) (undo-tree-id26 . -2) (undo-tree-id27 . -2) (undo-tree-id28 . -2) (undo-tree-id29 . -2) (undo-tree-id30 . -2) (undo-tree-id31 . -2) (undo-tree-id32 . -2) (undo-tree-id33 . -2) (undo-tree-id34 . -2) (undo-tree-id35 . -2) (undo-tree-id36 . -2) (undo-tree-id37 . -2) (undo-tree-id38 . -2) (undo-tree-id39 . -2) (undo-tree-id40 . -2) (undo-tree-id41 . -2) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -2) (undo-tree-id52 . -2) (undo-tree-id53 . -2) (undo-tree-id54 . -2) (undo-tree-id55 . -2) (undo-tree-id56 . -2) (undo-tree-id57 . -2) (undo-tree-id58 . -2) (undo-tree-id59 . -2) (undo-tree-id60 . -2) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -2)) ((1 . 3) (#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 31) (35 . 41) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 89) (97 . 107) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 116) (124 . 134) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 155) (163 . 173) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 182) (190 . 200) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 221) (229 . 239) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t)) . 249) (257 . 267) (#("            " 0 12 (fontified nil src-block t font-lock-fontified t)) . 274) (286 . 300) (#("            " 0 12 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 344) (356 . 370) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 416) (424 . 434) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 442) (450 . 460) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 508) (516 . 526) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 545) (553 . 563) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 616) (624 . 634) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t)) . 639) (647 . 657) (#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (723 . 729) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 758) (766 . 776) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 814) (822 . 832) (#("            " 0 12 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 844) (856 . 870) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t)) . 903) (911 . 921) (#("            " 0 12 (fontified nil src-block t font-lock-fontified t)) . 917) (929 . 943) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 967) (975 . 985) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1007) (1015 . 1025) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1080) (1088 . 1098) (#("        " 0 8 (fontified nil)) . 1161) (1169 . 1179) (1183 . 1189) (#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1184) (1188 . 1194) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1210) (1218 . 1228) (#("    " 0 4 (fontified nil src-block t font-lock-fontified t)) . 1259) (1263 . 1269) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1307) (1315 . 1325) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1336) (1344 . 1354) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1408) (1416 . 1426) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1472) (1480 . 1490) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1513) (1521 . 1531) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t gptel response)) . 1586) (1594 . 1604)) (25888 9392 304539 988000) 0 nil])
([nil nil ((1 . 2)) nil (25888 9403 461001 35000) 0 nil])
([nil nil ((nil rear-nonsticky nil 59 . 60) (nil fontified nil 56 . 60) (nil fontified nil 50 . 56) (nil fontified nil 43 . 50) (nil fontified nil 39 . 43) (nil fontified nil 37 . 39) (nil fontified nil 30 . 37) (nil fontified nil 24 . 30) (nil fontified nil 22 . 24) (nil fontified nil 18 . 22) (nil fontified nil 16 . 18) (nil fontified nil 9 . 16) (nil fontified nil 3 . 9) (nil fontified nil 1 . 3) (1 . 60) (t 25888 9403 475891 992000)) nil (25888 9427 347313 803000) 0 nil])
([nil nil ((60 . 61)) nil (25888 9427 347307 231000) 0 nil])
([nil nil ((#("<" 0 1 (face font-lock-operator-face fontified t)) . -60) (undo-tree-id64 . -1) 61) nil (25888 9427 347303 950000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -33) (#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -20) (#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1) 60) nil (25888 9427 347271 960000) 0 nil])
([nil nil ((54 . 55) (t 25888 9427 360057 909000)) nil (25888 9475 766025 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 176 . 177) (nil fontified nil 176 . 177) (nil fontified nil 175 . 176) (nil fontified nil 174 . 175) (nil fontified nil 173 . 174) (nil fontified nil 170 . 173) (nil fontified nil 169 . 170) (nil fontified nil 164 . 169) (nil fontified nil 161 . 164) (nil fontified nil 160 . 161) (nil fontified nil 159 . 160) (nil fontified nil 158 . 159) (nil fontified nil 157 . 158) (nil fontified nil 156 . 157) (nil fontified nil 153 . 156) (nil fontified nil 147 . 153) (nil fontified nil 146 . 147) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 142 . 143) (nil fontified nil 141 . 142) (nil fontified nil 140 . 141) (nil fontified nil 139 . 140) (nil fontified nil 138 . 139) (nil fontified nil 137 . 138) (nil fontified nil 136 . 137) (nil fontified nil 130 . 136) (nil fontified nil 129 . 130) (nil fontified nil 122 . 129) (nil fontified nil 120 . 122) (nil fontified nil 118 . 120) (nil fontified nil 117 . 118) (nil fontified nil 115 . 117) (nil fontified nil 114 . 115) (nil fontified nil 110 . 114) (nil fontified nil 109 . 110) (nil fontified nil 102 . 109) (nil fontified nil 101 . 102) (nil fontified nil 98 . 101) (nil fontified nil 94 . 98) (nil fontified nil 92 . 94) (nil fontified nil 90 . 92) (nil fontified nil 89 . 90) (nil fontified nil 82 . 89) (nil fontified nil 79 . 82) (nil fontified nil 74 . 79) (nil fontified nil 73 . 74) (nil fontified nil 63 . 73) (nil fontified nil 62 . 63) (nil fontified nil 57 . 62) (nil fontified nil 55 . 57) (55 . 177)) nil (25888 9475 766022 61000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . -55)) nil (25888 9475 766009 887000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t gptel response)) . -94) 90) nil (25888 9475 766008 721000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t src-block t font-lock-fontified t gptel response) 1 2 (fontified t src-block t font-lock-fontified t gptel response)) . -124) 120) nil (25888 9475 766007 139000) 0 nil])
([nil nil ((71 . 75)) nil (25888 9475 766005 927000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t gptel response)) . -71) (undo-tree-id425 . -1) (#("u" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t gptel response)) . -72) (undo-tree-id426 . -1) (#("n" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t gptel response)) . -73) (undo-tree-id427 . -1) (#("c" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t gptel response)) . -74) (undo-tree-id428 . -1) 75) nil (25888 9475 766003 593000) 0 nil])
([nil nil ((#("A" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -178) (undo-tree-id417 . -1) (#("l" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -179) (undo-tree-id418 . -1) (#("l" 0 1 (face font-lock-type-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -180) (undo-tree-id419 . -1) (#("T" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -181) (undo-tree-id420 . -1) (#("o" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -182) (undo-tree-id421 . -1) (#("A" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -183) (undo-tree-id422 . -1) (#("l" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -184) (undo-tree-id423 . -1) (#("l" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -185) (undo-tree-id424 . -1) 186) nil (25888 9475 765993 824000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 178) (#("N" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 178) (#("R" 0 1 (face font-lock-type-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 178)) nil (25888 9475 765978 199000) 0 nil])
([nil nil ((178 . 185)) nil (25888 9475 765976 734000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -232) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -233) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (#("i" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -234) (undo-tree-id398 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -235) (undo-tree-id399 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -236) (undo-tree-id400 . -1) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -237) (undo-tree-id401 . -1) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -238) (undo-tree-id402 . -1) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -239) (undo-tree-id403 . -1) (#("s" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -240) (undo-tree-id404 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -241) (undo-tree-id405 . -1) (#("z" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -242) (undo-tree-id406 . -1) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -243) (undo-tree-id407 . -1) (#("," 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -244) (undo-tree-id408 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -245) (undo-tree-id409 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -246) (undo-tree-id410 . -1) (#("t" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -247) (undo-tree-id411 . -1) (#("," 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -248) (undo-tree-id412 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -249) (undo-tree-id413 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -250) (undo-tree-id414 . -1) (#("a" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -251) (undo-tree-id415 . -1) (#("u" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -252) (undo-tree-id416 . -1) 253) nil (25888 9475 765968 617000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -221) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("n" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -222) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("p" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -223) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (#("u" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -224) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("t" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -225) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("_" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -226) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("s" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -227) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (#("i" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -228) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("z" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -229) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -230) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("," 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -231) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 232) nil (25888 9475 765860 954000) 0 nil])
([nil nil ((221 . 229)) nil (25888 9475 765137 24000) 0 nil])
([nil nil ((nil rear-nonsticky nil 253 . 254) (nil fontified nil 221 . 254) (221 . 254) (t 25888 9475 780393 609000)) nil (25888 9548 734475 739000) 0 nil])
([nil nil ((254 . 255)) nil (25888 9548 734463 751000) 0 nil])
([nil nil ((294 . 302) (#("        " 0 8 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 293) (undo-tree-id429 . -8) (292 . 302) (t 25888 9548 756898 59000)) nil (25888 9585 699759 756000) 0 nil])
([nil nil ((nil rear-nonsticky nil 585 . 586) (nil fontified nil 585 . 586) (nil fontified nil 584 . 585) (nil fontified nil 578 . 584) (nil fontified nil 574 . 578) (nil fontified nil 573 . 574) (nil fontified nil 566 . 573) (nil fontified nil 552 . 566) (nil fontified nil 551 . 552) (nil fontified nil 550 . 551) (nil fontified nil 538 . 550) (nil fontified nil 536 . 538) (nil fontified nil 530 . 536) (nil fontified nil 527 . 530) (nil fontified nil 517 . 527) (nil fontified nil 516 . 517) (nil fontified nil 510 . 516) (nil fontified nil 509 . 510) (nil fontified nil 479 . 509) (nil fontified nil 478 . 479) (nil fontified nil 477 . 478) (nil fontified nil 476 . 477) (nil fontified nil 465 . 476) (nil fontified nil 464 . 465) (nil fontified nil 459 . 464) (nil fontified nil 441 . 459) (nil fontified nil 440 . 441) (nil fontified nil 439 . 440) (nil fontified nil 436 . 439) (nil fontified nil 425 . 436) (nil fontified nil 424 . 425) (nil fontified nil 420 . 424) (nil fontified nil 419 . 420) (nil fontified nil 409 . 419) (nil fontified nil 408 . 409) (nil fontified nil 407 . 408) (nil fontified nil 402 . 407) (nil fontified nil 393 . 402) (nil fontified nil 392 . 393) (nil fontified nil 381 . 392) (nil fontified nil 360 . 381) (nil fontified nil 359 . 360) (nil fontified nil 354 . 359) (nil fontified nil 335 . 354) (nil fontified nil 334 . 335) (nil fontified nil 326 . 334) (nil fontified nil 325 . 326) (nil fontified nil 324 . 325) (nil fontified nil 313 . 324) (nil fontified nil 312 . 313) (nil fontified nil 311 . 312) (nil fontified nil 302 . 311) (nil fontified nil 294 . 302) (294 . 586)) nil (25888 9585 699732 682000) 0 nil])
([nil nil ((#("        self.hidden_size = hidden_size
        self.dt = dt / tau
        self.exp_dt = np.exp(-dt/tau)
" 0 8 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 8 12 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 12 13 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 13 24 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 24 25 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 25 26 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 26 39 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 39 47 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 47 51 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 51 52 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 52 54 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 54 55 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 55 56 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 56 60 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 60 61 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 61 66 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 66 74 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 74 78 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 78 79 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 79 85 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 85 86 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 86 87 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 87 94 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 95 96 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 96 98 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 98 99 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 99 102 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 102 103 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 103 104 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -595) (undo-tree-id469 . -104) 699 (t 25888 9585 713152 896000)) nil (25888 9933 354392 48000) 0 nil])
([nil nil ((#("
        # Feedforward layer
        if input_size>0:
            self.i2h = nn.Linear(input_size, hidden_size, bias=False)
            self.i2h.weight.data.fill_(1.0) # setting FF weights to 1 
" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 1 9 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 9 11 (face font-lock-comment-delimiter-face fontified t src-block t font-lock-fontified t) 11 29 (face font-lock-comment-face fontified t src-block t font-lock-fontified t) 29 37 (fontified t src-block t font-lock-fontified t) 37 39 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t) 39 40 (fontified t src-block t font-lock-fontified t) 40 50 (fontified t src-block t font-lock-fontified t) 50 51 (face font-lock-operator-face fontified t src-block t font-lock-fontified t) 51 53 (fontified t src-block t font-lock-fontified t) 53 54 (fontified t src-block t font-lock-fontified t) 54 66 (fontified t src-block t font-lock-fontified t) 66 70 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 70 71 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 71 74 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 74 75 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 75 76 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 76 86 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 87 116 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 116 117 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 117 122 (face font-lock-constant-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 123 124 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 124 136 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 136 140 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 140 162 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 162 163 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 163 166 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 166 167 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 167 168 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 168 170 (face font-lock-comment-delimiter-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 170 194 (face font-lock-comment-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 194 195 (face font-lock-comment-face fontified t rear-nonsticky t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -595) (undo-tree-id468 . -195) 790) nil (25888 9933 354388 16000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -594) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) 595) nil (25888 9933 354383 996000) 0 nil])
([nil nil ((620 . 629)) nil (25888 9933 354371 976000) 0 nil])
([nil nil ((629 . 637)) nil (25888 9933 354370 997000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t src-block t font-lock-fontified t)) . -635) (undo-tree-id460 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t)) . -636) (undo-tree-id461 . -1) 637) nil (25888 9933 354369 53000) 0 nil])
([nil nil ((635 . 638)) nil (25888 9933 354363 349000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t)) . -637) (undo-tree-id459 . -1) 638) nil (25888 9933 354361 108000) 0 nil])
([nil nil ((637 . 638)) nil (25888 9933 354357 835000) 0 nil])
([nil nil ((638 . 643)) nil (25888 9933 354356 877000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t src-block t font-lock-fontified t)) . -642) (undo-tree-id458 . -1) 643) nil (25888 9933 354355 336000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 649) (648 . 649) (647 . 649) (#("(" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t)) . -647) (642 . 648)) nil (25888 9933 354351 146000) 0 nil])
([nil nil ((648 . 654)) nil (25888 9933 354349 75000) 0 nil])
([nil nil ((#("l" 0 1 (fontified nil)) . 652) (651 . 652) (#("f" 0 1 (fontified nil)) . 650) (651 . 652)) nil (25888 9933 354347 74000) 0 nil])
([nil nil ((654 . 658)) nil (25888 9933 354345 351000) 0 nil])
([nil nil ((659 . 660)) nil (25888 9933 354344 140000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -659) (undo-tree-id457 . -1) 660) nil (25888 9933 354341 317000) 0 nil])
([nil nil ((659 . 660)) nil (25888 9933 354337 724000) 0 nil])
([nil nil ((669 . 673) 661) nil (25888 9933 354336 116000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -678) (undo-tree-id452 . -1) (#("2" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -679) (undo-tree-id453 . -1) (#("h" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -680) (undo-tree-id454 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -681) (undo-tree-id455 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -682) (undo-tree-id456 . -1) 683) nil (25888 9933 354332 932000) 0 nil])
([nil nil ((678 . 681)) nil (25888 9933 354322 255000) 0 nil])
([nil nil ((681 . 682)) nil (25888 9933 354321 307000) 0 nil])
([nil nil ((682 . 688)) nil (25888 9933 354320 150000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -688) (undo-tree-id451 . -1) 689) nil (25888 9933 354318 515000) 0 nil])
([nil nil ((688 . 690) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -688) (688 . 689)) nil (25888 9933 354315 44000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 689)) nil (25888 9933 354313 303000) 0 nil])
([nil nil ((735 . 736)) nil (25888 9933 354312 6000) 0 nil])
([nil nil ((736 . 749)) nil (25888 9933 354310 983000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("z" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("d" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("d" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 700)) nil (25888 9933 354306 751000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -699) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) 700) nil (25888 9933 354297 86000) 0 nil])
([nil nil ((699 . 704)) nil (25888 9933 354286 294000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 708) (707 . 708) (706 . 708) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -706) (704 . 707)) nil (25888 9933 354283 657000) 0 nil])
([nil nil ((704 . 706)) nil (25888 9933 354281 492000) 0 nil])
([nil nil ((706 . 708)) nil (25888 9933 354280 280000) 0 nil])
([nil nil ((711 . 716)) nil (25888 9933 354279 49000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("z" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719) (#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 719)) nil (25888 9933 354274 543000) 0 nil])
([nil nil ((719 . 724)) nil (25888 9933 354270 662000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 730) (729 . 730) (728 . 730) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -728) (724 . 729)) nil (25888 9933 354268 981000) 0 nil])
([nil nil ((729 . 731)) nil (25888 9933 354266 949000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -729) (undo-tree-id442 . -1) (#("a" 0 1 (fontified t)) . -730) (undo-tree-id443 . -1) 731) nil (25888 9933 354265 162000) 0 nil])
([nil nil ((728 . 730)) nil (25888 9933 354259 397000) 0 nil])
([nil nil ((731 . 736)) nil (25888 9933 354258 299000) 0 nil])
([nil nil ((nil rear-nonsticky nil 700 . 701) (nil fontified nil 700 . 701) (nil fontified nil 699 . 700) (nil fontified nil 698 . 699) (nil fontified nil 692 . 698) (nil fontified nil 691 . 692) (nil fontified nil 690 . 691) (nil fontified nil 688 . 690) (nil fontified nil 687 . 688) (nil fontified nil 682 . 687) (nil fontified nil 681 . 682) (nil fontified nil 679 . 681) (nil fontified nil 672 . 679) (nil fontified nil 669 . 672) (nil fontified nil 661 . 669) (661 . 701)) nil (25888 9933 354256 172000) 0 nil])
([nil nil ((669 . 673) 661) nil (25888 9933 354252 449000) 0 nil])
([nil nil ((705 . 721) (#("            " 0 12 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 705) (undo-tree-id441 . -12) 717) nil (25888 9933 354250 704000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t src-block t font-lock-fontified t)) . 677)) nil (25888 9933 354247 147000) 0 nil])
([nil nil ((677 . 678)) nil (25888 9933 354245 853000) 0 nil])
([nil nil ((704 . 721)) nil (25888 9933 354244 772000) 0 nil])
([nil nil ((721 . 736)) nil (25888 9933 354243 200000) 0 nil])
([nil nil ((736 . 737)) nil (25888 9933 354241 794000) 0 nil])
([nil nil ((754 . 758) 738) nil (25888 9933 354240 140000) 0 nil])
([nil nil ((nil rear-nonsticky nil 933 . 934) (nil fontified nil 933 . 934) (nil fontified nil 932 . 933) (nil fontified nil 931 . 932) (nil fontified nil 930 . 931) (nil fontified nil 927 . 930) (nil fontified nil 926 . 927) (nil fontified nil 920 . 926) (nil fontified nil 919 . 920) (nil fontified nil 914 . 919) (nil fontified nil 913 . 914) (nil fontified nil 906 . 913) (nil fontified nil 902 . 906) (nil fontified nil 900 . 902) (nil fontified nil 899 . 900) (nil fontified nil 894 . 899) (nil fontified nil 893 . 894) (nil fontified nil 886 . 893) (nil fontified nil 882 . 886) (nil fontified nil 881 . 882) (nil fontified nil 872 . 881) (nil fontified nil 871 . 872) (nil fontified nil 860 . 871) (nil fontified nil 856 . 860) (nil fontified nil 836 . 856) (836 . 934)) nil (25888 9933 354237 575000) 0 nil])
([nil nil ((835 . 856)) nil (25888 9933 354230 44000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -852) (856 . 861)) nil (25888 9933 354227 797000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -949) (undo-tree-id438 . -1) (#("r" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -950) (undo-tree-id439 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -951) (undo-tree-id440 . -1) 952) nil (25888 9933 354225 37000) 0 nil])
([nil nil ((949 . 953)) nil (25888 9933 354217 320000) 0 nil])
([nil nil ((nil rear-nonsticky nil 906 . 907) (nil fontified nil 898 . 907) (nil fontified nil 894 . 898) (nil fontified nil 890 . 894) (nil fontified nil 889 . 890) (nil fontified nil 887 . 889) (nil fontified nil 884 . 887) (nil fontified nil 876 . 884) (nil fontified nil 874 . 876) (nil fontified nil 873 . 874) (nil fontified nil 872 . 873) (nil fontified nil 871 . 872) (nil fontified nil 869 . 871) (nil fontified nil 868 . 869) (nil fontified nil 852 . 868) (nil fontified nil 851 . 852) (nil fontified nil 850 . 851) (nil fontified nil 848 . 850) (nil fontified nil 844 . 848) (nil fontified nil 836 . 844) (836 . 907)) nil (25888 9933 354214 496000) 0 nil])
([nil nil ((836 . 856) (#("        " 0 8 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 836)) nil (25888 9933 354208 513000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -881) (undo-tree-id436 . -1) (#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -882) (undo-tree-id437 . -1) 883) nil (25888 9933 354206 154000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 887) (886 . 887) (885 . 887) (#("[" 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -885) (881 . 886)) nil (25888 9933 354199 387000) 0 nil])
([nil nil ((886 . 891)) nil (25888 9933 354197 84000) 0 nil])
([nil nil ((#("        # add external input to bias
        self.h2h.bias.data.fill_(14)  # Set bias to I0 for all neurons
" 0 8 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 8 10 (face font-lock-comment-delimiter-face fontified t src-block t font-lock-fontified t) 10 13 (face font-lock-comment-face fontified t src-block t font-lock-fontified t) 13 14 (face font-lock-comment-face fontified t src-block t font-lock-fontified t) 14 36 (face font-lock-comment-face fontified t src-block t font-lock-fontified t) 36 37 (face font-lock-comment-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 37 45 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show) 45 49 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 49 51 (fontified t src-block t font-lock-fontified t gptel response) 51 52 (fontified t src-block t font-lock-fontified t gptel response) 52 53 (fontified t src-block t font-lock-fontified t gptel response) 53 69 (fontified t src-block t font-lock-fontified t gptel response) 69 70 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 70 72 (fontified t src-block t font-lock-fontified t gptel response) 72 73 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 73 74 (fontified t src-block t font-lock-fontified t gptel response) 74 75 (fontified t src-block t font-lock-fontified t gptel response) 75 77 (face font-lock-comment-delimiter-face fontified t src-block t font-lock-fontified t gptel response) 77 85 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 85 88 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 88 90 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 90 91 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 91 95 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 95 99 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response) 99 108 (face font-lock-comment-face fontified t src-block t font-lock-fontified t gptel response)) . 1062) (undo-tree-id434 . -108) (undo-tree-id435 . -37)) nil (25888 9933 354195 280000) 0 nil])
([nil nil ((#("        # init weights
" 0 8 (fontified t src-block t font-lock-fontified t gptel response) 8 10 (face font-lock-comment-delimiter-face fontified t src-block t font-lock-fontified t) 10 22 (face font-lock-comment-face fontified t src-block t font-lock-fontified t) 22 23 (face font-lock-comment-face fontified t src-block t font-lock-fontified t)) . -1062) (undo-tree-id433 . -23) 1085) nil (25888 9933 354189 322000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -861) (undo-tree-id432 . -1) 862) nil (25888 9933 354184 953000) 0 nil])
([nil nil ((861 . 862)) nil (25888 9933 354180 878000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 863)) nil (25888 9933 354178 400000) 0 nil])
([nil nil ((863 . 864)) nil (25888 9933 354176 824000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -1075) (undo-tree-id431 . -1) 1076) nil (25888 9933 354174 775000) 0 nil])
([nil nil ((1075 . 1076)) nil (25888 9933 354170 101000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -1077) (undo-tree-id430 . -1) 1078) nil (25888 9933 354166 636000) 0 nil])
([nil nil ((1077 . 1078)) nil (25888 9933 354140 423000) 0 nil])
([nil nil ((293 . 301) (t 25888 9933 375289 204000)) nil (25889 21605 535697 281000) 0 nil])
([nil nil ((301 . 303)) nil (25889 21605 535696 468000) 0 nil])
([nil nil ((303 . 310)) nil (25889 21605 535695 941000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-comment-face fontified t)) . -308) (undo-tree-id2 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -309) (undo-tree-id3 . -1) 310) nil (25889 21605 535695 66000) 0 nil])
([nil nil ((308 . 312)) nil (25889 21605 535692 714000) 0 nil])
([nil nil ((311 . 316)) nil (25889 21605 535692 137000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-comment-face fontified t)) . 316)) nil (25889 21605 535691 479000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-comment-face fontified t)) . -314) (undo-tree-id0 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -315) (undo-tree-id1 . -1) 316) nil (25889 21605 535690 261000) 0 nil])
([nil nil ((314 . 317)) nil (25889 21605 535660 541000) 0 nil])
([nil nil ((317 . 322)) nil (25889 21605 535659 197000) 0 nil])
([nil nil ((322 . 323)) nil (25889 21605 535657 374000) 0 nil])
([nil nil ((317 . 324)) nil (25889 21605 535655 511000) 0 nil])
([nil nil ((292 . 301)) nil (25889 21605 535649 131000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -390) (undo-tree-id6 . -1) 391 (390 . 391) (t 25889 21605 550535 383000)) nil (25889 21668 301193 893000) 0 nil])
([nil nil ((564 . 572)) nil (25889 21668 301190 680000) 0 nil])
([nil nil ((647 . 648)) nil (25889 21668 301189 976000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -647) (undo-tree-id5 . -1) 648) nil (25889 21668 301188 336000) 0 nil])
([nil nil ((659 . 668)) nil (25889 21668 301185 148000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -682) (undo-tree-id4 . -1) 683 (682 . 683)) nil (25889 21668 301178 984000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . 847) (#("m" 0 1 (fontified t)) . 847) (#("u" 0 1 (fontified t)) . 847) (#("s" 0 1 (fontified t)) . 847) (#("c" 0 1 (fontified t)) . 847) (#("." 0 1 (fontified t)) . 847) (#("f" 0 1 (fontified t)) . 847) (#("l" 0 1 (fontified t)) . 847) (#("e" 0 1 (fontified t)) . 847) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 847) (t 25889 21668 310768 106000)) nil (25889 21791 354519 428000) 0 nil])
([nil nil ((847 . 848)) nil (25889 21791 354518 42000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -849) (undo-tree-id45 . -1) 850) nil (25889 21791 354517 159000) 0 nil])
([nil nil ((849 . 851) (#("{" 0 1 (fontified nil)) . -849) (849 . 850)) nil (25889 21791 354515 686000) 0 nil])
([nil nil ((#("{" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -849) (undo-tree-id43 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -850) (undo-tree-id44 . -1) 851) nil (25889 21791 354514 731000) 0 nil])
([nil nil ((850 . 855) (849 . 851) (#("[" 0 1 (fontified nil)) . -849) (849 . 850)) nil (25889 21791 354512 273000) 0 nil])
([nil nil ((#("i_pop" 0 5 (fontified t)) . 856)) nil (25889 21791 354511 456000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . 866) (#("m" 0 1 (fontified t)) . 866) (#("u" 0 1 (fontified t)) . 866)) nil (25889 21791 354510 544000) 0 nil])
([nil nil ((866 . 867)) nil (25889 21791 354509 830000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -864) (undo-tree-id41 . -1) (#("s" 0 1 (fontified t)) . -865) (undo-tree-id42 . -1) 866) nil (25889 21791 354508 860000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -859) (undo-tree-id36 . -1) (#("e" 0 1 (fontified t)) . -860) (undo-tree-id37 . -1) (#("l" 0 1 (fontified t)) . -861) (undo-tree-id38 . -1) (#("f" 0 1 (fontified t)) . -862) (undo-tree-id39 . -1) (#("." 0 1 (fontified t)) . -863) (undo-tree-id40 . -1) 864) nil (25889 21791 354505 565000) 0 nil])
([nil nil ((859 . 861)) nil (25889 21791 354501 27000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -860) (undo-tree-id35 . -1) 861) nil (25889 21791 354500 324000) 0 nil])
([nil nil ((860 . 864)) nil (25889 21791 354499 254000) 0 nil])
([nil nil ((847 . 852)) nil (25889 21791 354498 810000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -877) (undo-tree-id34 . -1) 878) nil (25889 21791 354498 248000) 0 nil])
([nil nil ((877 . 878)) nil (25889 21791 354496 877000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -871) (undo-tree-id33 . -1) 872) nil (25889 21791 354496 125000) 0 nil])
([nil nil ((871 . 873) (#("[" 0 1 (fontified nil)) . -871) (871 . 872)) nil (25889 21791 354494 702000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 872)) nil (25889 21791 354494 70000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -890) (undo-tree-id32 . -1) 891) nil (25889 21791 354493 433000) 0 nil])
([nil nil ((890 . 891)) nil (25889 21791 354492 278000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -861) (undo-tree-id31 . -1) 862) nil (25889 21791 354491 650000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1094 . 1095) (nil fontified nil 1094 . 1095) (nil fontified nil 1093 . 1094) (nil fontified nil 1092 . 1093) (nil fontified nil 1088 . 1092) (nil fontified nil 1087 . 1088) (nil fontified nil 1081 . 1087) (nil fontified nil 1080 . 1081) (nil fontified nil 1075 . 1080) (nil fontified nil 1074 . 1075) (nil fontified nil 1072 . 1074) (nil fontified nil 1071 . 1072) (nil fontified nil 1067 . 1071) (nil fontified nil 1065 . 1067) (nil fontified nil 1064 . 1065) (nil fontified nil 1059 . 1064) (nil fontified nil 1058 . 1059) (nil fontified nil 1057 . 1058) (nil fontified nil 1056 . 1057) (nil fontified nil 1055 . 1056) (nil fontified nil 1051 . 1055) (nil fontified nil 1050 . 1051) (nil fontified nil 1041 . 1050) (nil fontified nil 1040 . 1041) (nil fontified nil 1029 . 1040) (nil fontified nil 1025 . 1029) (nil fontified nil 1005 . 1025) (1005 . 1095)) nil (25889 21791 354490 8000) 0 nil])
([nil nil ((#("            
" 0 13 (fontified t)) . -1194) (undo-tree-id30 . -13) 1207) nil (25889 21791 354487 58000) 0 nil])
([nil nil ((1195 . 1215) (#("        " 0 8 (fontified nil)) . 1195) (1194 . 1195)) nil (25889 21791 354485 672000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1211) (undo-tree-id29 . -4) 1215) nil (25889 21791 354484 568000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1207) (undo-tree-id28 . -4) 1211) nil (25889 21791 354483 352000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1203) (undo-tree-id27 . -4) 1207) nil (25889 21791 354482 73000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1199) (undo-tree-id26 . -4) 1203) nil (25889 21791 354480 830000) 0 nil])
([nil nil ((1195 . 1215) (#("    " 0 4 (fontified t)) . 1195) (undo-tree-id25 . -4) 1199) nil (25889 21791 354479 371000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1211) (undo-tree-id24 . -4) 1215) nil (25889 21791 354477 862000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1207) (undo-tree-id23 . -4) 1211) nil (25889 21791 354476 620000) 0 nil])
([nil nil ((1195 . 1215) (#("            " 0 12 (fontified t)) . 1195) (undo-tree-id22 . -12) 1207) nil (25889 21791 354475 396000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1211) (undo-tree-id21 . -4) 1215) nil (25889 21791 354473 908000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1207) (undo-tree-id20 . -4) 1211) nil (25889 21791 354472 449000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1203) (undo-tree-id19 . -4) 1207) nil (25889 21791 354471 185000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t)) . -1088) (undo-tree-id16 . -1) (#("r" 0 1 (fontified t)) . -1089) (undo-tree-id17 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -1090) (undo-tree-id18 . -1) 1091) nil (25889 21791 354469 568000) 0 nil])
([nil nil ((1088 . 1092)) nil (25889 21791 354466 863000) 0 nil])
([nil nil ((#("                    self.i2j.append(nn.Linear(self.csumNa(i_pop), self.csumNa(j_pop), bias=False))
" 0 20 (fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 50 (face font-lock-keyword-face fontified t) 50 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-3-face) fontified t) 58 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-3-face) fontified t) 64 66 (fontified t) 66 70 (face font-lock-keyword-face fontified t) 70 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-3-face) fontified t) 78 83 (fontified t) 83 84 (face (rainbow-delimiters-depth-3-face) fontified t) 84 90 (fontified t) 90 91 (face font-lock-operator-face fontified t) 91 96 (face font-lock-constant-face fontified t) 96 97 (face (rainbow-delimiters-depth-2-face) fontified t) 97 98 (face (rainbow-delimiters-depth-1-face) fontified t) 98 99 (fontified t)) . -1096) (undo-tree-id14 . -99) (undo-tree-id15 . -99) 1195) nil (25889 21794 759061 742000) 0 nil])
([nil nil ((#("True" 0 1 (face font-lock-constant-face fontified t) 1 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t) 3 4 (face font-lock-constant-face fontified t)) . 884) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . -4) (undo-tree-id381 . -4) (undo-tree-id382 . -4) (undo-tree-id383 . -4) (undo-tree-id384 . -4) (undo-tree-id385 . -4) (undo-tree-id386 . -4) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -4) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -4) (undo-tree-id393 . -4) (undo-tree-id394 . -4) (undo-tree-id395 . -4) (undo-tree-id396 . -4) (undo-tree-id397 . -4) (undo-tree-id398 . -4) (undo-tree-id399 . -4) (undo-tree-id400 . -4) (undo-tree-id401 . -4) (undo-tree-id402 . -4) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -4) (undo-tree-id406 . -4) (undo-tree-id407 . -4) (undo-tree-id408 . -4) (undo-tree-id409 . -4) (undo-tree-id410 . -4) (undo-tree-id411 . -4) (undo-tree-id412 . -4) (undo-tree-id413 . -4) (undo-tree-id414 . -4) (undo-tree-id415 . -4) (undo-tree-id416 . -4) (undo-tree-id417 . -4) (undo-tree-id418 . -4) (undo-tree-id419 . -4) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) (undo-tree-id429 . -4) (undo-tree-id430 . -4) (undo-tree-id431 . -4) (undo-tree-id432 . -4) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (undo-tree-id439 . -4) (undo-tree-id440 . -4) (undo-tree-id441 . -4) (undo-tree-id442 . -4) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (undo-tree-id445 . -4) (undo-tree-id446 . -4) (undo-tree-id447 . -4) (undo-tree-id448 . -4) (undo-tree-id449 . -4) (undo-tree-id450 . -4) (undo-tree-id451 . -4) (undo-tree-id452 . -4) (undo-tree-id453 . -4) (undo-tree-id454 . -4) (undo-tree-id455 . -4) (undo-tree-id456 . -4) (undo-tree-id457 . -4) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (undo-tree-id467 . -4) (undo-tree-id468 . -4) (undo-tree-id469 . -4) (undo-tree-id470 . -4) (undo-tree-id471 . -4) (undo-tree-id472 . -4) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -4) (undo-tree-id477 . -4) (undo-tree-id478 . -4) (undo-tree-id479 . -4) (undo-tree-id480 . -4) (undo-tree-id481 . -4) (undo-tree-id482 . -4) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (undo-tree-id487 . -4) (undo-tree-id488 . -4) (undo-tree-id489 . -4) (undo-tree-id490 . -4) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (undo-tree-id495 . -4) (undo-tree-id496 . -4) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4)) ((884 . 888)) (25889 21797 20205 534000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 886) (885 . 886) (884 . 886) (#("(" 0 1 (face font-lock-operator-face fontified nil)) . 884) (884 . 885)) ((#("(" 0 1 (face font-lock-operator-face fontified nil)) . 884) (884 . 885) (#("()" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 884) (undo-tree-id243 . -1) (undo-tree-id245 . -1) (undo-tree-id247 . -1) (undo-tree-id249 . -1) (undo-tree-id251 . -1) (undo-tree-id253 . -1) (undo-tree-id255 . -1) (undo-tree-id257 . -1) (undo-tree-id259 . -1) (undo-tree-id261 . -1) (undo-tree-id263 . -1) (undo-tree-id265 . -1) (undo-tree-id267 . -1) (undo-tree-id269 . -1) (undo-tree-id271 . -1) (undo-tree-id273 . -1) (undo-tree-id275 . -1) (undo-tree-id277 . -1) (undo-tree-id279 . -1) (undo-tree-id281 . -1) (undo-tree-id283 . -1) (undo-tree-id285 . -1) (undo-tree-id287 . -1) (undo-tree-id289 . -1) (undo-tree-id291 . -1) (undo-tree-id293 . -1) (undo-tree-id295 . -1) (undo-tree-id297 . -1) (undo-tree-id299 . -1) (undo-tree-id301 . -1) (undo-tree-id303 . -1) (undo-tree-id305 . -1) (undo-tree-id307 . -1) (undo-tree-id309 . -1) (undo-tree-id311 . -1) (undo-tree-id313 . -1) (undo-tree-id315 . -1) (undo-tree-id317 . -1) (undo-tree-id319 . -1) (undo-tree-id321 . -1) (undo-tree-id323 . -1) (undo-tree-id325 . -1) (undo-tree-id327 . -1) (undo-tree-id329 . -1) (undo-tree-id331 . -1) (undo-tree-id333 . -1) (undo-tree-id335 . -1) (undo-tree-id337 . -1) (undo-tree-id339 . -1) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (undo-tree-id353 . -1) (undo-tree-id355 . -1) (undo-tree-id357 . -1) (undo-tree-id359 . -1) (undo-tree-id361 . -1) (undo-tree-id363 . -1) (undo-tree-id365 . -1) (undo-tree-id367 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id372 . -1) (undo-tree-id374 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 885) (886 . 887)) (25889 21797 501851 41000) 0 nil])
([nil nil ((885 . 888)) ((#("i_p" 0 3 (fontified t)) . 885) (undo-tree-id133 . -3) (undo-tree-id135 . -3) (undo-tree-id137 . -3) (undo-tree-id139 . -3) (undo-tree-id141 . -3) (undo-tree-id143 . -3) (undo-tree-id145 . -3) (undo-tree-id147 . -3) (undo-tree-id149 . -3) (undo-tree-id151 . -3) (undo-tree-id153 . -3) (undo-tree-id155 . -3) (undo-tree-id157 . -3) (undo-tree-id159 . -3) (undo-tree-id161 . -3) (undo-tree-id163 . -3) (undo-tree-id165 . -3) (undo-tree-id167 . -3) (undo-tree-id169 . -3) (undo-tree-id171 . -3) (undo-tree-id173 . -3) (undo-tree-id175 . -3) (undo-tree-id177 . -3) (undo-tree-id179 . -3) (undo-tree-id181 . -3) (undo-tree-id183 . -3) (undo-tree-id185 . -3) (undo-tree-id187 . -3) (undo-tree-id189 . -3) (undo-tree-id191 . -3) (undo-tree-id193 . -3) (undo-tree-id195 . -3) (undo-tree-id197 . -3) (undo-tree-id199 . -3) (undo-tree-id201 . -3) (undo-tree-id203 . -3) (undo-tree-id205 . -3) (undo-tree-id207 . -3) (undo-tree-id209 . -3) (undo-tree-id211 . -3) (undo-tree-id213 . -3) (undo-tree-id215 . -3) (undo-tree-id217 . -3) (undo-tree-id219 . -3) (undo-tree-id221 . -3) (undo-tree-id223 . -3) (undo-tree-id225 . -3) (undo-tree-id227 . -3) (undo-tree-id229 . -3) (undo-tree-id231 . -3) (undo-tree-id233 . -3) (undo-tree-id235 . -3) (undo-tree-id236 . -3) (undo-tree-id238 . -3) (undo-tree-id240 . -3)) (25889 21797 898846 841000) 0 nil])
([nil nil ((888 . 895)) ((#("op==j_o" 0 2 (fontified t) 2 4 (face font-lock-operator-face fontified t) 4 6 (fontified t) 6 7 (fontified t)) . 888) (undo-tree-id47 . -6) (undo-tree-id49 . -6) (undo-tree-id51 . -6) (undo-tree-id53 . -6) (undo-tree-id55 . -6) (undo-tree-id57 . -6) (undo-tree-id59 . -6) (undo-tree-id61 . -6) (undo-tree-id63 . -6) (undo-tree-id65 . -6) (undo-tree-id67 . -6) (undo-tree-id69 . -6) (undo-tree-id71 . -6) (undo-tree-id73 . -6) (undo-tree-id75 . -6) (undo-tree-id77 . -6) (undo-tree-id79 . -6) (undo-tree-id81 . -6) (undo-tree-id83 . -6) (undo-tree-id85 . -6) (undo-tree-id87 . -6) (undo-tree-id89 . -6) (undo-tree-id91 . -6) (undo-tree-id93 . -6) (undo-tree-id95 . -6) (undo-tree-id97 . -6) (undo-tree-id99 . -7) (undo-tree-id101 . -7) (undo-tree-id103 . -7) (undo-tree-id105 . -7) (undo-tree-id107 . -7) (undo-tree-id109 . -7) (undo-tree-id111 . -7) (undo-tree-id113 . -7) (undo-tree-id115 . -7) (undo-tree-id117 . -7) (undo-tree-id119 . -7) (undo-tree-id121 . -7) (undo-tree-id123 . -7) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id128 . -7) (undo-tree-id130 . -7)) (25889 21798 377974 415000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 894)) ((894 . 895)) (25889 21799 205025 745000) 0 nil])
([nil nil ((894 . 897)) ((#("pop" 0 3 (fontified t)) . 894)) (25889 21799 610697 582000) 0 nil])
([nil nil ((#("                if i_pop==j_pop:
" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 24 (fontified t) 24 26 (face font-lock-operator-face fontified t) 26 33 (fontified t)) . -768) (undo-tree-id556 . -33) 801) nil (25889 21940 993537 683000) 0 nil] [nil nil ((#("                if i_pop==j_pop:
" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 24 (fontified t) 24 26 (face font-lock-operator-face fontified t) 26 33 (fontified t)) . 768) (undo-tree-id7 . -33) (undo-tree-id8 . -33)) ((768 . 801)) (25889 21791 820454 366000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -784) 768) nil (25889 21940 993536 326000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -784) 768) ((784 . 788)) (25889 21791 355121 949000) 0 nil])
([nil nil ((863 . 880)) nil (25889 21940 993535 796000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -880)) ((880 . 884)) (25889 21791 354441 937000) 0 nil])
([nil nil ((nil rear-nonsticky nil 947 . 948) (nil fontified nil 946 . 948) (nil fontified nil 945 . 946) (nil fontified nil 939 . 945) (nil fontified nil 935 . 939) (nil fontified nil 934 . 935) (nil fontified nil 929 . 934) (nil fontified nil 928 . 929) (nil fontified nil 926 . 928) (nil fontified nil 919 . 926) (nil fontified nil 916 . 919) (nil fontified nil 902 . 916) (nil fontified nil 901 . 902) (nil fontified nil 895 . 901) (nil fontified nil 891 . 895) (nil fontified nil 890 . 891) (nil fontified nil 885 . 890) (nil fontified nil 884 . 885) (nil fontified nil 882 . 884) (nil fontified nil 875 . 882) (nil fontified nil 872 . 875) (nil fontified nil 864 . 872) (864 . 948)) nil (25889 21940 993534 923000) 0 nil])
nil
([nil nil ((863 . 880)) nil (25889 21940 993532 212000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -998) 982) nil (25889 21940 993531 360000) 0 nil])
([nil nil ((#("            for j_pop in range(self.N_POP):
" 0 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 22 (fontified t) 22 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 30 (face font-lock-builtin-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 43 (fontified t) 43 44 (fontified t rear-nonsticky t)) . -921) (undo-tree-id555 . -44) 965) nil (25889 21940 993530 456000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -920) (undo-tree-id553 . -1) (undo-tree-id554 . -1) 921) nil (25889 21940 993528 980000) 0 nil])
([nil nil ((962 . 973) (961 . 963) (#("[" 0 1 (fontified nil)) . -961) (961 . 962)) nil (25889 21940 993526 575000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -972) (undo-tree-id552 . -1) 973) nil (25889 21940 993525 457000) 0 nil])
([nil nil ((972 . 974)) nil (25889 21940 993524 73000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -949) 937) nil (25889 21940 993523 300000) 0 nil])
([nil nil ((nil fontified nil 954 . 955) (nil fontified nil 953 . 954) (nil fontified nil 952 . 953) (nil fontified nil 951 . 952) (nil fontified nil 947 . 951) (nil fontified nil 946 . 947) (nil fontified nil 940 . 946) (nil fontified nil 939 . 940) (nil fontified nil 934 . 939) (nil fontified nil 933 . 934) (nil fontified nil 931 . 933) (nil fontified nil 930 . 931) (nil fontified nil 926 . 930) (nil fontified nil 924 . 926) (nil fontified nil 923 . 924) (nil fontified nil 918 . 923) (nil fontified nil 917 . 918) (nil fontified nil 916 . 917) (nil fontified nil 915 . 916) (nil fontified nil 914 . 915) (nil fontified nil 910 . 914) (nil fontified nil 909 . 910) (nil fontified nil 900 . 909) (nil fontified nil 899 . 900) (nil fontified nil 888 . 899) (nil fontified nil 884 . 888) (nil fontified nil 864 . 884) (864 . 955)) nil (25889 21940 993521 813000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -880) 864) nil (25889 21940 993518 739000) 0 nil])
([nil nil ((767 . 784)) nil (25889 21940 993517 955000) 0 nil])
([nil nil ((784 . 790)) nil (25889 21940 993517 62000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -812) 813) nil (25889 21940 993516 472000) 0 nil])
([nil nil ((812 . 813)) nil (25889 21940 993515 656000) 0 nil])
([nil nil ((#("nn.Linear(self.Na[i_pop], self.Na[j_pop], bias=(i_pop==j_pop))" 0 9 (fontified t) 9 10 (face (rainbow-delimiters-depth-2-face) fontified t) 10 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-3-face) fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-3-face) fontified t) 24 26 (fontified t) 26 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 33 (fontified t) 33 34 (face (rainbow-delimiters-depth-3-face) fontified t) 34 39 (fontified t) 39 40 (face (rainbow-delimiters-depth-3-face) fontified t) 40 46 (fontified t) 46 47 (face font-lock-operator-face fontified t) 47 48 (face (rainbow-delimiters-depth-3-face) fontified t) 48 51 (fontified t) 51 53 (fontified t) 53 55 (face font-lock-operator-face fontified t) 55 57 (fontified t) 57 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-3-face) fontified t) 61 62 (face (rainbow-delimiters-depth-2-face) fontified t)) . 823) (undo-tree-id550 . -62) (undo-tree-id551 . -62)) nil (25889 21940 993514 750000) 0 nil])
([nil nil ((nil rear-nonsticky nil 851 . 852) (nil fontified nil 851 . 852) (nil fontified nil 850 . 851) (nil fontified nil 847 . 850) (nil fontified nil 845 . 847) (nil fontified nil 843 . 845) (nil fontified nil 841 . 843) (nil fontified nil 838 . 841) (nil fontified nil 837 . 838) (nil fontified nil 836 . 837) (nil fontified nil 830 . 836) (nil fontified nil 829 . 830) (nil fontified nil 824 . 829) (nil fontified nil 823 . 824) (nil fontified nil 821 . 823) (nil fontified nil 820 . 821) (nil fontified nil 816 . 820) (nil fontified nil 814 . 816) (nil fontified nil 813 . 814) (nil fontified nil 808 . 813) (nil fontified nil 807 . 808) (nil fontified nil 806 . 807) (nil fontified nil 805 . 806) (nil fontified nil 804 . 805) (nil fontified nil 800 . 804) (nil fontified nil 799 . 800) (nil fontified nil 790 . 799) (790 . 852)) nil (25889 21940 993511 993000) 0 nil])
([nil nil ((852 . 869)) nil (25889 21940 993508 563000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -891) (undo-tree-id547 . -1) (#("2" 0 1 (fontified nil)) . -892) (undo-tree-id548 . -1) (#("j" 0 1 (fontified t)) . -893) (undo-tree-id549 . -1) 894) nil (25889 21940 993507 198000) 0 nil])
([nil nil ((891 . 892)) nil (25889 21940 993504 262000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -891) (undo-tree-id546 . -1) 892) nil (25889 21940 993503 626000) 0 nil])
([nil nil ((891 . 894)) nil (25889 21940 993502 227000) 0 nil])
([nil nil ((902 . 905)) nil (25889 21940 993501 476000) 0 nil])
([nil nil ((#("                self.i2j.append(nn.Linear(self.Na[i_pop], self.Na[j_pop], bias=False))
" 0 16 (fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 41 (fontified t) 41 42 (face (rainbow-delimiters-depth-2-face) fontified t) 42 46 (face font-lock-keyword-face fontified t) 46 47 (fontified t) 47 48 (fontified t) 48 49 (fontified t) 49 50 (face (rainbow-delimiters-depth-3-face) fontified t) 50 55 (fontified t) 55 56 (face (rainbow-delimiters-depth-3-face) fontified t) 56 58 (fontified t) 58 62 (face font-lock-keyword-face fontified t) 62 63 (fontified t) 63 65 (fontified t) 65 66 (face (rainbow-delimiters-depth-3-face) fontified t) 66 71 (fontified t) 71 72 (face (rainbow-delimiters-depth-3-face) fontified t) 72 78 (fontified t) 78 79 (face font-lock-operator-face fontified t) 79 83 (face font-lock-constant-face fontified t) 83 84 (face font-lock-constant-face fontified t) 84 85 (face (rainbow-delimiters-depth-2-face) fontified t) 85 86 (face (rainbow-delimiters-depth-1-face) fontified t) 86 87 (fontified t rear-nonsticky t)) . -907) (undo-tree-id545 . -87) 994) nil (25889 21940 993500 461000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -852) (undo-tree-id544 . -1) 853) nil (25889 21940 993498 827000) 0 nil])
([nil nil ((683 . 692)) nil (25889 21940 993497 436000) 0 nil])
([nil nil ((692 . 693)) nil (25889 21940 993496 712000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -692) (undo-tree-id543 . -1) 693) nil (25889 21940 993495 811000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 703) (702 . 703) (701 . 703) (#("[" 0 1 (face font-lock-operator-face fontified nil)) . -701) (692 . 702)) nil (25889 21940 993493 669000) 0 nil])
([nil nil ((701 . 702)) nil (25889 21940 993492 768000) 0 nil])
([nil nil ((700 . 701)) nil (25889 21940 993492 285000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -984) (undo-tree-id539 . -1) (#(" " 0 1 (fontified t)) . -985) (undo-tree-id540 . -1) (#(" " 0 1 (fontified nil)) . -986) (undo-tree-id541 . -1) (#(" " 0 1 (fontified t)) . -987) (undo-tree-id542 . -1) 988) nil (25889 21940 993490 711000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1014) (undo-tree-id536 . -1) (#("2" 0 1 (fontified t)) . -1015) (undo-tree-id537 . -1) (#("j" 0 1 (fontified t)) . -1016) (undo-tree-id538 . -1) 1017) nil (25889 21940 993486 427000) 0 nil])
([nil nil ((1014 . 1017)) nil (25889 21940 993483 445000) 0 nil])
([nil nil ((#("                else:
" 0 16 (fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 22 (fontified t)) . -1095) (undo-tree-id534 . -22) (undo-tree-id535 . -22) 1117) nil (25889 21940 993482 861000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -874) (undo-tree-id518 . -1) (#(" " 0 1 (fontified t)) . -875) (undo-tree-id519 . -1) (#(" " 0 1 (fontified t)) . -876) (undo-tree-id520 . -1) (#(" " 0 1 (fontified t)) . -877) (undo-tree-id521 . -1) (#(" " 0 1 (fontified t)) . -878) (undo-tree-id522 . -1) (#(" " 0 1 (fontified t)) . -879) (undo-tree-id523 . -1) (#(" " 0 1 (fontified t)) . -880) (undo-tree-id524 . -1) (#(" " 0 1 (fontified t)) . -881) (undo-tree-id525 . -1) (#(" " 0 1 (fontified t)) . -882) (undo-tree-id526 . -1) (#(" " 0 1 (fontified t)) . -883) (undo-tree-id527 . -1) (#(" " 0 1 (fontified t)) . -884) (undo-tree-id528 . -1) (#(" " 0 1 (fontified t)) . -885) (undo-tree-id529 . -1) (#(" " 0 1 (fontified t)) . -886) (undo-tree-id530 . -1) (#(" " 0 1 (fontified t)) . -887) (undo-tree-id531 . -1) (#(" " 0 1 (fontified t)) . -888) (undo-tree-id532 . -1) (#(" " 0 1 (fontified t)) . -889) (undo-tree-id533 . -1) 890) nil (25889 21940 993477 773000) 0 nil])
([nil nil ((874 . 891)) nil (25889 21940 993463 418000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1108) 1096) nil (25889 21940 993462 626000) 0 nil])
([nil nil ((#("            self.i2j.append(nn.Linear(self.Na[i_pop], self.Na[j_pop], bias=False))
" 0 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-2-face) fontified t) 38 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-3-face) fontified t) 46 51 (fontified t) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t) 52 54 (fontified t) 54 58 (face font-lock-keyword-face fontified t) 58 59 (fontified t) 59 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-3-face) fontified t) 62 67 (fontified t) 67 68 (face (rainbow-delimiters-depth-3-face) fontified t) 68 74 (fontified t) 74 75 (face font-lock-operator-face fontified t) 75 79 (face font-lock-constant-face fontified t) 79 80 (face font-lock-constant-face fontified t) 80 81 (face (rainbow-delimiters-depth-2-face) fontified t) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t) 82 83 (fontified t rear-nonsticky t)) . -1096) (undo-tree-id517 . -83) 1179) nil (25889 21940 993461 427000) 0 nil])
([nil nil ((nil rear-nonsticky nil 953 . 954) (nil fontified nil 953 . 954) (nil fontified nil 952 . 953) (nil fontified nil 947 . 952) (nil fontified nil 946 . 947) (nil fontified nil 936 . 946) (nil fontified nil 935 . 936) (nil fontified nil 927 . 935) (nil fontified nil 926 . 927) (nil fontified nil 925 . 926) (nil fontified nil 923 . 925) (nil fontified nil 922 . 923) (nil fontified nil 910 . 922) (nil fontified nil 906 . 910) (nil fontified nil 905 . 906) (nil fontified nil 904 . 905) (nil fontified nil 903 . 904) (nil fontified nil 899 . 903) (nil fontified nil 887 . 899) (nil fontified nil 883 . 887) (nil fontified nil 875 . 883) (875 . 954)) nil (25889 21940 993450 103000) 0 nil])
([nil nil ((875 . 891) (#("        " 0 8 (fontified t)) . 875)) nil (25889 21940 993446 246000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . 891) (#("2" 0 1 (fontified t)) . 891) (#("i" 0 1 (fontified t)) . 891) (#("." 0 1 (fontified nil)) . 891) (#("f" 0 1 (fontified nil)) . 891) (#("l" 0 1 (fontified t)) . 891) (#("e" 0 1 (fontified t)) . 891) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 891)) nil (25889 21940 993443 494000) 0 nil])
([nil nil ((891 . 894)) nil (25889 21940 993438 293000) 0 nil])
([nil nil ((1846 . 1855) (t 25889 21941 7769 571000)) nil (25889 22176 327640 967000) 0 nil])
([nil nil ((1884 . 1893)) nil (25889 22176 327640 472000) 0 nil])
([nil nil ((1893 . 1900)) nil (25889 22176 327640 43000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1896) (undo-tree-id12 . -1) (#("h" 0 1 (fontified t)) . -1897) (undo-tree-id13 . -1) (#("e" 0 1 (fontified t)) . -1898) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t)) . -1899) (undo-tree-id15 . -1) 1900) nil (25889 22176 327639 132000) 0 nil])
([nil nil ((1896 . 1900)) nil (25889 22176 327635 933000) 0 nil])
([nil nil ((1900 . 1905)) nil (25889 22176 327635 355000) 0 nil])
([nil nil ((1896 . 1901)) nil (25889 22176 327634 951000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 1916) (1915 . 1916) (1914 . 1916) (#("'" 0 1 (fontified nil)) . -1914) (1910 . 1915)) nil (25889 22176 327634 293000) 0 nil])
([nil nil ((1915 . 1918)) nil (25889 22176 327633 527000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1910) (undo-tree-id8 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1911) (undo-tree-id9 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1912) (undo-tree-id10 . -1) (#(" " 0 1 (fontified t)) . -1913) (undo-tree-id11 . -1) 1914) nil (25889 22176 327632 557000) 0 nil])
([nil nil ((#("'cos" 0 4 (face font-lock-string-face fontified t)) . 1910) (undo-tree-id7 . -4) 1914) nil (25889 22176 327628 610000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -1910) 1911) nil (25889 22176 327626 490000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1899 . 1900) (nil fontified nil 1896 . 1900) (1896 . 1900)) nil (25889 22176 327625 713000) 0 nil])
([nil nil ((1900 . 1901)) nil (25889 22176 327625 47000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face rear-nonsticky t fontified t)) . -1899) (undo-tree-id6 . -1) 1900) nil (25889 22176 327624 571000) 0 nil])
([nil nil ((1899 . 1900)) nil (25889 22176 327623 414000) 0 nil])
([nil nil ((1899 . 1900)) nil (25889 22176 327623 28000) 0 nil])
([nil nil ((1901 . 1904)) nil (25889 22176 327622 479000) 0 nil])
([nil nil ((1919 . 1920)) nil (25889 22176 327622 56000) 0 nil])
([nil nil ((1920 . 1933)) nil (25889 22176 327621 555000) 0 nil])
([nil nil ((1946 . 1947)) nil (25889 22176 327621 157000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1946) (undo-tree-id5 . -1) 1947) nil (25889 22176 327620 581000) 0 nil])
([nil nil ((1942 . 1946) 1934) nil (25889 22176 327619 405000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1920) (undo-tree-id4 . -1) 1921) nil (25889 22176 327618 694000) 0 nil])
([nil nil ((2017 . 2021) 2009) nil (25889 22176 327617 360000) 0 nil])
([nil nil ((2085 . 2089) 2077) nil (25889 22176 327616 573000) 0 nil])
([nil nil ((2130 . 2134) 2122) nil (25889 22176 327615 894000) 0 nil])
([nil nil ((2076 . 2089)) nil (25889 22176 327615 260000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2076) (undo-tree-id3 . -1) 2077) nil (25889 22176 327614 635000) 0 nil])
([nil nil ((2133 . 2146)) nil (25889 22176 327613 47000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1958 . 1959) (nil fontified nil 1957 . 1959) (nil fontified nil 1956 . 1957) (nil fontified nil 1955 . 1956) (nil fontified nil 1954 . 1955) (nil fontified nil 1944 . 1954) (nil fontified nil 1943 . 1944) (nil fontified nil 1935 . 1943) (nil fontified nil 1934 . 1935) (nil fontified nil 1925 . 1934) (nil fontified nil 1924 . 1925) (nil fontified nil 1914 . 1924) (nil fontified nil 1913 . 1914) (nil fontified nil 1906 . 1913) (nil fontified nil 1900 . 1906) (nil fontified nil 1899 . 1900) (nil fontified nil 1878 . 1899) (nil fontified nil 1877 . 1878) (nil fontified nil 1859 . 1877) (nil fontified nil 1858 . 1859) (nil fontified nil 1855 . 1858) (1855 . 1959)) nil (25889 22176 328112 7000) 0 nil])
([nil nil ((1825 . 1827)) nil (25889 22192 379562 514000) 0 nil] [nil nil ((#("        def numba_generate_Cab(Kb, Na, Nb, STRUCTURE='None', SIGMA=1.0, KAPPA=0.5, SEED=0, PHASE=0, verbose=0):
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 30 (face font-lock-function-name-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 52 (fontified t) 52 53 (face font-lock-operator-face fontified t) 53 59 (face font-lock-string-face fontified t) 59 66 (fontified t) 66 67 (face font-lock-operator-face fontified t) 67 77 (fontified t) 77 78 (face font-lock-operator-face fontified t) 78 87 (fontified t) 87 88 (face font-lock-operator-face fontified t) 88 96 (fontified t) 96 97 (face font-lock-operator-face fontified t) 97 107 (fontified t) 107 108 (face font-lock-operator-face fontified t) 108 109 (fontified t) 109 110 (face (rainbow-delimiters-depth-1-face) fontified t) 110 111 (fontified t) 111 112 (rear-nonsticky t fontified t)) . -1847) (undo-tree-id0 . -8) (undo-tree-id1 . -8) (undo-tree-id2 . -112) 1959) ((1847 . 1959)) (25889 22176 327606 262000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1826) (undo-tree-id19 . -1) 1827) nil (25889 22192 379561 262000) 0 nil])
nil
([nil nil ((1826 . 1827)) nil (25889 22192 379559 685000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1826) (undo-tree-id18 . -1) 1827) nil (25889 22192 379558 701000) 0 nil])
([nil nil ((1826 . 1827)) nil (25889 22192 379556 977000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1826) (undo-tree-id17 . -1) 1827) nil (25889 22192 379555 925000) 0 nil])
([nil nil ((1826 . 1832)) nil (25889 22192 379553 456000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1831) (undo-tree-id16 . -1) 1832) nil (25889 22192 379551 952000) 0 nil])
([nil nil ((1831 . 1837)) nil (25889 22192 382209 27000) 0 nil])
([nil nil ((1837 . 1846)) nil (25889 22483 963866 19000) 0 nil] [nil nil ((#("H" 0 1 (fontified t)) . 1837) (#("P" 0 1 (fontified nil)) . 1837) (#(" " 0 1 (fontified nil)) . 1837) (#("," 0 1 (fontified nil)) . 1837) (#("1" 0 1 (fontified t)) . 1837) (#("J" 0 1 (fontified t)) . 1837) (#(" " 0 1 (fontified t)) . 1837) (#("," 0 1 (fontified t)) . 1837) (#("0" 0 1 (fontified t)) . 1837) (#("J" 0 1 (fontified t)) . 1837)) ((1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838) (1837 . 1838)) (25889 22192 379535 384000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -1837) (undo-tree-id377 . -1) (#("T" 0 1 (fontified t)) . -1838) (undo-tree-id378 . -1) (#("R" 0 1 (fontified t)) . -1839) (undo-tree-id379 . -1) (#("U" 0 1 (fontified t)) . -1840) (undo-tree-id380 . -1) (#("C" 0 1 (fontified t)) . -1841) (undo-tree-id381 . -1) (#("T" 0 1 (fontified t)) . -1842) (undo-tree-id382 . -1) (#("U" 0 1 (fontified t)) . -1843) (undo-tree-id383 . -1) (#("R" 0 1 (fontified t)) . -1844) (undo-tree-id384 . -1) (#("E" 0 1 (fontified t)) . -1845) (undo-tree-id385 . -1) 1846) nil (25889 22483 963864 398000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 1894) (#("," 0 1 (fontified t)) . 1894) (#("b" 0 1 (fontified t)) . 1894) (#("N" 0 1 (fontified t)) . 1894) (#(" " 0 1 (fontified t)) . 1894) (#("," 0 1 (fontified t)) . 1894) (#("a" 0 1 (fontified t)) . 1894) (#("N" 0 1 (fontified t)) . 1894)) nil (25889 22483 963855 129000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1891) (undo-tree-id376 . -1) 1892) nil (25889 22483 963853 949000) 0 nil])
([nil nil ((#("        def numba_generate_Cab(K, STRUCTURE='None', SIGMA=1.0, KAPPA=0.5, SEED=0, PHASE=0, verbose=0):
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 30 (face font-lock-function-name-face fontified t) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t) 31 43 (fontified t) 43 44 (face font-lock-operator-face fontified t) 44 50 (face font-lock-string-face fontified t) 50 57 (fontified t) 57 58 (face font-lock-operator-face fontified t) 58 68 (fontified t) 68 69 (face font-lock-operator-face fontified t) 69 78 (fontified t) 78 79 (face font-lock-operator-face fontified t) 79 87 (fontified t) 87 88 (face font-lock-operator-face fontified t) 88 98 (fontified t) 98 99 (face font-lock-operator-face fontified t) 99 100 (fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 102 (fontified t) 102 103 (fontified t rear-nonsticky t)) . -1859) (undo-tree-id373 . -8) (undo-tree-id374 . -8) (undo-tree-id375 . -103) 1962) nil (25889 22483 963852 261000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1835) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#(" " 0 1 (fontified t)) . -1836) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (#("J" 0 1 (fontified t)) . -1837) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("0" 0 1 (fontified t)) . -1838) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("," 0 1 (fontified nil)) . -1839) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (#(" " 0 1 (fontified nil)) . -1840) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("J" 0 1 (fontified t)) . -1841) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("1" 0 1 (fontified t)) . -1842) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("," 0 1 (fontified t)) . -1843) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#(" " 0 1 (fontified t)) . -1844) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("P" 0 1 (fontified t)) . -1845) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("H" 0 1 (fontified t)) . -1846) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("A" 0 1 (fontified t)) . -1847) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("S" 0 1 (fontified t)) . -1848) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("E" 0 1 (fontified t)) . -1849) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1850) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("n" 0 1 (fontified t)) . -1851) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("p" 0 1 (fontified t)) . -1852) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (#("." 0 1 (fontified t)) . -1853) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (#("p" 0 1 (fontified t)) . -1854) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("i" 0 1 (fontified t)) . -1855) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) 1856) nil (25889 22483 963843 798000) 0 nil])
([nil nil ((#("K" 0 1 (fontified t)) . -1825) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (#("b" 0 1 (fontified t)) . -1826) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("," 0 1 (fontified t)) . -1827) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#(" " 0 1 (fontified t)) . -1828) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#("N" 0 1 (fontified t)) . -1829) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (#("a" 0 1 (fontified t)) . -1830) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("," 0 1 (fontified t)) . -1831) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t)) . -1832) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (#("N" 0 1 (fontified t)) . -1833) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("b" 0 1 (fontified t)) . -1834) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 1835) nil (25889 22483 963687 222000) 0 nil])
([nil nil ((1825 . 1828)) nil (25889 22483 963612 513000) 0 nil])
([nil nil ((#("        N = self.hidden_size
" 0 8 (fontified t) 8 9 (face font-lock-variable-name-face fontified t) 9 10 (fontified t) 10 11 (face font-lock-operator-face fontified t) 11 12 (fontified t) 12 16 (face font-lock-keyword-face fontified t) 16 29 (fontified t)) . -1832) (undo-tree-id93 . -29) 1861) nil (25889 22483 963611 927000) 0 nil])
([nil nil ((1831 . 1839)) nil (25889 22483 963610 893000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1875) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -1876) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -1877) (undo-tree-id83 . -1) (#(" " 0 1 (fontified nil)) . -1878) (undo-tree-id84 . -1) (#(" " 0 1 (fontified nil)) . -1879) (undo-tree-id85 . -1) (#(" " 0 1 (fontified t)) . -1880) (undo-tree-id86 . -1) (#(" " 0 1 (fontified t)) . -1881) (undo-tree-id87 . -1) (#(" " 0 1 (fontified t)) . -1882) (undo-tree-id88 . -1) (#(" " 0 1 (fontified t)) . -1883) (undo-tree-id89 . -1) (#(" " 0 1 (fontified t)) . -1884) (undo-tree-id90 . -1) (#(" " 0 1 (fontified t)) . -1885) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -1886) (undo-tree-id92 . -1) 1887) nil (25889 22483 963608 771000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -1912) (undo-tree-id80 . -1) 1913) nil (25889 22483 963598 433000) 0 nil])
([nil nil ((1912 . 1919)) nil (25889 22483 963597 342000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1917) (undo-tree-id78 . -1) (#("a" 0 1 (fontified t)) . -1918) (undo-tree-id79 . -1) 1919) nil (25889 22483 963596 741000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1923) (1922 . 1923) (1921 . 1923) (#("[" 0 1 (fontified nil)) . -1921) (1917 . 1922)) nil (25889 22483 963594 785000) 0 nil])
([nil nil ((1922 . 1923)) nil (25889 22483 963594 181000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -1960) (undo-tree-id77 . -1) 1961) nil (25889 22483 963593 593000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1971) (1970 . 1971) (1969 . 1971) (#("[" 0 1 (fontified nil)) . -1969) (1960 . 1970)) nil (25889 22483 963592 345000) 0 nil])
([nil nil ((1970 . 1971)) nil (25889 22483 963591 649000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -1970) (undo-tree-id76 . -1) 1971) nil (25889 22483 963591 192000) 0 nil])
([nil nil ((1970 . 1971)) nil (25889 22483 963590 54000) 0 nil])
([nil nil ((1973 . 1986)) nil (25889 22483 963589 769000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-variable-name-face fontified t)) . -2137) (undo-tree-id75 . -1) 2138) nil (25889 22483 963589 230000) 0 nil])
([nil nil ((2137 . 2138)) nil (25889 22483 963588 291000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2217) (undo-tree-id74 . -1) 2218) nil (25889 22483 963587 791000) 0 nil])
([nil nil ((2217 . 2218)) nil (25889 22483 963586 840000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -1825) (undo-tree-id73 . -1) 1826) nil (25889 22483 963586 336000) 0 nil])
([nil nil ((1825 . 1826)) nil (25889 22483 963585 374000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t)) . -1825) (undo-tree-id72 . -1) 1826) nil (25889 22483 963584 776000) 0 nil])
([nil nil ((1825 . 1826)) nil (25889 22483 963583 641000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2071 . 2072) (nil fontified nil 2071 . 2072) (nil fontified nil 2070 . 2071) (nil fontified nil 2069 . 2070) (nil fontified nil 2068 . 2069) (nil fontified nil 2067 . 2068) (nil fontified nil 2057 . 2067) (nil fontified nil 2056 . 2057) (nil fontified nil 2049 . 2056) (nil fontified nil 2048 . 2049) (nil fontified nil 2046 . 2048) (nil fontified nil 2045 . 2046) (nil fontified nil 2044 . 2045) (nil fontified nil 2043 . 2044) (nil fontified nil 2042 . 2043) (nil fontified nil 2041 . 2042) (nil fontified nil 2036 . 2041) (nil fontified nil 2030 . 2036) (nil fontified nil 2029 . 2030) (nil fontified nil 2022 . 2029) (nil fontified nil 2021 . 2022) (nil fontified nil 2020 . 2021) (nil fontified nil 2019 . 2020) (nil fontified nil 2007 . 2019) (nil fontified nil 2006 . 2007) (nil fontified nil 1993 . 2006) (nil fontified nil 1992 . 1993) (nil fontified nil 1991 . 1992) (nil fontified nil 1986 . 1991) (nil fontified nil 1974 . 1986) (1974 . 2072)) nil (25889 22483 963582 462000) 0 nil])
([nil nil ((1973 . 1986)) nil (25889 22483 963580 310000) 0 nil])
([nil nil ((1877 . 1889) (#("            " 0 12 (fontified nil)) . 1876) (undo-tree-id71 . -12) (1888 . 1889)) nil (25889 22483 963579 577000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 2000) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . 2000) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 2000) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . 2000) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . 2000)) nil (25889 22483 963577 969000) 0 nil])
([nil nil ((2000 . 2003)) nil (25889 22483 963577 238000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -2080) (undo-tree-id70 . -1) 2081) nil (25889 22483 963576 779000) 0 nil])
([nil nil ((2080 . 2081)) nil (25889 22483 963575 423000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -2032) (undo-tree-id69 . -1) 2033) nil (25889 22483 963574 924000) 0 nil])
([nil nil ((2032 . 2033)) nil (25889 22483 963573 817000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2144) (undo-tree-id68 . -1) 2145) nil (25889 22483 963573 267000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2155) (2154 . 2155) (2153 . 2155) (#("[" 0 1 (fontified nil)) . -2153) (2144 . 2154)) nil (25889 22483 963571 671000) 0 nil])
([nil nil ((2154 . 2155)) nil (25889 22483 963571 61000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2172) (undo-tree-id67 . -1) 2173) nil (25889 22483 963570 528000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 2183) (2182 . 2183) (2181 . 2183) (#("[" 0 1 (fontified nil)) . -2181) (2172 . 2182)) nil (25889 22483 963569 401000) 0 nil])
([nil nil ((2182 . 2183)) nil (25889 22483 963568 684000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2189) (undo-tree-id58 . -1) (#(" " 0 1 (fontified nil)) . -2190) (undo-tree-id59 . -1) (#(" " 0 1 (fontified t)) . -2191) (undo-tree-id60 . -1) (#(" " 0 1 (fontified t)) . -2192) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -2193) (undo-tree-id62 . -1) (#(" " 0 1 (fontified t)) . -2194) (undo-tree-id63 . -1) (#(" " 0 1 (fontified t)) . -2195) (undo-tree-id64 . -1) (#(" " 0 1 (fontified t)) . -2196) (undo-tree-id65 . -1) (#(" " 0 1 (fontified t)) . -2197) (undo-tree-id66 . -1) 2198) nil (25889 22483 963567 3000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2186) (undo-tree-id55 . -1) (#(" " 0 1 (fontified t)) . -2187) (undo-tree-id56 . -1) (#(" " 0 1 (fontified t)) . -2188) (undo-tree-id57 . -1) 2189) nil (25889 22483 963556 168000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2223) (undo-tree-id50 . -1) (#("h" 0 1 (fontified t)) . -2224) (undo-tree-id51 . -1) (#("e" 0 1 (fontified t)) . -2225) (undo-tree-id52 . -1) (#("t" 0 1 (fontified t)) . -2226) (undo-tree-id53 . -1) (#("a" 0 1 (fontified t)) . -2227) (undo-tree-id54 . -1) 2228) nil (25889 22483 963553 18000) 0 nil])
([nil nil ((2223 . 2225)) nil (25889 22483 963534 224000) 0 nil])
([nil nil ((2223 . 2224)) nil (25889 22483 963533 889000) 0 nil])
([nil nil ((#("^" 0 1 (face font-lock-operator-face fontified t)) . -2223) (undo-tree-id49 . -1) 2224) nil (25889 22483 963533 256000) 0 nil])
([nil nil ((2223 . 2224)) nil (25889 22483 963532 128000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1974) (undo-tree-id48 . -1) 1975) nil (25889 22483 963531 530000) 0 nil])
([nil nil ((2230 . 2242) (#("            " 0 12 (fontified nil)) . 2229) (undo-tree-id47 . -12) (2241 . 2242)) nil (25889 22483 963530 351000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2238) (undo-tree-id46 . -4) 2242) nil (25889 22483 963528 961000) 0 nil])
([nil nil ((2238 . 2240)) nil (25889 22483 963527 802000) 0 nil])
([nil nil ((2240 . 2245)) nil (25889 22483 963527 404000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2241) (undo-tree-id42 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . -2242) (undo-tree-id43 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified t)) . -2243) (undo-tree-id44 . -1) (#(" " 0 1 (fontified t)) . -2244) (undo-tree-id45 . -1) 2245) nil (25889 22483 963526 367000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 2243) (2242 . 2243) (2241 . 2243) (#("'" 0 1 (fontified nil)) . -2241) (2241 . 2242)) nil (25889 22483 963523 60000) 0 nil])
([nil nil ((2242 . 2246)) nil (25889 22483 963522 344000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -2245) (undo-tree-id41 . -1) 2246) nil (25889 22483 963521 874000) 0 nil])
([nil nil ((2245 . 2249)) nil (25889 22483 963520 817000) 0 nil])
([nil nil ((2250 . 2260)) nil (25889 22483 963520 434000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2259) (undo-tree-id40 . -1) 2260) nil (25889 22483 963519 874000) 0 nil])
([nil nil ((2259 . 2262)) nil (25889 22483 963518 743000) 0 nil])
([nil nil ((2262 . 2268)) nil (25889 22483 963518 357000) 0 nil])
([nil nil ((2268 . 2269)) nil (25889 22483 963517 847000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -2259) (undo-tree-id31 . -1) (#("T" 0 1 (fontified t)) . -2260) (undo-tree-id32 . -1) (#("R" 0 1 (fontified t)) . -2261) (undo-tree-id33 . -1) (#("U" 0 1 (fontified t)) . -2262) (undo-tree-id34 . -1) (#("C" 0 1 (fontified t)) . -2263) (undo-tree-id35 . -1) (#("T" 0 1 (fontified t)) . -2264) (undo-tree-id36 . -1) (#("U" 0 1 (fontified t)) . -2265) (undo-tree-id37 . -1) (#("R" 0 1 (fontified t)) . -2266) (undo-tree-id38 . -1) (#("E" 0 1 (fontified t)) . -2267) (undo-tree-id39 . -1) 2268) nil (25889 22483 963516 172000) 0 nil])
([nil nil ((2259 . 2271)) nil (25889 22483 963509 515000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2347) (undo-tree-id30 . -1) 2348) nil (25889 22483 963508 944000) 0 nil])
([nil nil ((2347 . 2351)) nil (25889 22483 963507 852000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2350) (undo-tree-id29 . -1) 2351) nil (25889 22483 963507 327000) 0 nil])
([nil nil ((2350 . 2353)) nil (25889 22483 963506 151000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -2352) (undo-tree-id28 . -1) 2353) nil (25889 22483 963505 574000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2358) (2357 . 2358) (2356 . 2358) (#("[" 0 1 (fontified nil)) . -2356) (2352 . 2357)) nil (25889 22483 963504 163000) 0 nil])
([nil nil ((2357 . 2358)) nil (25889 22483 963503 485000) 0 nil])
([nil nil ((2360 . 2372)) nil (25889 22483 963503 64000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2368) (undo-tree-id27 . -4) 2372) nil (25889 22483 963502 570000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 2373) (2372 . 2373) (2371 . 2373) (#("'" 0 1 (fontified nil)) . -2371) (2368 . 2372)) nil (25889 22483 963501 284000) 0 nil])
([nil nil ((2372 . 2377)) nil (25889 22483 963500 555000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -2376) (undo-tree-id26 . -1) 2377) nil (25889 22483 963499 962000) 0 nil])
([nil nil ((2376 . 2378)) nil (25889 22483 963498 852000) 0 nil])
([nil nil ((2379 . 2397)) nil (25889 22483 963498 284000) 0 nil])
([nil nil ((2397 . 2401)) nil (25889 22483 963497 873000) 0 nil])
([nil nil ((2401 . 2414)) nil (25889 22483 963497 473000) 0 nil])
([nil nil ((2414 . 2418)) nil (25889 22483 963497 119000) 0 nil])
([nil nil ((#("C" 0 1 (fontified t)) . -2414) (undo-tree-id22 . -1) (#("i" 0 1 (fontified t)) . -2415) (undo-tree-id23 . -1) (#("j" 0 1 (fontified t)) . -2416) (undo-tree-id24 . -1) (#(" " 0 1 (fontified t)) . -2417) (undo-tree-id25 . -1) 2418) nil (25889 22483 963495 999000) 0 nil])
([nil nil ((2414 . 2420)) nil (25889 22483 963492 509000) 0 nil])
([nil nil ((2420 . 2432) (#(" " 0 1 (fontified nil)) . 2419) (undo-tree-id21 . -1) (2420 . 2421)) nil (25889 22483 963491 715000) 0 nil])
([nil nil ((2359 . 2372)) nil (25889 22483 963489 470000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2368) (undo-tree-id20 . -4) 2372) nil (25889 22483 963485 938000) 0 nil])
([nil nil ((1876 . 1888) (t 25889 22483 977735 667000)) nil (25889 22638 740273 163000) 0 nil])
([nil nil ((2284 . 2297)) nil (25889 22638 740272 589000) 0 nil])
([nil nil ((#("'" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 2302) (2301 . 2302) (2300 . 2302) (#("'" 0 1 (fontified nil)) . -2300) (2297 . 2301)) nil (25889 22638 740271 607000) 0 nil])
([nil nil ((2301 . 2302)) nil (25889 22638 740270 877000) 0 nil])
([nil nil ((2302 . 2304)) nil (25889 22638 740270 462000) 0 nil])
([nil nil ((2305 . 2324)) nil (25889 22638 740269 878000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -2323) (undo-tree-id419 . -1) 2324) nil (25889 22638 740269 373000) 0 nil])
([nil nil ((2323 . 2324)) nil (25889 22638 740268 171000) 0 nil])
([nil nil ((2325 . 2341) (#("            " 0 12 (fontified t)) . 2325)) nil (25889 22638 740267 474000) 0 nil])
([nil nil ((2415 . 2432)) nil (25889 22638 740267 60000) 0 nil])
([nil nil ((2432 . 2435)) nil (25889 22638 740266 586000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -2428) (2435 . 2437)) nil (25889 22638 740266 174000) 0 nil])
([nil nil ((2434 . 2450) (#("        " 0 8 (fontified t)) . 2434) (undo-tree-id418 . -8) 2442) nil (25889 22638 740265 363000) 0 nil])
([nil nil ((2450 . 2454)) nil (25889 22638 740264 313000) 0 nil])
([nil nil ((2454 . 2456)) nil (25889 22638 740263 999000) 0 nil])
([nil nil ((2415 . 2416)) nil (25889 22638 740263 568000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2415) (undo-tree-id417 . -1) 2416) nil (25889 22638 740263 92000) 0 nil])
([nil nil ((2456 . 2457)) nil (25889 22638 740261 983000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -2456) (undo-tree-id416 . -1) 2457) nil (25889 22638 740261 435000) 0 nil])
([nil nil ((2456 . 2461)) nil (25889 22638 740260 461000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -2456) (undo-tree-id411 . -1) (#("e" 0 1 (fontified t)) . -2457) (undo-tree-id412 . -1) (#("l" 0 1 (fontified t)) . -2458) (undo-tree-id413 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2459) (undo-tree-id414 . -1) (#("." 0 1 (fontified t)) . -2460) (undo-tree-id415 . -1) 2461) nil (25889 22638 740259 374000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2470) (2469 . 2470) (2468 . 2470) (#("[" 0 1 (fontified nil)) . -2468) (2456 . 2469)) nil (25889 22638 740254 861000) 0 nil])
([nil nil ((2469 . 2470)) nil (25889 22638 740254 161000) 0 nil])
([nil nil ((2471 . 2488)) nil (25889 22638 740253 833000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2484) (undo-tree-id410 . -4) 2488) nil (25889 22638 740253 272000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2480) (undo-tree-id409 . -4) 2484) nil (25889 22638 740252 61000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2562 . 2563) (nil fontified nil 2562 . 2563) (nil fontified nil 2551 . 2562) (nil fontified nil 2547 . 2551) (nil fontified nil 2546 . 2547) (nil fontified nil 2544 . 2546) (nil fontified nil 2543 . 2544) (nil fontified nil 2538 . 2543) (nil fontified nil 2537 . 2538) (nil fontified nil 2535 . 2537) (nil fontified nil 2523 . 2535) (2523 . 2563)) nil (25889 22638 740250 631000) 0 nil])
([nil nil ((2563 . 2579) (#("            " 0 12 (fontified t)) . 2563)) nil (25889 22638 740249 434000) 0 nil])
([nil nil ((2562 . 2579)) nil (25889 22638 740248 989000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2562) (undo-tree-id408 . -1) 2563) nil (25889 22638 740248 434000) 0 nil])
([nil nil ((2600 . 2611)) nil (25889 22638 740247 333000) 0 nil])
([nil nil ((#("°" 0 1 (fontified t)) . -2609) (undo-tree-id406 . -1) (#(" " 0 1 (fontified t)) . -2610) (undo-tree-id407 . -1) 2611) nil (25889 22638 740246 703000) 0 nil])
([nil nil ((2609 . 2618)) nil (25889 22638 740244 154000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2624) (2623 . 2624) (2622 . 2624) (#("(" 0 1 (fontified nil)) . -2622) (2618 . 2623)) nil (25889 22638 740243 220000) 0 nil])
([nil nil ((2623 . 2633)) nil (25889 22638 740242 473000) 0 nil])
([nil nil ((2634 . 2636)) nil (25889 22638 740242 110000) 0 nil])
([nil nil ((2601 . 2603) (#("(" 0 1 (fontified nil)) . -2601) (2601 . 2602)) nil (25889 22638 740241 551000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2602)) nil (25889 22638 740240 906000) 0 nil])
([nil nil ((2602 . 2603)) nil (25889 22638 740240 472000) 0 nil])
([nil nil ((2638 . 2641)) nil (25889 22638 740240 44000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -2639) (undo-tree-id404 . -1) (#(" " 0 1 (fontified t)) . -2640) (undo-tree-id405 . -1) 2641) nil (25889 22638 740239 206000) 0 nil])
([nil nil ((2640 . 2656) (#("            " 0 12 (fontified t)) . 2640) (undo-tree-id403 . -12) 2652) nil (25889 22638 740237 109000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2562) (undo-tree-id387 . -1) (#(" " 0 1 (fontified t)) . -2563) (undo-tree-id388 . -1) (#(" " 0 1 (fontified t)) . -2564) (undo-tree-id389 . -1) (#(" " 0 1 (fontified t)) . -2565) (undo-tree-id390 . -1) (#(" " 0 1 (fontified t)) . -2566) (undo-tree-id391 . -1) (#(" " 0 1 (fontified t)) . -2567) (undo-tree-id392 . -1) (#(" " 0 1 (fontified t)) . -2568) (undo-tree-id393 . -1) (#(" " 0 1 (fontified t)) . -2569) (undo-tree-id394 . -1) (#(" " 0 1 (fontified t)) . -2570) (undo-tree-id395 . -1) (#(" " 0 1 (fontified t)) . -2571) (undo-tree-id396 . -1) (#(" " 0 1 (fontified t)) . -2572) (undo-tree-id397 . -1) (#(" " 0 1 (fontified t)) . -2573) (undo-tree-id398 . -1) (#(" " 0 1 (fontified t)) . -2574) (undo-tree-id399 . -1) (#(" " 0 1 (fontified t)) . -2575) (undo-tree-id400 . -1) (#(" " 0 1 (fontified t)) . -2576) (undo-tree-id401 . -1) (#(" " 0 1 (fontified t)) . -2577) (undo-tree-id402 . -1) 2578) nil (25889 22638 740233 292000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2622) (undo-tree-id386 . -1) 2623) nil (25889 22638 740218 874000) 0 nil])
([nil nil ((apply -6 2481 2646 undo--wrap-and-run-primitive-undo 2481 2646 ((2575 . 2577) (2533 . 2535) (2489 . 2491) 2623))) nil (25889 22638 740205 669000) 0 nil])
([nil nil ((2473 . 2489) (#("        " 0 8 (fontified nil)) . 2472) (undo-tree-id7 . -8) (2480 . 2481) (t 25889 22638 762292 528000)) nil (25889 23131 579697 285000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2789 . 2790) (nil fontified nil 2789 . 2790) (nil fontified nil 2788 . 2789) (nil fontified nil 2787 . 2788) (nil fontified nil 2786 . 2787) (nil fontified nil 2785 . 2786) (nil fontified nil 2782 . 2785) (nil fontified nil 2781 . 2782) (nil fontified nil 2780 . 2781) (nil fontified nil 2779 . 2780) (nil fontified nil 2776 . 2779) (nil fontified nil 2774 . 2776) (nil fontified nil 2773 . 2774) (nil fontified nil 2772 . 2773) (nil fontified nil 2762 . 2772) (nil fontified nil 2761 . 2762) (nil fontified nil 2760 . 2761) (nil fontified nil 2759 . 2760) (nil fontified nil 2757 . 2759) (nil fontified nil 2756 . 2757) (nil fontified nil 2754 . 2756) (nil fontified nil 2753 . 2754) (nil fontified nil 2752 . 2753) (nil fontified nil 2750 . 2752) (nil fontified nil 2749 . 2750) (nil fontified nil 2748 . 2749) (nil fontified nil 2745 . 2748) (nil fontified nil 2743 . 2745) (nil fontified nil 2739 . 2743) (nil fontified nil 2738 . 2739) (nil fontified nil 2737 . 2738) (nil fontified nil 2735 . 2737) (nil fontified nil 2733 . 2735) (nil fontified nil 2732 . 2733) (nil fontified nil 2731 . 2732) (nil fontified nil 2730 . 2731) (nil fontified nil 2727 . 2730) (nil fontified nil 2726 . 2727) (nil fontified nil 2724 . 2726) (nil fontified nil 2723 . 2724) (nil fontified nil 2713 . 2723) (nil fontified nil 2712 . 2713) (nil fontified nil 2711 . 2712) (nil fontified nil 2710 . 2711) (nil fontified nil 2708 . 2710) (nil fontified nil 2707 . 2708) (nil fontified nil 2706 . 2707) (nil fontified nil 2705 . 2706) (nil fontified nil 2704 . 2705) (nil fontified nil 2703 . 2704) (nil fontified nil 2701 . 2703) (nil fontified nil 2700 . 2701) (nil fontified nil 2699 . 2700) (nil fontified nil 2698 . 2699) (nil fontified nil 2696 . 2698) (nil fontified nil 2694 . 2696) (nil fontified nil 2693 . 2694) (nil fontified nil 2691 . 2693) (nil fontified nil 2690 . 2691) (nil fontified nil 2689 . 2690) (nil fontified nil 2688 . 2689) (nil fontified nil 2687 . 2688) (nil fontified nil 2686 . 2687) (nil fontified nil 2685 . 2686) (nil fontified nil 2683 . 2685) (nil fontified nil 2682 . 2683) (nil fontified nil 2681 . 2682) (nil fontified nil 2680 . 2681) (nil fontified nil 2679 . 2680) (nil fontified nil 2678 . 2679) (nil fontified nil 2675 . 2678) (nil fontified nil 2674 . 2675) (nil fontified nil 2671 . 2674) (nil fontified nil 2670 . 2671) (nil fontified nil 2669 . 2670) (nil fontified nil 2668 . 2669) (nil fontified nil 2667 . 2668) (nil fontified nil 2664 . 2667) (nil fontified nil 2663 . 2664) (nil fontified nil 2655 . 2663) (nil fontified nil 2654 . 2655) (nil fontified nil 2653 . 2654) (nil fontified nil 2643 . 2653) (nil fontified nil 2629 . 2643) (nil fontified nil 2625 . 2629) (nil fontified nil 2624 . 2625) (nil fontified nil 2623 . 2624) (nil fontified nil 2618 . 2623) (nil fontified nil 2617 . 2618) (nil fontified nil 2610 . 2617) (nil fontified nil 2608 . 2610) (nil fontified nil 2600 . 2608) (nil fontified nil 2598 . 2600) (nil fontified nil 2597 . 2598) (nil fontified nil 2594 . 2597) (nil fontified nil 2592 . 2594) (nil fontified nil 2588 . 2592) (nil fontified nil 2587 . 2588) (nil fontified nil 2586 . 2587) (nil fontified nil 2585 . 2586) (nil fontified nil 2584 . 2585) (nil fontified nil 2583 . 2584) (nil fontified nil 2578 . 2583) (nil fontified nil 2572 . 2578) (nil fontified nil 2571 . 2572) (nil fontified nil 2570 . 2571) (nil fontified nil 2568 . 2570) (nil fontified nil 2566 . 2568) (nil fontified nil 2565 . 2566) (nil fontified nil 2564 . 2565) (nil fontified nil 2562 . 2564) (nil fontified nil 2561 . 2562) (nil fontified nil 2560 . 2561) (nil fontified nil 2557 . 2560) (nil fontified nil 2556 . 2557) (nil fontified nil 2555 . 2556) (nil fontified nil 2554 . 2555) (nil fontified nil 2544 . 2554) (nil fontified nil 2532 . 2544) (nil fontified nil 2527 . 2532) (nil fontified nil 2526 . 2527) (nil fontified nil 2521 . 2526) (nil fontified nil 2513 . 2521) (nil fontified nil 2511 . 2513) (nil fontified nil 2503 . 2511) (nil fontified nil 2501 . 2503) (nil fontified nil 2500 . 2501) (nil fontified nil 2497 . 2500) (nil fontified nil 2495 . 2497) (nil fontified nil 2492 . 2495) (nil fontified nil 2485 . 2492) (nil fontified nil 2483 . 2485) (nil fontified nil 2482 . 2483) (nil fontified nil 2481 . 2482) (nil fontified nil 2477 . 2481) (nil fontified nil 2476 . 2477) (nil fontified nil 2475 . 2476) (nil fontified nil 2473 . 2475) (2473 . 2790)) nil (25889 23131 579692 991000) 0 nil])
([nil nil ((2473 . 2489)) nil (25889 23131 579679 748000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2485) (undo-tree-id6 . -4) 2489) nil (25889 23131 579679 207000) 0 nil])
([nil nil ((#("            if \"spec\" in STRUCTURE:
    if verbose:
        print('with spec cosine structure')
    Pij = Pij / torch.sqrt(Kb)
else:
    if verbose:
        print('with strong cosine structure')       

Pij = (Kb / Nb) * (1.0 + 2.0 * Pij)
Cij = 1.0 * (torch.rand(Na, Nb) < Pij)
else:
    Cij = 1.0 * (torch.rand(Na, Nb) < Kb/Nb)
" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 14 15 (fontified t src-block t font-lock-fontified t gptel response) 15 16 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 16 20 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 20 21 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 21 22 (fontified t src-block t font-lock-fontified t gptel response) 22 24 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 24 31 (fontified t src-block t font-lock-fontified t gptel response) 31 34 (fontified t src-block t font-lock-fontified t gptel response) 34 36 (fontified t src-block t font-lock-fontified t gptel response) 36 39 (fontified t src-block t font-lock-fontified t gptel response) 39 40 (fontified t src-block t font-lock-fontified t gptel response) 40 42 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 42 50 (fontified t src-block t font-lock-fontified t gptel response) 50 52 (fontified t src-block t font-lock-fontified t gptel response) 52 60 (fontified t src-block t font-lock-fontified t gptel response) 60 65 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 65 66 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 66 71 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 71 83 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 83 93 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 93 94 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 94 95 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 95 96 (fontified t src-block t font-lock-fontified t gptel response) 96 99 (fontified t src-block t font-lock-fontified t gptel response) 99 100 (fontified t src-block t font-lock-fontified t gptel response) 100 101 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 101 103 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 103 104 (fontified t src-block t font-lock-fontified t gptel response) 104 105 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 105 107 (fontified t src-block t font-lock-fontified t gptel response) 107 109 (fontified t src-block t font-lock-fontified t gptel response) 109 110 (fontified t src-block t font-lock-fontified t gptel response) 110 111 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 111 117 (fontified t src-block t font-lock-fontified t gptel response) 117 122 (fontified t src-block t font-lock-fontified t gptel response) 122 123 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 123 124 (fontified t src-block t font-lock-fontified t gptel response) 124 125 (fontified t src-block t font-lock-fontified t gptel response) 125 126 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 126 127 (fontified t src-block t font-lock-fontified t gptel response) 127 131 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 131 133 (fontified t src-block t font-lock-fontified t gptel response) 133 136 (fontified t src-block t font-lock-fontified t gptel response) 136 137 (fontified t src-block t font-lock-fontified t gptel response) 137 139 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 139 147 (fontified t src-block t font-lock-fontified t gptel response) 147 149 (fontified t src-block t font-lock-fontified t gptel response) 149 156 (fontified t src-block t font-lock-fontified t gptel response) 156 157 (fontified t src-block t font-lock-fontified t gptel response) 157 162 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 162 163 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 163 164 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 164 168 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 168 182 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 182 192 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 192 193 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 193 194 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 194 202 (fontified t src-block t font-lock-fontified t gptel response) 202 203 (fontified t src-block t font-lock-fontified t gptel response) 203 206 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 206 207 (fontified t src-block t font-lock-fontified t gptel response) 207 208 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 208 209 (fontified t src-block t font-lock-fontified t gptel response) 209 210 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 210 213 (fontified t src-block t font-lock-fontified t gptel response) 213 214 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 214 217 (fontified t src-block t font-lock-fontified t gptel response) 217 218 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 218 219 (fontified t src-block t font-lock-fontified t gptel response) 219 220 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 220 221 (fontified t src-block t font-lock-fontified t gptel response) 221 222 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 222 224 (fontified t src-block t font-lock-fontified t gptel response) 224 225 (fontified t src-block t font-lock-fontified t gptel response) 225 226 (fontified t src-block t font-lock-fontified t gptel response) 226 227 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 227 228 (fontified t src-block t font-lock-fontified t gptel response) 228 229 (fontified t src-block t font-lock-fontified t gptel response) 229 230 (fontified t src-block t font-lock-fontified t gptel response) 230 232 (fontified t src-block t font-lock-fontified t gptel response) 232 233 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 233 235 (fontified t src-block t font-lock-fontified t gptel response) 235 237 (fontified t src-block t font-lock-fontified t gptel response) 237 238 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 238 239 (fontified t src-block t font-lock-fontified t gptel response) 239 240 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 240 242 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 242 243 (fontified t src-block t font-lock-fontified t gptel response) 243 244 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 244 245 (fontified t src-block t font-lock-fontified t gptel response) 245 246 (fontified t src-block t font-lock-fontified t gptel response) 246 247 (fontified t src-block t font-lock-fontified t gptel response) 247 249 (fontified t src-block t font-lock-fontified t gptel response) 249 250 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 250 251 (fontified t src-block t font-lock-fontified t gptel response) 251 252 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 252 262 (fontified t src-block t font-lock-fontified t gptel response) 262 263 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 263 265 (fontified t src-block t font-lock-fontified t gptel response) 265 266 (fontified t src-block t font-lock-fontified t gptel response) 266 269 (fontified t src-block t font-lock-fontified t gptel response) 269 270 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 270 271 (fontified t src-block t font-lock-fontified t gptel response) 271 272 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 272 274 (fontified t src-block t font-lock-fontified t gptel response) 274 276 (fontified t src-block t font-lock-fontified t gptel response) 276 277 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 277 278 (fontified t src-block t font-lock-fontified t gptel response) 278 282 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 282 284 (fontified t src-block t font-lock-fontified t gptel response) 284 287 (fontified t src-block t font-lock-fontified t gptel response) 287 288 (fontified t src-block t font-lock-fontified t gptel response) 288 289 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 289 291 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 291 292 (fontified t src-block t font-lock-fontified t gptel response) 292 293 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 293 295 (fontified t src-block t font-lock-fontified t gptel response) 295 296 (fontified t src-block t font-lock-fontified t gptel response) 296 298 (fontified t src-block t font-lock-fontified t gptel response) 298 299 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 299 300 (fontified t src-block t font-lock-fontified t gptel response) 300 301 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 301 311 (fontified t src-block t font-lock-fontified t gptel response) 311 312 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 312 313 (fontified t src-block t font-lock-fontified t gptel response) 313 315 (fontified t src-block t font-lock-fontified t gptel response) 315 318 (fontified t src-block t font-lock-fontified t gptel response) 318 319 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 319 320 (fontified t src-block t font-lock-fontified t gptel response) 320 321 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 321 324 (fontified t src-block t font-lock-fontified t gptel response) 324 325 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 325 326 (fontified t src-block t font-lock-fontified t gptel response) 326 327 (fontified t src-block t font-lock-fontified t gptel response) 327 328 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 328 329 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response)) . 2473) (undo-tree-id5 . -329) 2802) nil (25889 23131 579678 38000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2472) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) 2473) nil (25889 23131 579676 853000) 0 nil])
([nil nil ((apply 6 2489 2631 undo--wrap-and-run-primitive-undo 2489 2631 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2579) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2539) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2497) 2637))) nil (25889 23131 579673 922000) 0 nil])
([nil nil ((nil fontified nil 2859 . 2860) (nil fontified nil 2858 . 2859) (nil fontified nil 2857 . 2858) (nil fontified nil 2856 . 2857) (nil fontified nil 2855 . 2856) (nil fontified nil 2852 . 2855) (nil fontified nil 2851 . 2852) (nil fontified nil 2850 . 2851) (nil fontified nil 2849 . 2850) (nil fontified nil 2846 . 2849) (nil fontified nil 2844 . 2846) (nil fontified nil 2843 . 2844) (nil fontified nil 2842 . 2843) (nil fontified nil 2832 . 2842) (nil fontified nil 2831 . 2832) (nil fontified nil 2830 . 2831) (nil fontified nil 2829 . 2830) (nil fontified nil 2827 . 2829) (nil fontified nil 2826 . 2827) (nil fontified nil 2824 . 2826) (nil fontified nil 2823 . 2824) (nil fontified nil 2822 . 2823) (nil fontified nil 2820 . 2822) (nil fontified nil 2819 . 2820) (nil fontified nil 2818 . 2819) (nil fontified nil 2815 . 2818) (nil fontified nil 2813 . 2815) (nil fontified nil 2809 . 2813) (nil fontified nil 2808 . 2809) (nil fontified nil 2807 . 2808) (nil fontified nil 2805 . 2807) (nil fontified nil 2803 . 2805) (nil fontified nil 2802 . 2803) (nil fontified nil 2801 . 2802) (nil fontified nil 2800 . 2801) (nil fontified nil 2797 . 2800) (nil fontified nil 2796 . 2797) (nil fontified nil 2794 . 2796) (nil fontified nil 2793 . 2794) (nil fontified nil 2783 . 2793) (nil fontified nil 2782 . 2783) (nil fontified nil 2781 . 2782) (nil fontified nil 2780 . 2781) (nil fontified nil 2778 . 2780) (nil fontified nil 2777 . 2778) (nil fontified nil 2776 . 2777) (nil fontified nil 2775 . 2776) (nil fontified nil 2774 . 2775) (nil fontified nil 2773 . 2774) (nil fontified nil 2771 . 2773) (nil fontified nil 2770 . 2771) (nil fontified nil 2769 . 2770) (nil fontified nil 2768 . 2769) (nil fontified nil 2766 . 2768) (nil fontified nil 2764 . 2766) (nil fontified nil 2763 . 2764) (nil fontified nil 2761 . 2763) (nil fontified nil 2760 . 2761) (nil fontified nil 2759 . 2760) (nil fontified nil 2758 . 2759) (nil fontified nil 2757 . 2758) (nil fontified nil 2756 . 2757) (nil fontified nil 2755 . 2756) (nil fontified nil 2753 . 2755) (nil fontified nil 2752 . 2753) (nil fontified nil 2751 . 2752) (nil fontified nil 2750 . 2751) (nil fontified nil 2749 . 2750) (nil fontified nil 2748 . 2749) (nil fontified nil 2745 . 2748) (nil fontified nil 2744 . 2745) (nil fontified nil 2741 . 2744) (nil fontified nil 2740 . 2741) (nil fontified nil 2739 . 2740) (nil fontified nil 2738 . 2739) (nil fontified nil 2737 . 2738) (nil fontified nil 2734 . 2737) (nil fontified nil 2733 . 2734) (nil fontified nil 2725 . 2733) (nil fontified nil 2724 . 2725) (nil fontified nil 2723 . 2724) (nil fontified nil 2713 . 2723) (nil fontified nil 2699 . 2713) (nil fontified nil 2695 . 2699) (nil fontified nil 2694 . 2695) (nil fontified nil 2693 . 2694) (nil fontified nil 2688 . 2693) (nil fontified nil 2687 . 2688) (nil fontified nil 2680 . 2687) (nil fontified nil 2678 . 2680) (nil fontified nil 2670 . 2678) (nil fontified nil 2668 . 2670) (nil fontified nil 2667 . 2668) (nil fontified nil 2664 . 2667) (nil fontified nil 2662 . 2664) (nil fontified nil 2658 . 2662) (nil fontified nil 2657 . 2658) (nil fontified nil 2656 . 2657) (nil fontified nil 2655 . 2656) (nil fontified nil 2654 . 2655) (nil fontified nil 2653 . 2654) (nil fontified nil 2648 . 2653) (nil fontified nil 2642 . 2648) (nil fontified nil 2641 . 2642) (nil fontified nil 2640 . 2641) (nil fontified nil 2638 . 2640) (nil fontified nil 2636 . 2638) (nil fontified nil 2635 . 2636) (nil fontified nil 2634 . 2635) (nil fontified nil 2632 . 2634) (nil fontified nil 2631 . 2632) (nil fontified nil 2630 . 2631) (nil fontified nil 2627 . 2630) (nil fontified nil 2626 . 2627) (nil fontified nil 2625 . 2626) (nil fontified nil 2624 . 2625) (nil fontified nil 2614 . 2624) (nil fontified nil 2602 . 2614) (nil fontified nil 2597 . 2602) (nil fontified nil 2596 . 2597) (nil fontified nil 2591 . 2596) (nil fontified nil 2583 . 2591) (nil fontified nil 2581 . 2583) (nil fontified nil 2573 . 2581) (nil fontified nil 2571 . 2573) (nil fontified nil 2570 . 2571) (nil fontified nil 2567 . 2570) (nil fontified nil 2565 . 2567) (nil fontified nil 2562 . 2565) (nil fontified nil 2555 . 2562) (nil fontified nil 2553 . 2555) (nil fontified nil 2552 . 2553) (nil fontified nil 2551 . 2552) (nil fontified nil 2547 . 2551) (nil fontified nil 2546 . 2547) (nil fontified nil 2545 . 2546) (nil fontified nil 2543 . 2545) (nil fontified nil 2531 . 2543) (2531 . 2860)) nil (25889 23131 579670 758000) 0 nil])
([nil nil ((2567 . 2583) (#("    " 0 3 (fontified t src-block t font-lock-fontified t gptel response) 3 4 (fontified t src-block t font-lock-fontified t gptel response)) . 2567)) nil (25889 23131 579655 711000) 0 nil])
([nil nil ((2595 . 2615) (#("        " 0 8 (fontified t src-block t font-lock-fontified t gptel response)) . 2595) 2611) nil (25889 23131 579654 486000) 0 nil])
([nil nil ((2651 . 2671) (#("    " 0 3 (fontified t src-block t font-lock-fontified t gptel response) 3 4 (fontified t src-block t font-lock-fontified t gptel response)) . 2651)) nil (25889 23131 579653 723000) 0 nil])
([nil nil ((2698 . 2714)) nil (25889 23131 579653 156000) 0 nil])
([nil nil ((2720 . 2740) (#("    " 0 3 (fontified t src-block t font-lock-fontified t gptel response) 3 4 (fontified t src-block t font-lock-fontified t gptel response)) . 2720) 2735) nil (25889 23131 579652 282000) 0 nil])
([nil nil ((2752 . 2776) (#("        " 0 7 (fontified t src-block t font-lock-fontified t gptel response) 7 8 (fontified t src-block t font-lock-fontified t gptel response)) . 2752)) nil (25889 23131 579650 903000) 0 nil])
([nil nil ((2822 . 2846)) nil (25889 23131 579650 19000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2842) (undo-tree-id1 . -4) 2846) nil (25889 23131 580349 919000) 0 nil])
([nil nil ((2878 . 2898)) nil (25889 23243 197562 507000) 0 nil] [nil nil ((apply yas--snippet-revive 2897 2904 #s(yas--snippet nil nil #s(yas--exit #<marker at 4505 in network.py> nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit #<marker at 4505 in network.py> nil) 0 nil nil nil nil)) (2897 . 2904) (#("r" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 2897) (undo-tree-id0 . -1) 2898) ((2897 . 2898) (#("return " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 2897) (undo-tree-id8 . -7) (undo-tree-id9 . -7) (undo-tree-id10 . -7) (undo-tree-id11 . -7)) (25889 23131 579644 383000) 0 nil])
([nil nil ((2937 . 2949)) nil (25889 23243 197561 884000) 0 nil])
nil
([nil nil ((2955 . 2971) (#("    " 0 3 (fontified t src-block t font-lock-fontified t gptel response) 3 4 (fontified t src-block t font-lock-fontified t gptel response)) . 2955)) nil (25889 23243 197561 292000) 0 nil])
([nil nil ((3012 . 3028) (#("            " 0 8 (fontified t) 8 12 (fontified t)) . 3012)) nil (25889 23243 197560 616000) 0 nil])
([nil nil ((3072 . 3076)) nil (25889 23243 197559 873000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3072) (undo-tree-id186 . -4) 3076) nil (25889 23243 197559 225000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3068) (undo-tree-id185 . -4) 3072) nil (25889 23243 197558 42000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3064) (undo-tree-id184 . -4) 3068) nil (25889 23243 197556 339000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3060) (undo-tree-id183 . -4) 3064) nil (25889 23243 197555 26000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3056) (undo-tree-id182 . -4) 3060) nil (25889 23243 197553 535000) 0 nil])
([nil nil ((3056 . 3076)) nil (25889 23243 197552 373000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2547) (#("e" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2547) (#("p" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2547) (#("s" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2547)) nil (25889 23243 197551 639000) 0 nil])
([nil nil ((2547 . 2550)) nil (25889 23243 197551 12000) 0 nil])
([nil nil ((#("                if verbose:
                    print('with spec cosine structure')
                    Pij = Pij / torch.sqrt(Kb)
                else:
" 0 16 (fontified t src-block t font-lock-fontified t gptel response) 16 18 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 18 26 (fontified t src-block t font-lock-fontified t gptel response) 26 28 (fontified t src-block t font-lock-fontified t gptel response) 28 48 (fontified t src-block t font-lock-fontified t gptel response) 48 53 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 54 59 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 59 71 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 71 81 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 81 82 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 82 83 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 83 84 (fontified t src-block t font-lock-fontified t gptel response) 84 104 (fontified t src-block t font-lock-fontified t gptel response) 104 105 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 105 107 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 107 108 (fontified t src-block t font-lock-fontified t gptel response) 108 109 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 109 111 (fontified t src-block t font-lock-fontified t gptel response) 111 113 (fontified t src-block t font-lock-fontified t gptel response) 113 114 (fontified t src-block t font-lock-fontified t gptel response) 114 115 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 115 121 (fontified t src-block t font-lock-fontified t gptel response) 121 126 (fontified t src-block t font-lock-fontified t gptel response) 126 127 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 127 128 (fontified t src-block t font-lock-fontified t gptel response) 128 129 (fontified t src-block t font-lock-fontified t gptel response) 129 130 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 130 131 (fontified t src-block t font-lock-fontified t gptel response) 131 147 (fontified t src-block t font-lock-fontified t gptel response) 147 151 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 151 153 (fontified t src-block t font-lock-fontified t gptel response)) . 2566) (undo-tree-id181 . -153) 2719) nil (25889 23243 197550 171000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2582) 2566) nil (25889 23243 197548 595000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2614) 2610) nil (25889 23243 197547 958000) 0 nil])
([nil nil ((2585 . 2590)) nil (25889 23243 197547 510000) 0 nil])
([nil nil ((2664 . 2684)) nil (25889 23243 197547 118000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2701) (undo-tree-id180 . -4) 2705) nil (25889 23243 197546 452000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2753)) nil (25889 23243 197545 263000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2732) (undo-tree-id177 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2733) (undo-tree-id178 . -1) (#("j" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2734) (undo-tree-id179 . -1) 2735) nil (25889 23243 197544 98000) 0 nil])
([nil nil ((2732 . 2737)) nil (25889 23243 197540 149000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2736) (undo-tree-id176 . -1) 2737) nil (25889 23243 197539 427000) 0 nil])
([nil nil ((2742 . 2748) (2741 . 2743) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -2741) (2736 . 2742)) nil (25889 23243 197538 62000) 0 nil])
([nil nil ((#("è" 0 1 (fontified t)) . -2747) (undo-tree-id175 . -1) 2748) nil (25889 23243 197536 964000) 0 nil])
([nil nil ((2747 . 2752)) nil (25889 23243 197535 893000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2745) (undo-tree-id173 . -1) (#("a" 0 1 (fontified t)) . -2746) (undo-tree-id174 . -1) 2747) nil (25889 23243 197535 188000) 0 nil])
([nil nil ((2745 . 2748)) nil (25889 23243 197532 746000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -2746) (undo-tree-id172 . -1) 2747) nil (25889 23243 197532 183000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response)) . -2783) (undo-tree-id171 . -1) 2784) nil (25889 23243 197530 721000) 0 nil])
([nil nil ((2783 . 2785) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -2783) (2783 . 2784)) nil (25889 23243 197529 244000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2784)) nil (25889 23243 197528 278000) 0 nil])
([nil nil ((#("                if 'cos' in self.STRUCTURE:
                    Pij = ( 1.0 + 2.0 * torch.cos(theta_diff) )
" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 24 (face font-lock-string-face fontified t) 24 25 (fontified t) 25 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 44 (fontified t) 44 64 (fontified t) 64 67 (face font-lock-variable-name-face fontified t) 67 68 (fontified t) 68 69 (face font-lock-operator-face fontified t) 69 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-1-face) fontified t) 71 76 (fontified t) 76 77 (face font-lock-operator-face fontified t) 77 82 (fontified t) 82 83 (face font-lock-operator-face fontified t) 83 93 (fontified t) 93 94 (face (rainbow-delimiters-depth-2-face) fontified t) 94 104 (fontified t) 104 105 (face (rainbow-delimiters-depth-2-face) fontified t) 105 106 (fontified t) 106 107 (face (rainbow-delimiters-depth-1-face) fontified t) 107 108 (fontified t)) . 2885) (undo-tree-id170 . -108) 2993) nil (25889 23243 197527 328000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2656) (undo-tree-id162 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -2657) (undo-tree-id163 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2658) (undo-tree-id164 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2659) (undo-tree-id165 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2660) (undo-tree-id166 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2661) (undo-tree-id167 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2662) (undo-tree-id168 . -1) (#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2663) (undo-tree-id169 . -1) 2664) nil (25889 23243 197524 659000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2641 . 2642) (nil fontified nil 2641 . 2642) (nil fontified nil 2621 . 2641) (nil fontified nil 2620 . 2621) (nil fontified nil 2619 . 2620) (nil fontified nil 2609 . 2619) (nil fontified nil 2595 . 2609) (nil fontified nil 2591 . 2595) (nil fontified nil 2590 . 2591) (nil fontified nil 2589 . 2590) (nil fontified nil 2584 . 2589) (nil fontified nil 2564 . 2584) (nil fontified nil 2562 . 2564) (nil fontified nil 2554 . 2562) (nil fontified nil 2550 . 2554) (nil fontified nil 2549 . 2550) (nil fontified nil 2547 . 2549) (nil fontified nil 2531 . 2547) (2531 . 2642)) nil (25889 23243 197517 417000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2543) 2531) nil (25889 23243 197514 566000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2576) 2572) nil (25889 23243 198023 692000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2613) (undo-tree-id219 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2614) (undo-tree-id220 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -2615) (undo-tree-id221 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2616) (undo-tree-id222 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2617) (undo-tree-id223 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2618) (undo-tree-id224 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2619) (undo-tree-id225 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2620) (undo-tree-id226 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2621) (undo-tree-id227 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2622) (undo-tree-id228 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2623) (undo-tree-id229 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2624) (undo-tree-id230 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2625) (undo-tree-id231 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2626) (undo-tree-id232 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2627) (undo-tree-id233 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2628) (undo-tree-id234 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2629) (undo-tree-id235 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2630) (undo-tree-id236 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2631) (undo-tree-id237 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2632) (undo-tree-id238 . -1) 2633) nil (25889 23262 528928 155000) 0 nil] [nil nil ((#("structure')                    " 0 9 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 9 10 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 11 31 (fontified t src-block t font-lock-fontified t gptel response)) . -2602) (undo-tree-id12 . -31) (undo-tree-id13 . -31) (undo-tree-id14 . -31) (undo-tree-id15 . -31) (undo-tree-id16 . -31) (undo-tree-id17 . -31) (undo-tree-id18 . -31) (undo-tree-id19 . -31) (undo-tree-id20 . -31) (undo-tree-id21 . -31) (undo-tree-id22 . -31) (undo-tree-id23 . -31) (undo-tree-id24 . -31) (undo-tree-id25 . -31) (undo-tree-id26 . -31) (undo-tree-id27 . -31) (undo-tree-id28 . -31) (undo-tree-id29 . -31) (undo-tree-id30 . -31) (undo-tree-id31 . -31) (undo-tree-id32 . -31) (undo-tree-id33 . -31) (undo-tree-id34 . -31) (undo-tree-id35 . -31) (undo-tree-id36 . -31) (undo-tree-id37 . -30) (undo-tree-id38 . -31) (undo-tree-id39 . -30) (undo-tree-id40 . -30) (undo-tree-id41 . -30) (undo-tree-id42 . -30) (undo-tree-id43 . -30) (undo-tree-id44 . -30) (undo-tree-id45 . -30) (undo-tree-id46 . -30) (undo-tree-id47 . -30) (undo-tree-id48 . -30) (undo-tree-id49 . -30) (undo-tree-id50 . -30) (undo-tree-id51 . -30) (undo-tree-id52 . -30) (undo-tree-id53 . -30) (undo-tree-id54 . -30) (undo-tree-id55 . -30) (undo-tree-id56 . -30) (undo-tree-id57 . -30) (undo-tree-id58 . -30) (undo-tree-id59 . -30) (undo-tree-id60 . -30) (undo-tree-id61 . -30) (undo-tree-id62 . -30) (undo-tree-id63 . -30) (undo-tree-id64 . -30) (undo-tree-id65 . -30) (undo-tree-id66 . -30) (undo-tree-id67 . -30) (undo-tree-id68 . -29) (undo-tree-id69 . -30) (undo-tree-id70 . -29) (undo-tree-id71 . -29) (undo-tree-id72 . -29) (undo-tree-id73 . -29) (undo-tree-id74 . -29) (undo-tree-id75 . -29) (undo-tree-id76 . -29) (undo-tree-id77 . -29) (undo-tree-id78 . -29) (undo-tree-id79 . -29) (undo-tree-id80 . -29) (undo-tree-id81 . -29) (undo-tree-id82 . -29) (undo-tree-id83 . -29) (undo-tree-id84 . -29) (undo-tree-id85 . -28) (undo-tree-id86 . -29) (undo-tree-id87 . -28) (undo-tree-id88 . -28) (undo-tree-id89 . -28) (undo-tree-id90 . -28) (undo-tree-id91 . -28) (undo-tree-id92 . -28) (undo-tree-id93 . -28) (undo-tree-id94 . -28) (undo-tree-id95 . -28) (undo-tree-id96 . -28) (undo-tree-id97 . -28) (undo-tree-id98 . -28) (undo-tree-id99 . -28) (undo-tree-id100 . -28) (undo-tree-id101 . -28) (undo-tree-id102 . -27) (undo-tree-id103 . -28) (undo-tree-id104 . -27) (undo-tree-id105 . -27) (undo-tree-id106 . -27) (undo-tree-id107 . -27) (undo-tree-id108 . -27) (undo-tree-id109 . -27) (undo-tree-id110 . -27) (undo-tree-id111 . -27) (undo-tree-id112 . -27) (undo-tree-id113 . -27) (undo-tree-id114 . -27) (undo-tree-id115 . -27) (undo-tree-id116 . -27) (undo-tree-id117 . -27) (undo-tree-id118 . -27) (undo-tree-id119 . -26) (undo-tree-id120 . -27) (undo-tree-id121 . -26) (undo-tree-id122 . -26) (undo-tree-id123 . -26) (undo-tree-id124 . -26) (undo-tree-id125 . -26) (undo-tree-id126 . -26) (undo-tree-id127 . -26) (undo-tree-id128 . -26) (undo-tree-id129 . -26) (undo-tree-id130 . -26) (undo-tree-id131 . -26) (undo-tree-id132 . -26) (undo-tree-id133 . -26) (undo-tree-id134 . -26) (undo-tree-id135 . -26) (undo-tree-id136 . -31) (undo-tree-id137 . -26) (undo-tree-id138 . -31) (undo-tree-id139 . -31) (undo-tree-id140 . -31) (undo-tree-id141 . -31) (undo-tree-id142 . -31) (undo-tree-id143 . -31) (undo-tree-id144 . -31) (undo-tree-id145 . -31) (undo-tree-id146 . -31) (undo-tree-id147 . -31) (undo-tree-id148 . -31) (undo-tree-id149 . -31) (undo-tree-id150 . -31) (undo-tree-id151 . -31) (undo-tree-id152 . -31) (undo-tree-id153 . -31) (undo-tree-id154 . -31) (undo-tree-id155 . -31) (undo-tree-id156 . -31) (undo-tree-id157 . -31) (undo-tree-id158 . -31) (undo-tree-id159 . -31) (undo-tree-id160 . -31) (undo-tree-id161 . -31) 2633) ((2602 . 2633)) (25889 23243 197506 436000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2610) (undo-tree-id218 . -1) 2611) nil (25889 23262 528909 849000) 0 nil])
nil
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2589) (undo-tree-id197 . -1) (#("r" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2590) (undo-tree-id198 . -1) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2591) (undo-tree-id199 . -1) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2592) (undo-tree-id200 . -1) (#("g" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2593) (undo-tree-id201 . -1) (#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2594) (undo-tree-id202 . -1) (#("c" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2595) (undo-tree-id203 . -1) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2596) (undo-tree-id204 . -1) (#("s" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2597) (undo-tree-id205 . -1) (#("i" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2598) (undo-tree-id206 . -1) (#("n" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2599) (undo-tree-id207 . -1) (#("e" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2600) (undo-tree-id208 . -1) (#(" " 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2601) (undo-tree-id209 . -1) (#("s" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2602) (undo-tree-id210 . -1) (#("t" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2603) (undo-tree-id211 . -1) (#("r" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2604) (undo-tree-id212 . -1) (#("u" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2605) (undo-tree-id213 . -1) (#("c" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2606) (undo-tree-id214 . -1) (#("t" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2607) (undo-tree-id215 . -1) (#("u" 0 1 (face font-lock-string-face fontified nil src-block t font-lock-fontified t gptel response)) . -2608) (undo-tree-id216 . -1) (#("r" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2609) (undo-tree-id217 . -1) 2610) nil (25889 23262 528904 747000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2583) (undo-tree-id191 . -1) (#("i" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2584) (undo-tree-id192 . -1) (#("t" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2585) (undo-tree-id193 . -1) (#("h" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2586) (undo-tree-id194 . -1) (#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2587) (undo-tree-id195 . -1) (#("s" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2588) (undo-tree-id196 . -1) 2589) nil (25889 23262 528874 587000) 0 nil])
([nil nil ((2583 . 2588)) nil (25889 23262 528847 337000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2585) (undo-tree-id188 . -1) (#("r" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2586) (undo-tree-id189 . -1) (#("e" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2587) (undo-tree-id190 . -1) 2588) nil (25889 23262 528844 519000) 0 nil])
([nil nil ((2585 . 2597)) nil (25889 23262 528837 807000) 0 nil])
([nil nil ((2597 . 2606)) nil (25889 23262 528836 724000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2605) (undo-tree-id187 . -1) 2606) nil (25889 23262 528835 186000) 0 nil])
([nil nil ((2605 . 2608)) nil (25889 23262 528827 51000) 0 nil])
([nil nil ((2608 . 2609)) nil (25889 23262 528822 972000) 0 nil])
([nil nil ((nil fontified nil 2336 . 2337) (nil fontified nil 2335 . 2336) (nil fontified nil 2334 . 2335) (nil fontified nil 2307 . 2334) (nil fontified nil 2306 . 2307) (nil fontified nil 2301 . 2306) (nil fontified nil 2285 . 2301) (2285 . 2337) (t 25889 23262 557706 847000)) nil (25889 23314 67001 610000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2297) 2285) nil (25889 23314 67000 323000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2313 . 2314) (nil fontified nil 2312 . 2314) (nil fontified nil 2304 . 2312) (nil fontified nil 2300 . 2304) (nil fontified nil 2299 . 2300) (nil fontified nil 2297 . 2299) (nil fontified nil 2285 . 2297) (2285 . 2314)) nil (25889 23314 66999 685000) 0 nil])
([nil nil ((2314 . 2330) (#("            " 0 12 (fontified t src-block t font-lock-fontified t gptel response)) . 2314)) nil (25889 23314 66998 701000) 0 nil])
([nil nil ((#("Sparse" 0 6 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2337)) nil (25889 23314 66998 129000) 0 nil])
([nil nil ((2337 . 2340)) nil (25889 23314 66997 739000) 0 nil])
([nil nil ((#("k" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2338) (undo-tree-id270 . -1) (#("k" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2339) (undo-tree-id271 . -1) 2340) nil (25889 23314 66997 16000) 0 nil])
([nil nil ((2338 . 2342)) nil (25889 23314 66994 970000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2341) (undo-tree-id269 . -1) 2342) nil (25889 23314 66994 315000) 0 nil])
([nil nil ((2341 . 2344)) nil (25889 23314 66993 279000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2342) (undo-tree-id267 . -1) (#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2343) (undo-tree-id268 . -1) 2344) nil (25889 23314 66992 428000) 0 nil])
([nil nil ((2342 . 2347)) nil (25889 23314 66990 641000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("t" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("c" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("e" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("c" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("m" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("d" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("a" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("r" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348)) nil (25889 23314 66988 777000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("s" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348)) nil (25889 23314 66986 667000) 0 nil])
([nil nil ((2348 . 2355)) nil (25889 23314 66986 55000) 0 nil])
([nil nil ((#("network" 0 7 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2348)) nil (25889 23314 66985 537000) 0 nil])
([nil nil ((2348 . 2360)) nil (25889 23314 66985 29000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2683) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2683) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . 2683)) nil (25889 23314 66984 298000) 0 nil])
([nil nil ((2683 . 2687)) nil (25889 23314 66983 589000) 0 nil])
([nil nil ((2360 . 2361)) nil (25889 23314 66982 753000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2481 . 2482) (nil fontified nil 2481 . 2482) (nil fontified nil 2461 . 2481) (nil fontified nil 2460 . 2461) (nil fontified nil 2459 . 2460) (nil fontified nil 2449 . 2459) (nil fontified nil 2435 . 2449) (nil fontified nil 2431 . 2435) (nil fontified nil 2430 . 2431) (nil fontified nil 2429 . 2430) (nil fontified nil 2424 . 2429) (nil fontified nil 2404 . 2424) (2404 . 2482)) nil (25889 23314 66981 988000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2420) 2404) nil (25889 23314 66979 905000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2432) (undo-tree-id259 . -1) (#("t" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2433) (undo-tree-id260 . -1) (#("r" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2434) (undo-tree-id261 . -1) (#("o" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2435) (undo-tree-id262 . -1) (#("n" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2436) (undo-tree-id263 . -1) (#("g" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2437) (undo-tree-id264 . -1) (#(" " 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2438) (undo-tree-id265 . -1) (#("c" 0 1 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response)) . -2439) (undo-tree-id266 . -1) 2440) nil (25889 23314 66978 459000) 0 nil])
([nil nil ((2432 . 2433)) nil (25889 23314 66972 337000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2450) (undo-tree-id239 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2451) (undo-tree-id240 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2452) (undo-tree-id241 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2453) (undo-tree-id242 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2454) (undo-tree-id243 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2455) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2456) (undo-tree-id245 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2457) (undo-tree-id246 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2458) (undo-tree-id247 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2459) (undo-tree-id248 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2460) (undo-tree-id249 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2461) (undo-tree-id250 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2462) (undo-tree-id251 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2463) (undo-tree-id252 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2464) (undo-tree-id253 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2465) (undo-tree-id254 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2466) (undo-tree-id255 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2467) (undo-tree-id256 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2468) (undo-tree-id257 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2469) (undo-tree-id258 . -1) 2470) nil (25889 23314 66969 136000) 0 nil])
([nil nil ((nil fontified nil 2432 . 2433) (nil fontified nil 2431 . 2432) (nil fontified nil 2423 . 2431) (nil fontified nil 2419 . 2423) (nil fontified nil 2418 . 2419) (nil fontified nil 2416 . 2418) (nil fontified nil 2404 . 2416) (2404 . 2433)) nil (25889 23314 66948 27000) 0 nil])
([nil nil ((2404 . 2420) (#("            " 0 12 (fontified t src-block t font-lock-fontified t gptel response)) . 2404)) nil (25889 23314 66946 558000) 0 nil])
([nil nil ((2453 . 2457)) nil (25889 23314 66942 9000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1875) (undo-tree-id272 . -1) 1876 (t 25889 23314 86167 237000)) nil (25889 23331 122590 204000) 0 nil])
([nil nil ((2555 . 2560)) nil (25889 23331 122579 118000) 0 nil])
([nil nil ((2972 . 2975) (t 25889 23331 135089 128000)) nil (25889 23437 897432 616000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2974) (undo-tree-id450 . -1) 2975) nil (25889 23437 897431 196000) 0 nil])
([nil nil ((2973 . 2978)) nil (25889 23437 897428 439000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2973) (undo-tree-id445 . -1) (#("a" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2974) (undo-tree-id446 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2975) (undo-tree-id447 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2976) (undo-tree-id448 . -1) (#("a" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2977) (undo-tree-id449 . -1) 2978) nil (25889 23437 897425 69000) 0 nil])
([nil nil ((2973 . 2977)) nil (25889 23437 897412 535000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2975) (undo-tree-id443 . -1) (#("f" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2976) (undo-tree-id444 . -1) 2977) nil (25889 23437 897410 502000) 0 nil])
([nil nil ((2975 . 2984)) nil (25889 23437 897406 57000) 0 nil])
([nil nil ((1832 . 1840) (#("        " 0 8 (fontified nil)) . 1831) (undo-tree-id442 . -8) (1839 . 1840)) nil (25889 23437 897405 284000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1856) (1855 . 1856) (1854 . 1856) (#("[" 0 1 (fontified nil)) . -1854) (1840 . 1855)) nil (25889 23437 897403 868000) 0 nil])
([nil nil ((1855 . 1856)) nil (25889 23437 897402 664000) 0 nil])
([nil nil ((1857 . 1866)) nil (25889 23437 897401 964000) 0 nil])
([nil nil ((1866 . 1880)) nil (25889 23437 897401 176000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1879) (undo-tree-id441 . -1) 1880) nil (25889 23437 897400 395000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1882) (1881 . 1882) (1880 . 1882) (#("[" 0 1 (fontified nil)) . -1880) (1879 . 1881)) nil (25889 23437 897398 856000) 0 nil])
([nil nil ((1881 . 1882)) nil (25889 23437 897398 107000) 0 nil])
([nil nil ((1883 . 1892)) nil (25889 23437 897397 713000) 0 nil])
([nil nil ((#("Wij" 0 3 (fontified t)) . 1977)) nil (25889 23437 897397 186000) 0 nil])
([nil nil ((#(".shape" 0 6 (fontified t)) . 1977)) nil (25889 23437 897396 639000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . 1977) (#("0" 0 1 (fontified t)) . 1977) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face))) . 1977)) nil (25889 23437 897395 788000) 0 nil])
([nil nil ((1977 . 1979)) nil (25889 23437 897395 13000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2015) (undo-tree-id430 . -1) (#("i" 0 1 (fontified nil)) . -2016) (undo-tree-id431 . -1) (#("j" 0 1 (fontified nil)) . -2017) (undo-tree-id432 . -1) (#("." 0 1 (fontified nil)) . -2018) (undo-tree-id433 . -1) (#("s" 0 1 (fontified t)) . -2019) (undo-tree-id434 . -1) (#("h" 0 1 (fontified t)) . -2020) (undo-tree-id435 . -1) (#("a" 0 1 (fontified t)) . -2021) (undo-tree-id436 . -1) (#("p" 0 1 (fontified t)) . -2022) (undo-tree-id437 . -1) (#("e" 0 1 (fontified t)) . -2023) (undo-tree-id438 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2024) (undo-tree-id439 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 2025) (#("0" 0 1 (fontified t)) . -2025) (undo-tree-id440 . -1) 2026) nil (25889 23437 897392 428000) 0 nil])
([nil nil ((2015 . 2017)) nil (25889 23437 897383 488000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2113) (undo-tree-id418 . -1) (#("i" 0 1 (fontified t)) . -2114) (undo-tree-id419 . -1) (#("j" 0 1 (fontified t)) . -2115) (undo-tree-id420 . -1) (#("." 0 1 (fontified t)) . -2116) (undo-tree-id421 . -1) (#("s" 0 1 (fontified t)) . -2117) (undo-tree-id422 . -1) (#("h" 0 1 (fontified t)) . -2118) (undo-tree-id423 . -1) (#("a" 0 1 (fontified t)) . -2119) (undo-tree-id424 . -1) (#("p" 0 1 (fontified nil)) . -2120) (undo-tree-id425 . -1) (#("e" 0 1 (fontified nil)) . -2121) (undo-tree-id426 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2122) (undo-tree-id427 . -1) (#("1" 0 1 (fontified t)) . -2123) (undo-tree-id428 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2124) (undo-tree-id429 . -1) 2125) nil (25889 23437 897381 271000) 0 nil])
([nil nil ((2113 . 2115)) nil (25889 23437 897373 348000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2205) (undo-tree-id406 . -1) (#("i" 0 1 (fontified t)) . -2206) (undo-tree-id407 . -1) (#("j" 0 1 (fontified t)) . -2207) (undo-tree-id408 . -1) (#("." 0 1 (fontified t)) . -2208) (undo-tree-id409 . -1) (#("s" 0 1 (fontified t)) . -2209) (undo-tree-id410 . -1) (#("h" 0 1 (fontified nil)) . -2210) (undo-tree-id411 . -1) (#("a" 0 1 (fontified nil)) . -2211) (undo-tree-id412 . -1) (#("p" 0 1 (fontified nil)) . -2212) (undo-tree-id413 . -1) (#("e" 0 1 (fontified nil)) . -2213) (undo-tree-id414 . -1) (#("[" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face))) . -2214) (undo-tree-id415 . -1) ("1" . -2215) (undo-tree-id416 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2216) (undo-tree-id417 . -1) 2217) nil (25889 23437 897371 48000) 0 nil])
([nil nil ((2205 . 2206)) nil (25889 23437 897360 983000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -2205) (undo-tree-id405 . -1) 2206) nil (25889 23437 897360 423000) 0 nil])
([nil nil ((2205 . 2207)) nil (25889 23437 897359 411000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2177) (undo-tree-id393 . -1) (#("i" 0 1 (fontified t)) . -2178) (undo-tree-id394 . -1) (#("j" 0 1 (fontified t)) . -2179) (undo-tree-id395 . -1) (#("." 0 1 (fontified t)) . -2180) (undo-tree-id396 . -1) (#("s" 0 1 (fontified t)) . -2181) (undo-tree-id397 . -1) (#("h" 0 1 (fontified t)) . -2182) (undo-tree-id398 . -1) (#("a" 0 1 (fontified t)) . -2183) (undo-tree-id399 . -1) (#("p" 0 1 (fontified t)) . -2184) (undo-tree-id400 . -1) (#("e" 0 1 (fontified t)) . -2185) (undo-tree-id401 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2186) (undo-tree-id402 . -1) (#("0" 0 1 (fontified t)) . -2187) (undo-tree-id403 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -2188) (undo-tree-id404 . -1) 2189) nil (25889 23437 897357 26000) 0 nil])
([nil nil ((2177 . 2178)) nil (25889 23437 897349 99000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t)) . -2177) (undo-tree-id392 . -1) 2178) nil (25889 23437 897348 199000) 0 nil])
([nil nil ((2177 . 2179)) nil (25889 23437 897346 754000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2065) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (#("i" 0 1 (fontified t)) . -2066) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (#("j" 0 1 (fontified t)) . -2067) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("." 0 1 (fontified t)) . -2068) (undo-tree-id383 . -1) (#("s" 0 1 (fontified t)) . -2069) (undo-tree-id384 . -1) (#("h" 0 1 (fontified t)) . -2070) (undo-tree-id385 . -1) (#("a" 0 1 (fontified t)) . -2071) (undo-tree-id386 . -1) (#("p" 0 1 (fontified t)) . -2072) (undo-tree-id387 . -1) (#("e" 0 1 (fontified t)) . -2073) (undo-tree-id388 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2074) (undo-tree-id389 . -1) (#("1" 0 1 (fontified t)) . -2075) (undo-tree-id390 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2076) (undo-tree-id391 . -1) 2077) nil (25889 23437 897341 47000) 0 nil])
([nil nil ((2065 . 2067)) nil (25889 23437 897193 683000) 0 nil])
([nil nil ((2233 . 2245) (t 25889 23437 914218 94000)) nil (25889 23911 467446 328000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2241) (undo-tree-id570 . -4) 2245) nil (25889 23911 467445 424000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2571) (undo-tree-id558 . -1) (#("i" 0 1 (fontified t)) . -2572) (undo-tree-id559 . -1) (#("j" 0 1 (fontified t)) . -2573) (undo-tree-id560 . -1) (#("." 0 1 (fontified nil)) . -2574) (undo-tree-id561 . -1) (#("s" 0 1 (fontified nil)) . -2575) (undo-tree-id562 . -1) (#("h" 0 1 (fontified nil)) . -2576) (undo-tree-id563 . -1) (#("a" 0 1 (fontified t)) . -2577) (undo-tree-id564 . -1) (#("p" 0 1 (fontified t)) . -2578) (undo-tree-id565 . -1) (#("e" 0 1 (fontified t)) . -2579) (undo-tree-id566 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2580) (undo-tree-id567 . -1) (#("1" 0 1 (fontified t)) . -2581) (undo-tree-id568 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2582) (undo-tree-id569 . -1) 2583) nil (25889 23911 467442 594000) 0 nil])
([nil nil ((2571 . 2573)) nil (25889 23911 467434 391000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -2617) (undo-tree-id546 . -1) (#("i" 0 1 (fontified t)) . -2618) (undo-tree-id547 . -1) (#("j" 0 1 (fontified t)) . -2619) (undo-tree-id548 . -1) (#("." 0 1 (fontified t)) . -2620) (undo-tree-id549 . -1) (#("s" 0 1 (fontified t)) . -2621) (undo-tree-id550 . -1) (#("h" 0 1 (fontified nil)) . -2622) (undo-tree-id551 . -1) (#("a" 0 1 (fontified nil)) . -2623) (undo-tree-id552 . -1) (#("p" 0 1 (fontified nil)) . -2624) (undo-tree-id553 . -1) (#("e" 0 1 (fontified nil)) . -2625) (undo-tree-id554 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2626) (undo-tree-id555 . -1) (#("1" 0 1 (fontified t)) . -2627) (undo-tree-id556 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2628) (undo-tree-id557 . -1) 2629) nil (25889 23911 467431 676000) 0 nil])
([nil nil ((2615 . 2618)) nil (25889 23911 467422 57000) 0 nil])
([nil nil ((2620 . 2622)) nil (25889 23911 467421 737000) 0 nil])
([nil nil ((1828 . 1834)) nil (25889 23911 467421 281000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1833) (undo-tree-id545 . -1) 1834) nil (25889 23911 467420 841000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1830) (undo-tree-id544 . -1) 1831) nil (25889 23911 467419 699000) 0 nil])
([nil nil ((1830 . 1836)) nil (25889 23911 467418 758000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1835) (undo-tree-id543 . -1) 1836) nil (25889 23911 467418 261000) 0 nil])
([nil nil ((1836 . 1842)) nil (25889 23911 467417 300000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1842) (undo-tree-id542 . -1) 1843) nil (25889 23911 467416 766000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 2983) (2982 . 2983) (2981 . 2983) (#("[" 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -2981) (2981 . 2982)) nil (25889 23911 467415 395000) 0 nil])
([nil nil ((2982 . 2989)) nil (25889 23911 467414 644000) 0 nil])
([nil nil ((#("," 0 1 (fontified nil)) . -2987) (undo-tree-id540 . -1) (#(" " 0 1 (fontified t)) . -2988) (undo-tree-id541 . -1) 2989) nil (25889 23911 467413 816000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 2990) (2989 . 2990) (2988 . 2990) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -2988) (2988 . 2989)) nil (25889 23911 467411 668000) 0 nil])
([nil nil ((2989 . 2994)) nil (25889 23911 467411 17000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -2525) (undo-tree-id539 . -1) 2526) nil (25889 23911 467410 487000) 0 nil])
([nil nil ((2525 . 2527)) nil (25889 23911 467409 49000) 0 nil])
([nil nil ((2524 . 2529)) nil (25889 23911 467408 317000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 2534) (2533 . 2534) (2532 . 2534) (#("[" 0 1 (fontified nil)) . -2532) (2532 . 2533)) nil (25889 23911 467407 546000) 0 nil])
([nil nil ((2533 . 2539)) nil (25889 23911 467406 555000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2538) (undo-tree-id538 . -1) 2539) nil (25889 23911 467406 81000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2541) (2540 . 2541) (2539 . 2541) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2539) (2539 . 2540)) nil (25889 23911 467404 337000) 0 nil])
([nil nil ((2540 . 2545)) nil (25889 23911 467403 321000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -2562) (undo-tree-id536 . -1) (#("1" 0 1 (fontified t)) . -2563) (undo-tree-id537 . -1) 2564) nil (25889 23911 467401 945000) 0 nil])
([nil nil ((2562 . 2567)) nil (25889 23911 467399 892000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -2566) (undo-tree-id535 . -1) 2567) nil (25889 23911 467399 337000) 0 nil])
([nil nil ((2566 . 2567)) nil (25889 23911 467397 472000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2580 . 2581) (nil fontified nil 2580 . 2581) (nil fontified nil 2575 . 2580) (nil fontified nil 2574 . 2575) (nil fontified nil 2573 . 2574) (nil fontified nil 2568 . 2573) (nil fontified nil 2567 . 2568) (2567 . 2581)) nil (25889 23911 467396 912000) 0 nil])
([nil nil ((2562 . 2567)) nil (25889 23911 467396 34000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 2670) (#("." 0 1 (fontified t)) . 2670) (#("1" 0 1 (fontified t)) . 2670)) nil (25889 23911 467395 349000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2691 . 2692) (nil fontified nil 2691 . 2692) (nil fontified nil 2686 . 2691) (nil fontified nil 2685 . 2686) (nil fontified nil 2684 . 2685) (nil fontified nil 2679 . 2684) (nil fontified nil 2678 . 2679) (nil fontified nil 2674 . 2678) (nil fontified nil 2670 . 2674) (2670 . 2692)) nil (25889 23911 467394 393000) 0 nil])
([nil nil ((3001 . 3005) 3000) nil (25889 23911 467393 126000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -3001) (undo-tree-id534 . -4) 3005) nil (25889 23911 467392 331000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2997) (undo-tree-id533 . -4) 3001) nil (25889 23911 467391 99000) 0 nil])
([nil nil ((2985 . 3005) (#("            " 0 12 (fontified t src-block t font-lock-fontified t gptel response)) . 2985) (undo-tree-id532 . -12) 2997) nil (25889 23911 467389 718000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -3001) (undo-tree-id531 . -4) 3005) nil (25889 23911 467388 77000) 0 nil])
([nil nil ((3135 . 3142)) nil (25889 23911 467386 393000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3140) (undo-tree-id529 . -1) (#("/" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response)) . -3141) (undo-tree-id530 . -1) 3142) nil (25889 23911 467385 509000) 0 nil])
([nil nil ((3140 . 3141)) nil (25889 23911 467383 456000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3140) (undo-tree-id528 . -1) 3141) nil (25889 23911 467382 589000) 0 nil])
([nil nil ((3140 . 3144)) nil (25889 23911 467381 433000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3141) (undo-tree-id527 . -1) 3142) nil (25889 23911 467380 697000) 0 nil])
([nil nil ((3140 . 3141)) nil (25889 23911 467379 341000) 0 nil])
([nil nil ((3142 . 3143)) nil (25889 23911 467378 868000) 0 nil])
([nil nil ((#("Pij * " 0 1 (fontified t src-block t font-lock-fontified t gptel response) 1 4 (fontified t src-block t font-lock-fontified t gptel response) 4 5 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 5 6 (fontified t src-block t font-lock-fontified t gptel response)) . 3132) (undo-tree-id526 . -6) 3138) nil (25889 23911 467378 115000) 0 nil])
([nil nil ((3139 . 3140)) nil (25889 23911 467376 921000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3145 . 3146) (nil fontified nil 3145 . 3146) (nil fontified nil 3144 . 3145) (nil fontified nil 3141 . 3144) (nil fontified nil 3140 . 3141) (3140 . 3146)) nil (25889 23911 467376 384000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3143) (undo-tree-id524 . -1) (#("*" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response)) . -3144) (undo-tree-id525 . -1) 3145) nil (25889 23911 467375 130000) 0 nil])
([nil nil ((#(" " 0 1 (rear-nonsticky t fontified t src-block t font-lock-fontified t gptel response)) . 3143)) nil (25889 23911 467373 472000) 0 nil])
([nil nil ((3140 . 3142)) nil (25889 23911 467372 917000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -3094) (undo-tree-id523 . -4) 3098) nil (25889 23911 467372 321000) 0 nil])
([nil nil ((#("            else:
                Cij = 1.0 * (torch.rand(Na, Nb) < Kb/Nb)
" 0 12 (fontified t src-block t font-lock-fontified t gptel response) 12 16 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 16 18 (fontified t src-block t font-lock-fontified t gptel response) 18 34 (fontified t src-block t font-lock-fontified t gptel response) 34 35 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 35 37 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 37 38 (fontified t src-block t font-lock-fontified t gptel response) 38 39 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 39 41 (fontified t src-block t font-lock-fontified t gptel response) 41 42 (fontified t src-block t font-lock-fontified t gptel response) 42 44 (fontified t src-block t font-lock-fontified t gptel response) 44 45 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 45 46 (fontified t src-block t font-lock-fontified t gptel response) 46 47 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 47 57 (fontified t src-block t font-lock-fontified t gptel response) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 58 59 (fontified t src-block t font-lock-fontified t gptel response) 59 61 (fontified t src-block t font-lock-fontified t gptel response) 61 64 (fontified t src-block t font-lock-fontified t gptel response) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 65 66 (fontified t src-block t font-lock-fontified t gptel response) 66 67 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 67 70 (fontified t src-block t font-lock-fontified t gptel response) 70 71 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 71 72 (fontified t src-block t font-lock-fontified t gptel response) 72 73 (fontified t src-block t font-lock-fontified t gptel response) 73 74 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 74 75 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response)) . -3143) (undo-tree-id522 . -75) 3218) nil (25889 23911 467371 182000) 0 nil])
([nil nil ((3081 . 3098)) nil (25889 23911 467370 152000) 0 nil])
([nil nil ((2756 . 2769)) nil (25889 23911 467369 585000) 0 nil])
([nil nil ((2769 . 2772)) nil (25889 23911 467369 85000) 0 nil])
([nil nil ((2772 . 2778)) nil (25889 23911 467368 679000) 0 nil])
([nil nil ((2860 . 2877)) nil (25889 23911 467368 257000) 0 nil])
([nil nil ((#("                Pij = (Kb / Nb) * (1.0 + 2.0 * self.KAPPA[i_pop][j_pop] * torch.cos(theta_diff))
" 0 16 (fontified t src-block t font-lock-fontified t gptel response) 16 19 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 19 20 (fontified t src-block t font-lock-fontified t gptel response) 20 21 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 21 22 (fontified t src-block t font-lock-fontified t gptel response) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 23 26 (fontified t src-block t font-lock-fontified t gptel response) 26 27 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 27 30 (fontified t src-block t font-lock-fontified t gptel response) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 31 32 (fontified t src-block t font-lock-fontified t gptel response) 32 33 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 33 34 (fontified t src-block t font-lock-fontified t gptel response) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 35 37 (fontified t src-block t font-lock-fontified t gptel response) 37 38 (fontified t src-block t font-lock-fontified t gptel response) 38 39 (fontified t src-block t font-lock-fontified t gptel response) 39 40 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 40 41 (fontified t src-block t font-lock-fontified t gptel response) 41 42 (fontified t src-block t font-lock-fontified t gptel response) 42 43 (fontified t src-block t font-lock-fontified t gptel response) 43 45 (fontified t src-block t font-lock-fontified t gptel response) 45 46 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 46 47 (fontified t src-block t font-lock-fontified t gptel response) 47 51 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 51 57 (fontified t src-block t font-lock-fontified t gptel response) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t src-block t font-lock-fontified t gptel response) 72 73 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 73 83 (fontified t src-block t font-lock-fontified t gptel response) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 96 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 96 97 (fontified t src-block t font-lock-fontified t gptel response)) . 3024) (undo-tree-id521 . -97) 3121) nil (25889 23911 467367 414000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3009 . 3010) (nil fontified nil 3009 . 3010) (nil fontified nil 3008 . 3009) (nil fontified nil 3007 . 3008) (nil fontified nil 2997 . 3007) (nil fontified nil 2996 . 2997) (nil fontified nil 2986 . 2996) (nil fontified nil 2985 . 2986) (nil fontified nil 2984 . 2985) (nil fontified nil 2983 . 2984) (nil fontified nil 2978 . 2983) (nil fontified nil 2977 . 2978) (nil fontified nil 2976 . 2977) (nil fontified nil 2971 . 2976) (nil fontified nil 2970 . 2971) (nil fontified nil 2964 . 2970) (nil fontified nil 2960 . 2964) (nil fontified nil 2959 . 2960) (nil fontified nil 2958 . 2959) (nil fontified nil 2956 . 2958) (nil fontified nil 2955 . 2956) (nil fontified nil 2954 . 2955) (nil fontified nil 2953 . 2954) (nil fontified nil 2952 . 2953) (nil fontified nil 2951 . 2952) (nil fontified nil 2950 . 2951) (nil fontified nil 2948 . 2950) (nil fontified nil 2947 . 2948) (nil fontified nil 2946 . 2947) (nil fontified nil 2945 . 2946) (nil fontified nil 2944 . 2945) (nil fontified nil 2943 . 2944) (nil fontified nil 2940 . 2943) (nil fontified nil 2939 . 2940) (nil fontified nil 2936 . 2939) (nil fontified nil 2935 . 2936) (nil fontified nil 2934 . 2935) (nil fontified nil 2933 . 2934) (nil fontified nil 2932 . 2933) (nil fontified nil 2929 . 2932) (nil fontified nil 2913 . 2929) (2913 . 3010)) nil (25889 23911 467365 380000) 0 nil])
([nil nil ((3009 . 3026)) nil (25889 23911 467361 952000) 0 nil])
([nil nil ((#("                Pij = (Kb / Nb) * (1.0 + 2.0 * self.KAPPA[i_pop][j_pop] * torch.cos(theta_diff))
" 0 16 (fontified t src-block t font-lock-fontified t gptel response) 16 19 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 19 20 (fontified t src-block t font-lock-fontified t gptel response) 20 21 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 21 22 (fontified t src-block t font-lock-fontified t gptel response) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 23 26 (fontified t src-block t font-lock-fontified t gptel response) 26 27 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 27 30 (fontified t src-block t font-lock-fontified t gptel response) 30 31 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 31 32 (fontified t src-block t font-lock-fontified t gptel response) 32 33 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 33 34 (fontified t src-block t font-lock-fontified t gptel response) 34 35 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 35 37 (fontified t src-block t font-lock-fontified t gptel response) 37 38 (fontified t src-block t font-lock-fontified t gptel response) 38 39 (fontified t src-block t font-lock-fontified t gptel response) 39 40 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 40 41 (fontified t src-block t font-lock-fontified t gptel response) 41 42 (fontified t src-block t font-lock-fontified t gptel response) 42 43 (fontified t src-block t font-lock-fontified t gptel response) 43 45 (fontified t src-block t font-lock-fontified t gptel response) 45 46 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 46 47 (fontified t src-block t font-lock-fontified t gptel response) 47 51 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 51 57 (fontified t src-block t font-lock-fontified t gptel response) 57 58 (face (rainbow-delimiters-depth-2-face) fontified t) 58 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 65 (face (rainbow-delimiters-depth-2-face) fontified t) 65 70 (fontified t) 70 71 (face (rainbow-delimiters-depth-2-face) fontified t) 71 72 (fontified t src-block t font-lock-fontified t gptel response) 72 73 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 73 83 (fontified t src-block t font-lock-fontified t gptel response) 83 84 (face (rainbow-delimiters-depth-2-face) fontified t) 84 94 (fontified t) 94 95 (face (rainbow-delimiters-depth-2-face) fontified t) 95 96 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 96 97 (fontified t src-block t font-lock-fontified t gptel response)) . 2913) (undo-tree-id520 . -97) 3010) nil (25889 23911 467361 358000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -2912) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) 2913) nil (25889 23911 467359 960000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3152 . 3153) (nil fontified nil 3152 . 3153) (nil fontified nil 3151 . 3152) (nil fontified nil 3150 . 3151) (nil fontified nil 3140 . 3150) (nil fontified nil 3139 . 3140) (nil fontified nil 3129 . 3139) (nil fontified nil 3128 . 3129) (nil fontified nil 3127 . 3128) (nil fontified nil 3126 . 3127) (nil fontified nil 3121 . 3126) (nil fontified nil 3120 . 3121) (nil fontified nil 3119 . 3120) (nil fontified nil 3114 . 3119) (nil fontified nil 3113 . 3114) (nil fontified nil 3107 . 3113) (nil fontified nil 3103 . 3107) (nil fontified nil 3102 . 3103) (nil fontified nil 3101 . 3102) (nil fontified nil 3099 . 3101) (nil fontified nil 3098 . 3099) (nil fontified nil 3097 . 3098) (nil fontified nil 3096 . 3097) (nil fontified nil 3095 . 3096) (nil fontified nil 3094 . 3095) (nil fontified nil 3093 . 3094) (nil fontified nil 3091 . 3093) (nil fontified nil 3090 . 3091) (nil fontified nil 3089 . 3090) (nil fontified nil 3088 . 3089) (nil fontified nil 3087 . 3088) (nil fontified nil 3086 . 3087) (nil fontified nil 3083 . 3086) (nil fontified nil 3082 . 3083) (nil fontified nil 3079 . 3082) (nil fontified nil 3078 . 3079) (nil fontified nil 3077 . 3078) (nil fontified nil 3076 . 3077) (nil fontified nil 3075 . 3076) (nil fontified nil 3072 . 3075) (nil fontified nil 3056 . 3072) (3056 . 3153)) nil (25889 23911 467355 992000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t src-block t font-lock-fontified t gptel response)) . -3060) 3040) nil (25889 23911 467343 719000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -3056) (undo-tree-id516 . -4) 3060) nil (25889 23911 467342 490000) 0 nil])
([nil nil ((3020 . 3040) (#("                    " 0 20 (fontified nil src-block t font-lock-fontified t gptel response)) . 3019) (undo-tree-id515 . -20) (3039 . 3040)) nil (25889 23911 467340 501000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("*" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("b" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("N" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("/" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("b" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("K" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3063) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response)) . 3063)) nil (25889 23911 467336 26000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t src-block t font-lock-fontified t gptel response)) . -3123) (undo-tree-id514 . -1) 3124) nil (25889 23911 467332 746000) 0 nil])
([nil nil ((3123 . 3124)) nil (25889 23911 467329 203000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -3123) (undo-tree-id513 . -1) 3124) nil (25889 23911 467328 77000) 0 nil])
([nil nil ((3124 . 3140)) nil (25889 23911 467325 633000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3136) (undo-tree-id512 . -4) 3140) nil (25889 23911 467323 667000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3132) (undo-tree-id511 . -4) 3136) nil (25889 23911 467319 145000) 0 nil])
([nil nil ((3124 . 3140) (#("        " 0 8 (fontified t)) . 3124) (undo-tree-id510 . -8) 3132) nil (25889 23911 467315 622000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3136) (undo-tree-id509 . -4) 3140) nil (25889 23911 467313 548000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1236) (undo-tree-id488 . -1) (#("J" 0 1 (fontified nil)) . -1237) (undo-tree-id489 . -1) (#("1" 0 1 (fontified nil)) . -1238) (undo-tree-id490 . -1) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . -1239) (undo-tree-id491 . -1) (#("0" 0 1 (fontified t)) . -1240) (undo-tree-id492 . -1) (#("." 0 1 (fontified t)) . -1241) (undo-tree-id493 . -1) (#("4" 0 1 (fontified t)) . -1242) (undo-tree-id494 . -1) (#("," 0 1 (fontified t)) . -1243) (undo-tree-id495 . -1) (#(" " 0 1 (fontified t)) . -1244) (undo-tree-id496 . -1) (#("P" 0 1 (fontified t)) . -1245) (undo-tree-id497 . -1) (#("H" 0 1 (fontified t)) . -1246) (undo-tree-id498 . -1) (#("A" 0 1 (fontified t)) . -1247) (undo-tree-id499 . -1) (#("S" 0 1 (fontified t)) . -1248) (undo-tree-id500 . -1) (#("E" 0 1 (fontified t)) . -1249) (undo-tree-id501 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1250) (undo-tree-id502 . -1) (#("n" 0 1 (fontified t)) . -1251) (undo-tree-id503 . -1) (#("p" 0 1 (fontified t)) . -1252) (undo-tree-id504 . -1) (#("." 0 1 (fontified t)) . -1253) (undo-tree-id505 . -1) (#("p" 0 1 (fontified t)) . -1254) (undo-tree-id506 . -1) (#("i" 0 1 (fontified t)) . -1255) (undo-tree-id507 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1256) (undo-tree-id508 . -1) 1257) nil (25889 23911 467307 885000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -1227) (undo-tree-id479 . -1) (#("0" 0 1 (fontified t)) . -1228) (undo-tree-id480 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1229) (undo-tree-id481 . -1) (#("-" 0 1 (face font-lock-operator-face fontified t)) . -1230) (undo-tree-id482 . -1) (#("2" 0 1 (fontified t)) . -1231) (undo-tree-id483 . -1) (#("." 0 1 (fontified t)) . -1232) (undo-tree-id484 . -1) (#("7" 0 1 (fontified t)) . -1233) (undo-tree-id485 . -1) (#("5" 0 1 (fontified t)) . -1234) (undo-tree-id486 . -1) (#("," 0 1 (fontified t)) . -1235) (undo-tree-id487 . -1) 1236) nil (25889 23911 467275 340000) 0 nil])
([nil nil ((1227 . 1228)) nil (25889 23911 467268 955000) 0 nil])
([nil nil ((1227 . 1239)) nil (25889 23911 467268 502000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -1842) (undo-tree-id467 . -1) (#("i" 0 1 (fontified nil)) . -1843) (undo-tree-id468 . -1) (#("j" 0 1 (fontified nil)) . -1844) (undo-tree-id469 . -1) (#("." 0 1 (fontified t)) . -1845) (undo-tree-id470 . -1) (#("s" 0 1 (fontified t)) . -1846) (undo-tree-id471 . -1) (#("h" 0 1 (fontified t)) . -1847) (undo-tree-id472 . -1) (#("a" 0 1 (fontified t)) . -1848) (undo-tree-id473 . -1) (#("p" 0 1 (fontified t)) . -1849) (undo-tree-id474 . -1) (#("e" 0 1 (fontified t)) . -1850) (undo-tree-id475 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1851) (undo-tree-id476 . -1) (#("0" 0 1 (fontified t)) . -1852) (undo-tree-id477 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1853) (undo-tree-id478 . -1) 1854) nil (25889 23911 467266 501000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1846) (1845 . 1846) (1844 . 1846) (#("[" 0 1 (fontified nil)) . -1844) (1842 . 1845)) nil (25889 23911 467257 989000) 0 nil])
([nil nil ((1845 . 1850)) nil (25889 23911 467257 266000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -1865) (undo-tree-id455 . -1) (#("i" 0 1 (fontified t)) . -1866) (undo-tree-id456 . -1) (#("j" 0 1 (fontified t)) . -1867) (undo-tree-id457 . -1) (#("." 0 1 (fontified t)) . -1868) (undo-tree-id458 . -1) (#("s" 0 1 (fontified t)) . -1869) (undo-tree-id459 . -1) (#("h" 0 1 (fontified t)) . -1870) (undo-tree-id460 . -1) (#("a" 0 1 (fontified t)) . -1871) (undo-tree-id461 . -1) (#("p" 0 1 (fontified t)) . -1872) (undo-tree-id462 . -1) (#("e" 0 1 (fontified t)) . -1873) (undo-tree-id463 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1874) (undo-tree-id464 . -1) (#("1" 0 1 (fontified t)) . -1875) (undo-tree-id465 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1876) (undo-tree-id466 . -1) 1877) nil (25889 23911 467255 271000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1869) (1868 . 1869) (1867 . 1869) (#("[" 0 1 (fontified nil)) . -1867) (1865 . 1868)) nil (25889 23911 467246 728000) 0 nil])
([nil nil ((1868 . 1873)) nil (25889 23911 467245 856000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1807) (#("j" 0 1 (fontified t)) . 1807) (#("i" 0 1 (fontified t)) . 1807) (#("W" 0 1 (fontified t)) . 1807) (#(" " 0 1 (fontified t)) . 1807)) nil (25889 23911 467244 736000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -1861) (undo-tree-id454 . -1) 1862) nil (25889 23911 467243 861000) 0 nil])
([nil nil ((1861 . 1862)) nil (25889 23911 467242 731000) 0 nil])
([nil nil ((1837 . 1842)) nil (25889 23911 467242 338000) 0 nil])
([nil nil ((1865 . 1870)) nil (25889 23911 467241 911000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3137) (undo-tree-id451 . -1) (#("." 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3138) (undo-tree-id452 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3139) (undo-tree-id453 . -1) 3140) nil (25889 23911 467240 960000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 3147) (3146 . 3147) (3145 . 3147) (#("[" 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -3145) (3137 . 3146)) nil (25889 23911 467230 682000) 0 nil])
([nil nil ((3146 . 3151)) nil (25889 23911 467229 470000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 3154) (3153 . 3154) (3152 . 3154) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -3152) (3152 . 3153)) nil (25889 23911 467228 161000) 0 nil])
([nil nil ((3153 . 3158)) nil (25889 23911 467222 607000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3160 . 3161) (nil fontified nil 3146 . 3161) (nil fontified nil 3142 . 3146) (nil fontified nil 3141 . 3142) (nil fontified nil 3139 . 3141) (nil fontified nil 3138 . 3139) (nil fontified nil 3130 . 3138) (nil fontified nil 3129 . 3130) (nil fontified nil 3127 . 3129) (nil fontified nil 3119 . 3127) (3119 . 3161) (t 25889 23911 485358 440000)) nil (25889 24063 121667 622000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3249) (undo-tree-id918 . -1) (#(" " 0 1 (fontified t)) . -3250) (undo-tree-id919 . -1) (#(" " 0 1 (fontified t)) . -3251) (undo-tree-id920 . -1) (#(" " 0 1 (fontified t)) . -3252) (undo-tree-id921 . -1) 3253) nil (25889 24063 121666 43000) 0 nil])
([nil nil ((3249 . 3252)) nil (25889 24063 121663 58000) 0 nil])
([nil nil ((nil fontified nil 3362 . 3363) (nil fontified nil 3361 . 3362) (nil fontified nil 3360 . 3361) (nil fontified nil 3335 . 3360) (nil fontified nil 3334 . 3335) (nil fontified nil 3329 . 3334) (nil fontified nil 3313 . 3329) (nil fontified nil 3312 . 3313) (nil fontified nil 3311 . 3312) (nil fontified nil 3303 . 3311) (nil fontified nil 3299 . 3303) (nil fontified nil 3298 . 3299) (nil fontified nil 3296 . 3298) (nil fontified nil 3284 . 3296) (nil fontified nil 3269 . 3284) (nil fontified nil 3265 . 3269) (nil fontified nil 3264 . 3265) (nil fontified nil 3262 . 3264) (nil fontified nil 3261 . 3262) (nil fontified nil 3252 . 3261) (nil fontified nil 3251 . 3252) (nil fontified nil 3249 . 3251) (nil fontified nil 3241 . 3249) (3241 . 3363)) nil (25889 24063 121662 39000) 0 nil])
([nil nil ((#("        if     
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (fontified t)) . -3363) (undo-tree-id917 . -16) 3379) nil (25889 24063 121659 473000) 0 nil])
([nil nil ((3362 . 3379)) nil (25889 24063 121658 300000) 0 nil])
([nil nil ((3240 . 3253)) nil (25889 24063 121657 960000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3001) (undo-tree-id916 . -1) 3002) nil (25889 24063 121657 373000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3519 . 3520) (nil fontified nil 3519 . 3520) (nil fontified nil 3516 . 3519) (nil fontified nil 3515 . 3516) (nil fontified nil 3514 . 3515) (nil fontified nil 3513 . 3514) (nil fontified nil 3512 . 3513) (nil fontified nil 3506 . 3512) (nil fontified nil 3502 . 3506) (nil fontified nil 3501 . 3502) (nil fontified nil 3500 . 3501) (nil fontified nil 3489 . 3500) (nil fontified nil 3488 . 3489) (nil fontified nil 3478 . 3488) (nil fontified nil 3477 . 3478) (nil fontified nil 3476 . 3477) (nil fontified nil 3475 . 3476) (nil fontified nil 3470 . 3475) (nil fontified nil 3469 . 3470) (nil fontified nil 3468 . 3469) (nil fontified nil 3463 . 3468) (nil fontified nil 3462 . 3463) (nil fontified nil 3456 . 3462) (nil fontified nil 3452 . 3456) (nil fontified nil 3451 . 3452) (nil fontified nil 3450 . 3451) (nil fontified nil 3445 . 3450) (nil fontified nil 3444 . 3445) (nil fontified nil 3440 . 3444) (nil fontified nil 3439 . 3440) (nil fontified nil 3438 . 3439) (nil fontified nil 3437 . 3438) (nil fontified nil 3436 . 3437) (nil fontified nil 3435 . 3436) (nil fontified nil 3430 . 3435) (nil fontified nil 3429 . 3430) (nil fontified nil 3428 . 3429) (nil fontified nil 3423 . 3428) (nil fontified nil 3422 . 3423) (nil fontified nil 3418 . 3422) (nil fontified nil 3414 . 3418) (nil fontified nil 3413 . 3414) (nil fontified nil 3412 . 3413) (nil fontified nil 3411 . 3412) (nil fontified nil 3408 . 3411) (nil fontified nil 3392 . 3408) (3392 . 3520)) nil (25889 24063 121655 422000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3374) (undo-tree-id915 . -1) 3375) nil (25889 24063 121650 979000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3403) (undo-tree-id914 . -4) 3407) nil (25889 24063 121649 686000) 0 nil])
([nil nil ((#("a" 0 1 (fontified nil)) . -3488) (undo-tree-id893 . -1) (#("_" 0 1 (fontified t)) . -3489) (undo-tree-id894 . -1) (#("d" 0 1 (fontified t)) . -3490) (undo-tree-id895 . -1) (#("i" 0 1 (fontified t)) . -3491) (undo-tree-id896 . -1) (#("f" 0 1 (fontified t)) . -3492) (undo-tree-id897 . -1) (#("f" 0 1 (fontified t)) . -3493) (undo-tree-id898 . -1) (#(" " 0 1 (fontified t)) . -3494) (undo-tree-id899 . -1) (#("-" 0 1 (face font-lock-operator-face fontified t)) . -3495) (undo-tree-id900 . -1) (#(" " 0 1 (fontified t)) . -3496) (undo-tree-id901 . -1) (#("s" 0 1 (fontified t)) . -3497) (undo-tree-id902 . -1) (#("e" 0 1 (fontified t)) . -3498) (undo-tree-id903 . -1) (#("l" 0 1 (fontified t)) . -3499) (undo-tree-id904 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -3500) (undo-tree-id905 . -1) (#("." 0 1 (fontified t)) . -3501) (undo-tree-id906 . -1) (#("P" 0 1 (fontified t)) . -3502) (undo-tree-id907 . -1) (#("H" 0 1 (fontified t)) . -3503) (undo-tree-id908 . -1) (#("A" 0 1 (fontified t)) . -3504) (undo-tree-id909 . -1) (#("S" 0 1 (fontified t)) . -3505) (undo-tree-id910 . -1) (#("E" 0 1 (fontified t)) . -3506) (undo-tree-id911 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3507) (undo-tree-id912 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3508) (undo-tree-id913 . -1) 3509) nil (25889 24063 121645 521000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -3467) (undo-tree-id872 . -1) (#("o" 0 1 (fontified t)) . -3468) (undo-tree-id873 . -1) (#("p" 0 1 (fontified t)) . -3469) (undo-tree-id874 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . -3470) (undo-tree-id875 . -1) (#(" " 0 1 (fontified t)) . -3471) (undo-tree-id876 . -1) (#("*" 0 1 (face font-lock-operator-face fontified t)) . -3472) (undo-tree-id877 . -1) (#(" " 0 1 (fontified t)) . -3473) (undo-tree-id878 . -1) (#("t" 0 1 (fontified t)) . -3474) (undo-tree-id879 . -1) (#("o" 0 1 (fontified t)) . -3475) (undo-tree-id880 . -1) (#("r" 0 1 (fontified t)) . -3476) (undo-tree-id881 . -1) (#("c" 0 1 (fontified t)) . -3477) (undo-tree-id882 . -1) (#("h" 0 1 (fontified t)) . -3478) (undo-tree-id883 . -1) (#("." 0 1 (fontified t)) . -3479) (undo-tree-id884 . -1) (#("c" 0 1 (fontified t)) . -3480) (undo-tree-id885 . -1) (#("o" 0 1 (fontified t)) . -3481) (undo-tree-id886 . -1) (#("s" 0 1 (fontified t)) . -3482) (undo-tree-id887 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3483) (undo-tree-id888 . -1) (#("t" 0 1 (fontified t)) . -3484) (undo-tree-id889 . -1) (#("h" 0 1 (fontified t)) . -3485) (undo-tree-id890 . -1) (#("e" 0 1 (fontified nil)) . -3486) (undo-tree-id891 . -1) (#("t" 0 1 (fontified nil)) . -3487) (undo-tree-id892 . -1) 3488) nil (25889 24063 121628 396000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3446) (undo-tree-id851 . -1) (#("s" 0 1 (fontified t)) . -3447) (undo-tree-id852 . -1) (#("e" 0 1 (fontified t)) . -3448) (undo-tree-id853 . -1) (#("l" 0 1 (fontified t)) . -3449) (undo-tree-id854 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -3450) (undo-tree-id855 . -1) (#("." 0 1 (fontified t)) . -3451) (undo-tree-id856 . -1) (#("K" 0 1 (fontified t)) . -3452) (undo-tree-id857 . -1) (#("A" 0 1 (fontified t)) . -3453) (undo-tree-id858 . -1) (#("P" 0 1 (fontified t)) . -3454) (undo-tree-id859 . -1) (#("P" 0 1 (fontified t)) . -3455) (undo-tree-id860 . -1) (#("A" 0 1 (fontified t)) . -3456) (undo-tree-id861 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3457) (undo-tree-id862 . -1) (#("i" 0 1 (fontified t)) . -3458) (undo-tree-id863 . -1) (#("_" 0 1 (fontified t)) . -3459) (undo-tree-id864 . -1) (#("p" 0 1 (fontified t)) . -3460) (undo-tree-id865 . -1) (#("o" 0 1 (fontified t)) . -3461) (undo-tree-id866 . -1) (#("p" 0 1 (fontified nil)) . -3462) (undo-tree-id867 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -3463) (undo-tree-id868 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -3464) (undo-tree-id869 . -1) (#("j" 0 1 (fontified t)) . -3465) (undo-tree-id870 . -1) (#("_" 0 1 (fontified t)) . -3466) (undo-tree-id871 . -1) 3467) nil (25889 24063 121609 457000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3433) (undo-tree-id838 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3434) (undo-tree-id839 . -1) (#("1" 0 1 (fontified t)) . -3435) (undo-tree-id840 . -1) (#("." 0 1 (fontified t)) . -3436) (undo-tree-id841 . -1) (#("0" 0 1 (fontified t)) . -3437) (undo-tree-id842 . -1) (#(" " 0 1 (fontified nil)) . -3438) (undo-tree-id843 . -1) (#("+" 0 1 (face font-lock-operator-face fontified nil)) . -3439) (undo-tree-id844 . -1) (#(" " 0 1 (fontified t)) . -3440) (undo-tree-id845 . -1) (#("2" 0 1 (fontified t)) . -3441) (undo-tree-id846 . -1) (#("." 0 1 (fontified t)) . -3442) (undo-tree-id847 . -1) (#("0" 0 1 (fontified t)) . -3443) (undo-tree-id848 . -1) (#(" " 0 1 (fontified t)) . -3444) (undo-tree-id849 . -1) (#("*" 0 1 (face font-lock-operator-face fontified t)) . -3445) (undo-tree-id850 . -1) 3446) nil (25889 24063 121592 598000) 0 nil])
([nil nil ((3433 . 3437)) nil (25889 24063 121581 667000) 0 nil])
([nil nil ((#("                if self.verbose:
                    print('with cosine structure')
                Cij = self.Jab[i_pop][j_pop] * (1.0 + 2.0 * self.KAPPA[i_pop][j_pop] * torch.cos(theta_diff - self.PHASE)) / Nb
            else:
                Cij = self.Jab[i_pop][j_pop] / Nb
                
" 0 16 (fontified t) 16 18 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 18 19 (fontified t src-block t font-lock-fontified t gptel response) 19 23 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 23 31 (fontified t src-block t font-lock-fontified t gptel response) 31 32 (fontified t src-block t font-lock-fontified t gptel response) 32 33 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 33 53 (fontified t src-block t font-lock-fontified t gptel response) 53 58 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 59 60 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 60 64 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 64 71 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 71 81 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 81 82 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 82 83 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 83 84 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 84 100 (fontified t) 100 103 (face font-lock-variable-name-face fontified t) 103 104 (fontified t) 104 105 (face font-lock-operator-face fontified t) 105 106 (fontified t) 106 110 (face font-lock-keyword-face fontified t) 110 114 (fontified t) 114 115 (face (rainbow-delimiters-depth-1-face) fontified t) 115 120 (fontified t) 120 121 (face (rainbow-delimiters-depth-1-face) fontified t) 121 122 (face (rainbow-delimiters-depth-1-face) fontified t) 122 127 (fontified t) 127 128 (face (rainbow-delimiters-depth-1-face) fontified t) 128 129 (fontified t) 129 130 (face font-lock-operator-face fontified t) 130 131 (fontified t) 131 132 (face (rainbow-delimiters-depth-1-face) fontified t) 132 136 (fontified t) 136 137 (face font-lock-operator-face fontified t) 137 142 (fontified t) 142 143 (face font-lock-operator-face fontified t) 143 144 (fontified t) 144 148 (face font-lock-keyword-face fontified t) 148 154 (fontified t) 154 155 (face (rainbow-delimiters-depth-2-face) fontified t) 155 160 (fontified t) 160 161 (face (rainbow-delimiters-depth-2-face) fontified t) 161 162 (face (rainbow-delimiters-depth-2-face) fontified t) 162 167 (fontified t) 167 168 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t) 168 169 (fontified t) 169 170 (face font-lock-operator-face fontified t) 170 180 (fontified t) 180 181 (face (rainbow-delimiters-depth-2-face) fontified t) 181 192 (fontified t) 192 193 (face font-lock-operator-face fontified t) 193 194 (fontified t) 194 198 (face font-lock-keyword-face fontified t) 198 204 (fontified t) 204 205 (face (rainbow-delimiters-depth-2-face) fontified t) 205 206 (face (rainbow-delimiters-depth-1-face) fontified t) 206 207 (fontified t) 207 208 (face font-lock-operator-face fontified t) 208 211 (fontified t) 211 212 (fontified t) 212 224 (fontified t) 224 228 (face font-lock-keyword-face fontified t) 228 230 (fontified t) 230 246 (fontified t) 246 249 (face font-lock-variable-name-face fontified t) 249 250 (fontified t) 250 251 (face font-lock-operator-face fontified t) 251 252 (fontified t) 252 256 (face font-lock-keyword-face fontified t) 256 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-1-face) fontified t) 261 266 (fontified t) 266 267 (face (rainbow-delimiters-depth-1-face) fontified t) 267 268 (face (rainbow-delimiters-depth-1-face) fontified t) 268 273 (fontified t) 273 274 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 274 275 (fontified t) 275 276 (face font-lock-operator-face fontified t) 276 279 (fontified t) 279 280 (fontified t) 280 297 (fontified t)) . 2400) (undo-tree-id834 . -297) (undo-tree-id835 . -84) (undo-tree-id836 . -84) (undo-tree-id837 . -212)) nil (25889 24063 121581 75000) 0 nil])
([nil nil ((#("            if 'cos' in self.STRUCTURE:
" 0 12 (fontified t) 12 14 (face font-lock-keyword-face fontified t) 14 15 (fontified t) 15 20 (face font-lock-string-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-keyword-face fontified t) 28 40 (fontified t)) . 2360) (undo-tree-id829 . -40) (undo-tree-id830 . -40) (undo-tree-id831 . -40) (undo-tree-id832 . -40) (undo-tree-id833 . -40)) nil (25889 24063 121577 824000) 0 nil])
([nil nil ((2359 . 2376)) nil (25889 24063 121573 33000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2921 . 2922) (nil fontified nil 2921 . 2922) (nil fontified nil 2920 . 2921) (nil fontified nil 2919 . 2920) (nil fontified nil 2891 . 2919) (nil fontified nil 2890 . 2891) (nil fontified nil 2885 . 2890) (nil fontified nil 2869 . 2885) (nil fontified nil 2867 . 2869) (nil fontified nil 2859 . 2867) (nil fontified nil 2855 . 2859) (nil fontified nil 2854 . 2855) (nil fontified nil 2852 . 2854) (nil fontified nil 2840 . 2852) (2840 . 2922)) nil (25889 24063 121572 321000) 0 nil])
([nil nil ((nil fontified nil 2422 . 2423) (nil fontified nil 2421 . 2422) (nil fontified nil 2411 . 2421) (nil fontified nil 2410 . 2411) (nil fontified nil 2400 . 2410) (nil fontified nil 2399 . 2400) (nil fontified nil 2398 . 2399) (nil fontified nil 2397 . 2398) (nil fontified nil 2392 . 2397) (nil fontified nil 2391 . 2392) (nil fontified nil 2390 . 2391) (nil fontified nil 2385 . 2390) (nil fontified nil 2384 . 2385) (nil fontified nil 2378 . 2384) (nil fontified nil 2374 . 2378) (nil fontified nil 2373 . 2374) (nil fontified nil 2372 . 2373) (nil fontified nil 2370 . 2372) (nil fontified nil 2369 . 2370) (nil fontified nil 2368 . 2369) (nil fontified nil 2367 . 2368) (nil fontified nil 2366 . 2367) (nil fontified nil 2365 . 2366) (nil fontified nil 2364 . 2365) (nil fontified nil 2362 . 2364) (nil fontified nil 2361 . 2362) (nil fontified nil 2360 . 2361) (nil fontified nil 2359 . 2360) (nil fontified nil 2356 . 2359) (nil fontified nil 2340 . 2356) (nil fontified nil 2339 . 2340) (nil fontified nil 2319 . 2339) (nil fontified nil 2318 . 2319) (nil fontified nil 2317 . 2318) (nil fontified nil 2307 . 2317) (nil fontified nil 2293 . 2307) (nil fontified nil 2289 . 2293) (nil fontified nil 2288 . 2289) (nil fontified nil 2287 . 2288) (nil fontified nil 2282 . 2287) (nil fontified nil 2262 . 2282) (nil fontified nil 2260 . 2262) (nil fontified nil 2252 . 2260) (nil fontified nil 2248 . 2252) (nil fontified nil 2247 . 2248) (nil fontified nil 2245 . 2247) (nil fontified nil 2229 . 2245) (2229 . 2423)) nil (25889 24063 121569 989000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2241) 2229) nil (25889 24063 121565 826000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2274) 2270) nil (25889 24063 121565 330000) 0 nil])
([nil nil ((#("            if self.verbose:
                print('with strong cosine structure')                    
" 0 12 (fontified t src-block t font-lock-fontified t gptel response) 12 14 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 14 15 (fontified t src-block t font-lock-fontified t gptel response) 15 19 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 19 27 (fontified t src-block t font-lock-fontified t gptel response) 27 29 (fontified t src-block t font-lock-fontified t gptel response) 29 45 (fontified t src-block t font-lock-fontified t gptel response) 45 50 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 51 52 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 52 56 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 56 70 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 70 80 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 80 81 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 82 102 (fontified t src-block t font-lock-fontified t gptel response) 102 103 (fontified t src-block t font-lock-fontified t gptel response)) . 2229) (undo-tree-id828 . -103) 2332) nil (25889 24063 121564 701000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -2241) 2229) nil (25889 24063 121563 711000) 0 nil])
([nil nil ((3285 . 3297) (#("            " 0 12 (fontified nil)) . 3284) (undo-tree-id827 . -12) (3283 . 3297)) nil (25889 24063 121562 805000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3387 . 3388) (nil fontified nil 3387 . 3388) (nil fontified nil 3367 . 3387) (nil fontified nil 3366 . 3367) (nil fontified nil 3365 . 3366) (nil fontified nil 3355 . 3365) (nil fontified nil 3341 . 3355) (nil fontified nil 3337 . 3341) (nil fontified nil 3336 . 3337) (nil fontified nil 3335 . 3336) (nil fontified nil 3330 . 3335) (nil fontified nil 3314 . 3330) (nil fontified nil 3312 . 3314) (nil fontified nil 3304 . 3312) (nil fontified nil 3300 . 3304) (nil fontified nil 3299 . 3300) (nil fontified nil 3297 . 3299) (nil fontified nil 3285 . 3297) (3285 . 3388)) nil (25889 24063 121561 165000) 0 nil])
([nil nil ((nil fontified nil 3335 . 3336) (nil fontified nil 3319 . 3335) (nil fontified nil 3318 . 3319) (nil fontified nil 3315 . 3318) (nil fontified nil 3308 . 3315) (nil fontified nil 3306 . 3308) (nil fontified nil 3305 . 3306) (nil fontified nil 3304 . 3305) (nil fontified nil 3300 . 3304) (nil fontified nil 3299 . 3300) (nil fontified nil 3297 . 3299) (nil fontified nil 3285 . 3297) (3285 . 3336)) nil (25889 24063 121558 655000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3293) (undo-tree-id826 . -4) 3297) nil (25889 24063 121557 265000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3414) (undo-tree-id806 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3415) (undo-tree-id807 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3416) (undo-tree-id808 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3417) (undo-tree-id809 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3418) (undo-tree-id810 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3419) (undo-tree-id811 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3420) (undo-tree-id812 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3421) (undo-tree-id813 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3422) (undo-tree-id814 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3423) (undo-tree-id815 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3424) (undo-tree-id816 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3425) (undo-tree-id817 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3426) (undo-tree-id818 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3427) (undo-tree-id819 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3428) (undo-tree-id820 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3429) (undo-tree-id821 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3430) (undo-tree-id822 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3431) (undo-tree-id823 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3432) (undo-tree-id824 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3433) (undo-tree-id825 . -1) 3434) nil (25889 24063 121553 464000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3315) (undo-tree-id790 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3316) (undo-tree-id791 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3317) (undo-tree-id792 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -3318) (undo-tree-id793 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -3319) (undo-tree-id794 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -3320) (undo-tree-id795 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3321) (undo-tree-id796 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3322) (undo-tree-id797 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3323) (undo-tree-id798 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3324) (undo-tree-id799 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3325) (undo-tree-id800 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3326) (undo-tree-id801 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3327) (undo-tree-id802 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3328) (undo-tree-id803 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3329) (undo-tree-id804 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3330) (undo-tree-id805 . -1) 3331) nil (25889 24063 121536 873000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3215) (undo-tree-id774 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3216) (undo-tree-id775 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3217) (undo-tree-id776 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3218) (undo-tree-id777 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3219) (undo-tree-id778 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3220) (undo-tree-id779 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3221) (undo-tree-id780 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3222) (undo-tree-id781 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3223) (undo-tree-id782 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3224) (undo-tree-id783 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3225) (undo-tree-id784 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3226) (undo-tree-id785 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3227) (undo-tree-id786 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3228) (undo-tree-id787 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3229) (undo-tree-id788 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3230) (undo-tree-id789 . -1) 3231) nil (25889 24063 121523 471000) 0 nil])
([nil nil ((#("        if 'all2all' in self.CONNECTIVITY:
            if self.verbose:
                print('All to all connectivity ')
                
        if 'sparse' in self.CONNECTIVITY:
            Pij = 1.0
            if self.verbose:
                print('Sparse random connectivity ')
                
            if \"cos\" in STRUCTURE:                
                if self.verbose:
                    print('with strong cosine structure')                    
                Pij = 1.0 + 2.0 * self.KAPPA[i_pop][j_pop] * torch.cos(theta_diff)
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 20 (face font-lock-string-face fontified t) 20 21 (fontified t) 21 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-keyword-face fontified t) 28 43 (fontified t) 43 55 (fontified t src-block t font-lock-fontified t gptel response) 55 57 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 57 58 (fontified t src-block t font-lock-fontified t gptel response) 58 62 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 62 70 (fontified t src-block t font-lock-fontified t gptel response) 70 71 (fontified t src-block t font-lock-fontified t gptel response) 71 72 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 72 88 (fontified t) 88 93 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 93 94 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 94 119 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 119 120 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 120 121 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 121 138 (fontified t src-block t font-lock-fontified t gptel response) 138 139 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 139 147 (fontified t) 147 149 (face font-lock-keyword-face fontified t) 149 150 (fontified t) 150 158 (face font-lock-string-face fontified t) 158 159 (fontified t) 159 161 (face font-lock-keyword-face fontified t) 161 162 (fontified t) 162 166 (face font-lock-keyword-face fontified t) 166 181 (fontified t) 181 193 (fontified t) 193 196 (face font-lock-variable-name-face fontified t) 196 197 (fontified t) 197 198 (face font-lock-operator-face fontified t) 198 202 (fontified t) 202 203 (fontified t) 203 215 (fontified t src-block t font-lock-fontified t gptel response) 215 217 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 217 218 (fontified t src-block t font-lock-fontified t gptel response) 218 222 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 222 230 (fontified t src-block t font-lock-fontified t gptel response) 230 232 (fontified t src-block t font-lock-fontified t gptel response) 232 248 (fontified t src-block t font-lock-fontified t gptel response) 248 253 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 253 254 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 254 282 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 282 283 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 283 284 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 284 301 (fontified t src-block t font-lock-fontified t gptel response) 301 302 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 302 314 (fontified t) 314 316 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 316 317 (fontified t src-block t font-lock-fontified t gptel response) 317 321 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 321 322 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 322 323 (fontified t src-block t font-lock-fontified t gptel response) 323 325 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 325 332 (fontified t src-block t font-lock-fontified t gptel response) 332 335 (fontified t src-block t font-lock-fontified t gptel response) 335 336 (fontified t src-block t font-lock-fontified t gptel response) 336 352 (fontified t src-block t font-lock-fontified t gptel response) 352 353 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response) 353 369 (fontified t src-block t font-lock-fontified t gptel response) 369 371 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 371 372 (fontified t src-block t font-lock-fontified t gptel response) 372 376 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 376 384 (fontified t src-block t font-lock-fontified t gptel response) 384 386 (fontified t src-block t font-lock-fontified t gptel response) 386 406 (fontified t src-block t font-lock-fontified t gptel response) 406 411 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 411 412 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 412 413 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 413 417 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 417 431 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 431 441 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 441 442 (face font-lock-string-face fontified t src-block t font-lock-fontified t gptel response) 442 443 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 443 463 (fontified t src-block t font-lock-fontified t gptel response) 463 464 (fontified t src-block t font-lock-fontified t gptel response) 464 480 (fontified t src-block t font-lock-fontified t gptel response) 480 483 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 483 484 (fontified t src-block t font-lock-fontified t gptel response) 484 485 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 485 486 (fontified t src-block t font-lock-fontified t gptel response) 486 488 (fontified t src-block t font-lock-fontified t gptel response) 488 489 (fontified t src-block t font-lock-fontified t gptel response) 489 490 (fontified t src-block t font-lock-fontified t gptel response) 490 491 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 491 492 (fontified t src-block t font-lock-fontified t gptel response) 492 493 (fontified t src-block t font-lock-fontified t gptel response) 493 494 (fontified t src-block t font-lock-fontified t gptel response) 494 496 (fontified t src-block t font-lock-fontified t gptel response) 496 497 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 497 498 (fontified t src-block t font-lock-fontified t gptel response) 498 502 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 502 508 (fontified t src-block t font-lock-fontified t gptel response) 508 509 (face (rainbow-delimiters-depth-1-face) fontified t) 509 514 (fontified t) 514 515 (face (rainbow-delimiters-depth-1-face) fontified t) 515 516 (face (rainbow-delimiters-depth-1-face) fontified t) 516 521 (fontified t) 521 522 (face (rainbow-delimiters-depth-1-face) fontified t) 522 523 (fontified t src-block t font-lock-fontified t gptel response) 523 524 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 524 534 (fontified t src-block t font-lock-fontified t gptel response) 534 535 (face (rainbow-delimiters-depth-1-face) fontified t) 535 545 (fontified t) 545 546 (face (rainbow-delimiters-depth-1-face) fontified t) 546 547 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response)) . 2317) (undo-tree-id708 . -547) (undo-tree-id709 . -139) (undo-tree-id710 . -139) (undo-tree-id711 . -139) (undo-tree-id712 . -139) (undo-tree-id713 . -139) (undo-tree-id714 . -203) (undo-tree-id715 . -353) (undo-tree-id716 . -302) (undo-tree-id717 . -232) (undo-tree-id718 . -285) (undo-tree-id719 . -203) (undo-tree-id720 . -232) (undo-tree-id721 . -203) (undo-tree-id722 . -203) (undo-tree-id723 . -203) (undo-tree-id724 . -203) (undo-tree-id725 . -203) (undo-tree-id726 . -203) (undo-tree-id727 . -203) (undo-tree-id728 . -181) (undo-tree-id729 . -203) (undo-tree-id730 . -139) (undo-tree-id731 . -203) (undo-tree-id732 . -122) (undo-tree-id733 . -203) (undo-tree-id734 . -72) (undo-tree-id735 . -203) (undo-tree-id736 . -72) (undo-tree-id737 . -72) (undo-tree-id738 . -72) (undo-tree-id739 . -72) (undo-tree-id740 . -72) (undo-tree-id741 . -72) (undo-tree-id742 . -72) (undo-tree-id743 . -43) (undo-tree-id744 . -72) (undo-tree-id745 . -43) (undo-tree-id746 . -43) (undo-tree-id747 . -43) (undo-tree-id748 . -43) (undo-tree-id749 . -43) (undo-tree-id750 . -43) (undo-tree-id751 . -43) (undo-tree-id752 . -43) (undo-tree-id753 . -43) (undo-tree-id754 . -43) (undo-tree-id755 . -43) (undo-tree-id756 . -43) (undo-tree-id757 . -43) (undo-tree-id758 . -43) (undo-tree-id759 . -43) (undo-tree-id760 . -43) (undo-tree-id761 . -43) (undo-tree-id762 . -43) (undo-tree-id763 . -43) (undo-tree-id764 . -43) (undo-tree-id765 . -43) (undo-tree-id766 . -43) (undo-tree-id767 . -43) (undo-tree-id768 . -43) (undo-tree-id769 . -43) (undo-tree-id770 . -43) (undo-tree-id771 . -43) (undo-tree-id772 . -43) (undo-tree-id773 . -43)) nil (25889 24063 121510 153000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2316) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) 2317) nil (25889 24063 121455 901000) 0 nil])
([nil nil ((2228 . 2241)) nil (25889 24063 121290 783000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -2333) 2321 (t 25889 24063 140472 172000)) nil (25889 24070 264642 682000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2329) (undo-tree-id945 . -4) 2333) nil (25889 24070 264641 197000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2325) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -4) (undo-tree-id938 . -4) (undo-tree-id939 . -4) (undo-tree-id940 . -4) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) 2329) nil (25889 24070 264639 673000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2321) (undo-tree-id925 . -4) (undo-tree-id926 . -4) (undo-tree-id927 . -4) (undo-tree-id928 . -4) (undo-tree-id929 . -4) (undo-tree-id930 . -4) (undo-tree-id931 . -4) (undo-tree-id932 . -4) (undo-tree-id933 . -4) (undo-tree-id934 . -4) 2325) nil (25889 24070 264631 905000) 0 nil])
([nil nil ((2321 . 2333)) nil (25889 24070 264623 422000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2329) (undo-tree-id924 . -4) 2333) nil (25889 24070 264622 456000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2325) (undo-tree-id923 . -4) 2329) nil (25889 24070 264620 515000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2321) (undo-tree-id922 . -4) 2325) nil (25889 24070 264617 922000) 0 nil])
([nil nil ((2321 . 2333)) nil (25889 24070 264605 838000) 0 nil])
([nil nil ((1823 . 1831) (t 25889 24070 284739 427000)) nil (25889 24071 202610 497000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2022) (undo-tree-id946 . -1) (#(" " 0 1 (fontified t)) . -2023) (undo-tree-id947 . -1) (#(" " 0 1 (fontified t)) . -2024) (undo-tree-id948 . -1) (#(" " 0 1 (fontified t)) . -2025) (undo-tree-id949 . -1) (#(" " 0 1 (fontified t)) . -2026) (undo-tree-id950 . -1) (#(" " 0 1 (fontified t)) . -2027) (undo-tree-id951 . -1) (#(" " 0 1 (fontified t)) . -2028) (undo-tree-id952 . -1) (#(" " 0 1 (fontified t)) . -2029) (undo-tree-id953 . -1) (#(" " 0 1 (fontified t)) . -2030) (undo-tree-id954 . -1) (#(" " 0 1 (fontified t)) . -2031) (undo-tree-id955 . -1) (#(" " 0 1 (fontified t)) . -2032) (undo-tree-id956 . -1) (#(" " 0 1 (fontified t)) . -2033) (undo-tree-id957 . -1) 2034 (t 25889 24071 220774 23000)) nil (25889 24110 729884 808000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -934) (undo-tree-id968 . -1) (#(" " 0 1 (fontified t)) . -935) (undo-tree-id969 . -1) (#("J" 0 1 (fontified t)) . -936) (undo-tree-id970 . -1) (#("1" 0 1 (fontified t)) . -937) (undo-tree-id971 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -938) (undo-tree-id972 . -1) (#("0" 0 1 (fontified t)) . -939) (undo-tree-id973 . -1) (#("." 0 1 (fontified t)) . -940) (undo-tree-id974 . -1) (#("4" 0 1 (fontified t)) . -941) (undo-tree-id975 . -1) (#("," 0 1 (fontified t)) . -942) (undo-tree-id976 . -1) (#(" " 0 1 (fontified t)) . -943) (undo-tree-id977 . -1) (#("P" 0 1 (fontified t)) . -944) (undo-tree-id978 . -1) (#("H" 0 1 (fontified t)) . -945) (undo-tree-id979 . -1) (#("A" 0 1 (fontified t)) . -946) (undo-tree-id980 . -1) (#("S" 0 1 (fontified t)) . -947) (undo-tree-id981 . -1) (#("E" 0 1 (fontified nil)) . -948) (undo-tree-id982 . -1) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . -949) (undo-tree-id983 . -1) (#("n" 0 1 (fontified nil)) . -950) (undo-tree-id984 . -1) (#("p" 0 1 (fontified t)) . -951) (undo-tree-id985 . -1) (#("." 0 1 (fontified t)) . -952) (undo-tree-id986 . -1) (#("p" 0 1 (fontified t)) . -953) (undo-tree-id987 . -1) (#("i" 0 1 (fontified t)) . -954) (undo-tree-id988 . -1) 955 (t 25889 24110 750150 816000)) nil (25889 24123 794047 762000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -926) (undo-tree-id960 . -1) (#("0" 0 1 (fontified t)) . -927) (undo-tree-id961 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -928) (undo-tree-id962 . -1) (#("-" 0 1 (face font-lock-operator-face fontified t)) . -929) (undo-tree-id963 . -1) (#("2" 0 1 (fontified t)) . -930) (undo-tree-id964 . -1) (#("." 0 1 (fontified t)) . -931) (undo-tree-id965 . -1) (#("7" 0 1 (fontified t)) . -932) (undo-tree-id966 . -1) (#("5" 0 1 (fontified t)) . -933) (undo-tree-id967 . -1) 934) nil (25889 24123 794029 765000) 0 nil])
([nil nil ((926 . 927)) nil (25889 24123 794022 102000) 0 nil])
([nil nil ((927 . 931)) nil (25889 24123 794021 222000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -929) (undo-tree-id958 . -1) (#("o" 0 1 (fontified t)) . -930) (undo-tree-id959 . -1) 931) nil (25889 24123 794017 911000) 0 nil])
([nil nil ((929 . 938)) nil (25889 24123 793998 336000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -939) (undo-tree-id1005 . -1) 940 (t 25889 24123 814572 141000)) nil (25889 24266 618949 5000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1049) (undo-tree-id993 . -1) (#(" " 0 1 (fontified nil)) . -1050) (undo-tree-id994 . -1) (#(" " 0 1 (fontified t)) . -1051) (undo-tree-id995 . -1) (#(" " 0 1 (fontified nil)) . -1052) (undo-tree-id996 . -1) (#(" " 0 1 (fontified nil)) . -1053) (undo-tree-id997 . -1) (#(" " 0 1 (fontified nil)) . -1054) (undo-tree-id998 . -1) (#(" " 0 1 (fontified nil)) . -1055) (undo-tree-id999 . -1) (#(" " 0 1 (fontified nil)) . -1056) (undo-tree-id1000 . -1) (#(" " 0 1 (fontified nil)) . -1057) (undo-tree-id1001 . -1) (#(" " 0 1 (fontified nil)) . -1058) (undo-tree-id1002 . -1) (#(" " 0 1 (fontified t)) . -1059) (undo-tree-id1003 . -1) (#(" " 0 1 (fontified t)) . -1060) (undo-tree-id1004 . -1) 1061) nil (25889 24266 618945 910000) 0 nil])
([nil nil ((#("        self.i2j.weight.data = self.initWeights(i_pop, j_pop)
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 24 (fontified t) 24 28 (face font-lock-variable-name-face fontified t) 28 29 (fontified t) 29 30 (face font-lock-operator-face fontified t) 30 31 (fontified t) 31 35 (face font-lock-keyword-face fontified t) 35 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-1-face) fontified t) 61 62 (fontified t)) . -1149) (undo-tree-id992 . -62) 1211) nil (25889 24266 618929 532000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1148) (undo-tree-id990 . -1) (undo-tree-id991 . -1) 1149) nil (25889 24266 618927 941000) 0 nil])
([nil nil ((1243 . 1251)) nil (25889 24266 618925 740000) 0 nil])
([nil nil ((1187 . 1195)) nil (25889 24266 618925 372000) 0 nil])
([nil nil ((2791 . 2796)) nil (25889 24266 618924 807000) 0 nil])
([nil nil ((2796 . 2806)) nil (25889 24266 618924 432000) 0 nil])
([nil nil ((2806 . 2811)) nil (25889 24266 618924 34000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-function-name-face fontified t)) . -2810) (undo-tree-id989 . -1) 2811) nil (25889 24266 618923 89000) 0 nil])
([nil nil ((2810 . 2812) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -2810) (2810 . 2811)) nil (25889 24266 618915 682000) 0 nil])
([nil nil ((2812 . 2813)) nil (25889 24266 618915 76000) 0 nil])
([nil nil ((2811 . 2815)) nil (25889 24266 618914 36000) 0 nil])
([nil nil ((2817 . 2818) 172) nil (25889 24266 618909 781000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2966 . 2967) (nil fontified nil 2966 . 2967) (nil fontified nil 2965 . 2966) (nil fontified nil 2961 . 2965) (nil fontified nil 2957 . 2961) (nil fontified nil 2955 . 2957) (nil fontified nil 2950 . 2955) (nil fontified nil 2949 . 2950) (nil fontified nil 2944 . 2949) (nil fontified nil 2922 . 2944) (nil fontified nil 2918 . 2922) (nil fontified nil 2917 . 2918) (nil fontified nil 2915 . 2917) (nil fontified nil 2905 . 2915) (nil fontified nil 2904 . 2905) (nil fontified nil 2898 . 2904) (nil fontified nil 2894 . 2898) (nil fontified nil 2886 . 2894) (nil fontified nil 2882 . 2886) (nil fontified nil 2881 . 2882) (nil fontified nil 2873 . 2881) (nil fontified nil 2872 . 2873) (nil fontified nil 2862 . 2872) (nil fontified nil 2861 . 2862) (nil fontified nil 2850 . 2861) (nil fontified nil 2846 . 2850) (nil fontified nil 2845 . 2846) (nil fontified nil 2836 . 2845) (nil fontified nil 2835 . 2836) (nil fontified nil 2834 . 2835) (nil fontified nil 2831 . 2834) (nil fontified nil 2830 . 2831) (nil fontified nil 2826 . 2830) (nil fontified nil 2818 . 2826) (2818 . 2967) (t 25889 24266 642324 689000)) nil (25889 24365 529630 171000) 0 nil])
([nil nil ((2906 . 2914)) nil (25889 24365 529626 349000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2905) (undo-tree-id1065 . -1) 2906) nil (25889 24365 529625 513000) 0 nil])
([nil nil ((2817 . 2826)) nil (25889 24365 529624 105000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3108 . 3109) (nil fontified nil 3108 . 3109) (nil fontified nil 3107 . 3108) (nil fontified nil 3106 . 3107) (nil fontified nil 3101 . 3106) (nil fontified nil 3100 . 3101) (nil fontified nil 3097 . 3100) (nil fontified nil 3093 . 3097) (nil fontified nil 3092 . 3093) (nil fontified nil 3084 . 3092) (nil fontified nil 3083 . 3084) (nil fontified nil 3082 . 3083) (nil fontified nil 3081 . 3082) (nil fontified nil 3073 . 3081) (nil fontified nil 3072 . 3073) (nil fontified nil 3068 . 3072) (nil fontified nil 3064 . 3068) (nil fontified nil 3063 . 3064) (nil fontified nil 3062 . 3063) (nil fontified nil 3061 . 3062) (nil fontified nil 3060 . 3061) (nil fontified nil 3052 . 3060) (nil fontified nil 3051 . 3052) (nil fontified nil 3048 . 3051) (nil fontified nil 3047 . 3048) (nil fontified nil 3043 . 3047) (nil fontified nil 3025 . 3043) (nil fontified nil 3024 . 3025) (nil fontified nil 3018 . 3024) (nil fontified nil 3014 . 3018) (nil fontified nil 3013 . 3014) (nil fontified nil 3008 . 3013) (nil fontified nil 3007 . 3008) (nil fontified nil 3005 . 3007) (nil fontified nil 2998 . 3005) (nil fontified nil 2995 . 2998) (nil fontified nil 2983 . 2995) (2983 . 3109)) nil (25889 24365 529622 522000) 0 nil])
([nil nil ((2983 . 2984)) nil (25889 24365 529617 828000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2992) (undo-tree-id1064 . -4) 2996) nil (25889 24365 529616 501000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3036) 3032) nil (25889 24365 529614 466000) 0 nil])
([nil nil ((2983 . 2996)) nil (25889 24365 529613 305000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2992) (undo-tree-id1063 . -4) 2996) nil (25889 24365 529611 965000) 0 nil])
([nil nil ((2992 . 3006)) nil (25889 24365 529610 72000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -3005) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) 3006) nil (25889 24365 529606 954000) 0 nil])
([nil nil ((2983 . 2995)) nil (25889 24365 529487 303000) 0 nil])
([nil nil ((3136 . 3149) (t 25889 24365 552259 560000)) nil (25889 24444 801031 447000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3187 . 3188) (nil fontified nil 3184 . 3188) (nil fontified nil 3180 . 3184) (nil fontified nil 3179 . 3180) (nil fontified nil 3178 . 3179) (nil fontified nil 3177 . 3178) (nil fontified nil 3176 . 3177) (nil fontified nil 3175 . 3176) (nil fontified nil 3174 . 3175) (nil fontified nil 3173 . 3174) (nil fontified nil 3170 . 3173) (nil fontified nil 3166 . 3170) (nil fontified nil 3165 . 3166) (nil fontified nil 3162 . 3165) (nil fontified nil 3157 . 3162) (nil fontified nil 3155 . 3157) (nil fontified nil 3154 . 3155) (nil fontified nil 3150 . 3154) (nil fontified nil 3149 . 3150) (nil fontified nil 3145 . 3149) (nil fontified nil 3137 . 3145) (3137 . 3188)) nil (25889 24444 801030 436000) 0 nil])
([nil nil ((3136 . 3148)) nil (25889 24444 801028 584000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3144) (undo-tree-id1105 . -4) 3148) nil (25889 24444 801027 997000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-variable-name-face fontified t)) . 3077)) nil (25889 24457 251522 105000) 0 nil])
([nil nil ((3077 . 3078)) ((#("0" 0 1 (face font-lock-variable-name-face fontified t)) . 3077)) (25889 24458 117549 365000) 0 nil])
([nil nil ((#("0" 0 1 (face font-lock-variable-name-face fontified t)) . 3077)) nil (25889 24497 194335 643000) 0 nil] [nil nil ((#("b" 0 1 (fontified t)) . -3098) (undo-tree-id1104 . -1) 3099) ((3098 . 3099)) (25889 24455 610180 251000) 0 nil])
([nil nil ((3077 . 3078)) nil (25889 24497 194335 139000) 0 nil])
([nil nil ((3098 . 3099)) ((#("0" 0 1 (fontified t)) . 3098)) (25889 24454 536239 536000) 0 nil])
([nil nil ((nil fontified nil 3186 . 3187) (nil fontified nil 3185 . 3186) (nil fontified nil 3182 . 3185) (nil fontified nil 3179 . 3182) (nil fontified nil 3178 . 3179) (nil fontified nil 3177 . 3178) (nil fontified nil 3176 . 3177) (nil fontified nil 3175 . 3176) (nil fontified nil 3174 . 3175) (nil fontified nil 3173 . 3174) (nil fontified nil 3172 . 3173) (nil fontified nil 3171 . 3172) (nil fontified nil 3168 . 3171) (nil fontified nil 3164 . 3168) (nil fontified nil 3163 . 3164) (nil fontified nil 3156 . 3163) (nil fontified nil 3155 . 3156) (nil fontified nil 3154 . 3155) (nil fontified nil 3153 . 3154) (nil fontified nil 3152 . 3153) (nil fontified nil 3149 . 3152) (nil fontified nil 3148 . 3149) (nil fontified nil 3144 . 3148) (nil fontified nil 3136 . 3144) (3136 . 3187)) nil (25889 24497 194334 403000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3100) (undo-tree-id1101 . -1) (#("," 0 1 (fontified t)) . -3101) (undo-tree-id1102 . -1) (#(" " 0 1 (fontified t)) . -3102) (undo-tree-id1103 . -1) 3103) ((3100 . 3103)) (25889 24453 947928 875000) 0 nil])
([nil nil ((3145 . 3149) (3136 . 3137)) nil (25889 24497 194332 541000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -3107) (undo-tree-id1100 . -1) 3108) ((3107 . 3108)) (25889 24453 509058 603000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3145) (undo-tree-id1642 . -4) 3149) nil (25889 24497 194331 972000) 0 nil])
([nil nil ((3107 . 3108)) ((#("*" 0 1 (face font-lock-operator-face fontified t)) . 3107)) (25889 24452 595052 153000) 0 nil])
([nil nil ((3136 . 3149)) nil (25889 24497 194330 906000) 0 nil])
([nil nil ((#("np.sqrt(self.Ka[i_pop])" 0 7 (fontified t) 7 8 (face (rainbow-delimiters-depth-1-face) fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 15 (fontified t) 15 16 (face (rainbow-delimiters-depth-2-face) fontified t) 16 21 (fontified t) 21 22 (face (rainbow-delimiters-depth-2-face) fontified t) 22 23 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3109) (undo-tree-id1099 . -23)) ((3109 . 3132)) (25889 24452 421260 235000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3145) (undo-tree-id1641 . -4) 3149) nil (25889 24497 194330 516000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t)) . -3107) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#(" " 0 1 (fontified t)) . -3108) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) 3109) ((3107 . 3109)) (25889 24452 260043 754000) 0 nil])
([nil nil ((3145 . 3147)) nil (25889 24497 194329 280000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3113 . 3114) (nil fontified nil 3113 . 3114) (nil fontified nil 3112 . 3113) (nil fontified nil 3107 . 3112) (nil fontified nil 3106 . 3107) (nil fontified nil 3103 . 3106) (nil fontified nil 3099 . 3103) (nil fontified nil 3098 . 3099) (nil fontified nil 3091 . 3098) (3091 . 3114)) ((#("np.sqrt(self.Ka[i_pop])" 0 7 (fontified nil) 7 8 (face (rainbow-delimiters-depth-1-face) fontified nil) 8 12 (face font-lock-keyword-face fontified nil) 12 15 (fontified nil) 15 16 (face (rainbow-delimiters-depth-2-face) fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil) 21 22 (face (rainbow-delimiters-depth-2-face) fontified nil) 22 23 (face (rainbow-delimiters-depth-1-face) rear-nonsticky nil fontified nil)) . 3091) (undo-tree-id1254 . -16) (undo-tree-id1255 . -16) (undo-tree-id1256 . -16) (undo-tree-id1257 . -16) (undo-tree-id1258 . -16) (undo-tree-id1259 . -16) (undo-tree-id1260 . -16) (undo-tree-id1261 . -16) (undo-tree-id1262 . -16) (undo-tree-id1263 . -16) (undo-tree-id1264 . -16) (undo-tree-id1265 . -16) (undo-tree-id1266 . -16) (undo-tree-id1267 . -16) (undo-tree-id1268 . -16) (undo-tree-id1269 . -16) (undo-tree-id1270 . -16) (undo-tree-id1271 . -16) (undo-tree-id1272 . -16) (undo-tree-id1273 . -16) (undo-tree-id1274 . -16) (undo-tree-id1275 . -16) (undo-tree-id1276 . -16) (undo-tree-id1277 . -21) (undo-tree-id1278 . -21) (undo-tree-id1279 . -21) (undo-tree-id1280 . -21) (undo-tree-id1281 . -21) (undo-tree-id1282 . -21) (undo-tree-id1283 . -21) (undo-tree-id1284 . -21) (undo-tree-id1285 . -21) (undo-tree-id1286 . -21) (undo-tree-id1287 . -21) (undo-tree-id1288 . -21) (undo-tree-id1289 . -21) (undo-tree-id1290 . -21) (undo-tree-id1291 . -21) (undo-tree-id1292 . -21) (undo-tree-id1293 . -21) (undo-tree-id1294 . -21) (undo-tree-id1295 . -21) (undo-tree-id1296 . -21) (undo-tree-id1297 . -21) (undo-tree-id1298 . -21) (undo-tree-id1299 . -21) (undo-tree-id1300 . -21) (undo-tree-id1301 . -23) (undo-tree-id1302 . -21) (undo-tree-id1303 . -23) (undo-tree-id1304 . -23) (undo-tree-id1305 . -23) (undo-tree-id1306 . -23) (undo-tree-id1307 . -23) (undo-tree-id1308 . -23) (undo-tree-id1309 . -23) (undo-tree-id1310 . -23) (undo-tree-id1311 . -23) (undo-tree-id1312 . -23) (undo-tree-id1313 . -23) (undo-tree-id1314 . -23) (undo-tree-id1315 . -23) (undo-tree-id1316 . -23) (undo-tree-id1317 . -23) (undo-tree-id1318 . -23) (undo-tree-id1319 . -23) (undo-tree-id1320 . -23) (undo-tree-id1321 . -23) (undo-tree-id1322 . -23) (undo-tree-id1323 . -23) (undo-tree-id1324 . -23) (undo-tree-id1325 . -23) (undo-tree-id1326 . -23) (nil rear-nonsticky t 3113 . 3114)) (25889 24452 91229 859000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -3145) (undo-tree-id1639 . -1) (#("c" 0 1 (fontified t)) . -3146) (undo-tree-id1640 . -1) 3147) nil (25889 24497 194328 611000) 0 nil])
([nil nil ((3114 . 3117)) ((#(" * " 0 1 (fontified t) 1 2 (face font-lock-operator-face fontified t) 2 3 (fontified t)) . 3114)) (25889 24451 941761 566000) 0 nil])
([nil nil ((3145 . 3157)) nil (25889 24497 194327 16000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -3107) (undo-tree-id1090 . -1) (#("_" 0 1 (fontified t)) . -3108) (undo-tree-id1091 . -1) (#("p" 0 1 (fontified t)) . -3109) (undo-tree-id1092 . -1) (#("o" 0 1 (fontified t)) . -3110) (undo-tree-id1093 . -1) (#("p" 0 1 (fontified t)) . -3111) (undo-tree-id1094 . -1) 3112) ((3107 . 3112)) (25889 24451 790798 127000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-comment-face fontified t)) . -3155) (undo-tree-id1637 . -1) (#("F" 0 1 (face font-lock-comment-face fontified t)) . -3156) (undo-tree-id1638 . -1) 3157) nil (25889 24497 194326 302000) 0 nil])
([nil nil ((3107 . 3108)) ((#("0" 0 1 (fontified t)) . 3107)) (25889 24451 648768 56000) 0 nil])
([nil nil ((3155 . 3169)) nil (25889 24497 194323 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3079) (#("," 0 1 (fontified t)) . 3079) (#(":" 0 1 (fontified t)) . 3079)) ((3079 . 3080) (3079 . 3080) (3079 . 3080)) (25889 24451 511512 93000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -3155) (undo-tree-id1623 . -1) (#("x" 0 1 (face font-lock-comment-face fontified t)) . -3156) (undo-tree-id1624 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -3157) (undo-tree-id1625 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3158) (undo-tree-id1626 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -3159) (undo-tree-id1627 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -3160) (undo-tree-id1628 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -3161) (undo-tree-id1629 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -3162) (undo-tree-id1630 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -3163) (undo-tree-id1631 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -3164) (undo-tree-id1632 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -3165) (undo-tree-id1633 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t)) . -3166) (undo-tree-id1634 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -3167) (undo-tree-id1635 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -3168) (undo-tree-id1636 . -1) 3169) nil (25889 24497 194320 634000) 0 nil])
([nil nil ((#("        for i_pop in range(self.N_POP):
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 18 (fontified t) 18 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 26 (face font-lock-builtin-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 31 (face font-lock-keyword-face fontified t) 31 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 40 (fontified t)) . -3018) (undo-tree-id1089 . -40) 3058) ((3018 . 3058)) (25889 24451 369740 137000) 0 nil])
([nil nil ((3155 . 3158)) nil (25889 24497 194312 421000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3026) 3018) ((3026 . 3030)) (25889 24451 217816 897000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-comment-face fontified t)) . -3155) (undo-tree-id1620 . -1) (#("F" 0 1 (face font-lock-comment-face fontified t)) . -3156) (undo-tree-id1621 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -3157) (undo-tree-id1622 . -1) 3158) nil (25889 24497 194311 629000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3036) (#("p" 0 1 (fontified t)) . 3036) (#("o" 0 1 (fontified t)) . 3036) (#("p" 0 1 (fontified t)) . 3036) (#("_" 0 1 (fontified t)) . 3036)) ((3036 . 3037) (3036 . 3037) (3036 . 3037) (3036 . 3037) (3036 . 3037)) (25889 24451 70525 968000) 0 nil])
([nil nil ((3155 . 3164)) nil (25889 24497 194309 498000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -3034) (undo-tree-id1087 . -1) (#("i" 0 1 (fontified t)) . -3035) (undo-tree-id1088 . -1) 3036) ((3034 . 3036)) (25889 24450 924065 218000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-comment-face fontified t)) . -3162) (undo-tree-id1618 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -3163) (undo-tree-id1619 . -1) 3164) nil (25889 24497 194308 894000) 0 nil])
([nil nil ((3034 . 3035)) ((#("*" 0 1 (face font-lock-operator-face fontified t)) . 3034)) (25889 24450 771371 636000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -3155) (undo-tree-id1611 . -1) (#("x" 0 1 (face font-lock-comment-face fontified t)) . -3156) (undo-tree-id1612 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -3157) (undo-tree-id1613 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -3158) (undo-tree-id1614 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -3159) (undo-tree-id1615 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -3160) (undo-tree-id1616 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -3161) (undo-tree-id1617 . -1) 3162) nil (25889 24497 194306 171000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3035) (undo-tree-id1086 . -1) 3036) ((3035 . 3036)) (25889 24450 621790 89000) 0 nil])
([nil nil ((3155 . 3163)) nil (25889 24497 194300 395000) 0 nil])
([nil nil ((3034 . 3035)) ((#(" " 0 1 (fontified t)) . 3034)) (25889 24450 473744 488000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-comment-face fontified t)) . -3160) (undo-tree-id1608 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -3161) (undo-tree-id1609 . -1) (#("h" 0 1 (face font-lock-comment-face fontified t)) . -3162) (undo-tree-id1610 . -1) 3163) nil (25889 24497 194299 458000) 0 nil])
([nil nil ((#("* self.Ja0[i_pop]" 0 1 (face font-lock-operator-face fontified t) 1 2 (fontified t) 2 3 (face font-lock-keyword-face fontified t) 3 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (face (rainbow-delimiters-depth-1-face) fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (face (rainbow-delimiters-depth-1-face) fontified t)) . 3058) (undo-tree-id1132 . -17) (undo-tree-id1134 . -17) (undo-tree-id1136 . -17) (undo-tree-id1138 . -17) (undo-tree-id1140 . -17) (undo-tree-id1142 . -17) (undo-tree-id1144 . -17) (undo-tree-id1146 . -17) (undo-tree-id1148 . -17) (undo-tree-id1150 . -17) (undo-tree-id1152 . -17) (undo-tree-id1154 . -17) (undo-tree-id1156 . -17) (undo-tree-id1158 . -17) (undo-tree-id1160 . -17) (undo-tree-id1162 . -17) (undo-tree-id1164 . -17) (undo-tree-id1166 . -17) (undo-tree-id1168 . -17) (undo-tree-id1170 . -17) (undo-tree-id1172 . -17) (undo-tree-id1174 . -17) (undo-tree-id1176 . -17) (undo-tree-id1178 . -17) (undo-tree-id1180 . -17) (undo-tree-id1182 . -17) (undo-tree-id1184 . -17) (undo-tree-id1186 . -17) (undo-tree-id1188 . -17) (undo-tree-id1190 . -17) (undo-tree-id1192 . -17)) ((3058 . 3075)) (25889 24450 337365 29000) 0 nil])
([nil nil ((3160 . 3165)) nil (25889 24497 194297 404000) 0 nil])
([nil nil ((3058 . 3061)) ((#("* s" 0 1 (face font-lock-operator-face fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 3058) (undo-tree-id1196 . -3) (undo-tree-id1197 . -3) (undo-tree-id1198 . -3) (undo-tree-id1199 . -3) (undo-tree-id1200 . -3) (undo-tree-id1201 . -3) (undo-tree-id1202 . -3) (undo-tree-id1203 . -3) (undo-tree-id1204 . -3) (undo-tree-id1205 . -3) (undo-tree-id1206 . -3) (undo-tree-id1207 . -3) (undo-tree-id1208 . -3) (undo-tree-id1209 . -3) (undo-tree-id1210 . -3) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) (undo-tree-id1214 . -3) (undo-tree-id1215 . -3) (undo-tree-id1216 . -3) (undo-tree-id1217 . -3) (undo-tree-id1218 . -3) (undo-tree-id1219 . -3) (undo-tree-id1220 . -3) (undo-tree-id1221 . -3) (undo-tree-id1222 . -3) (undo-tree-id1223 . -3) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) (undo-tree-id1246 . -3) (undo-tree-id1247 . -3) (undo-tree-id1248 . -3) (undo-tree-id1249 . -3) (undo-tree-id1250 . -3) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3)) (25889 24450 274590 791000) 0 nil])
([nil nil ((3014 . 3032)) nil (25889 24497 194296 925000) 0 nil])
([nil nil ((3061 . 3067)) ((#("elf.M0" 0 3 (face font-lock-keyword-face fontified t) 3 6 (fontified t)) . 3061)) (25889 24450 272386 924000) 0 nil])
([nil nil ((#("        
        self.Iext *= np.sqrt(self.Ka[0]) * self.M0
" 0 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 27 (fontified t) 27 28 (face font-lock-operator-face fontified t) 28 29 (face font-lock-operator-face fontified t) 29 34 (fontified t) 34 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 42 (face font-lock-keyword-face fontified t) 42 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 50 (fontified t) 50 51 (face font-lock-operator-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 59 (fontified t) 59 60 (fontified t rear-nonsticky t)) . -3235) (undo-tree-id1525 . -9) (undo-tree-id1526 . -9) (undo-tree-id1527 . -8) (undo-tree-id1528 . -8) (undo-tree-id1529 . -8) (undo-tree-id1530 . -8) (undo-tree-id1531 . -8) (undo-tree-id1532 . -8) (undo-tree-id1533 . -8) (undo-tree-id1534 . -8) (undo-tree-id1535 . -8) (undo-tree-id1536 . -8) (undo-tree-id1537 . -8) (undo-tree-id1538 . -8) (undo-tree-id1539 . -8) (undo-tree-id1540 . -8) (undo-tree-id1541 . -8) (undo-tree-id1542 . -8) (undo-tree-id1543 . -8) (undo-tree-id1544 . -8) (undo-tree-id1545 . -8) (undo-tree-id1546 . -8) (undo-tree-id1547 . -8) (undo-tree-id1548 . -8) (undo-tree-id1549 . -8) (undo-tree-id1550 . -8) (undo-tree-id1551 . -9) (undo-tree-id1552 . -9) (undo-tree-id1553 . -9) (undo-tree-id1554 . -9) (undo-tree-id1555 . -9) (undo-tree-id1556 . -9) (undo-tree-id1557 . -9) (undo-tree-id1558 . -9) (undo-tree-id1559 . -9) (undo-tree-id1560 . -9) (undo-tree-id1561 . -9) (undo-tree-id1562 . -9) (undo-tree-id1563 . -9) (undo-tree-id1564 . -9) (undo-tree-id1565 . -9) (undo-tree-id1566 . -9) (undo-tree-id1567 . -9) (undo-tree-id1568 . -9) (undo-tree-id1569 . -9) (undo-tree-id1570 . -9) (undo-tree-id1571 . -9) (undo-tree-id1572 . -9) (undo-tree-id1573 . -9) (undo-tree-id1574 . -9) (undo-tree-id1575 . -60) (undo-tree-id1576 . -60) (undo-tree-id1577 . -9) (undo-tree-id1578 . -60) (undo-tree-id1579 . -60) (undo-tree-id1580 . -60) (undo-tree-id1581 . -60) (undo-tree-id1582 . -60) (undo-tree-id1583 . -60) (undo-tree-id1584 . -60) (undo-tree-id1585 . -60) (undo-tree-id1586 . -60) (undo-tree-id1587 . -60) (undo-tree-id1588 . -60) (undo-tree-id1589 . -60) (undo-tree-id1590 . -60) (undo-tree-id1591 . -60) (undo-tree-id1592 . -60) (undo-tree-id1593 . -60) (undo-tree-id1594 . -60) (undo-tree-id1595 . -60) (undo-tree-id1596 . -60) (undo-tree-id1597 . -60) (undo-tree-id1598 . -60) (undo-tree-id1599 . -60) (undo-tree-id1600 . -60) (undo-tree-id1601 . -60) (undo-tree-id1602 . -60) (undo-tree-id1603 . -60) (undo-tree-id1604 . -60) (undo-tree-id1605 . -60) (undo-tree-id1606 . -60) (undo-tree-id1607 . -60) 3295) nil (25889 24497 194294 752000) 0 nil])
([nil nil ((#("        
        self.Iext *= np.sqrt(self.Ka[0]) * self.M0
" 0 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 27 (fontified t) 27 28 (face font-lock-operator-face fontified t) 28 29 (face font-lock-operator-face fontified t) 29 34 (fontified t) 34 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 42 (face font-lock-keyword-face fontified t) 42 45 (fontified t) 45 46 (face (rainbow-delimiters-depth-2-face) fontified t) 46 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-2-face) fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t) 49 50 (fontified t) 50 51 (face font-lock-operator-face fontified t) 51 52 (fontified t) 52 56 (face font-lock-keyword-face fontified t) 56 59 (fontified t) 59 60 (fontified t rear-nonsticky t)) . 3069) (undo-tree-id1194 . -9) (undo-tree-id1195 . -9)) ((3069 . 3129)) (25889 24448 221095 598000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t)) . -3234) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) 3235) nil (25889 24497 194239 706000) 0 nil])
([nil nil ((3081 . 3082) 3068) ((#("
" 0 1 (fontified t)) . 3081) (t 25889 24444 821554 522000)) (25889 24444 800968 917000) 0 nil])
([nil nil ((3246 . 3247) 3234) nil (25889 24497 194008 177000) 0 nil])
nil
([nil nil ((3154 . 3166) (t 25889 24497 214318 406000)) nil (25889 24502 243943 395000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3162) (undo-tree-id1643 . -4) 3166) nil (25889 24502 243939 668000) 0 nil])
([nil nil ((3155 . 3167) (#("        " 0 8 (fontified nil)) . 3154) (undo-tree-id1647 . -8) (3162 . 3163) (t 25889 24502 266388 841000)) nil (25889 24547 427703 59000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3154) (undo-tree-id1646 . -1) 3155) nil (25889 24547 427701 505000) 0 nil])
([nil nil ((3195 . 3204)) nil (25889 24547 427699 833000) 0 nil])
([nil nil ((nil fontified nil 3255 . 3256) (nil fontified nil 3254 . 3255) (nil fontified nil 3250 . 3254) (nil fontified nil 3246 . 3250) (nil fontified nil 3244 . 3246) (nil fontified nil 3239 . 3244) (nil fontified nil 3238 . 3239) (nil fontified nil 3233 . 3238) (nil fontified nil 3211 . 3233) (nil fontified nil 3207 . 3211) (nil fontified nil 3206 . 3207) (nil fontified nil 3204 . 3206) (nil fontified nil 3196 . 3204) (3196 . 3256)) nil (25889 24547 427699 61000) 0 nil])
([nil nil ((#("b" 0 1 (face font-lock-string-face fontified t)) . -3242) (undo-tree-id1645 . -1) 3243) nil (25889 24547 427696 842000) 0 nil])
([nil nil ((3242 . 3243)) nil (25889 24547 427695 412000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -3253) (undo-tree-id1644 . -1) 3254) nil (25889 24547 427694 486000) 0 nil])
([nil nil ((3253 . 3254)) nil (25889 24547 427685 912000) 0 nil])
([nil nil ((nil gptel response 2696 . 2703) (nil font-lock-fontified t 2696 . 2703) (nil src-block t 2696 . 2703) (nil fontified t 2696 . 2703) (#("verbose" 0 7 (fontified t src-block t font-lock-fontified t gptel response)) . -2696) (2703 . 2710) (#("verbose" 0 7 (fontified t src-block t font-lock-fontified t gptel response)) . -2533) (2540 . 2547) (#("verbose" 0 7 (fontified t src-block t font-lock-fontified t gptel response)) . -2315) (2322 . 2329)) nil (25889 24547 427678 809000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2991) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) (undo-tree-id1656 . -4) (undo-tree-id1657 . -4) (undo-tree-id1658 . -4) (undo-tree-id1659 . -4) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) (undo-tree-id1662 . -4) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . -4) (undo-tree-id1666 . -4) (undo-tree-id1667 . -4) (undo-tree-id1668 . -4) (undo-tree-id1669 . -4) (undo-tree-id1670 . -4) (undo-tree-id1671 . -4) (undo-tree-id1672 . -4) (undo-tree-id1673 . -4) (undo-tree-id1674 . -4) (undo-tree-id1675 . -4) (undo-tree-id1676 . -4) (undo-tree-id1677 . -4) (undo-tree-id1678 . -4) (undo-tree-id1679 . -4) (undo-tree-id1680 . -4) (undo-tree-id1681 . -4) (undo-tree-id1682 . -4) (undo-tree-id1683 . -4) (undo-tree-id1684 . -4) (undo-tree-id1685 . -4) (undo-tree-id1686 . -4) (undo-tree-id1687 . -4) (undo-tree-id1688 . -4) (undo-tree-id1689 . -4) (undo-tree-id1690 . -4) (undo-tree-id1691 . -4) (undo-tree-id1692 . -4) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4) (undo-tree-id1697 . -4) (undo-tree-id1698 . -4) (undo-tree-id1699 . -4) (undo-tree-id1700 . -4) (undo-tree-id1701 . -4) (undo-tree-id1702 . -4) (undo-tree-id1703 . -4) 2995 (t 25889 24547 446996 683000)) nil (25889 24549 79308 575000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2914) (undo-tree-id1704 . -1) (#(" " 0 1 (fontified t)) . -2915) (undo-tree-id1705 . -1) (#(" " 0 1 (fontified t)) . -2916) (undo-tree-id1706 . -1) (#(" " 0 1 (fontified t)) . -2917) (undo-tree-id1707 . -1) (#(" " 0 1 (fontified t)) . -2918) (undo-tree-id1708 . -1) (#(" " 0 1 (fontified t)) . -2919) (undo-tree-id1709 . -1) (#(" " 0 1 (fontified t)) . -2920) (undo-tree-id1710 . -1) (#(" " 0 1 (fontified t)) . -2921) (undo-tree-id1711 . -1) 2922 (t 25889 24549 95018 155000)) nil (25889 24560 788887 82000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3241 . 3242) (nil fontified nil 3241 . 3242) (nil fontified nil 3240 . 3241) (nil fontified nil 3230 . 3240) (nil fontified nil 3229 . 3230) (nil fontified nil 3217 . 3229) (nil fontified nil 3213 . 3217) (nil fontified nil 3212 . 3213) (nil fontified nil 3203 . 3212) (nil fontified nil 3202 . 3203) (nil fontified nil 3201 . 3202) (nil fontified nil 3197 . 3201) (nil fontified nil 3196 . 3197) (nil fontified nil 3192 . 3196) (nil fontified nil 3184 . 3192) (3184 . 3242) (t 25889 24560 807169 431000)) nil (25889 24585 374535 545000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -3218) (undo-tree-id1713 . -1) (#("e" 0 1 (fontified t)) . -3219) (undo-tree-id1714 . -1) (#("x" 0 1 (fontified t)) . -3220) (undo-tree-id1715 . -1) 3221) nil (25889 24585 374533 686000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3218)) nil (25889 24585 374530 2000) 0 nil])
([nil nil ((3218 . 3221)) nil (25889 24585 374529 321000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . -3220) (undo-tree-id1712 . -1) 3221) nil (25889 24585 374528 520000) 0 nil])
([nil nil ((3220 . 3221)) nil (25889 24585 374518 297000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-variable-name-face fontified t)) . 3197) (#("x" 0 1 (face font-lock-variable-name-face fontified t)) . 3197) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 3197) (#("I" 0 1 (face font-lock-variable-name-face fontified t)) . 3197)) nil (25889 24585 374515 297000) 0 nil])
([nil nil ((3197 . 3200)) nil (25889 24585 374508 876000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3358) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (#(" " 0 1 (fontified t)) . -3359) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#(" " 0 1 (fontified t)) . -3360) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (#(" " 0 1 (fontified t)) . -3361) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (#(" " 0 1 (fontified t)) . -3362) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (#(" " 0 1 (fontified t)) . -3363) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) 3364 (t 25889 24585 395479 873000)) nil (25889 24591 517938 354000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3150) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4) (undo-tree-id2351 . -4) (undo-tree-id2352 . -4) (undo-tree-id2353 . -4) (undo-tree-id2354 . -4) (undo-tree-id2355 . -4) (undo-tree-id2356 . -4) (undo-tree-id2357 . -4) (undo-tree-id2358 . -4) (undo-tree-id2359 . -4) (undo-tree-id2360 . -4) 3154 (t 25889 24591 543556 62000)) nil (25889 24610 972532 815000) 0 nil])
([nil nil ((#("# scaling recurrent weights Jab
        " 0 2 (face font-lock-comment-delimiter-face fontified t) 2 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t) 32 40 (fontified t)) . 2992) (undo-tree-id2361 . -32) (undo-tree-id2362 . -40) 3032 (t 25889 24610 991793 557000)) nil (25889 24618 572636 382000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2874 . 2875) (nil fontified nil 2867 . 2875) (nil fontified nil 2866 . 2867) (nil fontified nil 2837 . 2866) (nil fontified nil 2835 . 2837) (2835 . 2875)) nil (25889 24618 572619 806000) 0 nil])
([nil nil ((#("        if self.VERBOSE:
            print(\"Jab\", self.Jab)
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 37 (fontified t) 37 42 (face font-lock-builtin-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 48 (face font-lock-string-face fontified t) 48 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t rear-nonsticky t)) . 2955) (undo-tree-id2363 . -8) (undo-tree-id2364 . -8) (undo-tree-id2365 . -8) (undo-tree-id2366 . -8) (undo-tree-id2367 . -8) (undo-tree-id2368 . -60) (undo-tree-id2369 . -24) (undo-tree-id2370 . -59) (undo-tree-id2371 . -24) (undo-tree-id2372 . -24) (undo-tree-id2373 . -24) (undo-tree-id2374 . -24) (undo-tree-id2375 . -24) (undo-tree-id2376 . -24) (undo-tree-id2377 . -24) (undo-tree-id2378 . -24) (undo-tree-id2379 . -24) (undo-tree-id2380 . -24) (undo-tree-id2381 . -24) (undo-tree-id2382 . -24) (undo-tree-id2383 . -24) (undo-tree-id2384 . -24) (undo-tree-id2385 . -24) (undo-tree-id2386 . -24) (undo-tree-id2387 . -25) (undo-tree-id2388 . -25) (undo-tree-id2389 . -25) (undo-tree-id2390 . -25) (undo-tree-id2391 . -25) (undo-tree-id2392 . -25) (undo-tree-id2393 . -25) (undo-tree-id2394 . -25) (undo-tree-id2395 . -25) (undo-tree-id2396 . -25) (undo-tree-id2397 . -25) (undo-tree-id2398 . -25) (undo-tree-id2399 . -25) (undo-tree-id2400 . -25) (undo-tree-id2401 . -25) (undo-tree-id2402 . -25) (undo-tree-id2403 . -25) (undo-tree-id2404 . -25) (undo-tree-id2405 . -25) (undo-tree-id2406 . -25) (undo-tree-id2407 . -25) (undo-tree-id2408 . -25) (undo-tree-id2409 . -25) (undo-tree-id2410 . -25) (undo-tree-id2411 . -60) (undo-tree-id2412 . -60) (undo-tree-id2413 . -25) (undo-tree-id2414 . -60) (undo-tree-id2415 . -60) (undo-tree-id2416 . -60) (undo-tree-id2417 . -60) (undo-tree-id2418 . -60) (undo-tree-id2419 . -60) (undo-tree-id2420 . -60) (undo-tree-id2421 . -60) (undo-tree-id2422 . -60) (undo-tree-id2423 . -60) (undo-tree-id2424 . -60) (undo-tree-id2425 . -60) (undo-tree-id2426 . -60) (undo-tree-id2427 . -60) (undo-tree-id2428 . -60) (undo-tree-id2429 . -60) (undo-tree-id2430 . -60) (undo-tree-id2431 . -60) (undo-tree-id2432 . -60) (undo-tree-id2433 . -60) (undo-tree-id2434 . -60) (undo-tree-id2435 . -60) (undo-tree-id2436 . -60) (undo-tree-id2437 . -60) 3015 (t 25889 24618 595885 20000)) nil (25889 24625 577680 515000) 0 nil])
([nil nil ((nil fontified nil 2926 . 2927) (nil fontified nil 2925 . 2926) (nil fontified nil 2921 . 2925) (nil fontified nil 2917 . 2921) (nil fontified nil 2915 . 2917) (nil fontified nil 2910 . 2915) (nil fontified nil 2909 . 2910) (nil fontified nil 2904 . 2909) (nil fontified nil 2882 . 2904) (nil fontified nil 2878 . 2882) (nil fontified nil 2877 . 2878) (nil fontified nil 2875 . 2877) (nil fontified nil 2867 . 2875) (2867 . 2927)) nil (25889 24625 577617 25000) 0 nil])
([nil nil ((2926 . 2939) (t 25889 24625 599968 597000)) nil (25889 24630 644772 708000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -3027) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) 3028) nil (25889 24630 644767 721000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3366) (undo-tree-id2892 . -1) (#(" " 0 1 (fontified t)) . -3367) (undo-tree-id2893 . -1) (#(" " 0 1 (fontified nil)) . -3368) (undo-tree-id2894 . -1) (#(" " 0 1 (fontified t)) . -3369) (undo-tree-id2895 . -1) (#(" " 0 1 (fontified t)) . -3370) (undo-tree-id2896 . -1) (#(" " 0 1 (fontified t)) . -3371) (undo-tree-id2897 . -1) (#(" " 0 1 (fontified t)) . -3372) (undo-tree-id2898 . -1) 3373 (t 25889 24630 672028 735000)) nil (25889 24675 104100 807000) 0 nil])
([nil nil ((641 . 653) (#("        " 0 8 (fontified nil)) . 640) (undo-tree-id2891 . -8) (648 . 649)) nil (25889 24675 104094 160000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -649) (undo-tree-id2890 . -4) 653) nil (25889 24675 104092 782000) 0 nil])
([nil nil ((649 . 655)) nil (25889 24675 104091 428000) 0 nil])
([nil nil ((655 . 667)) nil (25889 24675 104090 596000) 0 nil])
([nil nil ((667 . 676)) nil (25889 24675 104089 871000) 0 nil])
([nil nil ((688 . 689) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 688) (687 . 688) (686 . 688) (#("(" 0 1 (fontified nil)) . -686) (676 . 687)) nil (25889 24675 104089 178000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -688) (undo-tree-id2889 . -1) 689) nil (25889 24675 104088 0) 0 nil])
([nil nil ((676 . 681)) nil (25889 24675 104086 646000) 0 nil])
([nil nil ((693 . 702)) nil (25889 24675 104085 994000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . 655)) nil (25889 24675 104085 391000) 0 nil])
([nil nil ((655 . 658)) nil (25889 24675 104084 836000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-comment-face fontified t)) . -1182) (undo-tree-id2868 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1183) (undo-tree-id2869 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1184) (undo-tree-id2870 . -1) (#("I" 0 1 (face font-lock-comment-face fontified t)) . -1185) (undo-tree-id2871 . -1) (#("0" 0 1 (face font-lock-comment-face fontified t)) . -1186) (undo-tree-id2872 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1187) (undo-tree-id2873 . -1) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -1188) (undo-tree-id2874 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1189) (undo-tree-id2875 . -1) (#("r" 0 1 (face font-lock-comment-face fontified nil)) . -1190) (undo-tree-id2876 . -1) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . -1191) (undo-tree-id2877 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -1192) (undo-tree-id2878 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1193) (undo-tree-id2879 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -1194) (undo-tree-id2880 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1195) (undo-tree-id2881 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1196) (undo-tree-id2882 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1197) (undo-tree-id2883 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -1198) (undo-tree-id2884 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -1199) (undo-tree-id2885 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1200) (undo-tree-id2886 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -1201) (undo-tree-id2887 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1202) (undo-tree-id2888 . -1) 1203) nil (25889 24675 104081 287000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1169) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (#(" " 0 1 (fontified t)) . -1170) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1171) (undo-tree-id2857 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1172) (undo-tree-id2858 . -1) (#("S" 0 1 (face font-lock-comment-face fontified t)) . -1173) (undo-tree-id2859 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1174) (undo-tree-id2860 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1175) (undo-tree-id2861 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1176) (undo-tree-id2862 . -1) (#("b" 0 1 (face font-lock-comment-face fontified t)) . -1177) (undo-tree-id2863 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -1178) (undo-tree-id2864 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -1179) (undo-tree-id2865 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t)) . -1180) (undo-tree-id2866 . -1) (#(" " 0 1 (face font-lock-comment-face fontified t)) . -1181) (undo-tree-id2867 . -1) 1182) nil (25889 24675 104063 113000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -1157) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (#("e" 0 1 (fontified t)) . -1158) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (#("x" 0 1 (fontified t)) . -1159) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (#("t" 0 1 (fontified t)) . -1160) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) 1161) nil (25889 24675 104022 264000) 0 nil])
([nil nil ((1157 . 1160)) nil (25889 24675 103768 680000) 0 nil])
([nil nil ((1169 . 1181)) nil (25889 24675 103768 62000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1177) (undo-tree-id2448 . -4) (undo-tree-id2449 . -4) (undo-tree-id2450 . -4) (undo-tree-id2451 . -4) (undo-tree-id2452 . -4) (undo-tree-id2453 . -4) (undo-tree-id2454 . -4) (undo-tree-id2455 . -4) (undo-tree-id2456 . -4) (undo-tree-id2457 . -4) (undo-tree-id2458 . -4) (undo-tree-id2459 . -4) (undo-tree-id2460 . -4) (undo-tree-id2461 . -4) (undo-tree-id2462 . -4) (undo-tree-id2463 . -4) (undo-tree-id2464 . -4) (undo-tree-id2465 . -4) (undo-tree-id2466 . -4) (undo-tree-id2467 . -4) (undo-tree-id2468 . -4) (undo-tree-id2469 . -4) (undo-tree-id2470 . -4) (undo-tree-id2471 . -4) (undo-tree-id2472 . -4) (undo-tree-id2473 . -4) (undo-tree-id2474 . -4) (undo-tree-id2475 . -4) (undo-tree-id2476 . -4) (undo-tree-id2477 . -4) (undo-tree-id2478 . -4) (undo-tree-id2479 . -4) (undo-tree-id2480 . -4) (undo-tree-id2481 . -4) (undo-tree-id2482 . -4) 1181) nil (25889 24675 103763 899000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1319 . 1320) (nil fontified nil 1318 . 1320) (nil fontified nil 1317 . 1318) (nil fontified nil 1311 . 1317) (nil fontified nil 1307 . 1311) (nil fontified nil 1306 . 1307) (nil fontified nil 1301 . 1306) (nil fontified nil 1300 . 1301) (nil fontified nil 1298 . 1300) (nil fontified nil 1291 . 1298) (nil fontified nil 1288 . 1291) (nil fontified nil 1280 . 1288) (1280 . 1320) (t 25889 24675 124542 832000)) nil (25889 24952 661867 783000) 0 nil])
([nil nil ((1279 . 1288)) nil (25889 24952 661865 89000) 0 nil])
([nil nil ((1337 . 1341)) nil (25889 24952 661863 907000) 0 nil])
([nil nil ((1341 . 1361)) nil (25889 24952 661863 74000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1363) (1362 . 1363) (1361 . 1363) (#("[" 0 1 (fontified nil)) . -1361) (1361 . 1362)) nil (25889 24952 661861 902000) 0 nil])
([nil nil ((1362 . 1367)) nil (25889 24952 661860 593000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 1370) (1369 . 1370) (1368 . 1370) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1368) (1368 . 1369)) nil (25889 24952 661859 294000) 0 nil])
([nil nil ((1369 . 1374)) nil (25889 24952 661857 682000) 0 nil])
([nil nil ((1375 . 1377) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1375) (1375 . 1376)) nil (25889 24952 661856 427000) 0 nil])
([nil nil ((1377 . 1390)) nil (25889 24952 661855 252000) 0 nil])
([nil nil ((1376 . 1381)) nil (25889 24952 661854 608000) 0 nil])
([nil nil ((nil fontified nil 1368 . 1369) (nil fontified nil 1367 . 1368) (nil fontified nil 1366 . 1367) (nil fontified nil 1360 . 1366) (nil fontified nil 1356 . 1360) (nil fontified nil 1355 . 1356) (nil fontified nil 1350 . 1355) (nil fontified nil 1349 . 1350) (nil fontified nil 1347 . 1349) (nil fontified nil 1340 . 1347) (nil fontified nil 1337 . 1340) (nil fontified nil 1329 . 1337) (1329 . 1369)) nil (25889 24952 661853 501000) 0 nil])
([nil nil ((1337 . 1341) 1329) nil (25889 24952 661850 901000) 0 nil])
([nil nil ((1373 . 1389) (#("            " 0 12 (fontified t)) . 1373) (undo-tree-id2948 . -12) 1385) nil (25889 24952 661849 820000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1345)) nil (25889 24952 661847 865000) 0 nil])
([nil nil ((1345 . 1346)) nil (25889 24952 661846 939000) 0 nil])
([nil nil ((1432 . 1448) (#("            " 0 12 (fontified nil)) . 1432) (1431 . 1432)) nil (25889 24952 661845 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1512 . 1513) (nil fontified nil 1512 . 1513) (nil fontified nil 1511 . 1512) (nil fontified nil 1502 . 1511) (nil fontified nil 1501 . 1502) (nil fontified nil 1500 . 1501) (nil fontified nil 1499 . 1500) (nil fontified nil 1488 . 1499) (nil fontified nil 1487 . 1488) (nil fontified nil 1481 . 1487) (nil fontified nil 1480 . 1481) (nil fontified nil 1476 . 1480) (nil fontified nil 1472 . 1476) (nil fontified nil 1471 . 1472) (nil fontified nil 1470 . 1471) (nil fontified nil 1462 . 1470) (nil fontified nil 1458 . 1462) (nil fontified nil 1457 . 1458) (nil fontified nil 1456 . 1457) (nil fontified nil 1448 . 1456) (nil fontified nil 1447 . 1448) (nil fontified nil 1446 . 1447) (nil fontified nil 1440 . 1446) (nil fontified nil 1432 . 1440) (1432 . 1513)) nil (25889 24952 661844 258000) 0 nil])
([nil nil ((1432 . 1448) (#("        " 0 8 (fontified t)) . 1432)) nil (25889 24952 661841 786000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1444) (undo-tree-id2947 . -4) 1448) nil (25889 24952 661841 44000) 0 nil])
([nil nil ((1399 . 1400)) nil (25889 24952 661839 664000) 0 nil])
([nil nil ((#("        if input is not None:
            net_input = self.i2h(input) + self.h2h(hidden)
        else:
            net_input = self.h2h(hidden) + noise

        # hidden = nn.ReLU()(net_input)
        # hidden = hidden * self.exp_dt + self.dt * nn.ReLU()(net_input)
        hidden = hidden * self.exp_dt + self.dt * 15.0 * Activation()(net_input)
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 16 (face font-lock-builtin-face fontified t) 16 17 (fontified t) 17 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 24 (fontified t) 24 28 (face font-lock-constant-face fontified t) 28 30 (fontified t) 30 42 (fontified t) 42 51 (face font-lock-variable-name-face fontified t) 51 52 (fontified t) 52 53 (face font-lock-operator-face fontified t) 53 54 (fontified t) 54 58 (face font-lock-keyword-face fontified t) 58 62 (fontified t) 62 63 (face (rainbow-delimiters-depth-1-face) fontified t) 63 68 (face font-lock-builtin-face fontified t) 68 69 (face (rainbow-delimiters-depth-1-face) fontified t) 69 70 (fontified t) 70 71 (face font-lock-operator-face fontified t) 71 72 (fontified t) 72 76 (face font-lock-keyword-face fontified t) 76 80 (fontified t) 80 81 (face (rainbow-delimiters-depth-1-face) fontified t) 81 87 (fontified t) 87 88 (face (rainbow-delimiters-depth-1-face) fontified t) 88 89 (fontified t) 89 97 (fontified t) 97 101 (face font-lock-keyword-face fontified t) 101 103 (fontified t) 103 115 (fontified t) 115 124 (face font-lock-variable-name-face fontified t) 124 125 (fontified t) 125 126 (face font-lock-operator-face fontified t) 126 127 (fontified t) 127 131 (face font-lock-keyword-face fontified t) 131 135 (fontified t) 135 136 (face (rainbow-delimiters-depth-1-face) fontified t) 136 142 (fontified t) 142 143 (face (rainbow-delimiters-depth-1-face) fontified t) 143 144 (fontified t) 144 145 (face font-lock-operator-face fontified t) 145 147 (fontified t) 147 152 (fontified t) 152 153 (fontified t) 153 161 (fontified t) 161 163 (face font-lock-comment-delimiter-face fontified t) 163 193 (face font-lock-comment-face fontified t) 193 201 (fontified t) 201 203 (face font-lock-comment-delimiter-face fontified t) 203 266 (face font-lock-comment-face fontified t) 266 274 (fontified t) 274 280 (face font-lock-variable-name-face fontified t) 280 281 (fontified t) 281 282 (face font-lock-operator-face fontified t) 282 290 (fontified t) 290 291 (face font-lock-operator-face fontified t) 291 292 (fontified t) 292 296 (face font-lock-keyword-face fontified t) 296 304 (fontified t) 304 305 (face font-lock-operator-face fontified t) 305 306 (fontified t) 306 310 (face font-lock-keyword-face fontified t) 310 314 (fontified t) 314 315 (face font-lock-operator-face fontified t) 315 321 (fontified t) 321 322 (face font-lock-operator-face fontified t) 322 333 (fontified t) 333 334 (face (rainbow-delimiters-depth-1-face) fontified t) 334 335 (face (rainbow-delimiters-depth-1-face) fontified t) 335 336 (face (rainbow-delimiters-depth-1-face) fontified t) 336 345 (fontified t) 345 346 (face (rainbow-delimiters-depth-1-face) fontified t) 346 347 (fontified t)) . -1535) (undo-tree-id2943 . -347) (undo-tree-id2944 . -153) (undo-tree-id2945 . -266) (undo-tree-id2946 . -347) 1882) nil (25889 24952 661839 2000) 0 nil])
([nil nil ((1433 . 1449) (#("            " 0 12 (fontified t)) . 1433)) nil (25889 24952 661835 227000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1445) (undo-tree-id2942 . -4) 1449) nil (25889 24952 661834 527000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1441) (undo-tree-id2941 . -4) 1445) nil (25889 24952 661832 981000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1437) (undo-tree-id2940 . -4) 1441) nil (25889 24952 661831 748000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1433) (undo-tree-id2939 . -4) 1437) nil (25889 24952 661830 199000) 0 nil])
([nil nil ((1433 . 1449)) nil (25889 24952 661828 590000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1445) (undo-tree-id2938 . -4) 1449) nil (25889 24952 661827 970000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t)) . 1445) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 1445) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 1445) (#("d" 0 1 (face font-lock-variable-name-face fontified t)) . 1445) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . 1445) (#("h" 0 1 (face font-lock-variable-name-face fontified t)) . 1445)) nil (25889 24952 661823 824000) 0 nil])
([nil nil ((1445 . 1446)) nil (25889 24952 661822 964000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1445) (undo-tree-id2937 . -1) 1446) nil (25889 24952 661822 439000) 0 nil])
([nil nil ((1445 . 1450)) nil (25889 24952 661821 84000) 0 nil])
([nil nil ((#("hidden" 0 6 (fontified t)) . 1453)) nil (25889 24952 661820 431000) 0 nil])
([nil nil ((1453 . 1458)) nil (25889 24952 661819 798000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1466) (undo-tree-id2931 . -1) (#("x" 0 1 (fontified t)) . -1467) (undo-tree-id2932 . -1) (#("p" 0 1 (fontified t)) . -1468) (undo-tree-id2933 . -1) (#("_" 0 1 (fontified t)) . -1469) (undo-tree-id2934 . -1) (#("d" 0 1 (fontified t)) . -1470) (undo-tree-id2935 . -1) (#("t" 0 1 (fontified t)) . -1471) (undo-tree-id2936 . -1) 1472) nil (25889 24952 661818 494000) 0 nil])
([nil nil ((1466 . 1476)) nil (25889 24952 661813 575000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1484) (#("d" 0 1 (fontified t)) . 1484)) nil (25889 24952 661812 836000) 0 nil])
([nil nil ((1484 . 1490)) nil (25889 24952 661812 278000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1493) (undo-tree-id2924 . -1) (#("5" 0 1 (fontified t)) . -1494) (undo-tree-id2925 . -1) (#("." 0 1 (fontified t)) . -1495) (undo-tree-id2926 . -1) (#("0" 0 1 (fontified t)) . -1496) (undo-tree-id2927 . -1) (#(" " 0 1 (fontified t)) . -1497) (undo-tree-id2928 . -1) (#("*" 0 1 (face font-lock-operator-face fontified t)) . -1498) (undo-tree-id2929 . -1) (#(" " 0 1 (fontified t)) . -1499) (undo-tree-id2930 . -1) 1500) nil (25889 24952 661810 719000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1432) (1431 . 1432) (1430 . 1432) (#("[" 0 1 (fontified nil)) . -1430) (1430 . 1431)) nil (25889 24952 661804 945000) 0 nil])
([nil nil ((1431 . 1436)) nil (25889 24952 661804 31000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1459) (1458 . 1459) (1457 . 1459) (#("[" 0 1 (face font-lock-variable-name-face fontified nil)) . -1457) (1457 . 1458)) nil (25889 24952 661803 138000) 0 nil])
([nil nil ((1458 . 1463)) nil (25889 24952 661802 214000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 1474) (1473 . 1474) (1472 . 1474) (#("[" 0 1 (fontified nil)) . -1472) (1472 . 1473)) nil (25889 24952 661801 35000) 0 nil])
([nil nil ((1473 . 1478)) nil (25889 24952 661799 790000) 0 nil])
([nil nil ((#("        noise = torch.randn(size=(1,self.hidden_size))
" 0 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 14 (fontified t) 14 15 (face font-lock-operator-face fontified t) 15 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (fontified t) 32 33 (face font-lock-operator-face fontified t) 33 34 (face (rainbow-delimiters-depth-2-face) fontified t) 34 36 (fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 52 (fontified t) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t) 53 54 (face (rainbow-delimiters-depth-1-face) fontified t) 54 55 (fontified t)) . -1225) (undo-tree-id2923 . -55) 1280) nil (25889 24952 661799 28000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1224) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) 1225) nil (25889 24952 661797 475000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1207) (undo-tree-id2915 . -1) (#("i" 0 1 (fontified t)) . -1208) (undo-tree-id2916 . -1) (#("d" 0 1 (fontified t)) . -1209) (undo-tree-id2917 . -1) (#("d" 0 1 (fontified t)) . -1210) (undo-tree-id2918 . -1) (#("e" 0 1 (fontified t)) . -1211) (undo-tree-id2919 . -1) (#("n" 0 1 (fontified t)) . -1212) (undo-tree-id2920 . -1) 1213) nil (25889 24952 661794 936000) 0 nil])
([nil nil ((1207 . 1212)) nil (25889 24952 661789 508000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1199) (undo-tree-id2907 . -1) (#("i" 0 1 (fontified t)) . -1200) (undo-tree-id2908 . -1) (#("n" 0 1 (fontified t)) . -1201) (undo-tree-id2909 . -1) (#("p" 0 1 (fontified t)) . -1202) (undo-tree-id2910 . -1) (#("u" 0 1 (fontified t)) . -1203) (undo-tree-id2911 . -1) (#("t" 0 1 (fontified t)) . -1204) (undo-tree-id2912 . -1) (#("," 0 1 (fontified t)) . -1205) (undo-tree-id2913 . -1) (#(" " 0 1 (fontified t)) . -1206) (undo-tree-id2914 . -1) 1207) nil (25889 24952 661787 244000) 0 nil])
([nil nil ((1199 . 1200)) nil (25889 24952 661780 642000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1506) (undo-tree-id2901 . -1) (#("i" 0 1 (fontified nil)) . -1507) (undo-tree-id2902 . -1) (#("d" 0 1 (fontified nil)) . -1508) (undo-tree-id2903 . -1) (#("d" 0 1 (fontified nil)) . -1509) (undo-tree-id2904 . -1) ("e" . -1510) (undo-tree-id2905 . -1) (#("n" 0 1 (fontified t)) . -1511) (undo-tree-id2906 . -1) 1512) nil (25889 24952 661779 60000) 0 nil])
([nil nil ((1506 . 1511)) nil (25889 24952 661773 873000) 0 nil])
([nil nil ((1264 . 1277)) nil (25889 24952 661773 443000) 0 nil])
([nil nil ((1277 . 1290)) nil (25889 24952 661772 983000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1287) (undo-tree-id2900 . -1) 1288) nil (25889 24952 661772 164000) 0 nil])
([nil nil ((1289 . 1290)) nil (25889 24952 661769 680000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1289) (undo-tree-id2899 . -1) 1290) nil (25889 24952 661768 272000) 0 nil])
([nil nil ((1289 . 1290)) nil (25889 24952 661755 59000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1393) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (t 25889 24952 683397 64000)) nil (25889 24965 820486 48000) 0 nil])
([nil nil ((1393 . 1394)) nil (25889 24965 820462 652000) 0 nil])
([nil nil ((#("H" 0 1 (face font-lock-function-name-face fontified t)) . -1551) (undo-tree-id2978 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1552) (undo-tree-id2979 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -1553) (undo-tree-id2980 . -1) (#("d" 0 1 (face font-lock-function-name-face fontified t)) . -1554) (undo-tree-id2981 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -1555) (undo-tree-id2982 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1556) (undo-tree-id2983 . -1) 1557 (t 25889 24965 847522 598000)) nil (25889 25057 168613 922000) 0 nil])
([nil nil ((1551 . 1556)) nil (25889 25057 168607 196000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1591) (undo-tree-id2977 . -1) 1592) nil (25889 25057 168606 105000) 0 nil])
([nil nil ((1591 . 1601)) nil (25889 25057 168604 403000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -1610) (undo-tree-id2968 . -1) (#("d" 0 1 (fontified t)) . -1611) (undo-tree-id2969 . -1) (#("e" 0 1 (fontified t)) . -1612) (undo-tree-id2970 . -1) (#("n" 0 1 (fontified t)) . -1613) (undo-tree-id2971 . -1) (#("_" 0 1 (fontified t)) . -1614) (undo-tree-id2972 . -1) (#("s" 0 1 (fontified t)) . -1615) (undo-tree-id2973 . -1) (#("i" 0 1 (fontified t)) . -1616) (undo-tree-id2974 . -1) (#("z" 0 1 (fontified t)) . -1617) (undo-tree-id2975 . -1) (#("e" 0 1 (fontified t)) . -1618) (undo-tree-id2976 . -1) 1619) nil (25889 25057 168601 23000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -1608) (undo-tree-id2966 . -1) (#("i" 0 1 (fontified t)) . -1609) (undo-tree-id2967 . -1) 1610) nil (25889 25057 168591 526000) 0 nil])
([nil nil ((1608 . 1616)) nil (25889 25057 168516 597000) 0 nil])
([nil nil ((1618 . 1622) (t 25889 25057 192122 947000)) nil (25889 25126 279700 218000) 0 nil])
([nil nil ((#("        # Loading configuration file 
        conf_path = repo_root + '/conf/'+ conf_file
        print('Loading config from', conf_path)
        param = safe_load(open(conf_path, \"r\"))
        
        param[\"FILE_NAME\"] = sim_name
        param.update(kwargs)
        
        for k, v in param.items():
            setattr(self, k, v)
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 38 (face font-lock-comment-face fontified t) 38 46 (fontified t) 46 55 (face font-lock-variable-name-face fontified t) 55 56 (fontified t) 56 57 (face font-lock-operator-face fontified t) 57 68 (fontified t) 68 69 (face font-lock-operator-face fontified t) 69 70 (fontified t) 70 78 (face font-lock-string-face fontified t) 78 79 (face font-lock-operator-face fontified t) 79 98 (fontified t) 98 103 (face font-lock-builtin-face fontified t) 103 104 (face (rainbow-delimiters-depth-1-face) fontified t) 104 125 (face font-lock-string-face fontified t) 125 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-1-face) fontified t) 137 146 (fontified t) 146 151 (face font-lock-variable-name-face fontified t) 151 152 (fontified t) 152 153 (face font-lock-operator-face fontified t) 153 163 (fontified t) 163 164 (face (rainbow-delimiters-depth-1-face) fontified t) 164 168 (face font-lock-builtin-face fontified t) 168 169 (face (rainbow-delimiters-depth-2-face) fontified t) 169 180 (fontified t) 180 183 (face font-lock-string-face fontified t) 183 184 (face (rainbow-delimiters-depth-2-face) fontified t) 184 185 (face (rainbow-delimiters-depth-1-face) fontified t) 185 203 (fontified t) 203 208 (face font-lock-variable-name-face fontified t) 208 209 (face (rainbow-delimiters-depth-1-face) fontified t) 209 220 (face font-lock-string-face fontified t) 220 221 (face (rainbow-delimiters-depth-1-face) fontified t) 221 222 (fontified t) 222 223 (face font-lock-operator-face fontified t) 223 253 (fontified t) 253 254 (face (rainbow-delimiters-depth-1-face) fontified t) 254 260 (fontified t) 260 261 (face (rainbow-delimiters-depth-1-face) fontified t) 261 279 (fontified t) 279 282 (face font-lock-keyword-face fontified t) 282 288 (fontified t) 288 290 (face font-lock-keyword-face fontified t) 290 302 (fontified t) 302 303 (face (rainbow-delimiters-depth-1-face) fontified t) 303 304 (face (rainbow-delimiters-depth-1-face) fontified t) 304 318 (fontified t) 318 325 (face font-lock-builtin-face fontified t) 325 326 (face (rainbow-delimiters-depth-1-face) fontified t) 326 330 (face font-lock-keyword-face fontified t) 330 336 (fontified t) 336 337 (face (rainbow-delimiters-depth-1-face) fontified t) 337 338 (fontified t)) . 302) (undo-tree-id3084 . -271) (undo-tree-id3085 . -262) (undo-tree-id3086 . -262) (undo-tree-id3087 . -271) (undo-tree-id3088 . -271) (undo-tree-id3089 . -338) 640) nil (25889 25126 279699 532000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -301) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) 302) nil (25889 25126 279694 424000) 0 nil])
([nil nil ((1199 . 1204)) nil (25889 25126 279689 506000) 0 nil])
([nil nil ((1204 . 1207)) nil (25889 25126 279688 967000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1205) (undo-tree-id3075 . -1) (#("e" 0 1 (fontified t)) . -1206) (undo-tree-id3076 . -1) 1207) nil (25889 25126 279688 318000) 0 nil])
([nil nil ((1205 . 1211)) nil (25889 25126 279686 622000) 0 nil])
([nil nil ((1211 . 1215)) nil (25889 25126 279686 294000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-function-name-face fontified t)) . -1213) (undo-tree-id3073 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -1214) (undo-tree-id3074 . -1) 1215) nil (25889 25126 279685 474000) 0 nil])
([nil nil ((1213 . 1218)) nil (25889 25126 279683 719000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-function-name-face fontified t)) . -1217) (undo-tree-id3072 . -1) 1218) nil (25889 25126 279682 962000) 0 nil])
([nil nil ((1219 . 1223) (1218 . 1220) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -1218) (1217 . 1219)) nil (25889 25126 279681 404000) 0 nil])
([nil nil ((1224 . 1225)) nil (25889 25126 279680 777000) 0 nil])
([nil nil ((1225 . 1234)) nil (25889 25126 279680 338000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1563 . 1564) (nil fontified nil 1563 . 1564) (nil fontified nil 1562 . 1563) (nil fontified nil 1556 . 1562) (nil fontified nil 1552 . 1556) (nil fontified nil 1551 . 1552) (nil fontified nil 1544 . 1551) (nil fontified nil 1530 . 1544) (nil fontified nil 1529 . 1530) (nil fontified nil 1528 . 1529) (nil fontified nil 1516 . 1528) (nil fontified nil 1514 . 1516) (nil fontified nil 1508 . 1514) (nil fontified nil 1505 . 1508) (nil fontified nil 1487 . 1505) (nil fontified nil 1486 . 1487) (nil fontified nil 1480 . 1486) (nil fontified nil 1479 . 1480) (nil fontified nil 1449 . 1479) (nil fontified nil 1448 . 1449) (nil fontified nil 1447 . 1448) (nil fontified nil 1446 . 1447) (nil fontified nil 1435 . 1446) (nil fontified nil 1434 . 1435) (nil fontified nil 1429 . 1434) (nil fontified nil 1411 . 1429) (nil fontified nil 1410 . 1411) (nil fontified nil 1409 . 1410) (nil fontified nil 1406 . 1409) (nil fontified nil 1395 . 1406) (nil fontified nil 1394 . 1395) (nil fontified nil 1390 . 1394) (nil fontified nil 1389 . 1390) (nil fontified nil 1379 . 1389) (nil fontified nil 1378 . 1379) (nil fontified nil 1377 . 1378) (nil fontified nil 1372 . 1377) (nil fontified nil 1363 . 1372) (nil fontified nil 1362 . 1363) (nil fontified nil 1351 . 1362) (nil fontified nil 1330 . 1351) (nil fontified nil 1329 . 1330) (nil fontified nil 1324 . 1329) (nil fontified nil 1305 . 1324) (nil fontified nil 1304 . 1305) (nil fontified nil 1296 . 1304) (nil fontified nil 1295 . 1296) (nil fontified nil 1294 . 1295) (nil fontified nil 1283 . 1294) (nil fontified nil 1282 . 1283) (nil fontified nil 1281 . 1282) (nil fontified nil 1272 . 1281) (nil fontified nil 1264 . 1272) (nil fontified nil 1236 . 1264) (nil fontified nil 1234 . 1236) (nil fontified nil 1226 . 1234) (1226 . 1564)) nil (25889 25126 279678 578000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -220) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (#("," 0 1 (fontified t)) . -221) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) 222) nil (25889 25126 279668 487000) 0 nil])
([nil nil ((1221 . 1223) (t 25889 25126 300350 255000)) nil (25889 25137 83401 232000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1221) (undo-tree-id3091 . -1) (#(" " 0 1 (fontified t)) . -1222) (undo-tree-id3092 . -1) 1223) nil (25889 25137 83399 828000) 0 nil])
([nil nil ((1221 . 1222)) nil (25889 25137 83396 831000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -1221) (undo-tree-id3090 . -1) 1222) nil (25889 25137 83395 146000) 0 nil])
([nil nil ((1221 . 1222)) nil (25889 25137 83387 319000) 0 nil])
([nil nil ((1222 . 1223)) nil (25889 25137 83386 128000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1262 . 1263) (nil fontified nil 1257 . 1263) (nil fontified nil 1255 . 1257) (nil fontified nil 1223 . 1255) (1223 . 1263)) nil (25889 25137 83381 530000) 0 nil])
([nil nil ((299 . 305) (t 25889 25137 104389 638000)) nil (25889 25169 877797 604000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-comment-face fontified t)) . -302) (undo-tree-id3100 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -303) (undo-tree-id3101 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -304) (undo-tree-id3102 . -1) 305) nil (25889 25169 877796 780000) 0 nil])
([nil nil ((302 . 314)) nil (25889 25169 877794 120000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-comment-face fontified t)) . -309) (undo-tree-id3095 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -310) (undo-tree-id3096 . -1) (#("n" 0 1 (face font-lock-comment-face fontified t)) . -311) (undo-tree-id3097 . -1) (#("f" 0 1 (face font-lock-comment-face fontified t)) . -312) (undo-tree-id3098 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -313) (undo-tree-id3099 . -1) 314) nil (25889 25169 877792 882000) 0 nil])
([nil nil ((309 . 319)) nil (25889 25169 877788 587000) 0 nil])
([nil nil ((319 . 328)) nil (25889 25169 877788 230000) 0 nil])
([nil nil ((nil rear-nonsticky nil 395 . 396) (nil fontified nil 394 . 396) (nil fontified nil 393 . 394) (nil fontified nil 392 . 393) (nil fontified nil 387 . 392) (nil fontified nil 385 . 387) (nil fontified nil 353 . 385) (nil fontified nil 351 . 353) (nil fontified nil 347 . 351) (nil fontified nil 346 . 347) (nil fontified nil 336 . 346) (nil fontified nil 335 . 336) (nil fontified nil 332 . 335) (nil fontified nil 328 . 332) (328 . 396)) nil (25889 25169 877787 421000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -328) 320) nil (25889 25169 877786 11000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 328) (#("f" 0 1 (fontified t)) . 328) (#("e" 0 1 (fontified t)) . 328) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . 328)) nil (25889 25169 877784 981000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -386) (undo-tree-id3094 . -1) 387) nil (25889 25169 877784 75000) 0 nil])
([nil nil ((328 . 330)) nil (25889 25169 877782 280000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -329) (undo-tree-id3093 . -1) 330) nil (25889 25169 877781 61000) 0 nil])
([nil nil ((329 . 333)) nil (25889 25169 877767 935000) 0 nil])
([nil nil ((392 . 400) (t 25889 25169 904515 127000)) nil (25889 25174 946237 76000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 345) (#("," 0 1 (fontified t)) . 345) (#("f" 0 1 (fontified t)) . 345) (#("l" 0 1 (fontified t)) . 345) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . 345)) nil (25889 25174 946233 174000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -344) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (undo-tree-id3212 . -1) (undo-tree-id3213 . -1) (undo-tree-id3214 . -1) 345) nil (25889 25174 946220 287000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1266) (undo-tree-id3215 . -4) 1270 (t 25889 25174 972535 285000)) nil (25889 25235 416431 402000) 0 nil])
([nil nil ((nil rear-nonsticky nil 80 . 81) (nil fontified nil 70 . 81) (nil fontified nil 64 . 70) (nil fontified nil 58 . 64) (nil fontified nil 54 . 58) (54 . 81)) nil (25889 25235 416415 186000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -776) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -1) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (#(" " 0 1 (fontified t)) . -777) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (#(" " 0 1 (fontified nil)) . -778) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (#(" " 0 1 (fontified nil)) . -779) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) (undo-tree-id3344 . -1) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (undo-tree-id3347 . -1) (undo-tree-id3348 . -1) (undo-tree-id3349 . -1) (undo-tree-id3350 . -1) (undo-tree-id3351 . -1) (undo-tree-id3352 . -1) (undo-tree-id3353 . -1) (#(" " 0 1 (fontified nil)) . -780) (undo-tree-id3354 . -1) (undo-tree-id3355 . -1) (undo-tree-id3356 . -1) (undo-tree-id3357 . -1) (undo-tree-id3358 . -1) (undo-tree-id3359 . -1) (undo-tree-id3360 . -1) (undo-tree-id3361 . -1) (undo-tree-id3362 . -1) (undo-tree-id3363 . -1) (undo-tree-id3364 . -1) (undo-tree-id3365 . -1) (undo-tree-id3366 . -1) (#(" " 0 1 (fontified t)) . -781) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (#(" " 0 1 (fontified t)) . -782) (undo-tree-id3378 . -1) (#(" " 0 1 (fontified t)) . -783) (undo-tree-id3379 . -1) (#(" " 0 1 (fontified t)) . -784) (undo-tree-id3380 . -1) (#(" " 0 1 (fontified t)) . -785) (undo-tree-id3381 . -1) (#(" " 0 1 (fontified t)) . -786) (undo-tree-id3382 . -1) (#(" " 0 1 (fontified t)) . -787) (undo-tree-id3383 . -1) (#(" " 0 1 (fontified t)) . -788) (undo-tree-id3384 . -1) (#(" " 0 1 (fontified t)) . -789) (undo-tree-id3385 . -1) (#(" " 0 1 (fontified t)) . -790) (undo-tree-id3386 . -1) (#(" " 0 1 (fontified t)) . -791) (undo-tree-id3387 . -1) 792 (t 25889 25235 436790 701000)) nil (25889 25247 843443 381000) 0 nil])
([nil nil ((922 . 927) (t 25889 25247 868846 459000)) nil (25889 25256 56285 774000) 0 nil])
([nil nil ((1171 . 1187) (t 25889 25256 84883 882000)) nil (25889 25326 646940 374000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1183) (undo-tree-id3388 . -4) 1187) nil (25889 25326 646936 114000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1243) (1242 . 1243) (1241 . 1243) (#("[" 0 1 (fontified nil)) . -1241) (1241 . 1242) (t 25889 25326 677223 202000)) nil (25889 25392 702588 823000) 0 nil])
([nil nil ((1242 . 1247)) nil (25889 25392 702587 955000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . 1264) (1263 . 1264) (1262 . 1264) (#("[" 0 1 (fontified nil)) . -1262) (1262 . 1263)) nil (25889 25392 702586 420000) 0 nil])
([nil nil ((1263 . 1268)) nil (25889 25392 702581 563000) 0 nil])
([nil nil ((2916 . 2920) (t 25889 25392 729566 966000)) nil (25889 25425 563215 248000) 0 nil])
([nil nil ((2920 . 2923)) nil (25889 25425 563214 45000) 0 nil])
([nil nil ((2915 . 2920)) nil (25889 25425 563213 144000) 0 nil])
([nil nil ((2928 . 2935)) nil (25889 25425 563212 221000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-function-name-face fontified t)) . -2933) (undo-tree-id3389 . -1) (#("M" 0 1 (face font-lock-function-name-face fontified t)) . -2934) (undo-tree-id3390 . -1) 2935) nil (25889 25425 563210 557000) 0 nil])
([nil nil ((2940 . 2942) (2939 . 2941) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -2939) (2933 . 2940)) nil (25889 25425 563199 253000) 0 nil])
([nil nil ((2942 . 2944)) nil (25889 25425 563197 647000) 0 nil])
([nil nil ((2945 . 2946)) nil (25889 25425 563196 706000) 0 nil])
([nil nil ((2946 . 2955)) nil (25889 25425 563195 684000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3008 . 3009) (nil fontified nil 3008 . 3009) (nil fontified nil 3007 . 3008) (nil fontified nil 3006 . 3007) (nil fontified nil 3005 . 3006) (nil fontified nil 3004 . 3005) (nil fontified nil 3003 . 3004) (nil fontified nil 2993 . 3003) (nil fontified nil 2992 . 2993) (nil fontified nil 2988 . 2992) (nil fontified nil 2979 . 2988) (nil fontified nil 2978 . 2979) (nil fontified nil 2977 . 2978) (nil fontified nil 2976 . 2977) (nil fontified nil 2975 . 2976) (nil fontified nil 2974 . 2975) (nil fontified nil 2960 . 2974) (nil fontified nil 2959 . 2960) (nil fontified nil 2955 . 2959) (nil fontified nil 2947 . 2955) (2947 . 3009)) nil (25889 25425 563189 867000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3193 . 3194) (nil fontified nil 3193 . 3194) (nil fontified nil 3192 . 3193) (nil fontified nil 3191 . 3192) (nil fontified nil 3186 . 3191) (nil fontified nil 3185 . 3186) (nil fontified nil 3177 . 3185) (nil fontified nil 3173 . 3177) (nil fontified nil 3172 . 3173) (nil fontified nil 3171 . 3172) (nil fontified nil 3167 . 3171) (nil fontified nil 3163 . 3167) (nil fontified nil 3162 . 3163) (nil fontified nil 3144 . 3162) (nil fontified nil 3140 . 3144) (nil fontified nil 3127 . 3140) (nil fontified nil 3126 . 3127) (nil fontified nil 3125 . 3126) (nil fontified nil 3124 . 3125) (nil fontified nil 3119 . 3124) (nil fontified nil 3118 . 3119) (nil fontified nil 3110 . 3118) (nil fontified nil 3106 . 3110) (nil fontified nil 3105 . 3106) (nil fontified nil 3104 . 3105) (nil fontified nil 3100 . 3104) (nil fontified nil 3096 . 3100) (nil fontified nil 3095 . 3096) (nil fontified nil 3094 . 3095) (nil fontified nil 3088 . 3094) (nil fontified nil 3087 . 3088) (nil fontified nil 3065 . 3087) (nil fontified nil 3061 . 3065) (nil fontified nil 3047 . 3061) (nil fontified nil 3046 . 3047) (nil fontified nil 3040 . 3046) (nil fontified nil 3036 . 3040) (nil fontified nil 3035 . 3036) (nil fontified nil 3030 . 3035) (nil fontified nil 3029 . 3030) (nil fontified nil 3027 . 3029) (nil fontified nil 3020 . 3027) (nil fontified nil 3017 . 3020) (nil fontified nil 3009 . 3017) (3009 . 3194) (t 25889 25425 589746 450000)) nil (25889 25443 839124 332000) 0 nil])
([nil nil ((3009 . 3010)) nil (25889 25443 839119 672000) 0 nil])
([nil nil ((#("_SYN" 0 4 (face font-lock-variable-name-face fontified t)) . 2970)) nil (25889 25443 839119 61000) 0 nil])
([nil nil ((#("_SYN" 0 4 (face font-lock-variable-name-face fontified t)) . 2995)) nil (25889 25443 839118 435000) 0 nil])
([nil nil ((#("_TAU_SYN" 0 8 (fontified t)) . 3065)) nil (25889 25443 839117 828000) 0 nil])
([nil nil ((#("_SYN" 0 4 (fontified t)) . 3136)) nil (25889 25443 839117 52000) 0 nil])
([nil nil ((#("_SYN" 0 4 (fontified t)) . 3162)) nil (25889 25443 839116 171000) 0 nil])
([nil nil ((#("_SYN" 0 4 (fontified t)) . 3099) (undo-tree-id3391 . -1) (undo-tree-id3392 . -2) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -4)) nil (25889 25443 839111 785000) 0 nil])
([nil nil ((nil rear-nonsticky nil 428 . 429) (nil fontified nil 428 . 429) (nil fontified nil 424 . 428) (nil fontified nil 423 . 424) (nil fontified nil 413 . 423) (413 . 429) (t 25889 25443 865848 532000)) nil (25889 25459 788500 34000) 0 nil])
([nil nil ((413 . 421)) nil (25889 25459 788499 220000) 0 nil])
([nil nil ((414 . 422) (#("        " 0 8 (fontified nil)) . 413) (undo-tree-id3413 . -8) (421 . 422)) nil (25889 25459 788498 634000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -433) (undo-tree-id3409 . -1) (#("e" 0 1 (fontified t)) . -434) (undo-tree-id3410 . -1) (#("l" 0 1 (fontified t)) . -435) (undo-tree-id3411 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -436) (undo-tree-id3412 . -1) 437) nil (25889 25459 788496 241000) 0 nil])
([nil nil ((422 . 427)) nil (25889 25459 788483 389000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -439) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (#(" " 0 1 (fontified t)) . -440) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (#(" " 0 1 (fontified t)) . -441) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (undo-tree-id3721 . -1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . -1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (undo-tree-id3750 . -1) (undo-tree-id3751 . -1) (undo-tree-id3752 . -1) (undo-tree-id3753 . -1) (undo-tree-id3754 . -1) (undo-tree-id3755 . -1) (undo-tree-id3756 . -1) (undo-tree-id3757 . -1) (undo-tree-id3758 . -1) (undo-tree-id3759 . -1) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1) (undo-tree-id3776 . -1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1) (undo-tree-id3779 . -1) (undo-tree-id3780 . -1) (undo-tree-id3781 . -1) (undo-tree-id3782 . -1) (undo-tree-id3783 . -1) (undo-tree-id3784 . -1) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1) (undo-tree-id3788 . -1) (undo-tree-id3789 . -1) (undo-tree-id3790 . -1) (undo-tree-id3791 . -1) (undo-tree-id3792 . -1) (undo-tree-id3793 . -1) (undo-tree-id3794 . -1) (undo-tree-id3795 . -1) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (#(" " 0 1 (fontified t)) . -442) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . -1) (undo-tree-id3924 . -1) (undo-tree-id3925 . -1) (undo-tree-id3926 . -1) (undo-tree-id3927 . -1) (undo-tree-id3928 . -1) (undo-tree-id3929 . -1) (undo-tree-id3930 . -1) (undo-tree-id3931 . -1) (undo-tree-id3932 . -1) (undo-tree-id3933 . -1) (undo-tree-id3934 . -1) (undo-tree-id3935 . -1) (undo-tree-id3936 . -1) (undo-tree-id3937 . -1) (undo-tree-id3938 . -1) (undo-tree-id3939 . -1) (undo-tree-id3940 . -1) (undo-tree-id3941 . -1) (undo-tree-id3942 . -1) (undo-tree-id3943 . -1) (undo-tree-id3944 . -1) (undo-tree-id3945 . -1) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1) (undo-tree-id3949 . -1) (undo-tree-id3950 . -1) (undo-tree-id3951 . -1) (undo-tree-id3952 . -1) (undo-tree-id3953 . -1) (undo-tree-id3954 . -1) (undo-tree-id3955 . -1) (#(" " 0 1 (fontified t)) . -443) (undo-tree-id3956 . -1) (undo-tree-id3957 . -1) (undo-tree-id3958 . -1) (undo-tree-id3959 . -1) (undo-tree-id3960 . -1) (undo-tree-id3961 . -1) (undo-tree-id3962 . -1) (undo-tree-id3963 . -1) (undo-tree-id3964 . -1) (undo-tree-id3965 . -1) (undo-tree-id3966 . -1) (undo-tree-id3967 . -1) (undo-tree-id3968 . -1) (undo-tree-id3969 . -1) (undo-tree-id3970 . -1) (undo-tree-id3971 . -1) (undo-tree-id3972 . -1) (undo-tree-id3973 . -1) (undo-tree-id3974 . -1) (undo-tree-id3975 . -1) (undo-tree-id3976 . -1) (undo-tree-id3977 . -1) (undo-tree-id3978 . -1) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1) (undo-tree-id3982 . -1) (undo-tree-id3983 . -1) (undo-tree-id3984 . -1) (undo-tree-id3985 . -1) (undo-tree-id3986 . -1) (undo-tree-id3987 . -1) (undo-tree-id3988 . -1) (undo-tree-id3989 . -1) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (#(" " 0 1 (fontified t)) . -444) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (#(" " 0 1 (fontified t)) . -445) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (#(" " 0 1 (fontified t)) . -446) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) 447 (t 25889 25459 813938 872000)) nil (25889 25461 695891 376000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1257 . 1258) (nil fontified nil 1257 . 1258) (nil fontified nil 1256 . 1257) (nil fontified nil 1255 . 1256) (nil fontified nil 1254 . 1255) (nil fontified nil 1253 . 1254) (nil fontified nil 1252 . 1253) (nil fontified nil 1251 . 1252) (nil fontified nil 1249 . 1251) (nil fontified nil 1248 . 1249) (nil fontified nil 1242 . 1248) (nil fontified nil 1241 . 1242) (nil fontified nil 1232 . 1241) (nil fontified nil 1231 . 1232) (nil fontified nil 1226 . 1231) (nil fontified nil 1225 . 1226) (nil fontified nil 1219 . 1225) (nil fontified nil 1218 . 1219) (nil fontified nil 1201 . 1218) (1201 . 1258) (t 25889 25461 721949 757000)) nil (25889 25730 654172 742000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -1206) (1189 . 1190)) nil (25889 25730 654170 832000) 0 nil])
([nil nil ((1052 . 1065)) nil (25889 25730 654170 151000) 0 nil])
([nil nil ((1065 . 1070)) nil (25889 25730 654169 759000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1065) (undo-tree-id4345 . -1) (#("d" 0 1 (fontified t)) . -1066) (undo-tree-id4346 . -1) (#("x" 0 1 (fontified t)) . -1067) (undo-tree-id4347 . -1) (#(" " 0 1 (fontified t)) . -1068) (undo-tree-id4348 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1069) (undo-tree-id4349 . -1) 1070) nil (25889 25730 654168 456000) 0 nil])
([nil nil ((1065 . 1066)) nil (25889 25730 654163 776000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1065) (undo-tree-id4344 . -1) 1066) nil (25889 25730 654163 302000) 0 nil])
([nil nil ((1065 . 1071)) nil (25889 25730 654162 354000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1127 . 1128) (nil fontified nil 1127 . 1128) (nil fontified nil 1126 . 1127) (nil fontified nil 1125 . 1126) (nil fontified nil 1124 . 1125) (nil fontified nil 1123 . 1124) (nil fontified nil 1122 . 1123) (nil fontified nil 1121 . 1122) (nil fontified nil 1119 . 1121) (nil fontified nil 1118 . 1119) (nil fontified nil 1112 . 1118) (nil fontified nil 1111 . 1112) (nil fontified nil 1102 . 1111) (nil fontified nil 1101 . 1102) (nil fontified nil 1096 . 1101) (nil fontified nil 1095 . 1096) (nil fontified nil 1089 . 1095) (nil fontified nil 1088 . 1089) (nil fontified nil 1071 . 1088) (1071 . 1128)) nil (25889 25730 654161 628000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1122) (undo-tree-id4338 . -1) (#(" " 0 1 (fontified t)) . -1123) (undo-tree-id4339 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1124) (undo-tree-id4340 . -1) (#(" " 0 1 (fontified t)) . -1125) (undo-tree-id4341 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1126) (undo-tree-id4342 . -1) (#("
" 0 1 (rear-nonsticky t fontified t)) . -1127) (undo-tree-id4343 . -1) 1128) nil (25889 25730 654158 939000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1088) (undo-tree-id4337 . -1) 1089) nil (25889 25730 654154 438000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1070) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (#(" " 0 1 (fontified t)) . -1071) (undo-tree-id4320 . -1) (#(" " 0 1 (fontified t)) . -1072) (undo-tree-id4321 . -1) (#(" " 0 1 (fontified t)) . -1073) (undo-tree-id4322 . -1) (#(" " 0 1 (fontified t)) . -1074) (undo-tree-id4323 . -1) (#(" " 0 1 (fontified t)) . -1075) (undo-tree-id4324 . -1) (#(" " 0 1 (fontified t)) . -1076) (undo-tree-id4325 . -1) (#(" " 0 1 (fontified nil)) . -1077) (undo-tree-id4326 . -1) (#(" " 0 1 (fontified nil)) . -1078) (undo-tree-id4327 . -1) (#(" " 0 1 (fontified nil)) . -1079) (undo-tree-id4328 . -1) (#(" " 0 1 (fontified nil)) . -1080) (undo-tree-id4329 . -1) (#(" " 0 1 (fontified nil)) . -1081) (undo-tree-id4330 . -1) (#(" " 0 1 (fontified nil)) . -1082) (undo-tree-id4331 . -1) (#("r" 0 1 (fontified nil)) . -1083) (undo-tree-id4332 . -1) (#("a" 0 1 (fontified nil)) . -1084) (undo-tree-id4333 . -1) (#("t" 0 1 (fontified nil)) . -1085) (undo-tree-id4334 . -1) (#("e" 0 1 (fontified nil)) . -1086) (undo-tree-id4335 . -1) (#("s" 0 1 (fontified t)) . -1087) (undo-tree-id4336 . -1) 1088) nil (25889 25730 654149 959000) 0 nil])
([nil nil ((1070 . 1076)) nil (25889 25730 654133 740000) 0 nil])
([nil nil ((1092 . 1094)) nil (25889 25730 654133 415000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1093) (undo-tree-id4317 . -1) 1094) nil (25889 25730 654132 818000) 0 nil])
([nil nil ((1093 . 1097)) nil (25889 25730 654131 809000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1090) (undo-tree-id4315 . -1) (#(" " 0 1 (fontified t)) . -1091) (undo-tree-id4316 . -1) 1092) nil (25889 25730 654131 115000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1089) (undo-tree-id4314 . -1) 1090) nil (25889 25730 654129 146000) 0 nil])
([nil nil ((#("            idx = self.csumNa[i_pop]self.csumNa[i_pop + 1]
" 0 12 (fontified t) 12 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 17 (face font-lock-operator-face fontified t) 17 18 (fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 40 (face font-lock-keyword-face fontified t) 40 47 (fontified t) 47 48 (face (rainbow-delimiters-depth-1-face) fontified t) 48 54 (fontified t) 54 55 (face font-lock-operator-face fontified t) 55 57 (fontified t) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t) 58 59 (fontified t)) . -1053) (undo-tree-id4311 . -17) (undo-tree-id4312 . -58) (undo-tree-id4313 . -59) 1112) nil (25889 25730 654127 729000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1248) (undo-tree-id4309 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1249) (undo-tree-id4310 . -1) 1250) nil (25889 25730 654125 225000) 0 nil])
([nil nil ((1212 . 1217)) nil (25889 25730 654123 496000) 0 nil])
([nil nil ((1233 . 1238)) nil (25889 25730 654123 188000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1258)) nil (25889 25730 654122 680000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1202) (undo-tree-id4308 . -4) 1206) nil (25889 25730 654122 107000) 0 nil])
([nil nil ((1254 . 1255)) nil (25889 25730 654121 107000) 0 nil])
([nil nil ((1190 . 1206) (#("            " 0 12 (fontified t)) . 1190) (undo-tree-id4294 . -12) (undo-tree-id4295 . -12) (undo-tree-id4296 . -12) (undo-tree-id4297 . -12) (undo-tree-id4298 . -12) (undo-tree-id4299 . -12) (undo-tree-id4300 . -12) (undo-tree-id4301 . -12) (undo-tree-id4302 . -12) (undo-tree-id4303 . -12) (undo-tree-id4304 . -12) (undo-tree-id4305 . -12) (undo-tree-id4306 . -12) (undo-tree-id4307 . -12)) nil (25889 25730 654120 281000) 0 nil])
([nil nil ((#("rates[self.csumNa[i_pop] : self.csumNa[i_pop + 1]]" 0 5 (fontified t) 5 6 (face (rainbow-delimiters-depth-1-face) fontified t) 6 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-2-face) fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-2-face) fontified t) 24 27 (fontified t) 27 31 (face font-lock-keyword-face fontified t) 31 38 (fontified t) 38 39 (face (rainbow-delimiters-depth-2-face) fontified t) 39 45 (fontified t) 45 46 (face font-lock-operator-face fontified t) 46 48 (fontified t) 48 49 (face (rainbow-delimiters-depth-2-face) fontified t) 49 50 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1206) (undo-tree-id4293 . -50) 1256) nil (25889 25730 654108 129000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1202) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (#(" " 0 1 (fontified nil)) . -1203) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (#(" " 0 1 (fontified t)) . -1204) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (#(" " 0 1 (fontified t)) . -1205) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) 1206) nil (25889 25730 654106 180000) 0 nil])
([nil nil ((1052 . 1065)) nil (25889 25730 654100 976000) 0 nil])
([nil nil ((1065 . 1068)) nil (25889 25730 654100 575000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1067) (undo-tree-id4284 . -1) 1068) nil (25889 25730 654100 68000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1065) (undo-tree-id4282 . -1) (#("a" 0 1 (fontified t)) . -1066) (undo-tree-id4283 . -1) 1067) nil (25889 25730 654098 740000) 0 nil])
([nil nil ((1065 . 1067)) nil (25889 25730 654095 670000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1066) (undo-tree-id4281 . -1) 1067) nil (25889 25730 654095 88000) 0 nil])
([nil nil ((1066 . 1073)) nil (25889 25730 654094 134000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -1072) (undo-tree-id4280 . -1) 1073) nil (25889 25730 654093 51000) 0 nil])
([nil nil ((1072 . 1073)) nil (25889 25730 654091 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1122 . 1123) (nil fontified nil 1122 . 1123) (nil fontified nil 1121 . 1122) (nil fontified nil 1119 . 1121) (nil fontified nil 1118 . 1119) (nil fontified nil 1112 . 1118) (nil fontified nil 1111 . 1112) (nil fontified nil 1104 . 1111) (nil fontified nil 1100 . 1104) (nil fontified nil 1097 . 1100) (nil fontified nil 1096 . 1097) (nil fontified nil 1091 . 1096) (nil fontified nil 1090 . 1091) (nil fontified nil 1084 . 1090) (nil fontified nil 1083 . 1084) (nil fontified nil 1079 . 1083) (nil fontified nil 1078 . 1079) (nil fontified nil 1073 . 1078) (1073 . 1123)) nil (25889 25730 654091 176000) 0 nil])
([nil nil ((1273 . 1275)) nil (25889 25730 654089 236000) 0 nil])
([nil nil ((#("ç" 0 1 (face font-lock-variable-name-face fontified t)) . -1274) (undo-tree-id4279 . -1) 1275) nil (25889 25730 654088 669000) 0 nil])
([nil nil ((1274 . 1278)) nil (25889 25730 654087 504000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1295) (undo-tree-id4268 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1296) (undo-tree-id4269 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1297) (undo-tree-id4270 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1298) (undo-tree-id4271 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1299) (undo-tree-id4272 . -1) (#("i" 0 1 (fontified t)) . -1300) (undo-tree-id4273 . -1) (#("_" 0 1 (fontified t)) . -1301) (undo-tree-id4274 . -1) (#("p" 0 1 (fontified t)) . -1302) (undo-tree-id4275 . -1) (#("o" 0 1 (fontified t)) . -1303) (undo-tree-id4276 . -1) (#("p" 0 1 (fontified t)) . -1304) (undo-tree-id4277 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1305) (undo-tree-id4278 . -1) 1306) nil (25889 25730 654085 66000) 0 nil])
([nil nil ((1295 . 1296)) nil (25889 25730 654076 883000) 0 nil])
([nil nil ((1296 . 1299)) nil (25889 25730 654076 436000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1303) (undo-tree-id4257 . -1) (#("t" 0 1 (fontified t)) . -1304) (undo-tree-id4258 . -1) (#("e" 0 1 (fontified t)) . -1305) (undo-tree-id4259 . -1) (#("s" 0 1 (fontified t)) . -1306) (undo-tree-id4260 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1307) (undo-tree-id4261 . -1) (#("i" 0 1 (fontified t)) . -1308) (undo-tree-id4262 . -1) (#("_" 0 1 (fontified t)) . -1309) (undo-tree-id4263 . -1) (#("p" 0 1 (fontified t)) . -1310) (undo-tree-id4264 . -1) (#("o" 0 1 (fontified t)) . -1311) (undo-tree-id4265 . -1) (#("p" 0 1 (fontified t)) . -1312) (undo-tree-id4266 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1313) (undo-tree-id4267 . -1) 1314) nil (25889 25730 654073 814000) 0 nil])
([nil nil ((1303 . 1307)) nil (25889 25730 654063 603000) 0 nil])
([nil nil ((#("            r_pop = 
" 0 12 (fontified t) 12 17 (face font-lock-variable-name-face fontified t) 17 18 (fontified t) 18 19 (face font-lock-operator-face fontified t) 19 20 (fontified t) 20 21 (fontified t)) . 1261) (undo-tree-id4255 . -21) (undo-tree-id4256 . -12)) nil (25889 25730 654062 717000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1004) (undo-tree-id4254 . -8) 1012) nil (25889 25730 654060 547000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1853) (undo-tree-id4244 . -1) (#("e" 0 1 (fontified t)) . -1854) (undo-tree-id4245 . -1) (#("l" 0 1 (fontified t)) . -1855) (undo-tree-id4246 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1856) (undo-tree-id4247 . -1) (#("." 0 1 (fontified t)) . -1857) (undo-tree-id4248 . -1) (#("N" 0 1 (fontified t)) . -1858) (undo-tree-id4249 . -1) (#("_" 0 1 (fontified t)) . -1859) (undo-tree-id4250 . -1) (#("P" 0 1 (fontified t)) . -1860) (undo-tree-id4251 . -1) (#("O" 0 1 (fontified t)) . -1861) (undo-tree-id4252 . -1) (#("P" 0 1 (fontified t)) . -1862) (undo-tree-id4253 . -1) 1863) nil (25889 25730 654057 489000) 0 nil])
([nil nil ((1853 . 1854)) nil (25889 25730 654049 994000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1853) (undo-tree-id4241 . -1) (#("," 0 1 (fontified t)) . -1854) (undo-tree-id4242 . -1) (#(" " 0 1 (fontified t)) . -1855) (undo-tree-id4243 . -1) 1856) nil (25889 25730 654048 921000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1057) (undo-tree-id4240 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . 1057) (#(" " 0 1 (fontified t)) . 1057) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1057) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 1057) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1057) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 1057) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 1057)) nil (25889 25730 654041 951000) 0 nil])
([nil nil ((#("            rates[self.csumNa[i_pop] : self.csumNa[i_pop + 1]]
" 0 12 (fontified t) 12 17 (fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 29 (fontified t) 29 30 (face (rainbow-delimiters-depth-2-face) fontified t) 30 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-2-face) fontified t) 36 39 (fontified t) 39 43 (face font-lock-keyword-face fontified t) 43 50 (fontified t) 50 51 (face (rainbow-delimiters-depth-2-face) fontified t) 51 57 (fontified t) 57 58 (face font-lock-operator-face fontified t) 58 60 (fontified t) 60 61 (face (rainbow-delimiters-depth-2-face) fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 62 63 (fontified t)) . 1045) (undo-tree-id4235 . -63) (undo-tree-id4236 . -63) (undo-tree-id4237 . -63) (undo-tree-id4238 . -12) (undo-tree-id4239 . -63) 1108) nil (25889 25730 654040 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 1244 . 1245) (nil fontified nil 1244 . 1245) (nil fontified nil 1243 . 1244) (nil fontified nil 1242 . 1243) (nil fontified nil 1240 . 1242) (nil fontified nil 1239 . 1240) (nil fontified nil 1233 . 1239) (nil fontified nil 1232 . 1233) (nil fontified nil 1225 . 1232) (nil fontified nil 1221 . 1225) (nil fontified nil 1218 . 1221) (nil fontified nil 1217 . 1218) (nil fontified nil 1212 . 1217) (nil fontified nil 1211 . 1212) (nil fontified nil 1205 . 1211) (nil fontified nil 1204 . 1205) (nil fontified nil 1200 . 1204) (nil fontified nil 1199 . 1200) (nil fontified nil 1194 . 1199) (nil fontified nil 1182 . 1194) (1182 . 1245)) nil (25889 25730 654035 499000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#("=" 0 1 (face font-lock-operator-face fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1245) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . 1245) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1245) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 1245) (#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245) (#(" " 0 1 (fontified t)) . 1245)) nil (25889 25730 654029 315000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 1245) (#("o" 0 1 (fontified t)) . 1245) (#("p" 0 1 (fontified t)) . 1245) (#("_" 0 1 (fontified t)) . 1245)) nil (25889 25730 654022 133000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1307 . 1308) (nil fontified nil 1307 . 1308) (nil fontified nil 1306 . 1307) (nil fontified nil 1305 . 1306) (nil fontified nil 1303 . 1305) (nil fontified nil 1302 . 1303) (nil fontified nil 1296 . 1302) (nil fontified nil 1295 . 1296) (nil fontified nil 1288 . 1295) (nil fontified nil 1284 . 1288) (nil fontified nil 1281 . 1284) (nil fontified nil 1280 . 1281) (nil fontified nil 1275 . 1280) (nil fontified nil 1274 . 1275) (nil fontified nil 1268 . 1274) (nil fontified nil 1267 . 1268) (nil fontified nil 1263 . 1267) (nil fontified nil 1262 . 1263) (nil fontified nil 1257 . 1262) (nil fontified nil 1245 . 1257) (1245 . 1308)) nil (25889 25730 654021 67000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -1307) (undo-tree-id4228 . -1) 1308) nil (25889 25730 654018 824000) 0 nil])
([nil nil ((1244 . 1247)) nil (25889 25730 654017 367000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#(" " 0 1 (fontified t)) . 1247) (#("
" 0 1 (fontified t rear-nonsticky t)) . 1247) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1)) nil (25889 25730 654014 728000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1378) (undo-tree-id4215 . -4) (undo-tree-id4216 . -4) (undo-tree-id4217 . -4) (undo-tree-id4218 . -4) (undo-tree-id4219 . -4) (undo-tree-id4220 . -4) 1382) nil (25889 25730 654006 516000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1374) (undo-tree-id4207 . -4) (undo-tree-id4208 . -4) (undo-tree-id4209 . -4) (undo-tree-id4210 . -4) (undo-tree-id4211 . -4) (undo-tree-id4212 . -4) (undo-tree-id4213 . -4) (undo-tree-id4214 . -4) 1378) nil (25889 25730 654001 114000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1370) (undo-tree-id4199 . -4) (undo-tree-id4200 . -4) (undo-tree-id4201 . -4) (undo-tree-id4202 . -4) (undo-tree-id4203 . -4) (undo-tree-id4204 . -4) (undo-tree-id4205 . -4) (undo-tree-id4206 . -4) 1374) nil (25889 25730 653994 732000) 0 nil])
([nil nil ((1370 . 1382)) nil (25889 25730 653986 678000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1378) (undo-tree-id4198 . -4) 1382) nil (25889 25730 653982 214000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-keyword-face fontified nil)) . -1277) (undo-tree-id4388 . -1) (#("." 0 1 (fontified nil)) . -1278) (undo-tree-id4389 . -1) (#("c" 0 1 (fontified nil)) . -1279) (undo-tree-id4390 . -1) (#("s" 0 1 (fontified t)) . -1280) (undo-tree-id4391 . -1) (#("u" 0 1 (fontified t)) . -1281) (undo-tree-id4392 . -1) (#("m" 0 1 (fontified t)) . -1282) (undo-tree-id4393 . -1) (#("N" 0 1 (fontified t)) . -1283) (undo-tree-id4394 . -1) (#("a" 0 1 (fontified t)) . -1284) (undo-tree-id4395 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1285) (undo-tree-id4396 . -1) (#("i" 0 1 (fontified t)) . -1286) (undo-tree-id4397 . -1) (#("_" 0 1 (fontified t)) . -1287) (undo-tree-id4398 . -1) (#("p" 0 1 (fontified t)) . -1288) (undo-tree-id4399 . -1) (#("o" 0 1 (fontified t)) . -1289) (undo-tree-id4400 . -1) (#("p" 0 1 (fontified t)) . -1290) (undo-tree-id4401 . -1) (#(" " 0 1 (fontified t)) . -1291) (undo-tree-id4402 . -1) (#("+" 0 1 (face font-lock-operator-face fontified t)) . -1292) (undo-tree-id4403 . -1) (#(" " 0 1 (fontified t)) . -1293) (undo-tree-id4404 . -1) (#("1" 0 1 (fontified t)) . -1294) (undo-tree-id4405 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1295) (undo-tree-id4406 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . -1296) (undo-tree-id4407 . -1) (#(" " 0 1 (fontified t)) . -1297) (undo-tree-id4408 . -1) 1298 (t 25889 25730 683621 357000)) nil (25889 25971 251909 55000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-keyword-face fontified nil)) . -1256) (undo-tree-id4367 . -1) (#("." 0 1 (fontified nil)) . -1257) (undo-tree-id4368 . -1) (#("c" 0 1 (fontified t)) . -1258) (undo-tree-id4369 . -1) (#("s" 0 1 (fontified t)) . -1259) (undo-tree-id4370 . -1) (#("u" 0 1 (fontified t)) . -1260) (undo-tree-id4371 . -1) (#("m" 0 1 (fontified t)) . -1261) (undo-tree-id4372 . -1) (#("N" 0 1 (fontified t)) . -1262) (undo-tree-id4373 . -1) (#("a" 0 1 (fontified t)) . -1263) (undo-tree-id4374 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1264) (undo-tree-id4375 . -1) (#("i" 0 1 (fontified t)) . -1265) (undo-tree-id4376 . -1) (#("_" 0 1 (fontified t)) . -1266) (undo-tree-id4377 . -1) (#("p" 0 1 (fontified t)) . -1267) (undo-tree-id4378 . -1) (#("o" 0 1 (fontified t)) . -1268) (undo-tree-id4379 . -1) (#("p" 0 1 (fontified t)) . -1269) (undo-tree-id4380 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1270) (undo-tree-id4381 . -1) (#(" " 0 1 (fontified t)) . -1271) (undo-tree-id4382 . -1) (#(":" 0 1 (fontified t)) . -1272) (undo-tree-id4383 . -1) (#(" " 0 1 (fontified t)) . -1273) (undo-tree-id4384 . -1) (#("s" 0 1 (fontified t)) . -1274) (undo-tree-id4385 . -1) (#("e" 0 1 (fontified t)) . -1275) (undo-tree-id4386 . -1) (#("l" 0 1 (fontified t)) . -1276) (undo-tree-id4387 . -1) 1277) nil (25889 25971 251891 237000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1246) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (#("r" 0 1 (fontified t)) . -1247) (undo-tree-id4358 . -1) (#("a" 0 1 (fontified t)) . -1248) (undo-tree-id4359 . -1) (#("t" 0 1 (fontified t)) . -1249) (undo-tree-id4360 . -1) (#("e" 0 1 (fontified t)) . -1250) (undo-tree-id4361 . -1) (#("s" 0 1 (fontified t)) . -1251) (undo-tree-id4362 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1252) (undo-tree-id4363 . -1) (#("s" 0 1 (fontified t)) . -1253) (undo-tree-id4364 . -1) (#("e" 0 1 (fontified t)) . -1254) (undo-tree-id4365 . -1) (#("l" 0 1 (fontified t)) . -1255) (undo-tree-id4366 . -1) 1256) nil (25889 25971 251873 543000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified nil)) . 1247) (1246 . 1247) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . 1245) (1246 . 1247)) nil (25889 25971 251861 277000) 0 nil])
([nil nil ((1271 . 1283) (#(" " 0 1 (fontified nil)) . 1270) (undo-tree-id4351 . -1) (1271 . 1272)) nil (25889 25971 251860 48000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1323 . 1324) (nil fontified nil 1323 . 1324) (nil fontified nil 1322 . 1323) (nil fontified nil 1321 . 1322) (nil fontified nil 1320 . 1321) (nil fontified nil 1319 . 1320) (nil fontified nil 1317 . 1319) (nil fontified nil 1316 . 1317) (nil fontified nil 1310 . 1316) (nil fontified nil 1309 . 1310) (nil fontified nil 1302 . 1309) (nil fontified nil 1298 . 1302) (nil fontified nil 1295 . 1298) (nil fontified nil 1294 . 1295) (nil fontified nil 1289 . 1294) (nil fontified nil 1288 . 1289) (nil fontified nil 1282 . 1288) (nil fontified nil 1281 . 1282) (nil fontified nil 1277 . 1281) (nil fontified nil 1276 . 1277) (nil fontified nil 1271 . 1276) (1271 . 1324)) nil (25889 25971 251857 895000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324) (#(" " 0 1 (fontified t)) . 1324)) nil (25889 25971 251854 431000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-operator-face fontified nil)) . 1325) (1324 . 1325) (#("=" 0 1 (face font-lock-operator-face rear-nonsticky t fontified nil)) . 1323) (1324 . 1325)) nil (25889 25971 251851 836000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t)) . -1322) (undo-tree-id4350 . -1) 1323) nil (25889 25971 251849 944000) 0 nil])
([nil nil ((1271 . 1283)) nil (25889 25971 251837 910000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1086 . 1087) (nil fontified nil 1086 . 1087) (nil fontified nil 1085 . 1086) (nil fontified nil 1076 . 1085) (nil fontified nil 1072 . 1076) (nil fontified nil 1071 . 1072) (nil fontified nil 1059 . 1071) (nil fontified nil 1053 . 1059) (nil fontified nil 1045 . 1053) (1045 . 1087) (t 25889 25971 281284 424000)) nil (25889 25993 269599 829000) 0 nil])
([nil nil ((1053 . 1057) 1045) nil (25889 25993 269597 419000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1057) (#("n" 0 1 (fontified t)) . 1057) (#("r" 0 1 (fontified t)) . 1057) (#("u" 0 1 (fontified t)) . 1057) (#("t" 0 1 (fontified t)) . 1057) (#("e" 0 1 (fontified t)) . 1057) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . 1057)) nil (25889 25993 269592 649000) 0 nil])
([nil nil ((#("            torch.zeros(self.N_NEURON)
" 0 12 (fontified t) 12 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 28 (face font-lock-keyword-face fontified t) 28 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 39 (rear-nonsticky t fontified t)) . 1045) (undo-tree-id4425 . -39) 1084) nil (25889 25993 269587 81000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -1069) (undo-tree-id4424 . -1) 1070) nil (25889 25993 269582 546000) 0 nil])
([nil nil ((nil fontified nil 1107 . 1108) (nil fontified nil 1106 . 1107) (nil fontified nil 1097 . 1106) (nil fontified nil 1093 . 1097) (nil fontified nil 1092 . 1093) (nil fontified nil 1081 . 1092) (nil fontified nil 1069 . 1081) (1069 . 1108)) nil (25889 25993 269576 40000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1107) (undo-tree-id4423 . -1) 1108) nil (25889 25993 269570 436000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1069) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (#(" " 0 1 (fontified t)) . -1070) (undo-tree-id4412 . -1) (#(" " 0 1 (fontified t)) . -1071) (undo-tree-id4413 . -1) (#(" " 0 1 (fontified t)) . -1072) (undo-tree-id4414 . -1) (#(" " 0 1 (fontified t)) . -1073) (undo-tree-id4415 . -1) (#(" " 0 1 (fontified t)) . -1074) (undo-tree-id4416 . -1) (#(" " 0 1 (fontified t)) . -1075) (undo-tree-id4417 . -1) (#(" " 0 1 (fontified t)) . -1076) (undo-tree-id4418 . -1) (#(" " 0 1 (fontified t)) . -1077) (undo-tree-id4419 . -1) (#(" " 0 1 (fontified t)) . -1078) (undo-tree-id4420 . -1) (#(" " 0 1 (fontified t)) . -1079) (undo-tree-id4421 . -1) (#(" " 0 1 (fontified t)) . -1080) (undo-tree-id4422 . -1) 1081) nil (25889 25993 269559 200000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1245 . 1246) (nil fontified nil 1244 . 1246) (nil fontified nil 1243 . 1244) (nil fontified nil 1237 . 1243) (nil fontified nil 1233 . 1237) (nil fontified nil 1232 . 1233) (nil fontified nil 1227 . 1232) (nil fontified nil 1226 . 1227) (nil fontified nil 1224 . 1226) (nil fontified nil 1217 . 1224) (nil fontified nil 1214 . 1217) (nil fontified nil 1206 . 1214) (1206 . 1246) (t 25889 25993 309442 207000)) nil (25889 26064 228350 370000) 0 nil])
([nil nil ((1205 . 1222)) nil (25889 26064 228348 531000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -1262) (undo-tree-id4426 . -1) 1263) nil (25889 26064 228345 448000) 0 nil])
([nil nil ((1095 . 1108) (t 25889 26064 249955 399000)) nil (25889 26089 648957 230000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1148 . 1149) (nil fontified nil 1147 . 1149) (nil fontified nil 1146 . 1147) (nil fontified nil 1140 . 1146) (nil fontified nil 1136 . 1140) (nil fontified nil 1135 . 1136) (nil fontified nil 1130 . 1135) (nil fontified nil 1129 . 1130) (nil fontified nil 1127 . 1129) (nil fontified nil 1120 . 1127) (nil fontified nil 1117 . 1120) (nil fontified nil 1109 . 1117) (1109 . 1149)) nil (25889 26089 648954 329000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1104) (undo-tree-id4427 . -4) 1108) nil (25889 26089 648947 197000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -915) (undo-tree-id4428 . -1) 916 (t 25889 26089 682141 109000)) nil (25889 26120 681388 914000) 0 nil])
([nil nil ((916 . 918) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -916) (915 . 917)) nil (25889 26120 681381 198000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 917)) nil (25889 26120 681380 309000) 0 nil])
([nil nil ((#(" i_pop" 0 6 (fontified t)) . 917)) nil (25889 26120 681378 706000) 0 nil])
([nil nil ((917 . 922)) nil (25889 26120 681374 72000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -915) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -916) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (undo-tree-id4530 . -1) 917 (t 25889 26120 706368 766000)) nil (25889 26129 814615 775000) 0 nil])
([nil nil ((915 . 917)) nil (25889 26129 814466 25000) 0 nil])
([nil nil ((nil rear-nonsticky nil 612 . 613) (nil fontified nil 612 . 613) (nil fontified nil 611 . 612) (nil fontified nil 610 . 611) (nil fontified nil 606 . 610) (nil fontified nil 604 . 606) (nil fontified nil 600 . 604) (nil fontified nil 599 . 600) (nil fontified nil 594 . 599) (nil fontified nil 593 . 594) (nil fontified nil 591 . 593) (nil fontified nil 590 . 591) (nil fontified nil 588 . 590) (nil fontified nil 585 . 588) (nil fontified nil 584 . 585) (nil fontified nil 583 . 584) (nil fontified nil 582 . 583) (nil fontified nil 576 . 582) (nil fontified nil 572 . 576) (nil fontified nil 571 . 572) (nil fontified nil 566 . 571) (nil fontified nil 565 . 566) (nil fontified nil 563 . 565) (nil fontified nil 562 . 563) (nil fontified nil 560 . 562) (nil fontified nil 557 . 560) (nil fontified nil 556 . 557) (nil fontified nil 552 . 556) (nil fontified nil 551 . 552) (nil fontified nil 550 . 551) (nil fontified nil 549 . 550) (nil fontified nil 548 . 549) (nil fontified nil 547 . 548) (nil fontified nil 545 . 547) (nil fontified nil 544 . 545) (nil fontified nil 543 . 544) (nil fontified nil 539 . 543) (539 . 613) (t 25889 26129 842436 39000)) nil (25889 26230 752066 628000) 0 nil])
([nil nil ((#("        self.Wab = []
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 19 (fontified t) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 22 (fontified t)) . -613) (undo-tree-id4531 . -22) 635) nil (25889 26230 752062 958000) 0 nil])
([nil nil ((539 . 547)) nil (25889 26230 752050 173000) 0 nil])
([nil nil ((nil rear-nonsticky nil 891 . 892) (nil fontified nil 887 . 892) (nil fontified nil 886 . 887) (nil fontified nil 885 . 886) (nil fontified nil 884 . 885) (nil fontified nil 879 . 884) (nil fontified nil 878 . 879) (nil fontified nil 877 . 878) (nil fontified nil 872 . 877) (nil fontified nil 871 . 872) (nil fontified nil 869 . 871) (nil fontified nil 867 . 869) (nil fontified nil 863 . 867) (nil fontified nil 855 . 863) (855 . 892) (t 25889 26230 767185 540000)) nil (25889 26253 150852 699000) 0 nil])
([nil nil ((#("                self.Wab.append(Wij)
" 0 16 (fontified t) 16 20 (face font-lock-keyword-face fontified t) 20 31 (fontified t) 31 32 (face (rainbow-delimiters-depth-1-face) fontified t) 32 35 (fontified t) 35 36 (face (rainbow-delimiters-depth-1-face) fontified t) 36 37 (fontified t)) . -892) (undo-tree-id4620 . -27) (undo-tree-id4621 . -27) (undo-tree-id4622 . -27) (undo-tree-id4623 . -27) (undo-tree-id4624 . -27) (undo-tree-id4625 . -27) 929) nil (25889 26253 150851 245000) 0 nil])
([nil nil ((855 . 871) (#("        " 0 8 (fontified t src-block t font-lock-fontified t gptel response)) . 855)) nil (25889 26253 150846 719000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -983) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) 984) nil (25889 26253 150844 808000) 0 nil])
([nil nil ((984 . 986) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -984) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (983 . 985)) nil (25889 26253 150801 601000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 985) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 985)) nil (25889 26253 150796 522000) 0 nil])
([nil nil ((nil rear-nonsticky nil 598 . 599) (nil fontified nil 598 . 599) (nil fontified nil 597 . 598) (nil fontified nil 596 . 597) (nil fontified nil 592 . 596) (nil fontified nil 590 . 592) (nil fontified nil 586 . 590) (nil fontified nil 585 . 586) (nil fontified nil 580 . 585) (nil fontified nil 579 . 580) (nil fontified nil 577 . 579) (nil fontified nil 574 . 577) (nil fontified nil 571 . 574) (nil fontified nil 570 . 571) (nil fontified nil 566 . 570) (nil fontified nil 564 . 566) (nil fontified nil 560 . 564) (nil fontified nil 559 . 560) (nil fontified nil 558 . 559) (nil fontified nil 554 . 558) (nil fontified nil 553 . 554) (nil fontified nil 552 . 553) (nil fontified nil 551 . 552) (nil fontified nil 550 . 551) (nil fontified nil 549 . 550) (nil fontified nil 547 . 549) (nil fontified nil 546 . 547) (nil fontified nil 545 . 546) (nil fontified nil 541 . 545) (nil fontified nil 539 . 541) (539 . 599) (t 25889 26253 175353 389000)) nil (25889 26318 81838 985000) 0 nil])
([nil nil ((539 . 547) (#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . 539) (undo-tree-id4690 . -2)) nil (25889 26318 81835 762000) 0 nil])
([nil nil ((#("        self.Wab = [[None for _ in range(self.N_POP)] for _ in range(self.N_POP)]
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 12 13 (fontified t src-block t font-lock-fontified t gptel response) 13 14 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 14 16 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 16 17 (fontified t src-block t font-lock-fontified t gptel response) 17 18 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 18 19 (fontified t src-block t font-lock-fontified t gptel response) 19 20 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 21 25 (face font-lock-constant-face fontified t src-block t font-lock-fontified t gptel response) 25 26 (fontified t src-block t font-lock-fontified t gptel response) 26 29 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 29 31 (fontified t src-block t font-lock-fontified t gptel response) 31 32 (fontified t src-block t font-lock-fontified t gptel response) 32 34 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 34 35 (fontified t src-block t font-lock-fontified t gptel response) 35 40 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 40 41 (face (rainbow-delimiters-depth-3-face) fontified t src-block t font-lock-fontified t gptel response) 41 45 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 45 51 (fontified t src-block t font-lock-fontified t gptel response) 51 52 (face (rainbow-delimiters-depth-3-face) fontified t src-block t font-lock-fontified t gptel response) 52 53 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 53 54 (fontified t src-block t font-lock-fontified t gptel response) 54 57 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 57 59 (fontified t src-block t font-lock-fontified t gptel response) 59 60 (fontified t src-block t font-lock-fontified t gptel response) 60 62 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 62 63 (fontified t src-block t font-lock-fontified t gptel response) 63 68 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 69 73 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 73 75 (fontified t src-block t font-lock-fontified t gptel response) 75 79 (fontified t src-block t font-lock-fontified t gptel response) 79 80 (face (rainbow-delimiters-depth-2-face) fontified t src-block t font-lock-fontified t gptel response) 80 81 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 81 82 (rear-nonsticky t fontified t src-block t font-lock-fontified t gptel response)) . -605) (undo-tree-id4626 . -35) (undo-tree-id4627 . -82) (undo-tree-id4628 . -35) (undo-tree-id4629 . -35) (undo-tree-id4630 . -35) (undo-tree-id4631 . -35) (undo-tree-id4632 . -35) (undo-tree-id4633 . -35) (undo-tree-id4634 . -35) (undo-tree-id4635 . -35) (undo-tree-id4636 . -35) (undo-tree-id4637 . -35) (undo-tree-id4638 . -35) (undo-tree-id4639 . -35) (undo-tree-id4640 . -35) (undo-tree-id4641 . -35) (undo-tree-id4642 . -35) (undo-tree-id4643 . -35) (undo-tree-id4644 . -35) (undo-tree-id4645 . -35) (undo-tree-id4646 . -35) (undo-tree-id4647 . -35) (undo-tree-id4648 . -35) (undo-tree-id4649 . -35) (undo-tree-id4650 . -35) (undo-tree-id4651 . -35) (undo-tree-id4652 . -35) (undo-tree-id4653 . -35) (undo-tree-id4654 . -35) (undo-tree-id4655 . -35) (undo-tree-id4656 . -35) (undo-tree-id4657 . -35) (undo-tree-id4658 . -35) (undo-tree-id4659 . -35) (undo-tree-id4660 . -35) (undo-tree-id4661 . -35) (undo-tree-id4662 . -82) (undo-tree-id4663 . -82) (undo-tree-id4664 . -82) (undo-tree-id4665 . -82) (undo-tree-id4666 . -82) (undo-tree-id4667 . -82) (undo-tree-id4668 . -82) (undo-tree-id4669 . -82) (undo-tree-id4670 . -82) (undo-tree-id4671 . -82) (undo-tree-id4672 . -82) (undo-tree-id4673 . -82) (undo-tree-id4674 . -82) (undo-tree-id4675 . -82) (undo-tree-id4676 . -82) (undo-tree-id4677 . -82) (undo-tree-id4678 . -82) (undo-tree-id4679 . -82) (undo-tree-id4680 . -82) (undo-tree-id4681 . -82) (undo-tree-id4682 . -82) (undo-tree-id4683 . -35) (undo-tree-id4684 . -82) (undo-tree-id4685 . -82) (undo-tree-id4686 . -82) (undo-tree-id4687 . -82) (undo-tree-id4688 . -82) (undo-tree-id4689 . -82) 687) nil (25889 26318 81829 506000) 0 nil])
([nil nil ((604 . 613) (t 25889 26318 107842 386000)) nil (25889 26320 198764 469000) 0 nil])
([nil nil ((1603 . 1607) (t 25889 26320 219858 352000)) nil (25889 26353 49165 736000) 0 nil])
([nil nil ((3055 . 3060) (t 25889 26353 72107 167000)) nil (25889 26366 205418 23000) 0 nil])
([nil nil ((317 . 326) (t 25889 26366 228207 51000)) nil (25889 26408 878480 665000) 0 nil])
([nil nil ((422 . 430)) nil (25889 26408 878479 942000) 0 nil])
([nil nil ((430 . 431)) nil (25889 26408 878479 507000) 0 nil])
([nil nil ((423 . 431) (#("        " 0 8 (fontified nil)) . 422) (430 . 431)) nil (25889 26408 878478 417000) 0 nil])
([nil nil ((432 . 446)) nil (25889 26408 878477 436000) 0 nil])
([nil nil ((472 . 481)) nil (25889 26408 878473 237000) 0 nil])
([nil nil ((#("ing" 0 3 (face font-lock-comment-face fontified t)) . 341) (t 25889 26408 900531 911000)) nil (25889 26440 517972 929000) 0 nil])
([nil nil ((#("ing" 0 3 (face font-lock-comment-face fontified t)) . 493)) nil (25889 26440 517972 59000) 0 nil])
([nil nil ((493 . 494)) nil (25889 26440 517971 704000) 0 nil])
([nil nil ((#("ing" 0 3 (face font-lock-comment-face fontified t)) . 556)) nil (25889 26440 517970 890000) 0 nil])
([nil nil ((556 . 557)) nil (25889 26440 517970 560000) 0 nil])
([nil nil ((1062 . 1066) (1053 . 1054)) nil (25889 26440 517970 207000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1078 . 1079) (nil fontified nil 1077 . 1079) (nil fontified nil 1076 . 1077) (nil fontified nil 1072 . 1076) (nil fontified nil 1071 . 1072) (nil fontified nil 1070 . 1071) (nil fontified nil 1062 . 1070) (nil fontified nil 1061 . 1062) (nil fontified nil 1058 . 1061) (nil fontified nil 1054 . 1058) (1054 . 1079)) nil (25889 26440 517969 495000) 0 nil])
([nil nil ((1054 . 1066) (#("    " 0 4 (fontified t)) . 1054)) nil (25889 26440 517967 558000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1066) (#("f" 0 1 (fontified t)) . 1066) (#("e" 0 1 (fontified t)) . 1066) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . 1066)) nil (25889 26440 517966 176000) 0 nil])
([nil nil ((1066 . 1071)) nil (25889 26440 517965 402000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -1086) (undo-tree-id4941 . -1) 1087) nil (25889 26440 517964 595000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1081) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) (undo-tree-id4754 . -1) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -1) (undo-tree-id4763 . -1) (undo-tree-id4764 . -1) (undo-tree-id4765 . -1) (undo-tree-id4766 . -1) (undo-tree-id4767 . -1) (undo-tree-id4768 . -1) (undo-tree-id4769 . -1) (undo-tree-id4770 . -1) (undo-tree-id4771 . -1) (undo-tree-id4772 . -1) (undo-tree-id4773 . -1) (undo-tree-id4774 . -1) (undo-tree-id4775 . -1) (undo-tree-id4776 . -1) (undo-tree-id4777 . -1) (undo-tree-id4778 . -1) (undo-tree-id4779 . -1) (undo-tree-id4780 . -1) (undo-tree-id4781 . -1) (undo-tree-id4782 . -1) (undo-tree-id4783 . -1) (undo-tree-id4784 . -1) (undo-tree-id4785 . -1) (undo-tree-id4786 . -1) (undo-tree-id4787 . -1) (undo-tree-id4788 . -1) (undo-tree-id4789 . -1) (undo-tree-id4790 . -1) (undo-tree-id4791 . -1) (undo-tree-id4792 . -1) (undo-tree-id4793 . -1) (undo-tree-id4794 . -1) (undo-tree-id4795 . -1) (undo-tree-id4796 . -1) (undo-tree-id4797 . -1) (undo-tree-id4798 . -1) (undo-tree-id4799 . -1) (undo-tree-id4800 . -1) (undo-tree-id4801 . -1) (undo-tree-id4802 . -1) (undo-tree-id4803 . -1) (undo-tree-id4804 . -1) (undo-tree-id4805 . -1) (undo-tree-id4806 . -1) (undo-tree-id4807 . -1) (undo-tree-id4808 . -1) (undo-tree-id4809 . -1) (undo-tree-id4810 . -1) (undo-tree-id4811 . -1) (undo-tree-id4812 . -1) (undo-tree-id4813 . -1) (undo-tree-id4814 . -1) (undo-tree-id4815 . -1) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (#("e" 0 1 (fontified t)) . -1082) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (#("l" 0 1 (fontified t)) . -1083) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) (undo-tree-id4906 . -1) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -1) (undo-tree-id4915 . -1) (undo-tree-id4916 . -1) (undo-tree-id4917 . -1) (undo-tree-id4918 . -1) (undo-tree-id4919 . -1) (undo-tree-id4920 . -1) (undo-tree-id4921 . -1) (undo-tree-id4922 . -1) (undo-tree-id4923 . -1) (undo-tree-id4924 . -1) (undo-tree-id4925 . -1) (undo-tree-id4926 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1084) (undo-tree-id4927 . -1) (undo-tree-id4928 . -1) (undo-tree-id4929 . -1) (undo-tree-id4930 . -1) (undo-tree-id4931 . -1) (undo-tree-id4932 . -1) (undo-tree-id4933 . -1) (undo-tree-id4934 . -1) (undo-tree-id4935 . -1) (undo-tree-id4936 . -1) (undo-tree-id4937 . -1) (undo-tree-id4938 . -1) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) 1085) nil (25889 26440 517957 276000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1062) (undo-tree-id4691 . -4) (undo-tree-id4692 . -4) (undo-tree-id4693 . -4) (undo-tree-id4694 . -4) (undo-tree-id4695 . -4) (undo-tree-id4696 . -4) (undo-tree-id4697 . -4) (undo-tree-id4698 . -4) (undo-tree-id4699 . -4) (undo-tree-id4700 . -4) (undo-tree-id4701 . -4) (undo-tree-id4702 . -4) (undo-tree-id4703 . -4) (undo-tree-id4704 . -4) (undo-tree-id4705 . -4) (undo-tree-id4706 . -4) (undo-tree-id4707 . -4) (undo-tree-id4708 . -4) (undo-tree-id4709 . -4) (undo-tree-id4710 . -4) (undo-tree-id4711 . -4) (undo-tree-id4712 . -4) (undo-tree-id4713 . -4) (undo-tree-id4714 . -4) (undo-tree-id4715 . -4) (undo-tree-id4716 . -4) (undo-tree-id4717 . -4) (undo-tree-id4718 . -4) (undo-tree-id4719 . -4) (undo-tree-id4720 . -4) (undo-tree-id4721 . -4) (undo-tree-id4722 . -4) (undo-tree-id4723 . -4) (undo-tree-id4724 . -4) (undo-tree-id4725 . -4) (undo-tree-id4726 . -4) 1066) nil (25889 26440 517643 951000) 0 nil])
([nil nil ((1053 . 1066) (t 25889 26440 544773 652000)) nil (25889 26446 894159 806000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1062) (undo-tree-id4942 . -4) 1066) nil (25889 26446 894158 477000) 0 nil])
([nil nil ((1062 . 1074)) nil (25889 26446 894146 865000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1108) (undo-tree-id4943 . -4) (undo-tree-id4944 . -4) (undo-tree-id4945 . -4) (undo-tree-id4946 . -4) (undo-tree-id4947 . -4) (undo-tree-id4948 . -4) (undo-tree-id4949 . -4) (undo-tree-id4950 . -4) (undo-tree-id4951 . -4) (undo-tree-id4952 . -4) (undo-tree-id4953 . -4) (undo-tree-id4954 . -4) (undo-tree-id4955 . -4) (undo-tree-id4956 . -4) (undo-tree-id4957 . -4) (undo-tree-id4958 . -4) (undo-tree-id4959 . -4) (undo-tree-id4960 . -4) (undo-tree-id4961 . -4) (undo-tree-id4962 . -4) (undo-tree-id4963 . -4) (undo-tree-id4964 . -4) (undo-tree-id4965 . -4) (undo-tree-id4966 . -4) (undo-tree-id4967 . -4) (undo-tree-id4968 . -4) (undo-tree-id4969 . -4) (undo-tree-id4970 . -4) (undo-tree-id4971 . -4) (undo-tree-id4972 . -4) (undo-tree-id4973 . -4) (undo-tree-id4974 . -4) (undo-tree-id4975 . -4) (undo-tree-id4976 . -4) (undo-tree-id4977 . -4) (undo-tree-id4978 . -4) (undo-tree-id4979 . -4) (undo-tree-id4980 . -4) (undo-tree-id4981 . -4) (undo-tree-id4982 . -4) (undo-tree-id4983 . -4) 1112 (t 25889 26446 916822 411000)) nil (25889 26449 931035 57000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -4073) (undo-tree-id5107 . -1) (undo-tree-id5108 . -1) (undo-tree-id5109 . -1) (undo-tree-id5110 . -1) (undo-tree-id5111 . -1) (undo-tree-id5112 . -1) (undo-tree-id5113 . -1) (undo-tree-id5114 . -1) (undo-tree-id5115 . -1) (undo-tree-id5116 . -1) (undo-tree-id5117 . -1) (undo-tree-id5118 . -1) (undo-tree-id5119 . -1) (undo-tree-id5120 . -1) (undo-tree-id5121 . -1) (undo-tree-id5122 . -1) (undo-tree-id5123 . -1) (undo-tree-id5124 . -1) (undo-tree-id5125 . -1) (undo-tree-id5126 . -1) (undo-tree-id5127 . -1) (undo-tree-id5128 . -1) (undo-tree-id5129 . -1) (undo-tree-id5130 . -1) (undo-tree-id5131 . -1) (undo-tree-id5132 . -1) (undo-tree-id5133 . -1) (undo-tree-id5134 . -1) (undo-tree-id5135 . -1) (undo-tree-id5136 . -1) (undo-tree-id5137 . -1) (undo-tree-id5138 . -1) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -1) (undo-tree-id5154 . -1) (undo-tree-id5155 . -1) (#("p" 0 1 (fontified t)) . -4074) (undo-tree-id5156 . -1) (undo-tree-id5157 . -1) (undo-tree-id5158 . -1) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -1) (undo-tree-id5167 . -1) (undo-tree-id5168 . -1) (undo-tree-id5169 . -1) (undo-tree-id5170 . -1) (undo-tree-id5171 . -1) (undo-tree-id5172 . -1) (undo-tree-id5173 . -1) (undo-tree-id5174 . -1) (undo-tree-id5175 . -1) (undo-tree-id5176 . -1) (undo-tree-id5177 . -1) (undo-tree-id5178 . -1) (undo-tree-id5179 . -1) (undo-tree-id5180 . -1) 4075 (t 25889 26449 964845 743000)) nil (25889 26529 310984 482000) 0 nil])
([nil nil ((4073 . 4075)) nil (25889 26529 310860 260000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -4073) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) (undo-tree-id5046 . -1) (undo-tree-id5047 . -1) (undo-tree-id5048 . -1) (undo-tree-id5049 . -1) (undo-tree-id5050 . -1) (undo-tree-id5051 . -1) (undo-tree-id5052 . -1) (undo-tree-id5053 . -1) (undo-tree-id5054 . -1) (undo-tree-id5055 . -1) (undo-tree-id5056 . -1) (undo-tree-id5057 . -1) (undo-tree-id5058 . -1) (undo-tree-id5059 . -1) (undo-tree-id5060 . -1) (undo-tree-id5061 . -1) (undo-tree-id5062 . -1) (undo-tree-id5063 . -1) (undo-tree-id5064 . -1) (undo-tree-id5065 . -1) (undo-tree-id5066 . -1) (undo-tree-id5067 . -1) (undo-tree-id5068 . -1) (undo-tree-id5069 . -1) (undo-tree-id5070 . -1) (undo-tree-id5071 . -1) (undo-tree-id5072 . -1) (undo-tree-id5073 . -1) (undo-tree-id5074 . -1) (undo-tree-id5075 . -1) (undo-tree-id5076 . -1) (undo-tree-id5077 . -1) (undo-tree-id5078 . -1) (undo-tree-id5079 . -1) (undo-tree-id5080 . -1) (undo-tree-id5081 . -1) (#("t" 0 1 (fontified t)) . -4074) (undo-tree-id5082 . -1) (undo-tree-id5083 . -1) (undo-tree-id5084 . -1) (undo-tree-id5085 . -1) (undo-tree-id5086 . -1) (undo-tree-id5087 . -1) (undo-tree-id5088 . -1) (undo-tree-id5089 . -1) (undo-tree-id5090 . -1) (undo-tree-id5091 . -1) (undo-tree-id5092 . -1) (undo-tree-id5093 . -1) (undo-tree-id5094 . -1) (undo-tree-id5095 . -1) (undo-tree-id5096 . -1) (undo-tree-id5097 . -1) (undo-tree-id5098 . -1) (undo-tree-id5099 . -1) (undo-tree-id5100 . -1) (undo-tree-id5101 . -1) (undo-tree-id5102 . -1) (undo-tree-id5103 . -1) (undo-tree-id5104 . -1) (undo-tree-id5105 . -1) (undo-tree-id5106 . -1) 4075) nil (25889 26529 310857 103000) 0 nil])
([nil nil ((4073 . 4079)) nil (25889 26529 310762 288000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -4078) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) 4079) nil (25889 26529 310757 759000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3970 . 3971) (nil fontified nil 3970 . 3971) (nil fontified nil 3969 . 3970) (nil fontified nil 3967 . 3969) (nil fontified nil 3965 . 3967) (nil fontified nil 3961 . 3965) (nil fontified nil 3960 . 3961) (nil fontified nil 3942 . 3960) (nil fontified nil 3941 . 3942) (nil fontified nil 3940 . 3941) (nil fontified nil 3939 . 3940) (nil fontified nil 3937 . 3939) (nil fontified nil 3936 . 3937) (nil fontified nil 3932 . 3936) (nil fontified nil 3928 . 3932) (3928 . 3971) (t 25889 26529 337455 376000)) nil (25889 26548 254906 619000) 0 nil])
([nil nil ((3928 . 3936) (#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . 3928)) nil (25889 26548 254904 587000) 0 nil])
([nil nil ((#("        self.Ja0 = np.array(self.Ja0, dtype=np.float64)
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 43 (fontified t) 43 44 (face font-lock-operator-face fontified t) 44 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 56 (fontified t rear-nonsticky t)) . -3975) (undo-tree-id5183 . -56) 4031) nil (25889 26548 254903 760000) 0 nil])
([nil nil ((3974 . 3983)) nil (25889 26548 254902 133000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -3866) (undo-tree-id5182 . -1) 3867) nil (25889 26548 254901 299000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -3866) (undo-tree-id5181 . -1) 3867) nil (25889 26548 254898 560000) 0 nil])
([nil nil ((3866 . 3868)) nil (25889 26548 254888 942000) 0 nil])
([nil nil ((3868 . 3871)) nil (25889 26548 254883 640000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3764 . 3765) (nil fontified nil 3762 . 3765) (nil fontified nil 3761 . 3762) (nil fontified nil 3755 . 3761) (nil fontified nil 3751 . 3755) (nil fontified nil 3743 . 3751) (nil fontified nil 3739 . 3743) (nil fontified nil 3738 . 3739) (nil fontified nil 3731 . 3738) (nil fontified nil 3730 . 3731) (nil fontified nil 3729 . 3730) (nil fontified nil 3727 . 3729) (nil fontified nil 3722 . 3727) (nil fontified nil 3721 . 3722) (nil fontified nil 3716 . 3721) (nil fontified nil 3715 . 3716) (nil fontified nil 3709 . 3715) (nil fontified nil 3708 . 3709) (nil fontified nil 3704 . 3708) (nil fontified nil 3700 . 3704) (nil fontified nil 3699 . 3700) (nil fontified nil 3692 . 3699) (nil fontified nil 3686 . 3692) (nil fontified nil 3685 . 3686) (nil fontified nil 3684 . 3685) (nil fontified nil 3681 . 3684) (nil fontified nil 3680 . 3681) (nil fontified nil 3676 . 3680) (3676 . 3765) (t 25889 26548 285601 440000)) nil (25889 26587 30315 785000) 0 nil])
([nil nil ((3676 . 3688)) nil (25889 26587 30313 249000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3684) (undo-tree-id5345 . -4) 3688) nil (25889 26587 30312 532000) 0 nil])
([nil nil ((#("        self.Jab = np.array(self.Jab, dtype=np.float64).reshape(self.N_POP, self.N_POP)        
" 0 1 (fontified t) 1 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 12 (face font-lock-keyword-face fontified t) 12 13 (fontified t) 13 16 (face font-lock-variable-name-face fontified t) 16 17 (fontified t) 17 18 (face font-lock-operator-face fontified t) 18 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (face font-lock-keyword-face fontified t) 32 43 (fontified t) 43 44 (face font-lock-operator-face fontified t) 44 52 (fontified t) 52 54 (fontified t) 54 55 (face (rainbow-delimiters-depth-1-face) fontified t) 55 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 65 (face font-lock-keyword-face fontified t) 65 66 (face font-lock-keyword-face fontified t) 66 68 (face font-lock-keyword-face fontified t) 68 76 (fontified t) 76 80 (face font-lock-keyword-face fontified t) 80 86 (fontified t) 86 87 (face (rainbow-delimiters-depth-1-face) fontified t) 87 95 (fontified t) 95 96 (fontified t)) . -3773) (undo-tree-id5324 . -87) (undo-tree-id5325 . -87) (undo-tree-id5326 . -87) (undo-tree-id5327 . -87) (undo-tree-id5328 . -87) (undo-tree-id5329 . -95) (undo-tree-id5330 . -95) (undo-tree-id5331 . -95) (undo-tree-id5332 . -58) (undo-tree-id5333 . -58) (undo-tree-id5334 . -58) (undo-tree-id5335 . -58) (undo-tree-id5336 . -58) (undo-tree-id5337 . -58) (undo-tree-id5338 . -58) (undo-tree-id5339 . -58) (undo-tree-id5340 . -58) (undo-tree-id5341 . -87) (undo-tree-id5342 . -87) (undo-tree-id5343 . -96) (undo-tree-id5344 . -96) 3869) nil (25889 26587 30310 786000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3736) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) (undo-tree-id5319 . -1) (undo-tree-id5320 . -1) (undo-tree-id5321 . -1) (undo-tree-id5322 . -1) (undo-tree-id5323 . -1)) nil (25889 26587 30297 179000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3735) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) (undo-tree-id5250 . -1) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -1) (undo-tree-id5259 . -1) (undo-tree-id5260 . -1) (undo-tree-id5261 . -1) (undo-tree-id5262 . -1) (undo-tree-id5263 . -1) (undo-tree-id5264 . -1) (undo-tree-id5265 . -1) (undo-tree-id5266 . -1) (undo-tree-id5267 . -1) (undo-tree-id5268 . -1) (undo-tree-id5269 . -1) (undo-tree-id5270 . -1) (undo-tree-id5271 . -1) (undo-tree-id5272 . -1) (undo-tree-id5273 . -1) (undo-tree-id5274 . -1) (undo-tree-id5275 . -1) (undo-tree-id5276 . -1) (undo-tree-id5277 . -1) (undo-tree-id5278 . -1) (undo-tree-id5279 . -1) (undo-tree-id5280 . -1) (undo-tree-id5281 . -1) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) 3736) nil (25889 26587 30281 431000) 0 nil])
([nil nil ((3769 . 3777) (#("  " 0 2 (fontified nil src-block t font-lock-fontified t gptel response)) . 3768) (undo-tree-id5347 . -2) (3770 . 3771) (t 25889 26587 57900 899000)) nil (25889 26609 828375 536000) 0 nil])
([nil nil ((3701 . 3706)) nil (25889 26609 828373 962000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("o" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("t" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("=" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("e" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("p" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("y" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("t" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("d" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("," 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721)) nil (25889 26609 828371 641000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("a" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("o" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . 3721) (#("l" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . 3721) (#("f" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . 3721) (#("." 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721) (#("c" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 3721)) nil (25889 26609 828369 449000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3706) (undo-tree-id5346 . -1) 3707) nil (25889 26609 828367 809000) 0 nil])
([nil nil ((3706 . 3707)) nil (25889 26609 828355 837000) 0 nil])
([nil nil ((419 . 427) (t 25889 26609 854077 324000)) nil (25889 26776 161509 460000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2207 . 2208) (nil fontified nil 2207 . 2208) (nil fontified nil 2192 . 2207) (nil fontified nil 2191 . 2192) (nil fontified nil 2190 . 2191) (nil fontified nil 2179 . 2190) (nil fontified nil 2178 . 2179) (nil fontified nil 2177 . 2178) (nil fontified nil 2169 . 2177) (nil fontified nil 2168 . 2169) (nil fontified nil 2164 . 2168) (nil fontified nil 2155 . 2164) (nil fontified nil 2141 . 2155) (nil fontified nil 2140 . 2141) (nil fontified nil 2139 . 2140) (nil fontified nil 2128 . 2139) (nil fontified nil 2127 . 2128) (nil fontified nil 2126 . 2127) (nil fontified nil 2117 . 2126) (nil fontified nil 2116 . 2117) (nil fontified nil 2112 . 2116) (nil fontified nil 2104 . 2112) (2104 . 2208) (t 25889 26776 183371 338000)) nil (25889 26802 555792 663000) 0 nil])
([nil nil ((2103 . 2116)) nil (25889 26802 555790 304000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2112) (undo-tree-id5348 . -4) (undo-tree-id5349 . -4) (undo-tree-id5350 . -4) (undo-tree-id5351 . -4) (undo-tree-id5352 . -4) (undo-tree-id5353 . -4) (undo-tree-id5354 . -4) (undo-tree-id5355 . -4) (undo-tree-id5356 . -4) (undo-tree-id5357 . -4) (undo-tree-id5358 . -4) (undo-tree-id5359 . -4) (undo-tree-id5360 . -4) (undo-tree-id5361 . -4) (undo-tree-id5362 . -4) (undo-tree-id5363 . -4) (undo-tree-id5364 . -4) (undo-tree-id5365 . -4) (undo-tree-id5366 . -4) (undo-tree-id5367 . -4) (undo-tree-id5368 . -4) (undo-tree-id5369 . -4) (undo-tree-id5370 . -4) (undo-tree-id5371 . -4) (undo-tree-id5372 . -4) (undo-tree-id5373 . -4) (undo-tree-id5374 . -4) (undo-tree-id5375 . -4) (undo-tree-id5376 . -4) (undo-tree-id5377 . -4) (undo-tree-id5378 . -4) (undo-tree-id5379 . -4) (undo-tree-id5380 . -4) (undo-tree-id5381 . -4) (undo-tree-id5382 . -4) (undo-tree-id5383 . -4) (undo-tree-id5384 . -4) (undo-tree-id5385 . -4) (undo-tree-id5386 . -4) (undo-tree-id5387 . -4) (undo-tree-id5388 . -4) (undo-tree-id5389 . -4) (undo-tree-id5390 . -4) (undo-tree-id5391 . -4) (undo-tree-id5392 . -4) (undo-tree-id5393 . -4) (undo-tree-id5394 . -4) (undo-tree-id5395 . -4) (undo-tree-id5396 . -4) (undo-tree-id5397 . -4) (undo-tree-id5398 . -4) (undo-tree-id5399 . -4) (undo-tree-id5400 . -4) (undo-tree-id5401 . -4) (undo-tree-id5402 . -4) (undo-tree-id5403 . -4) (undo-tree-id5404 . -4) (undo-tree-id5405 . -4) (undo-tree-id5406 . -4) (undo-tree-id5407 . -4) (undo-tree-id5408 . -4) (undo-tree-id5409 . -4) (undo-tree-id5410 . -4) (undo-tree-id5411 . -4) (undo-tree-id5412 . -4) (undo-tree-id5413 . -4) (undo-tree-id5414 . -4) (undo-tree-id5415 . -4) (undo-tree-id5416 . -4) (undo-tree-id5417 . -4) (undo-tree-id5418 . -4) (undo-tree-id5419 . -4) (undo-tree-id5420 . -4) (undo-tree-id5421 . -4) (undo-tree-id5422 . -4) (undo-tree-id5423 . -4) (undo-tree-id5424 . -4) (undo-tree-id5425 . -4) (undo-tree-id5426 . -4) (undo-tree-id5427 . -4) (undo-tree-id5428 . -4) (undo-tree-id5429 . -4) (undo-tree-id5430 . -4) (undo-tree-id5431 . -4) (undo-tree-id5432 . -4) (undo-tree-id5433 . -4) (undo-tree-id5434 . -4) (undo-tree-id5435 . -4) (undo-tree-id5436 . -4) (undo-tree-id5437 . -4) (undo-tree-id5438 . -4) (undo-tree-id5439 . -4) (undo-tree-id5440 . -4) (undo-tree-id5441 . -4) (undo-tree-id5442 . -4) (undo-tree-id5443 . -4) (undo-tree-id5444 . -4) (undo-tree-id5445 . -4) (undo-tree-id5446 . -4) (undo-tree-id5447 . -4) (undo-tree-id5448 . -4) (undo-tree-id5449 . -4) (undo-tree-id5450 . -4) (undo-tree-id5451 . -4) (undo-tree-id5452 . -4) 2116) nil (25889 26802 555784 868000) 0 nil])
([nil nil ((2218 . 2226) (#("        " 0 8 (fontified nil)) . 2217) (undo-tree-id5453 . -8) (undo-tree-id5454 . -8) (undo-tree-id5455 . -8) (undo-tree-id5456 . -8) (undo-tree-id5457 . -8) (undo-tree-id5458 . -8) (undo-tree-id5459 . -8) (undo-tree-id5460 . -8) (undo-tree-id5461 . -8) (undo-tree-id5462 . -8) (undo-tree-id5463 . -8) (undo-tree-id5464 . -8) (undo-tree-id5465 . -8) (undo-tree-id5466 . -8) (undo-tree-id5467 . -8) (undo-tree-id5468 . -8) (undo-tree-id5469 . -8) (undo-tree-id5470 . -8) (undo-tree-id5471 . -8) (undo-tree-id5472 . -8) (undo-tree-id5473 . -8) (undo-tree-id5474 . -8) (undo-tree-id5475 . -8) (undo-tree-id5476 . -8) (undo-tree-id5477 . -8) (undo-tree-id5478 . -8) (undo-tree-id5479 . -8) (undo-tree-id5480 . -8) (undo-tree-id5481 . -8) (undo-tree-id5482 . -8) (undo-tree-id5483 . -8) (2225 . 2226) (t 25889 26802 579577 644000)) nil (25889 26810 726159 901000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2398 . 2399) (nil fontified nil 2398 . 2399) (nil fontified nil 2397 . 2398) (nil fontified nil 2388 . 2397) (nil fontified nil 2384 . 2388) (nil fontified nil 2383 . 2384) (nil fontified nil 2358 . 2383) (nil fontified nil 2357 . 2358) (nil fontified nil 2348 . 2357) (nil fontified nil 2344 . 2348) (nil fontified nil 2343 . 2344) (nil fontified nil 2328 . 2343) (nil fontified nil 2325 . 2328) (nil fontified nil 2324 . 2325) (nil fontified nil 2322 . 2324) (nil fontified nil 2304 . 2322) (nil fontified nil 2303 . 2304) (nil fontified nil 2293 . 2303) (nil fontified nil 2289 . 2293) (nil fontified nil 2288 . 2289) (nil fontified nil 2263 . 2288) (nil fontified nil 2262 . 2263) (nil fontified nil 2252 . 2262) (nil fontified nil 2248 . 2252) (nil fontified nil 2247 . 2248) (nil fontified nil 2232 . 2247) (nil fontified nil 2229 . 2232) (nil fontified nil 2228 . 2229) (nil fontified nil 2226 . 2228) (nil fontified nil 2218 . 2226) (2218 . 2399)) nil (25889 26810 726107 898000) 0 nil])
([nil nil ((1 . 2) (t 25889 26810 747641 531000)) nil (25889 26814 170571 936000) 0 nil])
([nil nil ((1 . 10)) nil (25889 26814 170567 413000) 0 nil])
([nil nil ((3611 . 3620) (t 25889 26814 191668 476000)) nil (25889 26882 642410 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3790 . 3791) (nil fontified nil 3790 . 3791) (nil fontified nil 3789 . 3790) (nil fontified nil 3788 . 3789) (nil fontified nil 3787 . 3788) (nil fontified nil 3786 . 3787) (nil fontified nil 3785 . 3786) (nil fontified nil 3780 . 3785) (nil fontified nil 3779 . 3780) (nil fontified nil 3777 . 3779) (nil fontified nil 3773 . 3777) (nil fontified nil 3772 . 3773) (nil fontified nil 3765 . 3772) (nil fontified nil 3758 . 3765) (nil fontified nil 3757 . 3758) (nil fontified nil 3756 . 3757) (nil fontified nil 3755 . 3756) (nil fontified nil 3754 . 3755) (nil fontified nil 3753 . 3754) (nil fontified nil 3746 . 3753) (nil fontified nil 3741 . 3746) (nil fontified nil 3740 . 3741) (nil fontified nil 3739 . 3740) (nil fontified nil 3729 . 3739) (nil fontified nil 3728 . 3729) (nil fontified nil 3727 . 3728) (nil fontified nil 3725 . 3727) (nil fontified nil 3721 . 3725) (nil fontified nil 3720 . 3721) (nil fontified nil 3716 . 3720) (nil fontified nil 3715 . 3716) (nil fontified nil 3714 . 3715) (nil fontified nil 3712 . 3714) (nil fontified nil 3707 . 3712) (nil fontified nil 3706 . 3707) (nil fontified nil 3701 . 3706) (nil fontified nil 3700 . 3701) (nil fontified nil 3694 . 3700) (nil fontified nil 3692 . 3694) (nil fontified nil 3690 . 3692) (nil fontified nil 3686 . 3690) (nil fontified nil 3685 . 3686) (nil fontified nil 3678 . 3685) (nil fontified nil 3672 . 3678) (nil fontified nil 3671 . 3672) (nil fontified nil 3670 . 3671) (nil fontified nil 3668 . 3670) (nil fontified nil 3667 . 3668) (nil fontified nil 3663 . 3667) (nil fontified nil 3662 . 3663) (nil fontified nil 3661 . 3662) (nil fontified nil 3655 . 3661) (nil fontified nil 3650 . 3655) (nil fontified nil 3649 . 3650) (nil fontified nil 3643 . 3649) (nil fontified nil 3641 . 3643) (nil fontified nil 3639 . 3641) (nil fontified nil 3635 . 3639) (nil fontified nil 3634 . 3635) (nil fontified nil 3621 . 3634) (nil fontified nil 3620 . 3621) (nil fontified nil 3619 . 3620) (nil fontified nil 3618 . 3619) (nil fontified nil 3617 . 3618) (nil fontified nil 3616 . 3617) (nil fontified nil 3612 . 3616) (3612 . 3791)) nil (25889 26882 642408 574000) 0 nil])
([nil nil ((3612 . 3620)) nil (25889 26882 642403 991000) 0 nil])
([nil nil ((3671 . 3679)) nil (25889 26882 642403 335000) 0 nil])
([nil nil ((3732 . 3740)) nil (25889 26882 642402 772000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3728) (undo-tree-id5486 . -1) (#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3729) (undo-tree-id5487 . -1) 3730) nil (25889 26882 642401 659000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3667) (undo-tree-id5484 . -1) (#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -3668) (undo-tree-id5485 . -1) 3669) nil (25889 26882 642395 758000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-function-name-face fontified t)) . -3597) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3598) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) (undo-tree-id5626 . -1) (undo-tree-id5627 . -1) (undo-tree-id5628 . -1) (undo-tree-id5629 . -1) (undo-tree-id5630 . -1) (undo-tree-id5631 . -1) (undo-tree-id5632 . -1) (undo-tree-id5633 . -1) (undo-tree-id5634 . -1) (undo-tree-id5635 . -1) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -1) (undo-tree-id5651 . -1) (undo-tree-id5652 . -1) (undo-tree-id5653 . -1) (undo-tree-id5654 . -1) (undo-tree-id5655 . -1) (undo-tree-id5656 . -1) (undo-tree-id5657 . -1) (#("m" 0 1 (face font-lock-function-name-face fontified t)) . -3599) (undo-tree-id5658 . -1) (undo-tree-id5659 . -1) (undo-tree-id5660 . -1) (undo-tree-id5661 . -1) (undo-tree-id5662 . -1) (undo-tree-id5663 . -1) (undo-tree-id5664 . -1) (undo-tree-id5665 . -1) (undo-tree-id5666 . -1) (undo-tree-id5667 . -1) (undo-tree-id5668 . -1) (undo-tree-id5669 . -1) (undo-tree-id5670 . -1) (undo-tree-id5671 . -1) (undo-tree-id5672 . -1) (undo-tree-id5673 . -1) (undo-tree-id5674 . -1) (undo-tree-id5675 . -1) (undo-tree-id5676 . -1) (undo-tree-id5677 . -1) (undo-tree-id5678 . -1) (undo-tree-id5679 . -1) (undo-tree-id5680 . -1) (undo-tree-id5681 . -1) (undo-tree-id5682 . -1) (undo-tree-id5683 . -1) (undo-tree-id5684 . -1) (undo-tree-id5685 . -1) (undo-tree-id5686 . -1) (undo-tree-id5687 . -1) (undo-tree-id5688 . -1) (undo-tree-id5689 . -1) (undo-tree-id5690 . -1) (undo-tree-id5691 . -1) (undo-tree-id5692 . -1) (undo-tree-id5693 . -1) (undo-tree-id5694 . -1) (undo-tree-id5695 . -1) (undo-tree-id5696 . -1) (undo-tree-id5697 . -1) (undo-tree-id5698 . -1) (undo-tree-id5699 . -1) (undo-tree-id5700 . -1) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (#("e" 0 1 (face font-lock-function-name-face fontified t)) . -3600) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1) (undo-tree-id5724 . -1) (undo-tree-id5725 . -1) (undo-tree-id5726 . -1) (undo-tree-id5727 . -1) (undo-tree-id5728 . -1) (undo-tree-id5729 . -1) (undo-tree-id5730 . -1) (undo-tree-id5731 . -1) (undo-tree-id5732 . -1) (undo-tree-id5733 . -1) (undo-tree-id5734 . -1) (undo-tree-id5735 . -1) (undo-tree-id5736 . -1) (undo-tree-id5737 . -1) (undo-tree-id5738 . -1) 3601 (t 25889 26882 668204 932000)) nil (25889 26950 711003 197000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t)) . -478) (undo-tree-id5744 . -1) (undo-tree-id5745 . -1) (#("i" 0 1 (fontified t)) . -479) (undo-tree-id5746 . -1) (undo-tree-id5747 . -1) (#("m" 0 1 (fontified t)) . -480) (undo-tree-id5748 . -1) (undo-tree-id5749 . -1) (#("e" 0 1 (fontified t)) . -481) (undo-tree-id5750 . -1) (undo-tree-id5751 . -1) 482 (t 25889 26950 748739 587000)) nil (25889 26958 521127 410000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . -451) (undo-tree-id5739 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -452) (undo-tree-id5740 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -453) (undo-tree-id5741 . -1) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -454) (undo-tree-id5742 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -455) (undo-tree-id5743 . -1) 456) nil (25889 26958 521114 236000) 0 nil])
([nil nil ((474 . 476) (t 25889 26958 560801 12000)) nil (25889 26962 433379 612000) 0 nil])
([nil nil ((3591 . 3594) (t 25889 26962 472831 777000)) nil (25889 26967 59777 76000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3593) (undo-tree-id5752 . -1) (undo-tree-id5753 . -1) (undo-tree-id5754 . -1) (undo-tree-id5755 . -1) (undo-tree-id5756 . -1) (undo-tree-id5757 . -1) (undo-tree-id5758 . -1) (undo-tree-id5759 . -1) (undo-tree-id5760 . -1) (undo-tree-id5761 . -1) (undo-tree-id5762 . -1) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1) (undo-tree-id5765 . -1) (undo-tree-id5766 . -1) (undo-tree-id5767 . -1) (undo-tree-id5768 . -1) (undo-tree-id5769 . -1) (undo-tree-id5770 . -1) (undo-tree-id5771 . -1) (undo-tree-id5772 . -1) (undo-tree-id5773 . -1) (undo-tree-id5774 . -1) (undo-tree-id5775 . -1) (undo-tree-id5776 . -1) 3594) nil (25889 26967 59759 75000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3853 . 3854) (nil fontified nil 3853 . 3854) (nil fontified nil 3852 . 3853) (nil fontified nil 3848 . 3852) (nil fontified nil 3846 . 3848) (nil fontified nil 3842 . 3846) (nil fontified nil 3841 . 3842) (nil fontified nil 3836 . 3841) (nil fontified nil 3834 . 3836) (nil fontified nil 3830 . 3834) (nil fontified nil 3829 . 3830) (nil fontified nil 3824 . 3829) (nil fontified nil 3823 . 3824) (nil fontified nil 3815 . 3823) (nil fontified nil 3810 . 3815) (nil fontified nil 3809 . 3810) (nil fontified nil 3803 . 3809) (nil fontified nil 3798 . 3803) (nil fontified nil 3796 . 3798) (nil fontified nil 3792 . 3796) (nil fontified nil 3791 . 3792) (nil fontified nil 3778 . 3791) (nil fontified nil 3777 . 3778) (nil fontified nil 3776 . 3777) (nil fontified nil 3774 . 3776) (nil fontified nil 3772 . 3774) (nil fontified nil 3771 . 3772) (nil fontified nil 3770 . 3771) (nil fontified nil 3766 . 3770) (nil fontified nil 3765 . 3766) (nil fontified nil 3764 . 3765) (nil fontified nil 3758 . 3764) (nil fontified nil 3754 . 3758) (nil fontified nil 3753 . 3754) (nil fontified nil 3748 . 3753) (nil fontified nil 3746 . 3748) (nil fontified nil 3742 . 3746) (nil fontified nil 3741 . 3742) (nil fontified nil 3736 . 3741) (nil fontified nil 3735 . 3736) (nil fontified nil 3722 . 3735) (nil fontified nil 3721 . 3722) (nil fontified nil 3714 . 3721) (nil fontified nil 3708 . 3714) (nil fontified nil 3704 . 3708) (nil fontified nil 3703 . 3704) (nil fontified nil 3690 . 3703) (nil fontified nil 3689 . 3690) (nil fontified nil 3688 . 3689) (nil fontified nil 3686 . 3688) (nil fontified nil 3683 . 3686) (nil fontified nil 3682 . 3683) (nil fontified nil 3678 . 3682) (nil fontified nil 3677 . 3678) (nil fontified nil 3676 . 3677) (nil fontified nil 3670 . 3676) (nil fontified nil 3666 . 3670) (nil fontified nil 3664 . 3666) (nil fontified nil 3660 . 3664) (nil fontified nil 3658 . 3660) (nil fontified nil 3654 . 3658) (nil fontified nil 3653 . 3654) (nil fontified nil 3648 . 3653) (nil fontified nil 3647 . 3648) (nil fontified nil 3637 . 3647) (nil fontified nil 3633 . 3637) (nil fontified nil 3632 . 3633) (nil fontified nil 3625 . 3632) (nil fontified nil 3619 . 3625) (nil fontified nil 3618 . 3619) (nil fontified nil 3617 . 3618) (nil fontified nil 3608 . 3617) (nil fontified nil 3607 . 3608) (nil fontified nil 3603 . 3607) (3603 . 3854) (t 25889 26967 128868 398000)) nil (25889 27046 698199 381000) 0 nil])
([nil nil ((#("self.STRUCTURE = torch.Tensor(self.STRUCTURE).view(self.N_POP, self.N_POP)
self.SIGMA = torch.tensor(self.SIGMA, dtype=torch.float64).view(self.N_POP, self.N_POP)
self.KAPPA = torch.tensor(self.KAPPA, dtype=torch.float64).view(self.N_POP, self.N_POP)
" 0 4 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 4 5 (fontified t src-block t font-lock-fontified t gptel response) 5 14 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 14 15 (fontified t src-block t font-lock-fontified t gptel response) 15 16 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 16 22 (fontified t src-block t font-lock-fontified t gptel response) 22 29 (fontified t src-block t font-lock-fontified t gptel response) 29 30 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 30 34 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 34 44 (fontified t src-block t font-lock-fontified t gptel response) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 45 50 (fontified t src-block t font-lock-fontified t gptel response) 50 51 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 51 55 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 55 57 (fontified t src-block t font-lock-fontified t gptel response) 57 61 (fontified t src-block t font-lock-fontified t gptel response) 61 63 (fontified t src-block t font-lock-fontified t gptel response) 63 67 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 67 73 (fontified t src-block t font-lock-fontified t gptel response) 73 74 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 74 75 (fontified t src-block t font-lock-fontified t gptel response) 75 79 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 79 80 (fontified t src-block t font-lock-fontified t gptel response) 80 83 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 83 85 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 85 86 (fontified t src-block t font-lock-fontified t gptel response) 86 87 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 87 100 (fontified t src-block t font-lock-fontified t gptel response) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 101 105 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 105 111 (fontified t src-block t font-lock-fontified t gptel response) 111 118 (fontified t src-block t font-lock-fontified t gptel response) 118 119 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 119 132 (fontified t src-block t font-lock-fontified t gptel response) 132 133 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 133 138 (fontified t src-block t font-lock-fontified t gptel response) 138 139 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 139 143 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 143 145 (fontified t src-block t font-lock-fontified t gptel response) 145 150 (fontified t src-block t font-lock-fontified t gptel response) 150 151 (fontified t src-block t font-lock-fontified t gptel response) 151 155 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 155 161 (fontified t src-block t font-lock-fontified t gptel response) 161 162 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 162 163 (fontified t src-block t font-lock-fontified t gptel response) 163 167 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 167 168 (fontified t src-block t font-lock-fontified t gptel response) 168 169 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 169 171 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 171 173 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 173 174 (fontified t src-block t font-lock-fontified t gptel response) 174 175 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 175 188 (fontified t src-block t font-lock-fontified t gptel response) 188 189 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 189 193 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 193 195 (fontified t src-block t font-lock-fontified t gptel response) 195 200 (fontified t src-block t font-lock-fontified t gptel response) 200 206 (fontified t src-block t font-lock-fontified t gptel response) 206 207 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 207 212 (fontified t src-block t font-lock-fontified t gptel response) 212 220 (fontified t src-block t font-lock-fontified t gptel response) 220 221 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 221 226 (fontified t src-block t font-lock-fontified t gptel response) 226 227 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 227 231 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 231 233 (fontified t src-block t font-lock-fontified t gptel response) 233 238 (fontified t src-block t font-lock-fontified t gptel response) 238 239 (fontified t src-block t font-lock-fontified t gptel response) 239 243 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 243 245 (fontified t src-block t font-lock-fontified t gptel response) 245 249 (fontified t src-block t font-lock-fontified t gptel response) 249 250 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 250 251 (rear-nonsticky t fontified t src-block t font-lock-fontified t gptel response)) . 3603) (undo-tree-id5821 . -251) 3854) nil (25889 27046 698188 963000) 0 nil])
([nil nil ((4040 . 4044) (4031 . 4032)) nil (25889 27046 698186 613000) 0 nil])
([nil nil ((nil fontified nil 4282 . 4283) (nil fontified nil 4281 . 4282) (nil fontified nil 4277 . 4281) (nil fontified nil 4275 . 4277) (nil fontified nil 4271 . 4275) (nil fontified nil 4270 . 4271) (nil fontified nil 4265 . 4270) (nil fontified nil 4263 . 4265) (nil fontified nil 4259 . 4263) (nil fontified nil 4258 . 4259) (nil fontified nil 4253 . 4258) (nil fontified nil 4252 . 4253) (nil fontified nil 4244 . 4252) (nil fontified nil 4239 . 4244) (nil fontified nil 4238 . 4239) (nil fontified nil 4232 . 4238) (nil fontified nil 4227 . 4232) (nil fontified nil 4225 . 4227) (nil fontified nil 4221 . 4225) (nil fontified nil 4220 . 4221) (nil fontified nil 4207 . 4220) (nil fontified nil 4206 . 4207) (nil fontified nil 4205 . 4206) (nil fontified nil 4203 . 4205) (nil fontified nil 4201 . 4203) (nil fontified nil 4200 . 4201) (nil fontified nil 4199 . 4200) (nil fontified nil 4195 . 4199) (nil fontified nil 4194 . 4195) (nil fontified nil 4193 . 4194) (nil fontified nil 4187 . 4193) (nil fontified nil 4183 . 4187) (nil fontified nil 4182 . 4183) (nil fontified nil 4177 . 4182) (nil fontified nil 4175 . 4177) (nil fontified nil 4171 . 4175) (nil fontified nil 4170 . 4171) (nil fontified nil 4165 . 4170) (nil fontified nil 4164 . 4165) (nil fontified nil 4151 . 4164) (nil fontified nil 4150 . 4151) (nil fontified nil 4143 . 4150) (nil fontified nil 4137 . 4143) (nil fontified nil 4133 . 4137) (nil fontified nil 4132 . 4133) (nil fontified nil 4119 . 4132) (nil fontified nil 4118 . 4119) (nil fontified nil 4117 . 4118) (nil fontified nil 4115 . 4117) (nil fontified nil 4112 . 4115) (nil fontified nil 4111 . 4112) (nil fontified nil 4107 . 4111) (nil fontified nil 4106 . 4107) (nil fontified nil 4105 . 4106) (nil fontified nil 4099 . 4105) (nil fontified nil 4095 . 4099) (nil fontified nil 4093 . 4095) (nil fontified nil 4089 . 4093) (nil fontified nil 4087 . 4089) (nil fontified nil 4083 . 4087) (nil fontified nil 4082 . 4083) (nil fontified nil 4077 . 4082) (nil fontified nil 4076 . 4077) (nil fontified nil 4066 . 4076) (nil fontified nil 4062 . 4066) (nil fontified nil 4061 . 4062) (nil fontified nil 4054 . 4061) (nil fontified nil 4048 . 4054) (nil fontified nil 4047 . 4048) (nil fontified nil 4046 . 4047) (nil fontified nil 4037 . 4046) (nil fontified nil 4036 . 4037) (nil fontified nil 4032 . 4036) (4032 . 4283)) nil (25889 27046 698182 933000) 0 nil])
([nil nil ((4032 . 4044)) nil (25889 27046 698172 732000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4040) (undo-tree-id5820 . -4) 4044) nil (25889 27046 698171 246000) 0 nil])
([nil nil ((4115 . 4123)) nil (25889 27046 698168 911000) 0 nil])
([nil nil ((4211 . 4219)) nil (25889 27046 698168 1000) 0 nil])
([nil nil ((#("6" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -4178) (undo-tree-id5818 . -1) (#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -4179) (undo-tree-id5819 . -1) 4180) nil (25889 27046 698166 16000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 4272) (#("6" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 4272)) nil (25889 27046 698160 618000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4311) (undo-tree-id5777 . -4) (undo-tree-id5778 . -4) (undo-tree-id5779 . -4) (undo-tree-id5780 . -4) (undo-tree-id5781 . -4) (undo-tree-id5782 . -4) (undo-tree-id5783 . -4) (undo-tree-id5784 . -4) (undo-tree-id5785 . -4) (undo-tree-id5786 . -4) (undo-tree-id5787 . -4) (undo-tree-id5788 . -4) (undo-tree-id5789 . -4) (undo-tree-id5790 . -4) (undo-tree-id5791 . -4) (undo-tree-id5792 . -4) (undo-tree-id5793 . -4) (undo-tree-id5794 . -4) (undo-tree-id5795 . -4) (undo-tree-id5796 . -4) (undo-tree-id5797 . -4) (undo-tree-id5798 . -4) (undo-tree-id5799 . -4) (undo-tree-id5800 . -4) (undo-tree-id5801 . -4) (undo-tree-id5802 . -4) (undo-tree-id5803 . -4) (undo-tree-id5804 . -4) (undo-tree-id5805 . -4) (undo-tree-id5806 . -4) (undo-tree-id5807 . -4) (undo-tree-id5808 . -4) (undo-tree-id5809 . -4) (undo-tree-id5810 . -4) (undo-tree-id5811 . -4) (undo-tree-id5812 . -4) (undo-tree-id5813 . -4) (undo-tree-id5814 . -4) (undo-tree-id5815 . -4) (undo-tree-id5816 . -4) (undo-tree-id5817 . -4) 4315) nil (25889 27046 698152 326000) 0 nil])
([nil nil ((4884 . 4896) (t 25889 27046 753495 420000)) nil (25889 27112 238940 422000) 0 nil])
([nil nil ((4538 . 4539)) nil (25889 27112 238939 739000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4549 . 4550) (nil fontified nil 4545 . 4550) (nil fontified nil 4541 . 4545) (nil fontified nil 4540 . 4541) (nil fontified nil 4539 . 4540) (4539 . 4550)) nil (25889 27112 238938 842000) 0 nil])
([nil nil ((4765 . 4766)) nil (25889 27112 238937 199000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4776 . 4777) (nil fontified nil 4772 . 4777) (nil fontified nil 4768 . 4772) (nil fontified nil 4767 . 4768) (nil fontified nil 4766 . 4767) (4766 . 4777)) nil (25889 27112 238936 249000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified nil)) . -4909) (undo-tree-id5822 . -1) (undo-tree-id5823 . -1) (undo-tree-id5824 . -1) (undo-tree-id5825 . -1) (undo-tree-id5826 . -1) (undo-tree-id5827 . -1) (undo-tree-id5828 . -1) (undo-tree-id5829 . -1) (undo-tree-id5830 . -1) (undo-tree-id5831 . -1) (undo-tree-id5832 . -1) (undo-tree-id5833 . -1) (undo-tree-id5834 . -1) (undo-tree-id5835 . -1) (undo-tree-id5836 . -1) (undo-tree-id5837 . -1) (undo-tree-id5838 . -1) (undo-tree-id5839 . -1) (undo-tree-id5840 . -1) (#(" " 0 1 (fontified t)) . -4910) (undo-tree-id5841 . -1) (undo-tree-id5842 . -1) (undo-tree-id5843 . -1) (undo-tree-id5844 . -1) (undo-tree-id5845 . -1) (undo-tree-id5846 . -1) (undo-tree-id5847 . -1) (undo-tree-id5848 . -1) (undo-tree-id5849 . -1) (undo-tree-id5850 . -1) (undo-tree-id5851 . -1) (undo-tree-id5852 . -1) (undo-tree-id5853 . -1) (undo-tree-id5854 . -1) (undo-tree-id5855 . -1) (undo-tree-id5856 . -1) (undo-tree-id5857 . -1) (#("s" 0 1 (fontified t)) . -4911) (undo-tree-id5858 . -1) (undo-tree-id5859 . -1) (undo-tree-id5860 . -1) (#("e" 0 1 (fontified t)) . -4912) (undo-tree-id5861 . -1) (undo-tree-id5862 . -1) (undo-tree-id5863 . -1) (#("l" 0 1 (fontified t)) . -4913) (undo-tree-id5864 . -1) (undo-tree-id5865 . -1) (undo-tree-id5866 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -4914) (undo-tree-id5867 . -1) (undo-tree-id5868 . -1) (undo-tree-id5869 . -1) (#("." 0 1 (fontified t)) . -4915) (undo-tree-id5870 . -1) (undo-tree-id5871 . -1) (undo-tree-id5872 . -1) (#("G" 0 1 (fontified t)) . -4916) (undo-tree-id5873 . -1) (undo-tree-id5874 . -1) (undo-tree-id5875 . -1) (#("A" 0 1 (fontified t)) . -4917) (undo-tree-id5876 . -1) (undo-tree-id5877 . -1) (undo-tree-id5878 . -1) (#("I" 0 1 (fontified t)) . -4918) (undo-tree-id5879 . -1) (undo-tree-id5880 . -1) (undo-tree-id5881 . -1) (#("N" 0 1 (fontified t)) . -4919) (undo-tree-id5882 . -1) (undo-tree-id5883 . -1) (undo-tree-id5884 . -1) 4920) nil (25889 27112 238927 667000) 0 nil])
([nil nil ((2115 . 2119) 2107 (t 25889 27112 270381 294000)) nil (25889 27161 614182 252000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2115) (undo-tree-id5885 . -4) (undo-tree-id5886 . -4) (undo-tree-id5887 . -4) (undo-tree-id5888 . -4) (undo-tree-id5889 . -4) (undo-tree-id5890 . -4) (undo-tree-id5891 . -4) (undo-tree-id5892 . -4) (undo-tree-id5893 . -4) (undo-tree-id5894 . -4) (undo-tree-id5895 . -4) (undo-tree-id5896 . -4) (undo-tree-id5897 . -4) (undo-tree-id5898 . -4) (undo-tree-id5899 . -4) (undo-tree-id5900 . -4) (undo-tree-id5901 . -4) (undo-tree-id5902 . -4) (undo-tree-id5903 . -4) (undo-tree-id5904 . -4) (undo-tree-id5905 . -4) (undo-tree-id5906 . -4) (undo-tree-id5907 . -4) (undo-tree-id5908 . -4) (undo-tree-id5909 . -4) (undo-tree-id5910 . -4) (undo-tree-id5911 . -4) (undo-tree-id5912 . -4) (undo-tree-id5913 . -4) (undo-tree-id5914 . -4) (undo-tree-id5915 . -4) (undo-tree-id5916 . -4) (undo-tree-id5917 . -4) (undo-tree-id5918 . -4) (undo-tree-id5919 . -4) (undo-tree-id5920 . -4) (undo-tree-id5921 . -4) (undo-tree-id5922 . -4) (undo-tree-id5923 . -4) (undo-tree-id5924 . -4) (undo-tree-id5925 . -4) (undo-tree-id5926 . -4) 2119) nil (25889 27541 519243 500000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3788 . 3789) (nil fontified nil 3788 . 3789) (nil fontified nil 3787 . 3788) (nil fontified nil 3785 . 3787) (nil fontified nil 3781 . 3785) (nil fontified nil 3780 . 3781) (nil fontified nil 3770 . 3780) (nil fontified nil 3766 . 3770) (nil fontified nil 3762 . 3766) (nil fontified nil 3755 . 3762) (nil fontified nil 3751 . 3755) (nil fontified nil 3733 . 3751) (nil fontified nil 3726 . 3733) (nil fontified nil 3725 . 3726) (nil fontified nil 3719 . 3725) (nil fontified nil 3718 . 3719) (nil fontified nil 3717 . 3718) (nil fontified nil 3713 . 3717) (nil fontified nil 3712 . 3713) (nil fontified nil 3711 . 3712) (nil fontified nil 3710 . 3711) (nil fontified nil 3709 . 3710) (nil fontified nil 3704 . 3709) (nil fontified nil 3703 . 3704) (nil fontified nil 3698 . 3703) (nil fontified nil 3694 . 3698) (nil fontified nil 3693 . 3694) (nil fontified nil 3692 . 3693) (nil fontified nil 3689 . 3692) (nil fontified nil 3685 . 3689) (nil fontified nil 3684 . 3685) (nil fontified nil 3681 . 3684) (nil fontified nil 3680 . 3681) (nil fontified nil 3670 . 3680) (nil fontified nil 3666 . 3670) (nil fontified nil 3665 . 3666) (nil fontified nil 3662 . 3665) (nil fontified nil 3660 . 3662) (nil fontified nil 3659 . 3660) (nil fontified nil 3653 . 3659) (nil fontified nil 3649 . 3653) (nil fontified nil 3648 . 3649) (nil fontified nil 3643 . 3648) (nil fontified nil 3642 . 3643) (nil fontified nil 3640 . 3642) (nil fontified nil 3635 . 3640) (nil fontified nil 3633 . 3635) (nil fontified nil 3630 . 3633) (nil fontified nil 3629 . 3630) (nil fontified nil 3628 . 3629) (nil fontified nil 3627 . 3628) (nil fontified nil 3626 . 3627) (nil fontified nil 3625 . 3626) (nil fontified nil 3624 . 3625) (nil fontified nil 3623 . 3624) (nil fontified nil 3621 . 3623) (nil fontified nil 3620 . 3621) (nil fontified nil 3616 . 3620) (nil fontified nil 3615 . 3616) (nil fontified nil 3614 . 3615) (nil fontified nil 3613 . 3614) (nil fontified nil 3612 . 3613) (nil fontified nil 3611 . 3612) (nil fontified nil 3610 . 3611) (nil fontified nil 3609 . 3610) (nil fontified nil 3608 . 3609) (nil fontified nil 3607 . 3608) (nil fontified nil 3603 . 3607) (3603 . 3789) (t 25889 27161 643142 773000)) nil (25889 27550 939191 657000) 0 nil] [nil nil ((nil rear-nonsticky nil 3764 . 3765) (nil fontified nil 3764 . 3765) (nil fontified nil 3763 . 3764) (nil fontified nil 3761 . 3763) (nil fontified nil 3757 . 3761) (nil fontified nil 3756 . 3757) (nil fontified nil 3746 . 3756) (nil fontified nil 3742 . 3746) (nil fontified nil 3738 . 3742) (nil fontified nil 3731 . 3738) (nil fontified nil 3727 . 3731) (nil fontified nil 3709 . 3727) (nil fontified nil 3702 . 3709) (nil fontified nil 3701 . 3702) (nil fontified nil 3695 . 3701) (nil fontified nil 3694 . 3695) (nil fontified nil 3693 . 3694) (nil fontified nil 3689 . 3693) (nil fontified nil 3688 . 3689) (nil fontified nil 3687 . 3688) (nil fontified nil 3686 . 3687) (nil fontified nil 3685 . 3686) (nil fontified nil 3680 . 3685) (nil fontified nil 3679 . 3680) (nil fontified nil 3674 . 3679) (nil fontified nil 3670 . 3674) (nil fontified nil 3669 . 3670) (nil fontified nil 3668 . 3669) (nil fontified nil 3665 . 3668) (nil fontified nil 3661 . 3665) (nil fontified nil 3660 . 3661) (nil fontified nil 3657 . 3660) (nil fontified nil 3656 . 3657) (nil fontified nil 3646 . 3656) (nil fontified nil 3642 . 3646) (nil fontified nil 3641 . 3642) (nil fontified nil 3638 . 3641) (nil fontified nil 3636 . 3638) (nil fontified nil 3635 . 3636) (nil fontified nil 3629 . 3635) (nil fontified nil 3625 . 3629) (nil fontified nil 3624 . 3625) (nil fontified nil 3619 . 3624) (nil fontified nil 3618 . 3619) (nil fontified nil 3616 . 3618) (nil fontified nil 3611 . 3616) (nil fontified nil 3609 . 3611) (nil fontified nil 3606 . 3609) (nil fontified nil 3605 . 3606) (nil fontified nil 3604 . 3605) (nil fontified nil 3603 . 3604) (nil fontified nil 3602 . 3603) (nil fontified nil 3601 . 3602) (nil fontified nil 3600 . 3601) (nil fontified nil 3599 . 3600) (nil fontified nil 3597 . 3599) (nil fontified nil 3596 . 3597) (nil fontified nil 3592 . 3596) (nil fontified nil 3591 . 3592) (nil fontified nil 3590 . 3591) (nil fontified nil 3589 . 3590) (nil fontified nil 3588 . 3589) (nil fontified nil 3587 . 3588) (nil fontified nil 3586 . 3587) (nil fontified nil 3585 . 3586) (nil fontified nil 3584 . 3585) (nil fontified nil 3583 . 3584) (nil fontified nil 3579 . 3583) (3579 . 3765) (t 25889 27161 643142 773000)) ((#("self.Na = []
self.Ka = []

for i_pop in range(self.N_POP):
    self.Na.append(int(self.N * self.frac[i_pop]))
    # self.Ka.append(self.K * const.frac[i_pop])
    self.Ka.append(self.K)
" 0 4 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 4 5 (fontified nil src-block t font-lock-fontified t gptel response) 5 6 (face font-lock-variable-name-face fontified nil src-block t font-lock-fontified t gptel response) 6 7 (face font-lock-variable-name-face fontified nil src-block t font-lock-fontified t gptel response) 7 8 (fontified nil src-block t font-lock-fontified t gptel response) 8 9 (face font-lock-operator-face fontified nil src-block t font-lock-fontified t gptel response) 9 10 (fontified nil src-block t font-lock-fontified t gptel response) 10 11 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 11 12 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 12 13 (fontified nil src-block t font-lock-fontified t gptel response) 13 17 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 17 18 (fontified nil src-block t font-lock-fontified t gptel response) 18 20 (face font-lock-variable-name-face fontified nil src-block t font-lock-fontified t gptel response) 20 21 (fontified nil src-block t font-lock-fontified t gptel response) 21 22 (face font-lock-operator-face fontified nil src-block t font-lock-fontified t gptel response) 22 23 (fontified nil src-block t font-lock-fontified t gptel response) 23 24 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 24 25 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 25 26 (fontified nil src-block t font-lock-fontified t gptel response) 26 27 (fontified nil src-block t font-lock-fontified t gptel response) 27 30 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 30 32 (fontified nil src-block t font-lock-fontified t gptel response) 32 37 (fontified nil src-block t font-lock-fontified t gptel response) 37 39 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 39 40 (fontified nil src-block t font-lock-fontified t gptel response) 40 45 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response) 45 46 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 46 50 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 50 56 (fontified nil src-block t font-lock-fontified t gptel response) 56 57 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 57 59 (fontified nil src-block t font-lock-fontified t gptel response) 59 62 (fontified nil src-block t font-lock-fontified t gptel response) 62 63 (fontified nil src-block t font-lock-fontified t gptel response) 63 67 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 67 77 (fontified nil src-block t font-lock-fontified t gptel response) 77 78 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 78 81 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response) 81 82 (face (rainbow-delimiters-depth-2-face) fontified nil src-block t font-lock-fontified t gptel response) 82 86 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 86 89 (fontified nil src-block t font-lock-fontified t gptel response) 89 90 (face font-lock-operator-face fontified nil src-block t font-lock-fontified t gptel response) 90 91 (fontified nil src-block t font-lock-fontified t gptel response) 91 95 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 95 100 (fontified nil src-block t font-lock-fontified t gptel response) 100 101 (face (rainbow-delimiters-depth-3-face) fontified nil src-block t font-lock-fontified t gptel response) 101 106 (fontified nil src-block t font-lock-fontified t gptel response) 106 107 (face (rainbow-delimiters-depth-3-face) fontified nil src-block t font-lock-fontified t gptel response) 107 108 (face (rainbow-delimiters-depth-2-face) fontified nil src-block t font-lock-fontified t gptel response) 108 109 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 109 110 (fontified nil src-block t font-lock-fontified t gptel response) 110 114 (fontified nil src-block t font-lock-fontified t gptel response) 114 115 (face font-lock-comment-delimiter-face fontified nil src-block t font-lock-fontified t gptel response) 115 116 (face font-lock-comment-delimiter-face fontified nil src-block t font-lock-fontified t gptel response) 116 122 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 122 123 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 123 130 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 130 148 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 148 152 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 152 159 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t gptel response) 159 163 (fontified nil src-block t font-lock-fontified t gptel response) 163 167 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 167 177 (fontified nil src-block t font-lock-fontified t gptel response) 177 178 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 178 182 (face font-lock-keyword-face fontified nil src-block t font-lock-fontified t gptel response) 182 184 (fontified nil src-block t font-lock-fontified t gptel response) 184 185 (face (rainbow-delimiters-depth-1-face) fontified nil src-block t font-lock-fontified t gptel response) 185 186 (rear-nonsticky nil fontified nil src-block t font-lock-fontified t gptel response)) . 3579) (undo-tree-id5927 . -186) (undo-tree-id5928 . -186) (undo-tree-id5929 . -186) (undo-tree-id5930 . -186) (nil fontified t 3591 . 3592) (nil fontified t 3604 . 3605) (nil fontified t 3605 . 3606) (nil fontified t 3636 . 3638) (nil fontified t 3688 . 3689) (nil fontified t 3731 . 3738) (nil rear-nonsticky t 3764 . 3765)) (25889 27541 514056 223000) 0 nil])
([nil nil ((3603 . 3611)) nil (25889 27550 939183 529000) 0 nil])
nil
([nil nil ((3624 . 3632)) nil (25889 27550 939182 986000) 0 nil])
([nil nil ((3646 . 3654)) nil (25889 27550 939182 331000) 0 nil])
([nil nil ((3686 . 3698) (#("    " 0 3 (fontified t src-block t font-lock-fontified t gptel response) 3 4 (fontified t src-block t font-lock-fontified t gptel response)) . 3686)) nil (25889 27550 939181 643000) 0 nil])
([nil nil ((3745 . 3757) (#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . 3745)) nil (25889 27550 939180 860000) 0 nil])
([nil nil ((3802 . 3814) (#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . 3802)) nil (25889 27550 939179 441000) 0 nil])
([nil nil ((3836 . 3849)) nil (25889 27550 939174 37000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t gptel response)) . -3845) (undo-tree-id5931 . -4) (undo-tree-id5932 . -4) (undo-tree-id5933 . -4) (undo-tree-id5934 . -4) (undo-tree-id5935 . -4) (undo-tree-id5936 . -4) (undo-tree-id5937 . -4) (undo-tree-id5938 . -4) (undo-tree-id5939 . -4) (undo-tree-id5940 . -4) (undo-tree-id5941 . -4) (undo-tree-id5942 . -4) (undo-tree-id5943 . -4) (undo-tree-id5944 . -4) (undo-tree-id5945 . -4) (undo-tree-id5946 . -4) 3849 (t 25889 27550 976353 325000)) nil (25889 27664 712656 177000) 0 nil])
([nil nil ((4172 . 4176)) (("_TAU" . 4172) (undo-tree-id5947 . -4) (undo-tree-id5948 . -4) (undo-tree-id5949 . -4)) (25889 27665 947678 161000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2634) (2633 . 2634) (2632 . 2634) (#("[" 0 1 (fontified nil)) . -2632) (2632 . 2633)) nil (25889 27709 905604 231000) 0 nil] [nil nil ((apply -2 517 554 undo--wrap-and-run-primitive-undo 517 554 ((525 . 527) 543))) ((apply 2 517 552 undo--wrap-and-run-primitive-undo 517 552 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 525) 2480))) (25889 27627 195322 813000) 0 nil])
([nil nil ((2633 . 2634)) nil (25889 27709 905603 245000) 0 nil])
nil
([nil nil ((#("u" 0 1 (fontified t)) . -2633) (undo-tree-id5965 . -1) 2634) nil (25889 27709 905602 523000) 0 nil])
([nil nil ((2633 . 2639)) nil (25889 27709 905600 984000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -2638) (undo-tree-id5964 . -1) 2639) nil (25889 27709 905600 144000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 2641) (2640 . 2641) (2639 . 2641) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -2639) (2639 . 2640)) nil (25889 27709 905598 81000) 0 nil])
([nil nil ((2640 . 2646)) nil (25889 27709 905596 871000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2644) (undo-tree-id5962 . -1) (#("p" 0 1 (fontified t)) . -2645) (undo-tree-id5963 . -1) 2646) nil (25889 27709 905595 800000) 0 nil])
([nil nil ((2644 . 2645)) nil (25889 27709 905592 990000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2647) (undo-tree-id5950 . -1) (#(" " 0 1 (fontified t)) . -2648) (undo-tree-id5951 . -1) (#(" " 0 1 (fontified t)) . -2649) (undo-tree-id5952 . -1) (#(" " 0 1 (fontified t)) . -2650) (undo-tree-id5953 . -1) (#(" " 0 1 (fontified t)) . -2651) (undo-tree-id5954 . -1) (#(" " 0 1 (fontified t)) . -2652) (undo-tree-id5955 . -1) (#(" " 0 1 (fontified t)) . -2653) (undo-tree-id5956 . -1) (#(" " 0 1 (fontified t)) . -2654) (undo-tree-id5957 . -1) (#(" " 0 1 (fontified t)) . -2655) (undo-tree-id5958 . -1) (#(" " 0 1 (fontified t)) . -2656) (undo-tree-id5959 . -1) (#(" " 0 1 (fontified t)) . -2657) (undo-tree-id5960 . -1) (#(" " 0 1 (fontified t)) . -2658) (undo-tree-id5961 . -1) 2659) nil (25889 27709 905589 365000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3472 . 3473) (nil fontified nil 3472 . 3473) (nil fontified nil 3467 . 3472) (nil fontified nil 3466 . 3467) (nil fontified nil 3465 . 3466) (nil fontified nil 3460 . 3465) (nil fontified nil 3459 . 3460) (3459 . 3473)) nil (25889 27709 905562 971000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4376 . 4377) (nil fontified nil 4376 . 4377) (nil fontified nil 4375 . 4376) (nil fontified nil 4369 . 4375) (nil fontified nil 4365 . 4369) (nil fontified nil 4357 . 4365) (nil fontified nil 4353 . 4357) (nil fontified nil 4352 . 4353) (nil fontified nil 4344 . 4352) (nil fontified nil 4343 . 4344) (nil fontified nil 4333 . 4343) (nil fontified nil 4329 . 4333) (nil fontified nil 4328 . 4329) (nil fontified nil 4319 . 4328) (nil fontified nil 4318 . 4319) (nil fontified nil 4317 . 4318) (nil fontified nil 4308 . 4317) (nil fontified nil 4307 . 4308) (nil fontified nil 4303 . 4307) (nil fontified nil 4295 . 4303) (4295 . 4377) (t 25889 27709 942203 988000)) nil (25889 27847 545642 827000) 0 nil])
([nil nil ((#("        self.STRUCTURE = torch.Tensor(self.STRUCTURE).view(self.N_POP, self.N_POP)
" 0 8 (fontified t) 8 12 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 12 13 (fontified t src-block t font-lock-fontified t gptel response) 13 22 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t gptel response) 22 23 (fontified t src-block t font-lock-fontified t gptel response) 23 24 (face font-lock-operator-face fontified t src-block t font-lock-fontified t gptel response) 24 30 (fontified t src-block t font-lock-fontified t gptel response) 30 37 (fontified t src-block t font-lock-fontified t gptel response) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 38 42 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 42 52 (fontified t src-block t font-lock-fontified t gptel response) 52 53 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 53 58 (fontified t src-block t font-lock-fontified t gptel response) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 59 63 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 63 65 (fontified t src-block t font-lock-fontified t gptel response) 65 69 (fontified t src-block t font-lock-fontified t gptel response) 69 71 (fontified t src-block t font-lock-fontified t gptel response) 71 75 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t gptel response) 75 81 (fontified t src-block t font-lock-fontified t gptel response) 81 82 (face (rainbow-delimiters-depth-1-face) fontified t src-block t font-lock-fontified t gptel response) 82 83 (fontified t src-block t font-lock-fontified t gptel response)) . -4377) (undo-tree-id5966 . -13) (undo-tree-id5967 . -13) (undo-tree-id5968 . -13) (undo-tree-id5969 . -13) (undo-tree-id5970 . -13) (undo-tree-id5971 . -13) (undo-tree-id5972 . -13) (undo-tree-id5973 . -13) (undo-tree-id5974 . -13) (undo-tree-id5975 . -13) (undo-tree-id5976 . -13) (undo-tree-id5977 . -13) (undo-tree-id5978 . -13) (undo-tree-id5979 . -13) (undo-tree-id5980 . -13) (undo-tree-id5981 . -13) (undo-tree-id5982 . -13) (undo-tree-id5983 . -13) (undo-tree-id5984 . -13) (undo-tree-id5985 . -13) (undo-tree-id5986 . -13) (undo-tree-id5987 . -13) (undo-tree-id5988 . -13) (undo-tree-id5989 . -13) (undo-tree-id5990 . -13) (undo-tree-id5991 . -13) (undo-tree-id5992 . -13) (undo-tree-id5993 . -13) (undo-tree-id5994 . -13) (undo-tree-id5995 . -13) (undo-tree-id5996 . -13) (undo-tree-id5997 . -13) (undo-tree-id5998 . -13) (undo-tree-id5999 . -13) (undo-tree-id6000 . -13) (undo-tree-id6001 . -13) (undo-tree-id6002 . -13) (undo-tree-id6003 . -13) (undo-tree-id6004 . -13) (undo-tree-id6005 . -13) (undo-tree-id6006 . -13) (undo-tree-id6007 . -13) (undo-tree-id6008 . -13) 4460) nil (25889 27893 773323 701000) 0 nil])
([nil nil ((3739 . 3746) (t 25889 27894 824233 203000)) nil (25889 27940 85336 743000) 0 nil] [nil nil ((#("_NEURON" 0 7 (fontified t)) . 1241) (t 25889 27847 583725 17000)) ((1241 . 1248) (t 25889 27882 280098 874000)) (25889 27882 228921 339000) 0 nil])
([nil nil ((#("        if self.VERBOSE:
            print(\"Ja0\", self.Ja0)
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 25 (fontified t) 25 37 (fontified t) 37 42 (face font-lock-builtin-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 48 (face font-lock-string-face fontified t) 48 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t rear-nonsticky t)) . 5056) (undo-tree-id6012 . -60) 5116 (t 25889 27940 124714 816000)) nil (25889 27993 208694 275000) 0 nil])
nil
([nil nil ((nil fontified nil 5018 . 5019) (nil fontified nil 5017 . 5018) (nil fontified nil 5013 . 5017) (nil fontified nil 5009 . 5013) (nil fontified nil 5007 . 5009) (nil fontified nil 5002 . 5007) (nil fontified nil 5001 . 5002) (nil fontified nil 4996 . 5001) (nil fontified nil 4984 . 4996) (nil fontified nil 4974 . 4984) (nil fontified nil 4970 . 4974) (nil fontified nil 4969 . 4970) (nil fontified nil 4967 . 4969) (nil fontified nil 4959 . 4967) (4959 . 5019)) nil (25889 27993 240831 276000) 0 nil])
([nil nil ((#("        if self.VERBOSE:
            print(\"Ja0\", self.Ja0)
" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 25 (fontified t) 25 37 (fontified t) 37 42 (face font-lock-builtin-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 48 (face font-lock-string-face fontified t) 48 50 (fontified t) 50 54 (face font-lock-keyword-face fontified t) 54 58 (fontified t) 58 59 (face (rainbow-delimiters-depth-1-face) fontified t) 59 60 (fontified t rear-nonsticky t)) . 4959) (undo-tree-id6017 . -60) (undo-tree-id6018 . -60) (undo-tree-id6019 . -60) (undo-tree-id6020 . -60) (undo-tree-id6021 . -60) (undo-tree-id6022 . -60) (undo-tree-id6023 . -60) (undo-tree-id6024 . -60) (undo-tree-id6025 . -60) (undo-tree-id6026 . -60) (undo-tree-id6027 . -60) (undo-tree-id6028 . -60) (undo-tree-id6029 . -60) (undo-tree-id6030 . -60) (undo-tree-id6031 . -60) (undo-tree-id6032 . -60) (undo-tree-id6033 . -60) (undo-tree-id6034 . -25) (undo-tree-id6035 . -60) (undo-tree-id6036 . -37) (undo-tree-id6037 . -37) (undo-tree-id6038 . -25) (undo-tree-id6039 . -25) (undo-tree-id6040 . -25) (undo-tree-id6041 . -25) (undo-tree-id6042 . -25) (undo-tree-id6043 . -25) (undo-tree-id6044 . -25) (undo-tree-id6045 . -25) (undo-tree-id6046 . -25) (undo-tree-id6047 . -25) (undo-tree-id6048 . -25) (undo-tree-id6049 . -25) (undo-tree-id6050 . -25) (undo-tree-id6051 . -25) (undo-tree-id6052 . -25) (undo-tree-id6053 . -25) (undo-tree-id6054 . -25) (undo-tree-id6055 . -25) (undo-tree-id6056 . -25) (undo-tree-id6057 . -25) (undo-tree-id6058 . -25) (undo-tree-id6059 . -25) (undo-tree-id6060 . -25) (undo-tree-id6061 . -25) (undo-tree-id6062 . -25) (undo-tree-id6063 . -25) (undo-tree-id6064 . -25) (undo-tree-id6065 . -25) (undo-tree-id6066 . -25) (undo-tree-id6067 . -25) (undo-tree-id6068 . -25) (undo-tree-id6069 . -25) (undo-tree-id6070 . -25) (undo-tree-id6071 . -25) (undo-tree-id6072 . -25) (undo-tree-id6073 . -25) (undo-tree-id6074 . -25) (undo-tree-id6075 . -25) (undo-tree-id6076 . -25) (undo-tree-id6077 . -25) (undo-tree-id6078 . -25) (undo-tree-id6079 . -25) (undo-tree-id6080 . -25) (undo-tree-id6081 . -25) (undo-tree-id6082 . -25) (undo-tree-id6083 . -25) (undo-tree-id6084 . -25) (undo-tree-id6085 . -25) (undo-tree-id6086 . -25) (undo-tree-id6087 . -25) (undo-tree-id6088 . -60) (undo-tree-id6089 . -25) (undo-tree-id6090 . -25) (undo-tree-id6091 . -25) (undo-tree-id6092 . -25) (undo-tree-id6093 . -25) (undo-tree-id6094 . -25) (undo-tree-id6095 . -25) (undo-tree-id6096 . -25) (undo-tree-id6097 . -25) (undo-tree-id6098 . -25) (undo-tree-id6099 . -25) (undo-tree-id6100 . -25) (undo-tree-id6101 . -25) (undo-tree-id6102 . -25) (undo-tree-id6103 . -25) (undo-tree-id6104 . -25) (undo-tree-id6105 . -25) (undo-tree-id6106 . -60) (undo-tree-id6107 . -60) (undo-tree-id6108 . -25) (undo-tree-id6109 . -60) (undo-tree-id6110 . -60) (undo-tree-id6111 . -60) (undo-tree-id6112 . -60) (undo-tree-id6113 . -60) (undo-tree-id6114 . -60) (undo-tree-id6115 . -60) (undo-tree-id6116 . -60) (undo-tree-id6117 . -60) (undo-tree-id6118 . -60) (undo-tree-id6119 . -60) (undo-tree-id6120 . -60) (undo-tree-id6121 . -60) (undo-tree-id6122 . -60) (undo-tree-id6123 . -60) (undo-tree-id6124 . -60) (undo-tree-id6125 . -60) (undo-tree-id6126 . -60) (undo-tree-id6127 . -60) (undo-tree-id6128 . -60) (undo-tree-id6129 . -60) (undo-tree-id6130 . -60) (undo-tree-id6131 . -60) (undo-tree-id6132 . -60) 5019) nil (25889 27996 946179 357000) 0 nil] [nil nil ((#("        
        if self.VERBOSE:
" 0 2 (fontified t) 2 8 (fontified t) 8 9 (fontified t) 9 17 (fontified t) 17 19 (face font-lock-keyword-face fontified t) 19 20 (fontified t) 20 24 (face font-lock-keyword-face fontified t) 24 34 (fontified t)) . 4950) (undo-tree-id6010 . -9) (undo-tree-id6011 . -34) 4984) ((4950 . 4984)) (25889 27993 210261 828000) 0 nil])
([nil nil ((nil fontified nil 5047 . 5048) (nil fontified nil 5046 . 5047) (nil fontified nil 5042 . 5046) (nil fontified nil 5038 . 5042) (nil fontified nil 5036 . 5038) (nil fontified nil 5031 . 5036) (nil fontified nil 5030 . 5031) (nil fontified nil 5025 . 5030) (nil fontified nil 5013 . 5025) (nil fontified nil 5003 . 5013) (nil fontified nil 4999 . 5003) (nil fontified nil 4998 . 4999) (nil fontified nil 4996 . 4998) (nil fontified nil 4988 . 4996) (4988 . 5048)) nil (25889 27996 945991 624000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5018 . 5019) (nil fontified nil 5009 . 5019) (nil fontified nil 5005 . 5009) (nil fontified nil 5004 . 5005) (nil fontified nil 5002 . 5004) (nil fontified nil 4994 . 5002) (nil fontified nil 4993 . 4994) (nil fontified nil 4987 . 4993) (nil fontified nil 4985 . 4987) (4985 . 5019)) ((#("        
        if self.VERBOSE:
" 0 2 (fontified nil) 2 8 (fontified nil) 8 9 (fontified nil) 9 17 (fontified nil) 17 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 24 (face font-lock-keyword-face fontified nil) 24 33 (fontified nil) 33 34 (rear-nonsticky nil fontified nil)) . 4985) (undo-tree-id6013 . -34) (undo-tree-id6014 . -34) (undo-tree-id6015 . -34) (undo-tree-id6016 . -34) (nil fontified t 4993 . 4994) (nil rear-nonsticky t 5018 . 5019)) (25889 27993 208674 658000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -5106) (undo-tree-id6168 . -1) 5107 (t 25889 27996 981312 81000)) nil (25889 28002 158147 101000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified t)) . -5119) (undo-tree-id6167 . -4) 5123) nil (25889 28002 158145 82000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t src-block t font-lock-fontified t gptel response)) . -5114) (undo-tree-id6133 . -1) (undo-tree-id6134 . -1) (undo-tree-id6135 . -1) (undo-tree-id6136 . -1) (undo-tree-id6137 . -1) (undo-tree-id6138 . -1) (undo-tree-id6139 . -1) (undo-tree-id6140 . -1) (undo-tree-id6141 . -1) (undo-tree-id6142 . -1) (undo-tree-id6143 . -1) (undo-tree-id6144 . -1) (undo-tree-id6145 . -1) (undo-tree-id6146 . -1) (undo-tree-id6147 . -1) (undo-tree-id6148 . -1) (undo-tree-id6149 . -1) (undo-tree-id6150 . -1) (undo-tree-id6151 . -1) (undo-tree-id6152 . -1) (undo-tree-id6153 . -1) (undo-tree-id6154 . -1) (undo-tree-id6155 . -1) (undo-tree-id6156 . -1) (undo-tree-id6157 . -1) (undo-tree-id6158 . -1) (undo-tree-id6159 . -1) (undo-tree-id6160 . -1) (undo-tree-id6161 . -1) (undo-tree-id6162 . -1) (undo-tree-id6163 . -1) (undo-tree-id6164 . -1) (undo-tree-id6165 . -1) (undo-tree-id6166 . -1) 5115) nil (25889 28002 158138 168000) 0 nil])
([nil nil ((3018 . 3031) (t 25889 28002 189366 420000)) nil (25889 28297 898118 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4632 . 4633) (nil fontified nil 4626 . 4633) (nil fontified nil 4625 . 4626) (nil fontified nil 4618 . 4625) (nil fontified nil 4617 . 4618) (nil fontified nil 4610 . 4617) (nil fontified nil 4606 . 4610) (nil fontified nil 4605 . 4606) (nil fontified nil 4604 . 4605) (nil fontified nil 4603 . 4604) (nil fontified nil 4598 . 4603) (nil fontified nil 4597 . 4598) (nil fontified nil 4593 . 4597) (nil fontified nil 4585 . 4593) (4585 . 4633) (t 25889 28297 932370 155000)) nil (25889 28337 339598 576000) 0 nil])
([nil nil ((1697 . 1701) (#("    " 0 4 (fontified nil)) . 1696) (undo-tree-id7125 . -4) (1700 . 1701) (t 25889 28337 372760 969000)) nil (25889 28508 479998 266000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1864 . 1865) (nil fontified nil 1864 . 1865) (nil fontified nil 1863 . 1864) (nil fontified nil 1858 . 1863) (nil fontified nil 1857 . 1858) (nil fontified nil 1848 . 1857) (nil fontified nil 1847 . 1848) (nil fontified nil 1846 . 1847) (nil fontified nil 1841 . 1846) (nil fontified nil 1839 . 1841) (nil fontified nil 1832 . 1839) (nil fontified nil 1831 . 1832) (nil fontified nil 1830 . 1831) (nil fontified nil 1829 . 1830) (nil fontified nil 1828 . 1829) (nil fontified nil 1827 . 1828) (nil fontified nil 1826 . 1827) (nil fontified nil 1825 . 1826) (nil fontified nil 1819 . 1825) (nil fontified nil 1818 . 1819) (nil fontified nil 1817 . 1818) (nil fontified nil 1804 . 1817) (nil fontified nil 1803 . 1804) (nil fontified nil 1785 . 1803) (nil fontified nil 1784 . 1785) (nil fontified nil 1783 . 1784) (nil fontified nil 1763 . 1783) (nil fontified nil 1762 . 1763) (nil fontified nil 1756 . 1762) (nil fontified nil 1755 . 1756) (nil fontified nil 1754 . 1755) (nil fontified nil 1748 . 1754) (nil fontified nil 1742 . 1748) (nil fontified nil 1724 . 1742) (nil fontified nil 1722 . 1724) (nil fontified nil 1719 . 1722) (nil fontified nil 1718 . 1719) (nil fontified nil 1714 . 1718) (nil fontified nil 1713 . 1714) (nil fontified nil 1708 . 1713) (nil fontified nil 1707 . 1708) (nil fontified nil 1705 . 1707) (nil fontified nil 1702 . 1705) (nil fontified nil 1699 . 1702) (nil fontified nil 1697 . 1699) (1697 . 1865)) nil (25889 28508 479992 906000) 0 nil])
([nil nil ((1696 . 1701)) nil (25889 28508 479983 865000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1697) (undo-tree-id7124 . -4) 1701) nil (25889 28508 479982 611000) 0 nil])
([nil nil ((1697 . 1701)) nil (25889 28508 479979 580000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -1697) 1701) nil (25889 28508 479978 314000) 0 nil])
([nil nil ((1697 . 1701)) nil (25889 28508 479977 66000) 0 nil])
([nil nil ((1701 . 1703)) nil (25889 28508 479975 938000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1701) (undo-tree-id7122 . -1) (#("e" 0 1 (fontified t)) . -1702) (undo-tree-id7123 . -1) 1703) nil (25889 28508 479974 263000) 0 nil])
([nil nil ((1710 . 1711) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1710) (1709 . 1710) (1708 . 1710) (#("(" 0 1 (face font-lock-function-name-face fontified nil)) . -1708) (1701 . 1709)) nil (25889 28508 479969 261000) 0 nil])
([nil nil ((1709 . 1713)) nil (25889 28508 479967 154000) 0 nil])
([nil nil ((1716 . 1724) (#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1716)) nil (25889 28508 479965 930000) 0 nil])
([nil nil ((1767 . 1779) (#("      " 0 6 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1767) 1775) nil (25889 28508 479964 608000) 0 nil])
([nil nil ((1816 . 1828) (#("      " 0 6 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1816)) nil (25889 28508 479963 17000) 0 nil])
([nil nil ((1876 . 1888) (#("  " 0 2 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1876)) nil (25889 28508 479961 661000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1739) (undo-tree-id7118 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1740) (undo-tree-id7119 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1741) (undo-tree-id7120 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1742) (undo-tree-id7121 . -1) 1743) nil (25889 28508 479959 483000) 0 nil])
([nil nil ((1739 . 1748)) nil (25889 28508 479952 508000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1746) (undo-tree-id7116 . -1) (#("R" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1747) (undo-tree-id7117 . -1) 1748) nil (25889 28508 479950 998000) 0 nil])
([nil nil ((1746 . 1752)) nil (25889 28508 479946 837000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1893) (undo-tree-id7115 . -4) 1897) nil (25889 28508 479945 629000) 0 nil])
([nil nil ((1918 . 1926) (#("    " 0 4 (fontified nil)) . 1917) (undo-tree-id7114 . -4) (1921 . 1922)) nil (25889 28508 479942 823000) 0 nil])
([nil nil ((1926 . 1938)) nil (25889 28508 479940 94000) 0 nil])
([nil nil ((1940 . 1944) (#("    " 0 4 (fontified nil)) . 1939) (undo-tree-id7113 . -4) (1938 . 1944)) nil (25889 28508 479938 371000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1938) (undo-tree-id7112 . -1) 1939) nil (25889 28508 479934 966000) 0 nil])
([nil nil ((#("        # init rates
        self.initRates()
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 20 (face font-lock-comment-face fontified t) 20 21 (face font-lock-comment-face fontified t) 21 29 (fontified t) 29 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 42 (fontified t) 42 43 (fontified t) 43 44 (face (rainbow-delimiters-depth-1-face) fontified t) 44 45 (face (rainbow-delimiters-depth-1-face) fontified t) 45 46 (fontified t rear-nonsticky t)) . 1065) (undo-tree-id7105 . -20) (undo-tree-id7106 . -20) (undo-tree-id7107 . -20) (undo-tree-id7108 . -20) (undo-tree-id7109 . -21) (undo-tree-id7110 . -21) (undo-tree-id7111 . -46) 1111) nil (25889 28508 479931 809000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1064) (undo-tree-id7097 . -1) (undo-tree-id7098 . -1) (undo-tree-id7099 . -1) (undo-tree-id7100 . -1) (undo-tree-id7101 . -1) (undo-tree-id7102 . -1) (undo-tree-id7103 . -1) (undo-tree-id7104 . -1) 1065) nil (25889 28508 479917 670000) 0 nil])
([nil nil ((1073 . 1077) (1064 . 1065)) nil (25889 28508 479904 668000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1073) (undo-tree-id7096 . -4) 1077) nil (25889 28508 479902 960000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1064) (undo-tree-id7095 . -1) 1065) nil (25889 28508 479899 758000) 0 nil])
([nil nil ((nil fontified nil 1714 . 1715) (nil fontified nil 1713 . 1714) (nil fontified nil 1712 . 1713) (nil fontified nil 1711 . 1712) (nil fontified nil 1703 . 1711) (nil fontified nil 1702 . 1703) (nil fontified nil 1698 . 1702) (nil fontified nil 1690 . 1698) (nil fontified nil 1689 . 1690) (nil fontified nil 1679 . 1689) (nil fontified nil 1677 . 1679) (nil fontified nil 1669 . 1677) (1669 . 1715)) nil (25889 28508 479894 129000) 0 nil])
([nil nil ((1714 . 1723)) nil (25889 28508 479890 551000) 0 nil])
([nil nil ((1698 . 1706)) nil (25889 28508 479889 128000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1819) (undo-tree-id6169 . -1) (undo-tree-id6170 . -1) (undo-tree-id6171 . -1) (undo-tree-id6172 . -1) (undo-tree-id6173 . -1) (undo-tree-id6174 . -1) (undo-tree-id6175 . -1) (undo-tree-id6176 . -1) (undo-tree-id6177 . -1) (undo-tree-id6178 . -1) (undo-tree-id6179 . -1) (undo-tree-id6180 . -1) (undo-tree-id6181 . -1) (undo-tree-id6182 . -1) (undo-tree-id6183 . -1) (undo-tree-id6184 . -1) (undo-tree-id6185 . -1) (undo-tree-id6186 . -1) (undo-tree-id6187 . -1) (undo-tree-id6188 . -1) (undo-tree-id6189 . -1) (undo-tree-id6190 . -1) (undo-tree-id6191 . -1) (undo-tree-id6192 . -1) (undo-tree-id6193 . -1) (undo-tree-id6194 . -1) (undo-tree-id6195 . -1) (undo-tree-id6196 . -1) (undo-tree-id6197 . -1) (undo-tree-id6198 . -1) (undo-tree-id6199 . -1) (undo-tree-id6200 . -1) (undo-tree-id6201 . -1) (undo-tree-id6202 . -1) (undo-tree-id6203 . -1) (undo-tree-id6204 . -1) (undo-tree-id6205 . -1) (undo-tree-id6206 . -1) (undo-tree-id6207 . -1) (undo-tree-id6208 . -1) (undo-tree-id6209 . -1) (undo-tree-id6210 . -1) (undo-tree-id6211 . -1) (undo-tree-id6212 . -1) (undo-tree-id6213 . -1) (undo-tree-id6214 . -1) (undo-tree-id6215 . -1) (undo-tree-id6216 . -1) (undo-tree-id6217 . -1) (undo-tree-id6218 . -1) (undo-tree-id6219 . -1) (undo-tree-id6220 . -1) (undo-tree-id6221 . -1) (undo-tree-id6222 . -1) (undo-tree-id6223 . -1) (undo-tree-id6224 . -1) (undo-tree-id6225 . -1) (undo-tree-id6226 . -1) (undo-tree-id6227 . -1) (undo-tree-id6228 . -1) (undo-tree-id6229 . -1) (undo-tree-id6230 . -1) (undo-tree-id6231 . -1) (undo-tree-id6232 . -1) (undo-tree-id6233 . -1) (undo-tree-id6234 . -1) (undo-tree-id6235 . -1) (undo-tree-id6236 . -1) (undo-tree-id6237 . -1) (undo-tree-id6238 . -1) (undo-tree-id6239 . -1) (undo-tree-id6240 . -1) (undo-tree-id6241 . -1) (undo-tree-id6242 . -1) (undo-tree-id6243 . -1) (undo-tree-id6244 . -1) (undo-tree-id6245 . -1) (undo-tree-id6246 . -1) (undo-tree-id6247 . -1) (undo-tree-id6248 . -1) (undo-tree-id6249 . -1) (undo-tree-id6250 . -1) (undo-tree-id6251 . -1) (undo-tree-id6252 . -1) (undo-tree-id6253 . -1) (undo-tree-id6254 . -1) (undo-tree-id6255 . -1) (undo-tree-id6256 . -1) (undo-tree-id6257 . -1) (undo-tree-id6258 . -1) (undo-tree-id6259 . -1) (undo-tree-id6260 . -1) (undo-tree-id6261 . -1) (undo-tree-id6262 . -1) (undo-tree-id6263 . -1) (undo-tree-id6264 . -1) (undo-tree-id6265 . -1) (undo-tree-id6266 . -1) (undo-tree-id6267 . -1) (undo-tree-id6268 . -1) (undo-tree-id6269 . -1) (undo-tree-id6270 . -1) (undo-tree-id6271 . -1) (undo-tree-id6272 . -1) (undo-tree-id6273 . -1) (undo-tree-id6274 . -1) (undo-tree-id6275 . -1) (undo-tree-id6276 . -1) (undo-tree-id6277 . -1) (undo-tree-id6278 . -1) (undo-tree-id6279 . -1) (undo-tree-id6280 . -1) (undo-tree-id6281 . -1) (undo-tree-id6282 . -1) (undo-tree-id6283 . -1) (undo-tree-id6284 . -1) (undo-tree-id6285 . -1) (undo-tree-id6286 . -1) (undo-tree-id6287 . -1) (undo-tree-id6288 . -1) (undo-tree-id6289 . -1) (undo-tree-id6290 . -1) (undo-tree-id6291 . -1) (undo-tree-id6292 . -1) (undo-tree-id6293 . -1) (undo-tree-id6294 . -1) (undo-tree-id6295 . -1) (undo-tree-id6296 . -1) (undo-tree-id6297 . -1) (undo-tree-id6298 . -1) (undo-tree-id6299 . -1) (undo-tree-id6300 . -1) (undo-tree-id6301 . -1) (undo-tree-id6302 . -1) (undo-tree-id6303 . -1) (undo-tree-id6304 . -1) (undo-tree-id6305 . -1) (undo-tree-id6306 . -1) (undo-tree-id6307 . -1) (undo-tree-id6308 . -1) (undo-tree-id6309 . -1) (undo-tree-id6310 . -1) (undo-tree-id6311 . -1) (undo-tree-id6312 . -1) (undo-tree-id6313 . -1) (undo-tree-id6314 . -1) (undo-tree-id6315 . -1) (undo-tree-id6316 . -1) (undo-tree-id6317 . -1) (undo-tree-id6318 . -1) (undo-tree-id6319 . -1) (undo-tree-id6320 . -1) (undo-tree-id6321 . -1) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1820) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -1) (undo-tree-id6471 . -1) (undo-tree-id6472 . -1) (undo-tree-id6473 . -1) (undo-tree-id6474 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1821) (undo-tree-id6475 . -1) (undo-tree-id6476 . -1) (undo-tree-id6477 . -1) (undo-tree-id6478 . -1) (undo-tree-id6479 . -1) (undo-tree-id6480 . -1) (undo-tree-id6481 . -1) (undo-tree-id6482 . -1) (undo-tree-id6483 . -1) (undo-tree-id6484 . -1) (undo-tree-id6485 . -1) (undo-tree-id6486 . -1) (undo-tree-id6487 . -1) (undo-tree-id6488 . -1) (undo-tree-id6489 . -1) (undo-tree-id6490 . -1) (undo-tree-id6491 . -1) (undo-tree-id6492 . -1) (undo-tree-id6493 . -1) (undo-tree-id6494 . -1) (undo-tree-id6495 . -1) (undo-tree-id6496 . -1) (undo-tree-id6497 . -1) (undo-tree-id6498 . -1) (undo-tree-id6499 . -1) (undo-tree-id6500 . -1) (undo-tree-id6501 . -1) (undo-tree-id6502 . -1) (undo-tree-id6503 . -1) (undo-tree-id6504 . -1) (undo-tree-id6505 . -1) (undo-tree-id6506 . -1) (undo-tree-id6507 . -1) (undo-tree-id6508 . -1) (undo-tree-id6509 . -1) (undo-tree-id6510 . -1) (undo-tree-id6511 . -1) (undo-tree-id6512 . -1) (undo-tree-id6513 . -1) (undo-tree-id6514 . -1) (undo-tree-id6515 . -1) (undo-tree-id6516 . -1) (undo-tree-id6517 . -1) (undo-tree-id6518 . -1) (undo-tree-id6519 . -1) (undo-tree-id6520 . -1) (undo-tree-id6521 . -1) (undo-tree-id6522 . -1) (undo-tree-id6523 . -1) (undo-tree-id6524 . -1) (undo-tree-id6525 . -1) (undo-tree-id6526 . -1) (undo-tree-id6527 . -1) (undo-tree-id6528 . -1) (undo-tree-id6529 . -1) (undo-tree-id6530 . -1) (undo-tree-id6531 . -1) (undo-tree-id6532 . -1) (undo-tree-id6533 . -1) (undo-tree-id6534 . -1) (undo-tree-id6535 . -1) (undo-tree-id6536 . -1) (undo-tree-id6537 . -1) (undo-tree-id6538 . -1) (undo-tree-id6539 . -1) (undo-tree-id6540 . -1) (undo-tree-id6541 . -1) (undo-tree-id6542 . -1) (undo-tree-id6543 . -1) (undo-tree-id6544 . -1) (undo-tree-id6545 . -1) (undo-tree-id6546 . -1) (undo-tree-id6547 . -1) (undo-tree-id6548 . -1) (undo-tree-id6549 . -1) (undo-tree-id6550 . -1) (undo-tree-id6551 . -1) (undo-tree-id6552 . -1) (undo-tree-id6553 . -1) (undo-tree-id6554 . -1) (undo-tree-id6555 . -1) (undo-tree-id6556 . -1) (undo-tree-id6557 . -1) (undo-tree-id6558 . -1) (undo-tree-id6559 . -1) (undo-tree-id6560 . -1) (undo-tree-id6561 . -1) (undo-tree-id6562 . -1) (undo-tree-id6563 . -1) (undo-tree-id6564 . -1) (undo-tree-id6565 . -1) (undo-tree-id6566 . -1) (undo-tree-id6567 . -1) (undo-tree-id6568 . -1) (undo-tree-id6569 . -1) (undo-tree-id6570 . -1) (undo-tree-id6571 . -1) (undo-tree-id6572 . -1) (undo-tree-id6573 . -1) (undo-tree-id6574 . -1) (undo-tree-id6575 . -1) (undo-tree-id6576 . -1) (undo-tree-id6577 . -1) (undo-tree-id6578 . -1) (undo-tree-id6579 . -1) (undo-tree-id6580 . -1) (undo-tree-id6581 . -1) (undo-tree-id6582 . -1) (undo-tree-id6583 . -1) (undo-tree-id6584 . -1) (undo-tree-id6585 . -1) (undo-tree-id6586 . -1) (undo-tree-id6587 . -1) (undo-tree-id6588 . -1) (undo-tree-id6589 . -1) (undo-tree-id6590 . -1) (undo-tree-id6591 . -1) (#("u" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1822) (undo-tree-id6592 . -1) (undo-tree-id6593 . -1) (undo-tree-id6594 . -1) (undo-tree-id6595 . -1) (undo-tree-id6596 . -1) (undo-tree-id6597 . -1) (undo-tree-id6598 . -1) (undo-tree-id6599 . -1) (undo-tree-id6600 . -1) (undo-tree-id6601 . -1) (undo-tree-id6602 . -1) (undo-tree-id6603 . -1) (undo-tree-id6604 . -1) (undo-tree-id6605 . -1) (undo-tree-id6606 . -1) (undo-tree-id6607 . -1) (undo-tree-id6608 . -1) (undo-tree-id6609 . -1) (undo-tree-id6610 . -1) (undo-tree-id6611 . -1) (undo-tree-id6612 . -1) (undo-tree-id6613 . -1) (undo-tree-id6614 . -1) (undo-tree-id6615 . -1) (undo-tree-id6616 . -1) (undo-tree-id6617 . -1) (undo-tree-id6618 . -1) (undo-tree-id6619 . -1) (undo-tree-id6620 . -1) (undo-tree-id6621 . -1) (undo-tree-id6622 . -1) (undo-tree-id6623 . -1) (undo-tree-id6624 . -1) (undo-tree-id6625 . -1) (undo-tree-id6626 . -1) (undo-tree-id6627 . -1) (undo-tree-id6628 . -1) (undo-tree-id6629 . -1) (undo-tree-id6630 . -1) (undo-tree-id6631 . -1) (undo-tree-id6632 . -1) (undo-tree-id6633 . -1) (undo-tree-id6634 . -1) (undo-tree-id6635 . -1) (undo-tree-id6636 . -1) (undo-tree-id6637 . -1) (undo-tree-id6638 . -1) (undo-tree-id6639 . -1) (undo-tree-id6640 . -1) (undo-tree-id6641 . -1) (undo-tree-id6642 . -1) (undo-tree-id6643 . -1) (undo-tree-id6644 . -1) (undo-tree-id6645 . -1) (undo-tree-id6646 . -1) (undo-tree-id6647 . -1) (undo-tree-id6648 . -1) (undo-tree-id6649 . -1) (undo-tree-id6650 . -1) (undo-tree-id6651 . -1) (undo-tree-id6652 . -1) (undo-tree-id6653 . -1) (undo-tree-id6654 . -1) (undo-tree-id6655 . -1) (undo-tree-id6656 . -1) (undo-tree-id6657 . -1) (undo-tree-id6658 . -1) (undo-tree-id6659 . -1) (undo-tree-id6660 . -1) (undo-tree-id6661 . -1) (undo-tree-id6662 . -1) (undo-tree-id6663 . -1) (undo-tree-id6664 . -1) (undo-tree-id6665 . -1) (undo-tree-id6666 . -1) (undo-tree-id6667 . -1) (undo-tree-id6668 . -1) (undo-tree-id6669 . -1) (undo-tree-id6670 . -1) (undo-tree-id6671 . -1) (undo-tree-id6672 . -1) (undo-tree-id6673 . -1) (undo-tree-id6674 . -1) (undo-tree-id6675 . -1) (undo-tree-id6676 . -1) (undo-tree-id6677 . -1) (undo-tree-id6678 . -1) (undo-tree-id6679 . -1) (undo-tree-id6680 . -1) (undo-tree-id6681 . -1) (undo-tree-id6682 . -1) (undo-tree-id6683 . -1) (undo-tree-id6684 . -1) (undo-tree-id6685 . -1) (undo-tree-id6686 . -1) (undo-tree-id6687 . -1) (undo-tree-id6688 . -1) (undo-tree-id6689 . -1) (undo-tree-id6690 . -1) (undo-tree-id6691 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1823) (undo-tree-id6692 . -1) (undo-tree-id6693 . -1) (undo-tree-id6694 . -1) (undo-tree-id6695 . -1) (undo-tree-id6696 . -1) (undo-tree-id6697 . -1) (undo-tree-id6698 . -1) (undo-tree-id6699 . -1) (undo-tree-id6700 . -1) (undo-tree-id6701 . -1) (undo-tree-id6702 . -1) (undo-tree-id6703 . -1) (undo-tree-id6704 . -1) (undo-tree-id6705 . -1) (undo-tree-id6706 . -1) (undo-tree-id6707 . -1) (undo-tree-id6708 . -1) (undo-tree-id6709 . -1) (undo-tree-id6710 . -1) (undo-tree-id6711 . -1) (undo-tree-id6712 . -1) (undo-tree-id6713 . -1) (undo-tree-id6714 . -1) (undo-tree-id6715 . -1) (undo-tree-id6716 . -1) (undo-tree-id6717 . -1) (undo-tree-id6718 . -1) (undo-tree-id6719 . -1) (undo-tree-id6720 . -1) (undo-tree-id6721 . -1) (undo-tree-id6722 . -1) (undo-tree-id6723 . -1) (undo-tree-id6724 . -1) (undo-tree-id6725 . -1) (undo-tree-id6726 . -1) (undo-tree-id6727 . -1) (undo-tree-id6728 . -1) (undo-tree-id6729 . -1) (undo-tree-id6730 . -1) (undo-tree-id6731 . -1) (undo-tree-id6732 . -1) (undo-tree-id6733 . -1) (undo-tree-id6734 . -1) (undo-tree-id6735 . -1) (undo-tree-id6736 . -1) (undo-tree-id6737 . -1) (undo-tree-id6738 . -1) (undo-tree-id6739 . -1) (undo-tree-id6740 . -1) (undo-tree-id6741 . -1) (undo-tree-id6742 . -1) (undo-tree-id6743 . -1) (undo-tree-id6744 . -1) (undo-tree-id6745 . -1) (undo-tree-id6746 . -1) (undo-tree-id6747 . -1) (undo-tree-id6748 . -1) (undo-tree-id6749 . -1) (undo-tree-id6750 . -1) (undo-tree-id6751 . -1) (undo-tree-id6752 . -1) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -1) (undo-tree-id6774 . -1) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1824) (undo-tree-id6775 . -1) (undo-tree-id6776 . -1) (undo-tree-id6777 . -1) (undo-tree-id6778 . -1) (undo-tree-id6779 . -1) (undo-tree-id6780 . -1) (undo-tree-id6781 . -1) (undo-tree-id6782 . -1) (undo-tree-id6783 . -1) (undo-tree-id6784 . -1) (undo-tree-id6785 . -1) (undo-tree-id6786 . -1) (undo-tree-id6787 . -1) (undo-tree-id6788 . -1) (undo-tree-id6789 . -1) (undo-tree-id6790 . -1) (undo-tree-id6791 . -1) (undo-tree-id6792 . -1) (undo-tree-id6793 . -1) (undo-tree-id6794 . -1) (undo-tree-id6795 . -1) (undo-tree-id6796 . -1) (undo-tree-id6797 . -1) (undo-tree-id6798 . -1) (undo-tree-id6799 . -1) (undo-tree-id6800 . -1) (undo-tree-id6801 . -1) (undo-tree-id6802 . -1) (undo-tree-id6803 . -1) (undo-tree-id6804 . -1) (undo-tree-id6805 . -1) (undo-tree-id6806 . -1) (undo-tree-id6807 . -1) (undo-tree-id6808 . -1) (undo-tree-id6809 . -1) (undo-tree-id6810 . -1) (undo-tree-id6811 . -1) (undo-tree-id6812 . -1) (undo-tree-id6813 . -1) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -1) (undo-tree-id6835 . -1) (undo-tree-id6836 . -1) (undo-tree-id6837 . -1) (undo-tree-id6838 . -1) (undo-tree-id6839 . -1) (undo-tree-id6840 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1825) (undo-tree-id6841 . -1) (undo-tree-id6842 . -1) (undo-tree-id6843 . -1) (undo-tree-id6844 . -1) (undo-tree-id6845 . -1) (undo-tree-id6846 . -1) (undo-tree-id6847 . -1) (undo-tree-id6848 . -1) (undo-tree-id6849 . -1) (undo-tree-id6850 . -1) (undo-tree-id6851 . -1) (undo-tree-id6852 . -1) (undo-tree-id6853 . -1) (undo-tree-id6854 . -1) (undo-tree-id6855 . -1) (undo-tree-id6856 . -1) (undo-tree-id6857 . -1) (undo-tree-id6858 . -1) (undo-tree-id6859 . -1) (undo-tree-id6860 . -1) (undo-tree-id6861 . -1) (undo-tree-id6862 . -1) (undo-tree-id6863 . -1) (undo-tree-id6864 . -1) (undo-tree-id6865 . -1) (undo-tree-id6866 . -1) (undo-tree-id6867 . -1) (undo-tree-id6868 . -1) (undo-tree-id6869 . -1) (undo-tree-id6870 . -1) (undo-tree-id6871 . -1) (undo-tree-id6872 . -1) (undo-tree-id6873 . -1) (undo-tree-id6874 . -1) (undo-tree-id6875 . -1) (undo-tree-id6876 . -1) (undo-tree-id6877 . -1) (undo-tree-id6878 . -1) (undo-tree-id6879 . -1) (undo-tree-id6880 . -1) (undo-tree-id6881 . -1) (undo-tree-id6882 . -1) (undo-tree-id6883 . -1) (undo-tree-id6884 . -1) (undo-tree-id6885 . -1) (undo-tree-id6886 . -1) (undo-tree-id6887 . -1) (undo-tree-id6888 . -1) (undo-tree-id6889 . -1) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1826) (undo-tree-id6890 . -1) (undo-tree-id6891 . -1) (undo-tree-id6892 . -1) (undo-tree-id6893 . -1) (undo-tree-id6894 . -1) (undo-tree-id6895 . -1) (undo-tree-id6896 . -1) (undo-tree-id6897 . -1) (undo-tree-id6898 . -1) (undo-tree-id6899 . -1) (undo-tree-id6900 . -1) (undo-tree-id6901 . -1) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (#("n" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1827) (undo-tree-id6922 . -1) (undo-tree-id6923 . -1) (undo-tree-id6924 . -1) (undo-tree-id6925 . -1) (undo-tree-id6926 . -1) (undo-tree-id6927 . -1) (undo-tree-id6928 . -1) (undo-tree-id6929 . -1) (undo-tree-id6930 . -1) (undo-tree-id6931 . -1) (undo-tree-id6932 . -1) (undo-tree-id6933 . -1) (undo-tree-id6934 . -1) (undo-tree-id6935 . -1) (undo-tree-id6936 . -1) (undo-tree-id6937 . -1) (undo-tree-id6938 . -1) (undo-tree-id6939 . -1) (undo-tree-id6940 . -1) (undo-tree-id6941 . -1) (undo-tree-id6942 . -1) (undo-tree-id6943 . -1) (undo-tree-id6944 . -1) (undo-tree-id6945 . -1) (undo-tree-id6946 . -1) (undo-tree-id6947 . -1) (undo-tree-id6948 . -1) (undo-tree-id6949 . -1) (undo-tree-id6950 . -1) (undo-tree-id6951 . -1) (#("s" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1828) (undo-tree-id6952 . -1) (undo-tree-id6953 . -1) (undo-tree-id6954 . -1) (undo-tree-id6955 . -1) (undo-tree-id6956 . -1) (undo-tree-id6957 . -1) (undo-tree-id6958 . -1) (undo-tree-id6959 . -1) (undo-tree-id6960 . -1) (undo-tree-id6961 . -1) (undo-tree-id6962 . -1) (undo-tree-id6963 . -1) (undo-tree-id6964 . -1) (undo-tree-id6965 . -1) (undo-tree-id6966 . -1) (undo-tree-id6967 . -1) (undo-tree-id6968 . -1) (undo-tree-id6969 . -1) (undo-tree-id6970 . -1) (undo-tree-id6971 . -1) (undo-tree-id6972 . -1) (undo-tree-id6973 . -1) (undo-tree-id6974 . -1) (undo-tree-id6975 . -1) (undo-tree-id6976 . -1) (undo-tree-id6977 . -1) (undo-tree-id6978 . -1) (undo-tree-id6979 . -1) (#("o" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1829) (undo-tree-id6980 . -1) (undo-tree-id6981 . -1) (undo-tree-id6982 . -1) (undo-tree-id6983 . -1) (undo-tree-id6984 . -1) (undo-tree-id6985 . -1) (undo-tree-id6986 . -1) (undo-tree-id6987 . -1) (undo-tree-id6988 . -1) (undo-tree-id6989 . -1) (undo-tree-id6990 . -1) (undo-tree-id6991 . -1) (undo-tree-id6992 . -1) (undo-tree-id6993 . -1) (undo-tree-id6994 . -1) (undo-tree-id6995 . -1) (undo-tree-id6996 . -1) (undo-tree-id6997 . -1) (undo-tree-id6998 . -1) (undo-tree-id6999 . -1) (undo-tree-id7000 . -1) (undo-tree-id7001 . -1) (undo-tree-id7002 . -1) (undo-tree-id7003 . -1) (undo-tree-id7004 . -1) (undo-tree-id7005 . -1) (#("r" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1830) (undo-tree-id7006 . -1) (undo-tree-id7007 . -1) (undo-tree-id7008 . -1) (undo-tree-id7009 . -1) (undo-tree-id7010 . -1) (undo-tree-id7011 . -1) (undo-tree-id7012 . -1) (undo-tree-id7013 . -1) (undo-tree-id7014 . -1) (undo-tree-id7015 . -1) (undo-tree-id7016 . -1) (undo-tree-id7017 . -1) (undo-tree-id7018 . -1) (undo-tree-id7019 . -1) (undo-tree-id7020 . -1) (undo-tree-id7021 . -1) (undo-tree-id7022 . -1) (undo-tree-id7023 . -1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1) (undo-tree-id7026 . -1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1) (undo-tree-id7029 . -1) (#("," 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1831) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1832) (undo-tree-id7052 . -1) (undo-tree-id7053 . -1) (undo-tree-id7054 . -1) (undo-tree-id7055 . -1) (undo-tree-id7056 . -1) (undo-tree-id7057 . -1) (undo-tree-id7058 . -1) (undo-tree-id7059 . -1) (undo-tree-id7060 . -1) (undo-tree-id7061 . -1) (undo-tree-id7062 . -1) (undo-tree-id7063 . -1) (undo-tree-id7064 . -1) (undo-tree-id7065 . -1) (undo-tree-id7066 . -1) (undo-tree-id7067 . -1) (undo-tree-id7068 . -1) (undo-tree-id7069 . -1) (undo-tree-id7070 . -1) (undo-tree-id7071 . -1) (#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1833) (undo-tree-id7072 . -1) (undo-tree-id7073 . -1) (undo-tree-id7074 . -1) (undo-tree-id7075 . -1) (undo-tree-id7076 . -1) (undo-tree-id7077 . -1) (undo-tree-id7078 . -1) (undo-tree-id7079 . -1) (undo-tree-id7080 . -1) (undo-tree-id7081 . -1) (undo-tree-id7082 . -1) (undo-tree-id7083 . -1) (undo-tree-id7084 . -1) (undo-tree-id7085 . -1) (undo-tree-id7086 . -1) (undo-tree-id7087 . -1) (undo-tree-id7088 . -1) (undo-tree-id7089 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1834) (undo-tree-id7090 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1835) (undo-tree-id7091 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1836) (undo-tree-id7092 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1837) (undo-tree-id7093 . -1) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1838) (undo-tree-id7094 . -1) 1839) nil (25889 28508 479819 345000) 0 nil])
([nil nil ((1819 . 1824)) nil (25889 28508 477484 356000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1878) (undo-tree-id7127 . -1) 1879 (t 25889 28508 534437 950000)) nil (25889 28514 480019 612000) 0 nil])
([nil nil ((1879 . 1891) (#("      " 0 6 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1879) (undo-tree-id7126 . -6) (1878 . 1879)) nil (25889 28514 480012 644000) 0 nil])
([nil nil ((1924 . 1932) (t 25889 28514 514496 57000)) nil (25889 28516 370818 342000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1782 . 1783) (nil fontified nil 1782 . 1783) (nil fontified nil 1781 . 1782) (nil fontified nil 1778 . 1781) (nil fontified nil 1774 . 1778) (nil fontified nil 1773 . 1774) (nil fontified nil 1772 . 1773) (nil fontified nil 1762 . 1772) (nil fontified nil 1758 . 1762) (nil fontified nil 1757 . 1758) (nil fontified nil 1754 . 1757) (nil fontified nil 1753 . 1754) (nil fontified nil 1752 . 1753) (nil fontified nil 1751 . 1752) (nil fontified nil 1744 . 1751) (nil fontified nil 1743 . 1744) (nil fontified nil 1739 . 1743) (nil fontified nil 1731 . 1739) (1731 . 1783) (t 25889 28516 402514 397000)) nil (25889 28567 567970 352000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -1731) 1723) nil (25889 28567 567964 707000) 0 nil])
([nil nil ((1724 . 1732) (#("        " 0 8 (fontified nil)) . 1723) (undo-tree-id8067 . -8) (undo-tree-id8068 . -8) (undo-tree-id8069 . -8) (1731 . 1732)) nil (25889 28567 567961 985000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1805) (undo-tree-id7128 . -1) (undo-tree-id7129 . -1) (undo-tree-id7130 . -1) (undo-tree-id7131 . -1) (undo-tree-id7132 . -1) (undo-tree-id7133 . -1) (undo-tree-id7134 . -1) (undo-tree-id7135 . -1) (undo-tree-id7136 . -1) (undo-tree-id7137 . -1) (undo-tree-id7138 . -1) (undo-tree-id7139 . -1) (undo-tree-id7140 . -1) (undo-tree-id7141 . -1) (undo-tree-id7142 . -1) (undo-tree-id7143 . -1) (undo-tree-id7144 . -1) (undo-tree-id7145 . -1) (undo-tree-id7146 . -1) (undo-tree-id7147 . -1) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) (undo-tree-id7166 . -1) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -1) (undo-tree-id7188 . -1) (undo-tree-id7189 . -1) (undo-tree-id7190 . -1) (undo-tree-id7191 . -1) (undo-tree-id7192 . -1) (undo-tree-id7193 . -1) (undo-tree-id7194 . -1) (undo-tree-id7195 . -1) (undo-tree-id7196 . -1) (undo-tree-id7197 . -1) (undo-tree-id7198 . -1) (undo-tree-id7199 . -1) (undo-tree-id7200 . -1) (undo-tree-id7201 . -1) (undo-tree-id7202 . -1) (undo-tree-id7203 . -1) (undo-tree-id7204 . -1) (undo-tree-id7205 . -1) (undo-tree-id7206 . -1) (undo-tree-id7207 . -1) (undo-tree-id7208 . -1) (undo-tree-id7209 . -1) (undo-tree-id7210 . -1) (undo-tree-id7211 . -1) (undo-tree-id7212 . -1) (undo-tree-id7213 . -1) (undo-tree-id7214 . -1) (undo-tree-id7215 . -1) (undo-tree-id7216 . -1) (undo-tree-id7217 . -1) (undo-tree-id7218 . -1) (undo-tree-id7219 . -1) (undo-tree-id7220 . -1) (undo-tree-id7221 . -1) (undo-tree-id7222 . -1) (undo-tree-id7223 . -1) (undo-tree-id7224 . -1) (undo-tree-id7225 . -1) (undo-tree-id7226 . -1) (undo-tree-id7227 . -1) (undo-tree-id7228 . -1) (undo-tree-id7229 . -1) (undo-tree-id7230 . -1) (undo-tree-id7231 . -1) (undo-tree-id7232 . -1) (undo-tree-id7233 . -1) (undo-tree-id7234 . -1) (undo-tree-id7235 . -1) (undo-tree-id7236 . -1) (undo-tree-id7237 . -1) (undo-tree-id7238 . -1) (undo-tree-id7239 . -1) (undo-tree-id7240 . -1) (undo-tree-id7241 . -1) (undo-tree-id7242 . -1) (undo-tree-id7243 . -1) (undo-tree-id7244 . -1) (undo-tree-id7245 . -1) (undo-tree-id7246 . -1) (undo-tree-id7247 . -1) (undo-tree-id7248 . -1) (undo-tree-id7249 . -1) (undo-tree-id7250 . -1) (undo-tree-id7251 . -1) (undo-tree-id7252 . -1) (undo-tree-id7253 . -1) (undo-tree-id7254 . -1) (undo-tree-id7255 . -1) (undo-tree-id7256 . -1) (undo-tree-id7257 . -1) (undo-tree-id7258 . -1) (undo-tree-id7259 . -1) (undo-tree-id7260 . -1) (undo-tree-id7261 . -1) (undo-tree-id7262 . -1) (undo-tree-id7263 . -1) (undo-tree-id7264 . -1) (undo-tree-id7265 . -1) (undo-tree-id7266 . -1) (undo-tree-id7267 . -1) (undo-tree-id7268 . -1) (undo-tree-id7269 . -1) (undo-tree-id7270 . -1) (undo-tree-id7271 . -1) (undo-tree-id7272 . -1) (undo-tree-id7273 . -1) (undo-tree-id7274 . -1) (undo-tree-id7275 . -1) (undo-tree-id7276 . -1) (undo-tree-id7277 . -1) (undo-tree-id7278 . -1) (undo-tree-id7279 . -1) (undo-tree-id7280 . -1) (undo-tree-id7281 . -1) (undo-tree-id7282 . -1) (undo-tree-id7283 . -1) (undo-tree-id7284 . -1) (undo-tree-id7285 . -1) (undo-tree-id7286 . -1) (#("U" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1806) (undo-tree-id7287 . -1) (undo-tree-id7288 . -1) (undo-tree-id7289 . -1) (undo-tree-id7290 . -1) (undo-tree-id7291 . -1) (undo-tree-id7292 . -1) (undo-tree-id7293 . -1) (undo-tree-id7294 . -1) (undo-tree-id7295 . -1) (undo-tree-id7296 . -1) (undo-tree-id7297 . -1) (undo-tree-id7298 . -1) (undo-tree-id7299 . -1) (undo-tree-id7300 . -1) (undo-tree-id7301 . -1) (undo-tree-id7302 . -1) (undo-tree-id7303 . -1) (undo-tree-id7304 . -1) (undo-tree-id7305 . -1) (undo-tree-id7306 . -1) (undo-tree-id7307 . -1) (undo-tree-id7308 . -1) (undo-tree-id7309 . -1) (undo-tree-id7310 . -1) (undo-tree-id7311 . -1) (undo-tree-id7312 . -1) (undo-tree-id7313 . -1) (undo-tree-id7314 . -1) (undo-tree-id7315 . -1) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (#("R" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1807) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (undo-tree-id7540 . -1) (#("A" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1808) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (#("T" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1809) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) (undo-tree-id7686 . -1) (undo-tree-id7687 . -1) (undo-tree-id7688 . -1) (undo-tree-id7689 . -1) (undo-tree-id7690 . -1) (undo-tree-id7691 . -1) (undo-tree-id7692 . -1) (undo-tree-id7693 . -1) (undo-tree-id7694 . -1) (undo-tree-id7695 . -1) (undo-tree-id7696 . -1) (undo-tree-id7697 . -1) (undo-tree-id7698 . -1) (undo-tree-id7699 . -1) (undo-tree-id7700 . -1) (undo-tree-id7701 . -1) (undo-tree-id7702 . -1) (undo-tree-id7703 . -1) (undo-tree-id7704 . -1) (undo-tree-id7705 . -1) (undo-tree-id7706 . -1) (undo-tree-id7707 . -1) (undo-tree-id7708 . -1) (undo-tree-id7709 . -1) (undo-tree-id7710 . -1) (undo-tree-id7711 . -1) (undo-tree-id7712 . -1) (undo-tree-id7713 . -1) (undo-tree-id7714 . -1) (undo-tree-id7715 . -1) (undo-tree-id7716 . -1) (undo-tree-id7717 . -1) (undo-tree-id7718 . -1) (undo-tree-id7719 . -1) (undo-tree-id7720 . -1) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (#("I" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1810) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (undo-tree-id7885 . -1) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) (undo-tree-id7894 . -1) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) (undo-tree-id7900 . -1) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (#("O" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1811) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) (undo-tree-id7935 . -1) (undo-tree-id7936 . -1) (undo-tree-id7937 . -1) (undo-tree-id7938 . -1) (undo-tree-id7939 . -1) (undo-tree-id7940 . -1) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (undo-tree-id7949 . -1) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (undo-tree-id8010 . -1) (undo-tree-id8011 . -1) (undo-tree-id8012 . -1) (undo-tree-id8013 . -1) (undo-tree-id8014 . -1) (undo-tree-id8015 . -1) (undo-tree-id8016 . -1) (undo-tree-id8017 . -1) (undo-tree-id8018 . -1) (undo-tree-id8019 . -1) (undo-tree-id8020 . -1) (undo-tree-id8021 . -1) (undo-tree-id8022 . -1) (undo-tree-id8023 . -1) (undo-tree-id8024 . -1) (#("N" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1812) (undo-tree-id8025 . -1) (undo-tree-id8026 . -1) (undo-tree-id8027 . -1) (undo-tree-id8028 . -1) (undo-tree-id8029 . -1) (undo-tree-id8030 . -1) (undo-tree-id8031 . -1) (undo-tree-id8032 . -1) (undo-tree-id8033 . -1) (undo-tree-id8034 . -1) (undo-tree-id8035 . -1) (undo-tree-id8036 . -1) (undo-tree-id8037 . -1) (undo-tree-id8038 . -1) (undo-tree-id8039 . -1) (undo-tree-id8040 . -1) (undo-tree-id8041 . -1) (undo-tree-id8042 . -1) (undo-tree-id8043 . -1) (undo-tree-id8044 . -1) (undo-tree-id8045 . -1) (undo-tree-id8046 . -1) (undo-tree-id8047 . -1) (undo-tree-id8048 . -1) (undo-tree-id8049 . -1) (undo-tree-id8050 . -1) (undo-tree-id8051 . -1) (undo-tree-id8052 . -1) (undo-tree-id8053 . -1) (undo-tree-id8054 . -1) (undo-tree-id8055 . -1) (undo-tree-id8056 . -1) (undo-tree-id8057 . -1) (undo-tree-id8058 . -1) (undo-tree-id8059 . -1) (undo-tree-id8060 . -1) (undo-tree-id8061 . -1) (undo-tree-id8062 . -1) (undo-tree-id8063 . -1) (undo-tree-id8064 . -1) (undo-tree-id8065 . -1) (undo-tree-id8066 . -1) 1813) nil (25889 28567 567901 626000) 0 nil])
([nil nil ((1805 . 1812)) nil (25889 28567 565949 296000) 0 nil])
([nil nil ((1856 . 1857) (t 25889 28567 623010 876000)) nil (25889 28665 337910 75000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1856) (undo-tree-id8070 . -1) 1857) nil (25889 28665 337908 538000) 0 nil])
([nil nil ((1857 . 1869)) nil (25889 28665 337900 42000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1869) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1869) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1869) (#("o" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1869) (#("m" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1869)) nil (25889 28665 337893 589000) 0 nil])
([nil nil ((1095 . 1103) (t 25889 28665 375953 187000)) nil (25889 28760 375623 831000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1100) (undo-tree-id8071 . -1) (undo-tree-id8072 . -1) (undo-tree-id8073 . -1) (undo-tree-id8074 . -1) (undo-tree-id8075 . -1) (undo-tree-id8076 . -1) (undo-tree-id8077 . -1) (undo-tree-id8078 . -1) (undo-tree-id8079 . -1) (undo-tree-id8080 . -1) (undo-tree-id8081 . -1) (undo-tree-id8082 . -1) (undo-tree-id8083 . -1) (undo-tree-id8084 . -1) (undo-tree-id8085 . -1) (undo-tree-id8086 . -1) (undo-tree-id8087 . -1) (undo-tree-id8088 . -1) (undo-tree-id8089 . -1) (undo-tree-id8090 . -1) (undo-tree-id8091 . -1) (undo-tree-id8092 . -1) (undo-tree-id8093 . -1) (undo-tree-id8094 . -1) (undo-tree-id8095 . -1) (undo-tree-id8096 . -1) (undo-tree-id8097 . -1) (undo-tree-id8098 . -1) (undo-tree-id8099 . -1) (undo-tree-id8100 . -1) (undo-tree-id8101 . -1) (undo-tree-id8102 . -1) (undo-tree-id8103 . -1) (undo-tree-id8104 . -1) (undo-tree-id8105 . -1) (undo-tree-id8106 . -1) (undo-tree-id8107 . -1) (undo-tree-id8108 . -1) (undo-tree-id8109 . -1) (undo-tree-id8110 . -1) (undo-tree-id8111 . -1) (undo-tree-id8112 . -1) (undo-tree-id8113 . -1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) 1101) nil (25889 28760 375618 409000) 0 nil])
([nil nil ((1877 . 1883) (t 25889 28760 408863 751000)) nil (25889 28766 470765 66000) 0 nil])
([nil nil ((#("hidden" 0 6 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1855) (t 25889 28766 520922 150000)) nil (25889 28819 856377 354000) 0 nil])
([nil nil ((1855 . 1859)) nil (25889 28819 856376 456000) 0 nil])
([nil nil ((1859 . 1860)) nil (25889 28819 856375 675000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . -1705) (undo-tree-id8228 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -1706) (undo-tree-id8229 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -1707) (undo-tree-id8230 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -1708) (undo-tree-id8231 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -1709) (undo-tree-id8232 . -1) 1710) nil (25889 28819 856373 576000) 0 nil])
([nil nil ((1705 . 1711)) nil (25889 28819 856365 755000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1883) (undo-tree-id8223 . -1) (#("a" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1884) (undo-tree-id8224 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1885) (undo-tree-id8225 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1886) (undo-tree-id8226 . -1) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1887) (undo-tree-id8227 . -1) 1888) nil (25889 28819 856363 891000) 0 nil])
([nil nil ((1883 . 1889)) nil (25889 28819 856349 74000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1857) (#("t" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1857) (#("a" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1857)) nil (25889 28819 856347 934000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1856) (undo-tree-id8222 . -1) 1857) nil (25889 28819 856346 658000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1856)) nil (25889 28819 856344 354000) 0 nil])
([nil nil ((1856 . 1859)) nil (25889 28819 856343 619000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1858) (undo-tree-id8221 . -1) 1859) nil (25889 28819 856342 788000) 0 nil])
([nil nil ((1858 . 1862)) nil (25889 28819 856340 336000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1859) (undo-tree-id8218 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1860) (undo-tree-id8219 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1861) (undo-tree-id8220 . -1) 1862) nil (25889 28819 856338 382000) 0 nil])
([nil nil ((1859 . 1862)) nil (25889 28819 856333 395000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1860) (undo-tree-id8216 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1861) (undo-tree-id8217 . -1) 1862) nil (25889 28819 856332 147000) 0 nil])
([nil nil ((1860 . 1862)) nil (25889 28819 856328 762000) 0 nil])
([nil nil ((1675 . 1684)) nil (25889 28819 856328 188000) 0 nil])
([nil nil ((1684 . 1687)) nil (25889 28819 856327 528000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1684) (undo-tree-id8213 . -1) (#("t" 0 1 (fontified t)) . -1685) (undo-tree-id8214 . -1) (#("u" 0 1 (fontified t)) . -1686) (undo-tree-id8215 . -1) 1687) nil (25889 28819 856326 142000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1695) (1694 . 1695) (1693 . 1695) (#("[" 0 1 (fontified nil)) . -1693) (1684 . 1694)) nil (25889 28819 856320 665000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1924) (undo-tree-id8208 . -1) (#("a" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1925) (undo-tree-id8209 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1926) (undo-tree-id8210 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1927) (undo-tree-id8211 . -1) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1928) (undo-tree-id8212 . -1) 1929) nil (25889 28819 856318 234000) 0 nil])
([nil nil ((1924 . 1930)) nil (25889 28819 856310 221000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1988) (undo-tree-id8204 . -1) (#("t" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1989) (undo-tree-id8205 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1990) (undo-tree-id8206 . -1) (#("s" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1991) (undo-tree-id8207 . -1) 1992) nil (25889 28819 856308 360000) 0 nil])
([nil nil ((1988 . 1993)) nil (25889 28819 856276 364000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2006) (undo-tree-id8201 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2007) (undo-tree-id8202 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2008) (undo-tree-id8203 . -1) 2009) nil (25889 28819 856273 201000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 2006)) nil (25889 28819 856262 379000) 0 nil])
([nil nil ((2006 . 2009)) nil (25889 28819 856261 629000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2007) (undo-tree-id8199 . -1) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2008) (undo-tree-id8200 . -1) 2009) nil (25889 28819 856260 307000) 0 nil])
([nil nil ((2007 . 2011)) nil (25889 28819 856257 991000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -2038) (undo-tree-id8195 . -1) (#("t" 0 1 (fontified t)) . -2039) (undo-tree-id8196 . -1) (#("e" 0 1 (fontified t)) . -2040) (undo-tree-id8197 . -1) (#("s" 0 1 (fontified t)) . -2041) (undo-tree-id8198 . -1) 2042) nil (25889 28819 856256 707000) 0 nil])
([nil nil ((2038 . 2044)) nil (25889 28819 856252 671000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -2042) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (undo-tree-id8128 . -1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (undo-tree-id8143 . -1) (undo-tree-id8144 . -1) (undo-tree-id8145 . -1) (undo-tree-id8146 . -1) (undo-tree-id8147 . -1) (undo-tree-id8148 . -1) (undo-tree-id8149 . -1) (undo-tree-id8150 . -1) (undo-tree-id8151 . -1) (undo-tree-id8152 . -1) (undo-tree-id8153 . -1) (undo-tree-id8154 . -1) (undo-tree-id8155 . -1) (undo-tree-id8156 . -1) (undo-tree-id8157 . -1) (undo-tree-id8158 . -1) (undo-tree-id8159 . -1) (undo-tree-id8160 . -1) (undo-tree-id8161 . -1) (undo-tree-id8162 . -1) (undo-tree-id8163 . -1) (undo-tree-id8164 . -1) (undo-tree-id8165 . -1) (undo-tree-id8166 . -1) (undo-tree-id8167 . -1) (undo-tree-id8168 . -1) (undo-tree-id8169 . -1) (#("t" 0 1 (fontified t)) . -2043) (undo-tree-id8170 . -1) (undo-tree-id8171 . -1) (undo-tree-id8172 . -1) (undo-tree-id8173 . -1) (undo-tree-id8174 . -1) (undo-tree-id8175 . -1) (undo-tree-id8176 . -1) (undo-tree-id8177 . -1) (undo-tree-id8178 . -1) (undo-tree-id8179 . -1) (undo-tree-id8180 . -1) (undo-tree-id8181 . -1) (undo-tree-id8182 . -1) (undo-tree-id8183 . -1) (undo-tree-id8184 . -1) (undo-tree-id8185 . -1) (undo-tree-id8186 . -1) (undo-tree-id8187 . -1) (undo-tree-id8188 . -1) (undo-tree-id8189 . -1) (undo-tree-id8190 . -1) (undo-tree-id8191 . -1) (undo-tree-id8192 . -1) (undo-tree-id8193 . -1) (undo-tree-id8194 . -1) 2044) nil (25889 28819 856248 945000) 0 nil])
([nil nil ((2042 . 2043)) nil (25889 28819 856131 748000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1360) (undo-tree-id8233 . -1) (#("j" 0 1 (fontified t)) . -1361) (undo-tree-id8234 . -1) (#("_" 0 1 (fontified t)) . -1362) (undo-tree-id8235 . -1) (#("p" 0 1 (fontified nil)) . -1363) (undo-tree-id8236 . -1) (#("o" 0 1 (fontified nil)) . -1364) (undo-tree-id8237 . -1) (#("p" 0 1 (fontified nil)) . -1365) (undo-tree-id8238 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1366) (undo-tree-id8239 . -1) 1367 (t 25889 28819 893431 347000)) nil (25889 28933 594036 315000) 0 nil])
([nil nil ((nil fontified nil 1404 . 1405) (nil fontified nil 1403 . 1404) (nil fontified nil 1401 . 1403) (nil fontified nil 1400 . 1401) (nil fontified nil 1394 . 1400) (nil fontified nil 1393 . 1394) (nil fontified nil 1386 . 1393) (nil fontified nil 1382 . 1386) (nil fontified nil 1381 . 1382) (nil fontified nil 1379 . 1381) (nil fontified nil 1378 . 1379) (nil fontified nil 1373 . 1378) (nil fontified nil 1372 . 1373) (nil fontified nil 1366 . 1372) (nil fontified nil 1365 . 1366) (nil fontified nil 1361 . 1365) (nil fontified nil 1360 . 1361) (1360 . 1405)) nil (25889 28933 593993 327000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1394) (undo-tree-id8241 . -1) 1395 (t 25889 28933 654512 568000)) nil (25889 28941 504725 615000) 0 nil])
([nil nil ((1394 . 1395)) nil (25889 28941 504721 991000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1373) (undo-tree-id8240 . -1) 1374) nil (25889 28941 504719 35000) 0 nil])
([nil nil ((1373 . 1374)) nil (25889 28972 608567 844000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2094 . 2095) (nil fontified nil 2094 . 2095) (nil fontified nil 2093 . 2094) (nil fontified nil 2092 . 2093) (nil fontified nil 2085 . 2092) (nil fontified nil 2084 . 2085) (nil fontified nil 2083 . 2084) (nil fontified nil 2082 . 2083) (nil fontified nil 2069 . 2082) (nil fontified nil 2068 . 2069) (nil fontified nil 2067 . 2068) (nil fontified nil 2066 . 2067) (nil fontified nil 2061 . 2066) (nil fontified nil 2059 . 2061) (2059 . 2095) (t 25889 28941 554587 470000)) nil (25889 29119 49250 578000) 0 nil] [nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1372) (undo-tree-id8242 . -1) (undo-tree-id8243 . -1) (undo-tree-id8244 . -1) (undo-tree-id8245 . -1) (undo-tree-id8246 . -1) (undo-tree-id8247 . -1) (undo-tree-id8248 . -1) (undo-tree-id8249 . -1) (undo-tree-id8250 . -1) (undo-tree-id8251 . -1) (undo-tree-id8252 . -1) (undo-tree-id8253 . -1) (undo-tree-id8254 . -1) (undo-tree-id8255 . -1) (undo-tree-id8256 . -1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (undo-tree-id8262 . -1) (undo-tree-id8263 . -1) (undo-tree-id8264 . -1) 1373 (t 25889 28941 554587 470000)) ((1372 . 1373)) (25889 28972 607875 15000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t src-block t font-lock-fontified t)) . -2059) 2051) nil (25889 29119 49247 996000) 0 nil])
nil
([nil nil ((#("e" 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("p" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("a" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("h" 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("s" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("r" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("." 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("s" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("t" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("a" 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("r" 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t)) . 2059) (#("=" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t)) . 2059) (#(" " 0 1 (fontified t src-block t font-lock-fontified t)) . 2059) (#("s" 0 1 (face font-lock-variable-name-face fontified nil src-block t font-lock-fontified t)) . 2059) (#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t)) . 2059) (#("t" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t)) . 2059) (#("a" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t)) . 2059) (#("r" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t)) . 2059)) nil (25889 29119 49243 835000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2055) (undo-tree-id8320 . -4) (undo-tree-id8321 . -4) (undo-tree-id8322 . -4) (undo-tree-id8323 . -4) (undo-tree-id8324 . -4) (undo-tree-id8325 . -4) (undo-tree-id8326 . -4) (undo-tree-id8327 . -4) 2059) nil (25889 29119 49240 691000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2051) (undo-tree-id8312 . -4) (undo-tree-id8313 . -4) (undo-tree-id8314 . -4) (undo-tree-id8315 . -4) (undo-tree-id8316 . -4) (undo-tree-id8317 . -4) (undo-tree-id8318 . -4) (undo-tree-id8319 . -4) 2055) nil (25889 29119 49231 588000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2050) (undo-tree-id8304 . -1) (undo-tree-id8305 . -1) (undo-tree-id8306 . -1) (undo-tree-id8307 . -1) (undo-tree-id8308 . -1) (undo-tree-id8309 . -1) (undo-tree-id8310 . -1) (undo-tree-id8311 . -1) 2051) nil (25889 29119 49224 271000) 0 nil])
([nil nil ((2050 . 2054)) nil (25889 29119 49216 490000) 0 nil])
([nil nil ((2054 . 2055)) nil (25889 29119 49215 979000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -2054) (undo-tree-id8303 . -1) 2055) nil (25889 29119 49215 358000) 0 nil])
([nil nil ((2054 . 2058)) nil (25889 29119 49213 593000) 0 nil])
([nil nil ((#("1" 0 1 (fontified nil src-block t font-lock-fontified t)) . -2064) (undo-tree-id8299 . -1) (#("0" 0 1 (fontified nil src-block t font-lock-fontified t)) . -2065) (undo-tree-id8300 . -1) (#("0" 0 1 (fontified nil src-block t font-lock-fontified t)) . -2066) (undo-tree-id8301 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t)) . -2067) (undo-tree-id8302 . -1) 2068) nil (25889 29119 49212 335000) 0 nil])
([nil nil ((2064 . 2078)) nil (25889 29119 49207 230000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t src-block t font-lock-fontified t)) . -2077) (undo-tree-id8265 . -1) (undo-tree-id8266 . -1) (undo-tree-id8267 . -1) (undo-tree-id8268 . -1) (undo-tree-id8269 . -1) (undo-tree-id8270 . -1) (undo-tree-id8271 . -1) (undo-tree-id8272 . -1) (undo-tree-id8273 . -1) (undo-tree-id8274 . -1) (undo-tree-id8275 . -1) (undo-tree-id8276 . -1) (undo-tree-id8277 . -1) (undo-tree-id8278 . -1) (undo-tree-id8279 . -1) (undo-tree-id8280 . -1) (undo-tree-id8281 . -1) (undo-tree-id8282 . -1) (undo-tree-id8283 . -1) (undo-tree-id8284 . -1) (undo-tree-id8285 . -1) (undo-tree-id8286 . -1) (undo-tree-id8287 . -1) (undo-tree-id8288 . -1) (undo-tree-id8289 . -1) (undo-tree-id8290 . -1) (undo-tree-id8291 . -1) (undo-tree-id8292 . -1) (undo-tree-id8293 . -1) (undo-tree-id8294 . -1) (undo-tree-id8295 . -1) (undo-tree-id8296 . -1) (undo-tree-id8297 . -1) (undo-tree-id8298 . -1) 2078) nil (25889 29119 49202 311000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1881) (undo-tree-id9006 . -1) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1882) (undo-tree-id9007 . -1) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1883) (undo-tree-id9008 . -1) (#("R" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1884) (undo-tree-id9009 . -1) (#("u" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1885) (undo-tree-id9010 . -1) (#("n" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1886) (undo-tree-id9011 . -1) (#(" " 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1887) (undo-tree-id9012 . -1) (#("f" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1888) (undo-tree-id9013 . -1) (#("o" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1889) (undo-tree-id9014 . -1) (#("r" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1890) (undo-tree-id9015 . -1) (#(" " 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1891) (undo-tree-id9016 . -1) (#("1" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1892) (undo-tree-id9017 . -1) (#("0" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1893) (undo-tree-id9018 . -1) (#("0" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1894) (undo-tree-id9019 . -1) (#(" " 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1895) (undo-tree-id9020 . -1) (#("s" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1896) (undo-tree-id9021 . -1) (#("t" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1897) (undo-tree-id9022 . -1) (#("e" 0 1 (face font-lock-comment-face fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1898) (undo-tree-id9023 . -1) (#("p" 0 1 (face font-lock-comment-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1899) (undo-tree-id9024 . -1) (#("s" 0 1 (face font-lock-comment-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1900) (undo-tree-id9025 . -1) 1901 (t 25889 29119 88297 748000)) nil (25889 29137 314666 125000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1916) (undo-tree-id9000 . -1) (#("o" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1917) (undo-tree-id9001 . -1) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1918) (undo-tree-id9002 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1919) (undo-tree-id9003 . -1) (#("," 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1920) (undo-tree-id9004 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1921) (undo-tree-id9005 . -1) 1922) nil (25889 29137 314643 298000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1095) (undo-tree-id8328 . -1) (undo-tree-id8329 . -1) (undo-tree-id8330 . -1) (undo-tree-id8331 . -1) (undo-tree-id8332 . -1) (undo-tree-id8333 . -1) (undo-tree-id8334 . -1) (undo-tree-id8335 . -1) (undo-tree-id8336 . -1) (undo-tree-id8337 . -1) (undo-tree-id8338 . -1) (undo-tree-id8339 . -1) (undo-tree-id8340 . -1) (undo-tree-id8341 . -1) (undo-tree-id8342 . -1) (undo-tree-id8343 . -1) (undo-tree-id8344 . -1) (undo-tree-id8345 . -1) (undo-tree-id8346 . -1) (undo-tree-id8347 . -1) (undo-tree-id8348 . -1) (undo-tree-id8349 . -1) (undo-tree-id8350 . -1) (undo-tree-id8351 . -1) (undo-tree-id8352 . -1) (undo-tree-id8353 . -1) (undo-tree-id8354 . -1) (undo-tree-id8355 . -1) (undo-tree-id8356 . -1) (undo-tree-id8357 . -1) (undo-tree-id8358 . -1) (undo-tree-id8359 . -1) (undo-tree-id8360 . -1) (undo-tree-id8361 . -1) (undo-tree-id8362 . -1) (undo-tree-id8363 . -1) (undo-tree-id8364 . -1) (undo-tree-id8365 . -1) (undo-tree-id8366 . -1) (undo-tree-id8367 . -1) (undo-tree-id8368 . -1) (undo-tree-id8369 . -1) (undo-tree-id8370 . -1) (undo-tree-id8371 . -1) (undo-tree-id8372 . -1) (undo-tree-id8373 . -1) (undo-tree-id8374 . -1) (undo-tree-id8375 . -1) (undo-tree-id8376 . -1) (undo-tree-id8377 . -1) (undo-tree-id8378 . -1) (undo-tree-id8379 . -1) (undo-tree-id8380 . -1) (undo-tree-id8381 . -1) (undo-tree-id8382 . -1) (undo-tree-id8383 . -1) (undo-tree-id8384 . -1) (undo-tree-id8385 . -1) (undo-tree-id8386 . -1) (undo-tree-id8387 . -1) (undo-tree-id8388 . -1) (undo-tree-id8389 . -1) (undo-tree-id8390 . -1) (undo-tree-id8391 . -1) (undo-tree-id8392 . -1) (undo-tree-id8393 . -1) (undo-tree-id8394 . -1) (undo-tree-id8395 . -1) (undo-tree-id8396 . -1) (undo-tree-id8397 . -1) (undo-tree-id8398 . -1) (undo-tree-id8399 . -1) (undo-tree-id8400 . -1) (undo-tree-id8401 . -1) (undo-tree-id8402 . -1) (undo-tree-id8403 . -1) (undo-tree-id8404 . -1) (undo-tree-id8405 . -1) (undo-tree-id8406 . -1) (undo-tree-id8407 . -1) (undo-tree-id8408 . -1) (undo-tree-id8409 . -1) (undo-tree-id8410 . -1) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (undo-tree-id8413 . -1) (undo-tree-id8414 . -1) (undo-tree-id8415 . -1) (undo-tree-id8416 . -1) (undo-tree-id8417 . -1) (undo-tree-id8418 . -1) (undo-tree-id8419 . -1) (undo-tree-id8420 . -1) (undo-tree-id8421 . -1) (undo-tree-id8422 . -1) (undo-tree-id8423 . -1) (undo-tree-id8424 . -1) (undo-tree-id8425 . -1) (undo-tree-id8426 . -1) (undo-tree-id8427 . -1) (undo-tree-id8428 . -1) (undo-tree-id8429 . -1) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -1) (undo-tree-id8449 . -1) (undo-tree-id8450 . -1) (undo-tree-id8451 . -1) (undo-tree-id8452 . -1) (undo-tree-id8453 . -1) (undo-tree-id8454 . -1) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -1) (undo-tree-id8461 . -1) (undo-tree-id8462 . -1) (undo-tree-id8463 . -1) (undo-tree-id8464 . -1) (undo-tree-id8465 . -1) (undo-tree-id8466 . -1) (undo-tree-id8467 . -1) (undo-tree-id8468 . -1) (undo-tree-id8469 . -1) (undo-tree-id8470 . -1) (undo-tree-id8471 . -1) (undo-tree-id8472 . -1) (undo-tree-id8473 . -1) (undo-tree-id8474 . -1) (undo-tree-id8475 . -1) (undo-tree-id8476 . -1) (undo-tree-id8477 . -1) (#("n" 0 1 (fontified t)) . -1096) (undo-tree-id8478 . -1) (undo-tree-id8479 . -1) (undo-tree-id8480 . -1) (undo-tree-id8481 . -1) (undo-tree-id8482 . -1) (undo-tree-id8483 . -1) (undo-tree-id8484 . -1) (undo-tree-id8485 . -1) (undo-tree-id8486 . -1) (undo-tree-id8487 . -1) (undo-tree-id8488 . -1) (undo-tree-id8489 . -1) (undo-tree-id8490 . -1) (undo-tree-id8491 . -1) (undo-tree-id8492 . -1) (undo-tree-id8493 . -1) (undo-tree-id8494 . -1) (undo-tree-id8495 . -1) (undo-tree-id8496 . -1) (undo-tree-id8497 . -1) (undo-tree-id8498 . -1) (undo-tree-id8499 . -1) (undo-tree-id8500 . -1) (undo-tree-id8501 . -1) (undo-tree-id8502 . -1) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -1) (undo-tree-id8516 . -1) (undo-tree-id8517 . -1) (undo-tree-id8518 . -1) (undo-tree-id8519 . -1) (undo-tree-id8520 . -1) (undo-tree-id8521 . -1) (undo-tree-id8522 . -1) (undo-tree-id8523 . -1) (undo-tree-id8524 . -1) (undo-tree-id8525 . -1) (undo-tree-id8526 . -1) (undo-tree-id8527 . -1) (undo-tree-id8528 . -1) (undo-tree-id8529 . -1) (undo-tree-id8530 . -1) (undo-tree-id8531 . -1) (undo-tree-id8532 . -1) (undo-tree-id8533 . -1) (undo-tree-id8534 . -1) (undo-tree-id8535 . -1) (undo-tree-id8536 . -1) (undo-tree-id8537 . -1) (undo-tree-id8538 . -1) (undo-tree-id8539 . -1) (undo-tree-id8540 . -1) (undo-tree-id8541 . -1) (undo-tree-id8542 . -1) (undo-tree-id8543 . -1) (undo-tree-id8544 . -1) (undo-tree-id8545 . -1) (undo-tree-id8546 . -1) (undo-tree-id8547 . -1) (undo-tree-id8548 . -1) (undo-tree-id8549 . -1) (undo-tree-id8550 . -1) (undo-tree-id8551 . -1) (undo-tree-id8552 . -1) (undo-tree-id8553 . -1) (undo-tree-id8554 . -1) (undo-tree-id8555 . -1) (undo-tree-id8556 . -1) (undo-tree-id8557 . -1) (undo-tree-id8558 . -1) (undo-tree-id8559 . -1) (undo-tree-id8560 . -1) (undo-tree-id8561 . -1) (undo-tree-id8562 . -1) (undo-tree-id8563 . -1) (undo-tree-id8564 . -1) (undo-tree-id8565 . -1) (undo-tree-id8566 . -1) (undo-tree-id8567 . -1) (undo-tree-id8568 . -1) (undo-tree-id8569 . -1) (undo-tree-id8570 . -1) (undo-tree-id8571 . -1) (undo-tree-id8572 . -1) (undo-tree-id8573 . -1) (undo-tree-id8574 . -1) (undo-tree-id8575 . -1) (undo-tree-id8576 . -1) (undo-tree-id8577 . -1) (undo-tree-id8578 . -1) (undo-tree-id8579 . -1) (undo-tree-id8580 . -1) (undo-tree-id8581 . -1) (undo-tree-id8582 . -1) (undo-tree-id8583 . -1) (undo-tree-id8584 . -1) (undo-tree-id8585 . -1) (undo-tree-id8586 . -1) (undo-tree-id8587 . -1) (undo-tree-id8588 . -1) (undo-tree-id8589 . -1) (undo-tree-id8590 . -1) (undo-tree-id8591 . -1) (undo-tree-id8592 . -1) (undo-tree-id8593 . -1) (undo-tree-id8594 . -1) (undo-tree-id8595 . -1) (undo-tree-id8596 . -1) (undo-tree-id8597 . -1) (undo-tree-id8598 . -1) (undo-tree-id8599 . -1) (undo-tree-id8600 . -1) (undo-tree-id8601 . -1) (undo-tree-id8602 . -1) (undo-tree-id8603 . -1) (undo-tree-id8604 . -1) (undo-tree-id8605 . -1) (undo-tree-id8606 . -1) (undo-tree-id8607 . -1) (undo-tree-id8608 . -1) (undo-tree-id8609 . -1) (undo-tree-id8610 . -1) (#("p" 0 1 (fontified t)) . -1097) (undo-tree-id8611 . -1) (undo-tree-id8612 . -1) (undo-tree-id8613 . -1) (undo-tree-id8614 . -1) (undo-tree-id8615 . -1) (undo-tree-id8616 . -1) (undo-tree-id8617 . -1) (undo-tree-id8618 . -1) (undo-tree-id8619 . -1) (undo-tree-id8620 . -1) (undo-tree-id8621 . -1) (undo-tree-id8622 . -1) (undo-tree-id8623 . -1) (undo-tree-id8624 . -1) (undo-tree-id8625 . -1) (undo-tree-id8626 . -1) (undo-tree-id8627 . -1) (undo-tree-id8628 . -1) (undo-tree-id8629 . -1) (undo-tree-id8630 . -1) (undo-tree-id8631 . -1) (undo-tree-id8632 . -1) (undo-tree-id8633 . -1) (undo-tree-id8634 . -1) (undo-tree-id8635 . -1) (undo-tree-id8636 . -1) (undo-tree-id8637 . -1) (undo-tree-id8638 . -1) (undo-tree-id8639 . -1) (undo-tree-id8640 . -1) (undo-tree-id8641 . -1) (undo-tree-id8642 . -1) (undo-tree-id8643 . -1) (undo-tree-id8644 . -1) (undo-tree-id8645 . -1) (undo-tree-id8646 . -1) (undo-tree-id8647 . -1) (undo-tree-id8648 . -1) (undo-tree-id8649 . -1) (undo-tree-id8650 . -1) (undo-tree-id8651 . -1) (undo-tree-id8652 . -1) (undo-tree-id8653 . -1) (undo-tree-id8654 . -1) (undo-tree-id8655 . -1) (undo-tree-id8656 . -1) (undo-tree-id8657 . -1) (undo-tree-id8658 . -1) (undo-tree-id8659 . -1) (undo-tree-id8660 . -1) (undo-tree-id8661 . -1) (undo-tree-id8662 . -1) (undo-tree-id8663 . -1) (undo-tree-id8664 . -1) (undo-tree-id8665 . -1) (undo-tree-id8666 . -1) (undo-tree-id8667 . -1) (undo-tree-id8668 . -1) (undo-tree-id8669 . -1) (undo-tree-id8670 . -1) (undo-tree-id8671 . -1) (undo-tree-id8672 . -1) (undo-tree-id8673 . -1) (undo-tree-id8674 . -1) (undo-tree-id8675 . -1) (undo-tree-id8676 . -1) (undo-tree-id8677 . -1) (undo-tree-id8678 . -1) (undo-tree-id8679 . -1) (undo-tree-id8680 . -1) (undo-tree-id8681 . -1) (undo-tree-id8682 . -1) (undo-tree-id8683 . -1) (undo-tree-id8684 . -1) (undo-tree-id8685 . -1) (undo-tree-id8686 . -1) (undo-tree-id8687 . -1) (undo-tree-id8688 . -1) (undo-tree-id8689 . -1) (undo-tree-id8690 . -1) (undo-tree-id8691 . -1) (undo-tree-id8692 . -1) (undo-tree-id8693 . -1) (undo-tree-id8694 . -1) (undo-tree-id8695 . -1) (undo-tree-id8696 . -1) (undo-tree-id8697 . -1) (undo-tree-id8698 . -1) (undo-tree-id8699 . -1) (undo-tree-id8700 . -1) (undo-tree-id8701 . -1) (undo-tree-id8702 . -1) (undo-tree-id8703 . -1) (undo-tree-id8704 . -1) (undo-tree-id8705 . -1) (undo-tree-id8706 . -1) (undo-tree-id8707 . -1) (undo-tree-id8708 . -1) (undo-tree-id8709 . -1) (undo-tree-id8710 . -1) (undo-tree-id8711 . -1) (undo-tree-id8712 . -1) (undo-tree-id8713 . -1) (undo-tree-id8714 . -1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (#("u" 0 1 (fontified t)) . -1098) (undo-tree-id8726 . -1) (undo-tree-id8727 . -1) (undo-tree-id8728 . -1) (undo-tree-id8729 . -1) (undo-tree-id8730 . -1) (undo-tree-id8731 . -1) (undo-tree-id8732 . -1) (undo-tree-id8733 . -1) (undo-tree-id8734 . -1) (undo-tree-id8735 . -1) (undo-tree-id8736 . -1) (undo-tree-id8737 . -1) (undo-tree-id8738 . -1) (undo-tree-id8739 . -1) (undo-tree-id8740 . -1) (undo-tree-id8741 . -1) (undo-tree-id8742 . -1) (undo-tree-id8743 . -1) (undo-tree-id8744 . -1) (undo-tree-id8745 . -1) (undo-tree-id8746 . -1) (undo-tree-id8747 . -1) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (undo-tree-id8759 . -1) (undo-tree-id8760 . -1) (undo-tree-id8761 . -1) (undo-tree-id8762 . -1) (undo-tree-id8763 . -1) (undo-tree-id8764 . -1) (undo-tree-id8765 . -1) (undo-tree-id8766 . -1) (undo-tree-id8767 . -1) (undo-tree-id8768 . -1) (undo-tree-id8769 . -1) (undo-tree-id8770 . -1) (undo-tree-id8771 . -1) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (undo-tree-id8783 . -1) (undo-tree-id8784 . -1) (undo-tree-id8785 . -1) (undo-tree-id8786 . -1) (undo-tree-id8787 . -1) (undo-tree-id8788 . -1) (undo-tree-id8789 . -1) (undo-tree-id8790 . -1) (undo-tree-id8791 . -1) (undo-tree-id8792 . -1) (undo-tree-id8793 . -1) (undo-tree-id8794 . -1) (undo-tree-id8795 . -1) (undo-tree-id8796 . -1) (undo-tree-id8797 . -1) (undo-tree-id8798 . -1) (undo-tree-id8799 . -1) (undo-tree-id8800 . -1) (undo-tree-id8801 . -1) (undo-tree-id8802 . -1) (undo-tree-id8803 . -1) (undo-tree-id8804 . -1) (undo-tree-id8805 . -1) (undo-tree-id8806 . -1) (undo-tree-id8807 . -1) (undo-tree-id8808 . -1) (undo-tree-id8809 . -1) (undo-tree-id8810 . -1) (undo-tree-id8811 . -1) (undo-tree-id8812 . -1) (undo-tree-id8813 . -1) (undo-tree-id8814 . -1) (undo-tree-id8815 . -1) (undo-tree-id8816 . -1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (#("t" 0 1 (fontified t)) . -1099) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (undo-tree-id8872 . -1) (undo-tree-id8873 . -1) (undo-tree-id8874 . -1) (undo-tree-id8875 . -1) (undo-tree-id8876 . -1) (undo-tree-id8877 . -1) (undo-tree-id8878 . -1) (undo-tree-id8879 . -1) (undo-tree-id8880 . -1) (undo-tree-id8881 . -1) (undo-tree-id8882 . -1) (undo-tree-id8883 . -1) (undo-tree-id8884 . -1) (undo-tree-id8885 . -1) (undo-tree-id8886 . -1) (undo-tree-id8887 . -1) (undo-tree-id8888 . -1) (undo-tree-id8889 . -1) (undo-tree-id8890 . -1) (undo-tree-id8891 . -1) (undo-tree-id8892 . -1) (undo-tree-id8893 . -1) (undo-tree-id8894 . -1) (undo-tree-id8895 . -1) (undo-tree-id8896 . -1) (undo-tree-id8897 . -1) (undo-tree-id8898 . -1) (undo-tree-id8899 . -1) (undo-tree-id8900 . -1) (undo-tree-id8901 . -1) (undo-tree-id8902 . -1) (undo-tree-id8903 . -1) (undo-tree-id8904 . -1) (#("," 0 1 (fontified t)) . -1100) (undo-tree-id8905 . -1) (undo-tree-id8906 . -1) (undo-tree-id8907 . -1) (undo-tree-id8908 . -1) (undo-tree-id8909 . -1) (undo-tree-id8910 . -1) (undo-tree-id8911 . -1) (undo-tree-id8912 . -1) (undo-tree-id8913 . -1) (undo-tree-id8914 . -1) (undo-tree-id8915 . -1) (undo-tree-id8916 . -1) (undo-tree-id8917 . -1) (undo-tree-id8918 . -1) (undo-tree-id8919 . -1) (undo-tree-id8920 . -1) (undo-tree-id8921 . -1) (undo-tree-id8922 . -1) (undo-tree-id8923 . -1) (undo-tree-id8924 . -1) (undo-tree-id8925 . -1) (undo-tree-id8926 . -1) (undo-tree-id8927 . -1) (undo-tree-id8928 . -1) (undo-tree-id8929 . -1) (undo-tree-id8930 . -1) (undo-tree-id8931 . -1) (undo-tree-id8932 . -1) (undo-tree-id8933 . -1) (undo-tree-id8934 . -1) (undo-tree-id8935 . -1) (undo-tree-id8936 . -1) (undo-tree-id8937 . -1) (undo-tree-id8938 . -1) (undo-tree-id8939 . -1) (undo-tree-id8940 . -1) (undo-tree-id8941 . -1) (undo-tree-id8942 . -1) (undo-tree-id8943 . -1) (undo-tree-id8944 . -1) (undo-tree-id8945 . -1) (undo-tree-id8946 . -1) (undo-tree-id8947 . -1) (undo-tree-id8948 . -1) (undo-tree-id8949 . -1) (undo-tree-id8950 . -1) (undo-tree-id8951 . -1) (undo-tree-id8952 . -1) (undo-tree-id8953 . -1) (undo-tree-id8954 . -1) (undo-tree-id8955 . -1) (undo-tree-id8956 . -1) (undo-tree-id8957 . -1) (undo-tree-id8958 . -1) (undo-tree-id8959 . -1) (undo-tree-id8960 . -1) (undo-tree-id8961 . -1) (undo-tree-id8962 . -1) (undo-tree-id8963 . -1) (undo-tree-id8964 . -1) (undo-tree-id8965 . -1) (undo-tree-id8966 . -1) (undo-tree-id8967 . -1) (#(" " 0 1 (fontified t)) . -1101) (undo-tree-id8968 . -1) (undo-tree-id8969 . -1) (undo-tree-id8970 . -1) (undo-tree-id8971 . -1) (undo-tree-id8972 . -1) (undo-tree-id8973 . -1) (undo-tree-id8974 . -1) (undo-tree-id8975 . -1) (undo-tree-id8976 . -1) (undo-tree-id8977 . -1) (undo-tree-id8978 . -1) (undo-tree-id8979 . -1) (undo-tree-id8980 . -1) (undo-tree-id8981 . -1) (undo-tree-id8982 . -1) (undo-tree-id8983 . -1) (undo-tree-id8984 . -1) (undo-tree-id8985 . -1) (undo-tree-id8986 . -1) (undo-tree-id8987 . -1) (undo-tree-id8988 . -1) (undo-tree-id8989 . -1) (undo-tree-id8990 . -1) (undo-tree-id8991 . -1) (undo-tree-id8992 . -1) (undo-tree-id8993 . -1) (undo-tree-id8994 . -1) (undo-tree-id8995 . -1) (undo-tree-id8996 . -1) (undo-tree-id8997 . -1) (undo-tree-id8998 . -1) (undo-tree-id8999 . -1) 1102) nil (25889 29137 314611 260000) 0 nil])
([nil nil ((1782 . 1790) (t 25889 29137 356608 665000)) nil (25889 29141 706407 501000) 0 nil])
([nil nil ((168 . 175) (t 25889 29141 760682 959000)) nil (25889 29151 189475 145000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1274 . 1275) (nil fontified nil 1274 . 1275) (nil fontified nil 1273 . 1274) (nil fontified nil 1272 . 1273) (nil fontified nil 1260 . 1272) (nil fontified nil 1256 . 1260) (nil fontified nil 1254 . 1256) (nil fontified nil 1253 . 1254) (nil fontified nil 1252 . 1253) (nil fontified nil 1248 . 1252) (nil fontified nil 1247 . 1248) (nil fontified nil 1235 . 1247) (nil fontified nil 1234 . 1235) (nil fontified nil 1233 . 1234) (nil fontified nil 1228 . 1233) (nil fontified nil 1218 . 1228) (1218 . 1275) (t 25889 29151 252842 229000)) nil (25889 29222 713146 310000) 0 nil])
([nil nil ((#("      " 0 6 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1222) 1210) nil (25889 29222 713141 638000) 0 nil])
([nil nil ((apply -2 1210 1272 undo--wrap-and-run-primitive-undo 1210 1272 ((1222 . 1224) 1269))) nil (25889 29222 713139 558000) 0 nil])
([nil nil ((1271 . 1283)) nil (25889 29222 713133 921000) 0 nil])
([nil nil ((#("        for i_pop in range(self.N_POP):
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 18 (fontified t) 18 20 (face font-lock-keyword-face fontified t) 20 21 (fontified t) 21 26 (face font-lock-builtin-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 31 (face font-lock-keyword-face fontified t) 31 37 (fontified t) 37 38 (face (rainbow-delimiters-depth-1-face) fontified t) 38 40 (fontified t)) . -1119) (undo-tree-id9048 . -40) 1159 (t 25889 29222 758006 428000)) nil (25889 29299 840918 926000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1127) 1119) nil (25889 29299 840916 362000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1174) (undo-tree-id9042 . -4) (undo-tree-id9043 . -4) (undo-tree-id9044 . -4) (undo-tree-id9045 . -4) (undo-tree-id9046 . -4) (undo-tree-id9047 . -4)) nil (25889 29299 840915 99000) 0 nil])
([nil nil ((apply 2 1166 1221 undo--wrap-and-run-primitive-undo 1166 1221 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1174) 1223))) nil (25889 29299 840908 596000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1174) (#("s" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1174) (#("i" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1174) (#("o" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1174) (#("n" 0 1 (face font-lock-variable-name-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1174)) nil (25889 29299 840906 792000) 0 nil])
([nil nil ((1174 . 1183)) nil (25889 29299 840905 426000) 0 nil])
([nil nil ((apply -2 1119 1227 undo--wrap-and-run-primitive-undo 1119 1227 ((1127 . 1129) 1119))) nil (25889 29299 840904 6000) 0 nil])
([nil nil ((1208 . 1209)) nil (25889 29299 840903 250000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1206) (undo-tree-id9040 . -1) (#("," 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1207) (undo-tree-id9041 . -1) 1208) nil (25889 29299 840902 256000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1206) (undo-tree-id9039 . -1) 1207) nil (25889 29299 840899 304000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1211) (undo-tree-id9028 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1212) (undo-tree-id9029 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1213) (undo-tree-id9030 . -1) (#("d" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1214) (undo-tree-id9031 . -1) (#("e" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1215) (undo-tree-id9032 . -1) (#("n" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1216) (undo-tree-id9033 . -1) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1217) (undo-tree-id9034 . -1) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1218) (undo-tree-id9035 . -1) (#("i" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1219) (undo-tree-id9036 . -1) (#("z" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1220) (undo-tree-id9037 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1221) (undo-tree-id9038 . -1) 1222) nil (25889 29299 840895 333000) 0 nil])
([nil nil ((1211 . 1214)) nil (25889 29299 840882 227000) 0 nil])
([nil nil ((#("ç" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1212) (undo-tree-id9026 . -1) (#("_" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1213) (undo-tree-id9027 . -1) 1214) nil (25889 29299 840880 81000) 0 nil])
([nil nil ((1212 . 1217)) nil (25889 29299 840868 694000) 0 nil])
([nil nil ((1217 . 1219)) nil (25889 29299 840862 587000) 0 nil])
([nil nil ((1219 . 1221) (t 25889 29299 883198 526000)) nil (25889 29316 161018 8000) 0 nil])
([nil nil ((1223 . 1228) (t 25889 29316 203443 184000)) nil (25889 29334 631646 446000) 0 nil])
([nil nil ((1228 . 1230)) nil (25889 29334 631639 604000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1239) (undo-tree-id9049 . -4) 1243 (t 25889 29334 679717 196000)) nil (25889 29440 612681 105000) 0 nil])
([nil nil ((nil fontified nil 1727 . 1728) (nil fontified nil 1726 . 1727) (nil fontified nil 1724 . 1726) (nil fontified nil 1723 . 1724) (nil fontified nil 1717 . 1723) (nil fontified nil 1716 . 1717) (nil fontified nil 1709 . 1716) (nil fontified nil 1705 . 1709) (nil fontified nil 1704 . 1705) (nil fontified nil 1702 . 1704) (nil fontified nil 1701 . 1702) (nil fontified nil 1696 . 1701) (nil fontified nil 1695 . 1696) (nil fontified nil 1689 . 1695) (nil fontified nil 1688 . 1689) (nil fontified nil 1684 . 1688) (nil fontified nil 1683 . 1684) (1683 . 1728)) nil (25889 29440 612664 410000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-comment-face fontified t)) . -1166) (undo-tree-id9635 . -1) (undo-tree-id9636 . -1) (undo-tree-id9637 . -1) (undo-tree-id9638 . -1) (undo-tree-id9639 . -1) 1167 (t 25889 29440 665233 265000)) nil (25889 29541 128751 964000) 0 nil])
([nil nil ((1166 . 1168)) nil (25889 29541 128743 193000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-comment-face fontified t)) . -1166) (undo-tree-id9594 . -1) (undo-tree-id9595 . -1) (undo-tree-id9596 . -1) (undo-tree-id9597 . -1) (undo-tree-id9598 . -1) (undo-tree-id9599 . -1) (undo-tree-id9600 . -1) (undo-tree-id9601 . -1) (undo-tree-id9602 . -1) (undo-tree-id9603 . -1) (undo-tree-id9604 . -1) (undo-tree-id9605 . -1) (undo-tree-id9606 . -1) (undo-tree-id9607 . -1) (undo-tree-id9608 . -1) (undo-tree-id9609 . -1) (undo-tree-id9610 . -1) (undo-tree-id9611 . -1) (undo-tree-id9612 . -1) (undo-tree-id9613 . -1) (undo-tree-id9614 . -1) (undo-tree-id9615 . -1) (undo-tree-id9616 . -1) (undo-tree-id9617 . -1) (undo-tree-id9618 . -1) (undo-tree-id9619 . -1) (undo-tree-id9620 . -1) (undo-tree-id9621 . -1) (undo-tree-id9622 . -1) (undo-tree-id9623 . -1) (undo-tree-id9624 . -1) (undo-tree-id9625 . -1) (undo-tree-id9626 . -1) (undo-tree-id9627 . -1) (undo-tree-id9628 . -1) (undo-tree-id9629 . -1) (undo-tree-id9630 . -1) (undo-tree-id9631 . -1) (undo-tree-id9632 . -1) (undo-tree-id9633 . -1) (undo-tree-id9634 . -1) 1167) nil (25889 29541 128739 409000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1224) (undo-tree-id9050 . -1) (undo-tree-id9051 . -1) (undo-tree-id9052 . -1) (undo-tree-id9053 . -1) (undo-tree-id9054 . -1) (undo-tree-id9055 . -1) (undo-tree-id9056 . -1) (undo-tree-id9057 . -1) (undo-tree-id9058 . -1) (undo-tree-id9059 . -1) (undo-tree-id9060 . -1) (undo-tree-id9061 . -1) (undo-tree-id9062 . -1) (undo-tree-id9063 . -1) (undo-tree-id9064 . -1) (undo-tree-id9065 . -1) (undo-tree-id9066 . -1) (undo-tree-id9067 . -1) (undo-tree-id9068 . -1) (undo-tree-id9069 . -1) (undo-tree-id9070 . -1) (undo-tree-id9071 . -1) (undo-tree-id9072 . -1) (undo-tree-id9073 . -1) (undo-tree-id9074 . -1) (undo-tree-id9075 . -1) (undo-tree-id9076 . -1) (undo-tree-id9077 . -1) (undo-tree-id9078 . -1) (undo-tree-id9079 . -1) (undo-tree-id9080 . -1) (undo-tree-id9081 . -1) (undo-tree-id9082 . -1) (undo-tree-id9083 . -1) (undo-tree-id9084 . -1) (undo-tree-id9085 . -1) (undo-tree-id9086 . -1) (undo-tree-id9087 . -1) (undo-tree-id9088 . -1) (undo-tree-id9089 . -1) (undo-tree-id9090 . -1) (undo-tree-id9091 . -1) (undo-tree-id9092 . -1) (undo-tree-id9093 . -1) (undo-tree-id9094 . -1) (undo-tree-id9095 . -1) (undo-tree-id9096 . -1) (undo-tree-id9097 . -1) (undo-tree-id9098 . -1) (undo-tree-id9099 . -1) (undo-tree-id9100 . -1) (undo-tree-id9101 . -1) (undo-tree-id9102 . -1) (undo-tree-id9103 . -1) (undo-tree-id9104 . -1) (undo-tree-id9105 . -1) (undo-tree-id9106 . -1) (undo-tree-id9107 . -1) (undo-tree-id9108 . -1) (undo-tree-id9109 . -1) (undo-tree-id9110 . -1) (undo-tree-id9111 . -1) (undo-tree-id9112 . -1) (undo-tree-id9113 . -1) (undo-tree-id9114 . -1) (undo-tree-id9115 . -1) (undo-tree-id9116 . -1) (undo-tree-id9117 . -1) (undo-tree-id9118 . -1) (undo-tree-id9119 . -1) (undo-tree-id9120 . -1) (undo-tree-id9121 . -1) (undo-tree-id9122 . -1) (undo-tree-id9123 . -1) (undo-tree-id9124 . -1) (undo-tree-id9125 . -1) (undo-tree-id9126 . -1) (undo-tree-id9127 . -1) (undo-tree-id9128 . -1) (undo-tree-id9129 . -1) (undo-tree-id9130 . -1) (undo-tree-id9131 . -1) (undo-tree-id9132 . -1) (undo-tree-id9133 . -1) (undo-tree-id9134 . -1) (undo-tree-id9135 . -1) (undo-tree-id9136 . -1) (undo-tree-id9137 . -1) (undo-tree-id9138 . -1) (undo-tree-id9139 . -1) (undo-tree-id9140 . -1) (undo-tree-id9141 . -1) (undo-tree-id9142 . -1) (undo-tree-id9143 . -1) (undo-tree-id9144 . -1) (undo-tree-id9145 . -1) (undo-tree-id9146 . -1) (undo-tree-id9147 . -1) (undo-tree-id9148 . -1) (undo-tree-id9149 . -1) (undo-tree-id9150 . -1) (undo-tree-id9151 . -1) (undo-tree-id9152 . -1) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1) (undo-tree-id9162 . -1) (undo-tree-id9163 . -1) (undo-tree-id9164 . -1) (undo-tree-id9165 . -1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1225) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . -1) (undo-tree-id9192 . -1) (undo-tree-id9193 . -1) (undo-tree-id9194 . -1) (undo-tree-id9195 . -1) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) (undo-tree-id9199 . -1) (undo-tree-id9200 . -1) (undo-tree-id9201 . -1) (undo-tree-id9202 . -1) (undo-tree-id9203 . -1) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -1) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -1) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . -1) (undo-tree-id9228 . -1) (undo-tree-id9229 . -1) (undo-tree-id9230 . -1) (undo-tree-id9231 . -1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (undo-tree-id9235 . -1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . -1) (undo-tree-id9239 . -1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (undo-tree-id9246 . -1) (undo-tree-id9247 . -1) (undo-tree-id9248 . -1) (undo-tree-id9249 . -1) (undo-tree-id9250 . -1) (undo-tree-id9251 . -1) (undo-tree-id9252 . -1) (undo-tree-id9253 . -1) (undo-tree-id9254 . -1) (undo-tree-id9255 . -1) (undo-tree-id9256 . -1) (undo-tree-id9257 . -1) (undo-tree-id9258 . -1) (undo-tree-id9259 . -1) (undo-tree-id9260 . -1) (undo-tree-id9261 . -1) (undo-tree-id9262 . -1) (undo-tree-id9263 . -1) (undo-tree-id9264 . -1) (undo-tree-id9265 . -1) (undo-tree-id9266 . -1) (undo-tree-id9267 . -1) (undo-tree-id9268 . -1) (undo-tree-id9269 . -1) (undo-tree-id9270 . -1) (undo-tree-id9271 . -1) (undo-tree-id9272 . -1) (undo-tree-id9273 . -1) (undo-tree-id9274 . -1) (undo-tree-id9275 . -1) (undo-tree-id9276 . -1) (undo-tree-id9277 . -1) (undo-tree-id9278 . -1) (undo-tree-id9279 . -1) (undo-tree-id9280 . -1) (undo-tree-id9281 . -1) (undo-tree-id9282 . -1) (undo-tree-id9283 . -1) (undo-tree-id9284 . -1) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -1) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -1) (undo-tree-id9291 . -1) (undo-tree-id9292 . -1) (undo-tree-id9293 . -1) (undo-tree-id9294 . -1) (undo-tree-id9295 . -1) (undo-tree-id9296 . -1) (#("3" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1226) (undo-tree-id9297 . -1) (undo-tree-id9298 . -1) (undo-tree-id9299 . -1) (undo-tree-id9300 . -1) (undo-tree-id9301 . -1) (undo-tree-id9302 . -1) (undo-tree-id9303 . -1) (undo-tree-id9304 . -1) (undo-tree-id9305 . -1) (undo-tree-id9306 . -1) (undo-tree-id9307 . -1) (undo-tree-id9308 . -1) (undo-tree-id9309 . -1) (undo-tree-id9310 . -1) (undo-tree-id9311 . -1) (undo-tree-id9312 . -1) (undo-tree-id9313 . -1) (undo-tree-id9314 . -1) (undo-tree-id9315 . -1) (undo-tree-id9316 . -1) (undo-tree-id9317 . -1) (undo-tree-id9318 . -1) (undo-tree-id9319 . -1) (undo-tree-id9320 . -1) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (undo-tree-id9323 . -1) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1) (undo-tree-id9356 . -1) (undo-tree-id9357 . -1) (undo-tree-id9358 . -1) (undo-tree-id9359 . -1) (undo-tree-id9360 . -1) (undo-tree-id9361 . -1) (undo-tree-id9362 . -1) (undo-tree-id9363 . -1) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1) (undo-tree-id9377 . -1) (undo-tree-id9378 . -1) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1) (undo-tree-id9383 . -1) (undo-tree-id9384 . -1) (undo-tree-id9385 . -1) (undo-tree-id9386 . -1) (undo-tree-id9387 . -1) (undo-tree-id9388 . -1) (undo-tree-id9389 . -1) (undo-tree-id9390 . -1) (undo-tree-id9391 . -1) (undo-tree-id9392 . -1) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1227) (undo-tree-id9395 . -1) (undo-tree-id9396 . -1) (undo-tree-id9397 . -1) (undo-tree-id9398 . -1) (undo-tree-id9399 . -1) (undo-tree-id9400 . -1) (undo-tree-id9401 . -1) (undo-tree-id9402 . -1) (undo-tree-id9403 . -1) (undo-tree-id9404 . -1) (undo-tree-id9405 . -1) (undo-tree-id9406 . -1) (undo-tree-id9407 . -1) (undo-tree-id9408 . -1) (undo-tree-id9409 . -1) (undo-tree-id9410 . -1) (undo-tree-id9411 . -1) (undo-tree-id9412 . -1) (undo-tree-id9413 . -1) (undo-tree-id9414 . -1) (undo-tree-id9415 . -1) (undo-tree-id9416 . -1) (undo-tree-id9417 . -1) (undo-tree-id9418 . -1) (undo-tree-id9419 . -1) (undo-tree-id9420 . -1) (undo-tree-id9421 . -1) (undo-tree-id9422 . -1) (undo-tree-id9423 . -1) (undo-tree-id9424 . -1) (undo-tree-id9425 . -1) (undo-tree-id9426 . -1) (undo-tree-id9427 . -1) (undo-tree-id9428 . -1) (undo-tree-id9429 . -1) (undo-tree-id9430 . -1) (undo-tree-id9431 . -1) (undo-tree-id9432 . -1) (undo-tree-id9433 . -1) (undo-tree-id9434 . -1) (undo-tree-id9435 . -1) (undo-tree-id9436 . -1) (undo-tree-id9437 . -1) (undo-tree-id9438 . -1) (undo-tree-id9439 . -1) (undo-tree-id9440 . -1) (undo-tree-id9441 . -1) (undo-tree-id9442 . -1) (undo-tree-id9443 . -1) (undo-tree-id9444 . -1) (undo-tree-id9445 . -1) (undo-tree-id9446 . -1) (undo-tree-id9447 . -1) (undo-tree-id9448 . -1) (undo-tree-id9449 . -1) (undo-tree-id9450 . -1) (undo-tree-id9451 . -1) (undo-tree-id9452 . -1) (undo-tree-id9453 . -1) (undo-tree-id9454 . -1) (undo-tree-id9455 . -1) (undo-tree-id9456 . -1) (undo-tree-id9457 . -1) (undo-tree-id9458 . -1) (undo-tree-id9459 . -1) (undo-tree-id9460 . -1) (undo-tree-id9461 . -1) (undo-tree-id9462 . -1) (undo-tree-id9463 . -1) (undo-tree-id9464 . -1) (undo-tree-id9465 . -1) (undo-tree-id9466 . -1) (undo-tree-id9467 . -1) (undo-tree-id9468 . -1) (undo-tree-id9469 . -1) (undo-tree-id9470 . -1) (undo-tree-id9471 . -1) (undo-tree-id9472 . -1) (undo-tree-id9473 . -1) (undo-tree-id9474 . -1) (undo-tree-id9475 . -1) (undo-tree-id9476 . -1) (undo-tree-id9477 . -1) (undo-tree-id9478 . -1) (undo-tree-id9479 . -1) (undo-tree-id9480 . -1) (undo-tree-id9481 . -1) (undo-tree-id9482 . -1) (#("." 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1228) (undo-tree-id9483 . -1) (undo-tree-id9484 . -1) (undo-tree-id9485 . -1) (undo-tree-id9486 . -1) (undo-tree-id9487 . -1) (undo-tree-id9488 . -1) (undo-tree-id9489 . -1) (undo-tree-id9490 . -1) (undo-tree-id9491 . -1) (undo-tree-id9492 . -1) (undo-tree-id9493 . -1) (undo-tree-id9494 . -1) (undo-tree-id9495 . -1) (undo-tree-id9496 . -1) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (undo-tree-id9505 . -1) (undo-tree-id9506 . -1) (undo-tree-id9507 . -1) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (undo-tree-id9532 . -1) (undo-tree-id9533 . -1) (undo-tree-id9534 . -1) (undo-tree-id9535 . -1) (undo-tree-id9536 . -1) (undo-tree-id9537 . -1) (undo-tree-id9538 . -1) (undo-tree-id9539 . -1) (undo-tree-id9540 . -1) (undo-tree-id9541 . -1) (undo-tree-id9542 . -1) (undo-tree-id9543 . -1) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) (undo-tree-id9546 . -1) (undo-tree-id9547 . -1) (undo-tree-id9548 . -1) (undo-tree-id9549 . -1) (undo-tree-id9550 . -1) (undo-tree-id9551 . -1) (undo-tree-id9552 . -1) (undo-tree-id9553 . -1) (#("0" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1229) (undo-tree-id9554 . -1) (undo-tree-id9555 . -1) (undo-tree-id9556 . -1) (undo-tree-id9557 . -1) (undo-tree-id9558 . -1) (undo-tree-id9559 . -1) (undo-tree-id9560 . -1) (undo-tree-id9561 . -1) (undo-tree-id9562 . -1) (undo-tree-id9563 . -1) (undo-tree-id9564 . -1) (undo-tree-id9565 . -1) (undo-tree-id9566 . -1) (undo-tree-id9567 . -1) (undo-tree-id9568 . -1) (undo-tree-id9569 . -1) (undo-tree-id9570 . -1) (undo-tree-id9571 . -1) (undo-tree-id9572 . -1) (undo-tree-id9573 . -1) (undo-tree-id9574 . -1) (undo-tree-id9575 . -1) (undo-tree-id9576 . -1) (undo-tree-id9577 . -1) (undo-tree-id9578 . -1) (undo-tree-id9579 . -1) (undo-tree-id9580 . -1) (undo-tree-id9581 . -1) (undo-tree-id9582 . -1) (undo-tree-id9583 . -1) (undo-tree-id9584 . -1) (undo-tree-id9585 . -1) (undo-tree-id9586 . -1) (undo-tree-id9587 . -1) (undo-tree-id9588 . -1) (undo-tree-id9589 . -1) (undo-tree-id9590 . -1) (undo-tree-id9591 . -1) (undo-tree-id9592 . -1) (undo-tree-id9593 . -1) 1230) nil (25889 29541 128644 523000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -5616) (undo-tree-id9641 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -5617) (undo-tree-id9642 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5618) (undo-tree-id9643 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5619) (undo-tree-id9644 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5620) (undo-tree-id9645 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5621) (undo-tree-id9646 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5622) (undo-tree-id9647 . -1) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t gptel response)) . -5623) (undo-tree-id9648 . -1) (#(" " 0 1 (fontified nil)) . -5624) (undo-tree-id9649 . -1) (#(" " 0 1 (fontified nil)) . -5625) (undo-tree-id9650 . -1) (#(" " 0 1 (fontified t)) . -5626) (undo-tree-id9651 . -1) (#(" " 0 1 (fontified t)) . -5627) (undo-tree-id9652 . -1) 5628 (t 25889 29541 178595 173000)) nil (25889 29980 94150 673000) 0 nil])
([nil nil ((3039 . 3047) (#("        " 0 3 (fontified nil) 3 8 (fontified nil)) . 3038) (undo-tree-id9640 . -8) (3046 . 3047)) nil (25889 29980 94136 236000) 0 nil])
([nil nil ((3047 . 3056)) nil (25889 29980 94125 840000) 0 nil])
([nil nil ((3056 . 3065)) nil (25889 29980 94120 762000) 0 nil])
([nil nil ((1541 . 1543) (t 25889 29980 127961 603000)) nil (25889 30167 589309 417000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -1542) 1543) nil (25889 30167 589308 523000) 0 nil])
([nil nil ((1542 . 1544)) nil (25889 30167 589307 688000) 0 nil])
([nil nil ((nil fontified nil 1593 . 1594) (nil fontified nil 1592 . 1593) (nil fontified nil 1590 . 1592) (nil fontified nil 1589 . 1590) (nil fontified nil 1583 . 1589) (nil fontified nil 1582 . 1583) (nil fontified nil 1575 . 1582) (nil fontified nil 1571 . 1575) (nil fontified nil 1570 . 1571) (nil fontified nil 1568 . 1570) (nil fontified nil 1567 . 1568) (nil fontified nil 1562 . 1567) (nil fontified nil 1561 . 1562) (nil fontified nil 1555 . 1561) (nil fontified nil 1554 . 1555) (nil fontified nil 1550 . 1554) (nil fontified nil 1549 . 1550) (nil fontified nil 1544 . 1549) (1544 . 1594)) nil (25889 30167 589305 360000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -1596) (undo-tree-id9685 . -1) 1597) nil (25889 30167 589293 28000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-operator-face fontified t)) . -1683) (undo-tree-id9653 . -1) (undo-tree-id9654 . -1) (undo-tree-id9655 . -1) (undo-tree-id9656 . -1) (undo-tree-id9657 . -1) (undo-tree-id9658 . -1) (undo-tree-id9659 . -1) (undo-tree-id9660 . -1) (undo-tree-id9661 . -1) (undo-tree-id9662 . -1) (undo-tree-id9663 . -1) (undo-tree-id9664 . -1) (undo-tree-id9665 . -1) (undo-tree-id9666 . -1) (undo-tree-id9667 . -1) (undo-tree-id9668 . -1) (undo-tree-id9669 . -1) (undo-tree-id9670 . -1) (undo-tree-id9671 . -1) (undo-tree-id9672 . -1) (undo-tree-id9673 . -1) (undo-tree-id9674 . -1) (undo-tree-id9675 . -1) (undo-tree-id9676 . -1) (undo-tree-id9677 . -1) (undo-tree-id9678 . -1) (undo-tree-id9679 . -1) (undo-tree-id9680 . -1) (undo-tree-id9681 . -1) (undo-tree-id9682 . -1) (undo-tree-id9683 . -1) (undo-tree-id9684 . -1) 1684) nil (25889 30167 589282 362000) 0 nil])
([nil nil ((nil fontified nil 1734 . 1735) (nil fontified nil 1733 . 1734) (nil fontified nil 1731 . 1733) (nil fontified nil 1730 . 1731) (nil fontified nil 1724 . 1730) (nil fontified nil 1723 . 1724) (nil fontified nil 1716 . 1723) (nil fontified nil 1712 . 1716) (nil fontified nil 1711 . 1712) (nil fontified nil 1709 . 1711) (nil fontified nil 1708 . 1709) (nil fontified nil 1703 . 1708) (nil fontified nil 1702 . 1703) (nil fontified nil 1696 . 1702) (nil fontified nil 1695 . 1696) (nil fontified nil 1691 . 1695) (nil fontified nil 1690 . 1691) (nil fontified nil 1685 . 1690) (1685 . 1735)) nil (25889 30167 589202 166000) 0 nil])
([nil nil ((1735 . 1738)) nil (25889 30167 589194 372000) 0 nil])
([nil nil ((1224 . 1232) (#(" " 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . 1223) (undo-tree-id9691 . -1) (undo-tree-id9692 . -1) (undo-tree-id9693 . -1) (undo-tree-id9694 . -1) (undo-tree-id9695 . -1) (1224 . 1225) (t 25889 30167 630072 895000)) nil (25889 30233 251181 749000) 0 nil])
([nil nil ((1232 . 1233)) nil (25889 30233 251174 979000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1232) (undo-tree-id9690 . -1) 1233) nil (25889 30233 251173 783000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1228) (undo-tree-id9689 . -4) 1232) nil (25889 30233 251171 291000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1224) (undo-tree-id9688 . -4) 1228) nil (25889 30233 251169 176000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1223) (undo-tree-id9687 . -1) 1224) nil (25889 30233 251166 843000) 0 nil])
([nil nil ((1237 . 1239) (#("(" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1237) (1223 . 1238)) nil (25889 30233 251164 330000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1237) (undo-tree-id9686 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1238)) nil (25889 30233 251162 408000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1239) (1238 . 1239) (1237 . 1239) (#("[" 0 1 (fontified nil src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1237) (1237 . 1238)) nil (25889 30233 251146 610000) 0 nil])
([nil nil ((1238 . 1239)) nil (25889 30233 251139 614000) 0 nil])
([nil nil ((1241 . 1242) (t 25889 30233 286796 321000)) nil (25891 48867 365392 769000) 0 nil])
([nil nil ((nil fontified nil 1590 . 1591) (nil fontified nil 1589 . 1590) (nil fontified nil 1588 . 1589) (nil fontified nil 1587 . 1588) (nil fontified nil 1585 . 1587) (nil fontified nil 1584 . 1585) (nil fontified nil 1578 . 1584) (nil fontified nil 1577 . 1578) (nil fontified nil 1570 . 1577) (nil fontified nil 1566 . 1570) (nil fontified nil 1565 . 1566) (nil fontified nil 1563 . 1565) (nil fontified nil 1562 . 1563) (nil fontified nil 1557 . 1562) (nil fontified nil 1556 . 1557) (nil fontified nil 1550 . 1556) (nil fontified nil 1549 . 1550) (nil fontified nil 1545 . 1549) (nil fontified nil 1544 . 1545) (nil fontified nil 1535 . 1544) (nil fontified nil 1534 . 1535) (nil fontified nil 1533 . 1534) (nil fontified nil 1532 . 1533) (nil fontified nil 1522 . 1532) (nil fontified nil 1521 . 1522) (nil fontified nil 1520 . 1521) (nil fontified nil 1519 . 1520) (nil fontified nil 1518 . 1519) (nil fontified nil 1513 . 1518) (nil fontified nil 1512 . 1513) (nil fontified nil 1505 . 1512) (nil fontified nil 1501 . 1505) (nil fontified nil 1500 . 1501) (nil fontified nil 1499 . 1500) (nil fontified nil 1498 . 1499) (nil fontified nil 1497 . 1498) (nil fontified nil 1496 . 1497) (nil fontified nil 1494 . 1496) (nil fontified nil 1493 . 1494) (nil fontified nil 1487 . 1493) (nil fontified nil 1486 . 1487) (nil fontified nil 1479 . 1486) (nil fontified nil 1475 . 1479) (nil fontified nil 1474 . 1475) (nil fontified nil 1472 . 1474) (nil fontified nil 1471 . 1472) (nil fontified nil 1466 . 1471) (nil fontified nil 1465 . 1466) (nil fontified nil 1459 . 1465) (nil fontified nil 1458 . 1459) (nil fontified nil 1454 . 1458) (nil fontified nil 1453 . 1454) (nil fontified nil 1448 . 1453) (nil fontified nil 1447 . 1448) (nil fontified nil 1446 . 1447) (nil fontified nil 1445 . 1446) (nil fontified nil 1444 . 1445) (nil fontified nil 1443 . 1444) (nil fontified nil 1441 . 1443) (nil fontified nil 1440 . 1441) (nil fontified nil 1434 . 1440) (nil fontified nil 1433 . 1434) (nil fontified nil 1426 . 1433) (nil fontified nil 1422 . 1426) (nil fontified nil 1419 . 1422) (nil fontified nil 1418 . 1419) (nil fontified nil 1413 . 1418) (nil fontified nil 1412 . 1413) (nil fontified nil 1406 . 1412) (nil fontified nil 1405 . 1406) (nil fontified nil 1401 . 1405) (nil fontified nil 1400 . 1401) (nil fontified nil 1395 . 1400) (nil fontified nil 1383 . 1395) (nil fontified nil 1382 . 1383) (nil fontified nil 1381 . 1382) (nil fontified nil 1376 . 1381) (nil fontified nil 1375 . 1376) (nil fontified nil 1364 . 1375) (nil fontified nil 1360 . 1364) (nil fontified nil 1359 . 1360) (nil fontified nil 1358 . 1359) (nil fontified nil 1357 . 1358) (nil fontified nil 1356 . 1357) (nil fontified nil 1355 . 1356) (nil fontified nil 1353 . 1355) (nil fontified nil 1352 . 1353) (nil fontified nil 1346 . 1352) (nil fontified nil 1345 . 1346) (nil fontified nil 1338 . 1345) (nil fontified nil 1334 . 1338) (nil fontified nil 1333 . 1334) (nil fontified nil 1331 . 1333) (nil fontified nil 1330 . 1331) (nil fontified nil 1325 . 1330) (nil fontified nil 1324 . 1325) (nil fontified nil 1318 . 1324) (nil fontified nil 1317 . 1318) (nil fontified nil 1313 . 1317) (nil fontified nil 1312 . 1313) (nil fontified nil 1307 . 1312) (nil fontified nil 1306 . 1307) (nil fontified nil 1305 . 1306) (nil fontified nil 1304 . 1305) (nil fontified nil 1303 . 1304) (nil fontified nil 1302 . 1303) (nil fontified nil 1300 . 1302) (nil fontified nil 1299 . 1300) (nil fontified nil 1293 . 1299) (nil fontified nil 1292 . 1293) (nil fontified nil 1285 . 1292) (nil fontified nil 1281 . 1285) (nil fontified nil 1280 . 1281) (nil fontified nil 1278 . 1280) (nil fontified nil 1277 . 1278) (nil fontified nil 1272 . 1277) (nil fontified nil 1271 . 1272) (nil fontified nil 1265 . 1271) (nil fontified nil 1264 . 1265) (nil fontified nil 1260 . 1264) (nil fontified nil 1259 . 1260) (nil fontified nil 1254 . 1259) (nil fontified nil 1242 . 1254) (1242 . 1591)) nil (25891 48867 365388 324000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1250) 1242) nil (25891 48867 365372 404000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1387)) nil (25891 48867 365371 195000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1560) (undo-tree-id9891 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1561) (undo-tree-id9892 . -1) (#("." 0 1 (fontified t)) . -1562) (undo-tree-id9893 . -1) (#("c" 0 1 (fontified t)) . -1563) (undo-tree-id9894 . -1) (#("s" 0 1 (fontified t)) . -1564) (undo-tree-id9895 . -1) (#("u" 0 1 (fontified t)) . -1565) (undo-tree-id9896 . -1) (#("m" 0 1 (fontified t)) . -1566) (undo-tree-id9897 . -1) (#("N" 0 1 (fontified t)) . -1567) (undo-tree-id9898 . -1) (#("a" 0 1 (fontified t)) . -1568) (undo-tree-id9899 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1569) (undo-tree-id9900 . -1) (#("i" 0 1 (fontified t)) . -1570) (undo-tree-id9901 . -1) (#("_" 0 1 (fontified t)) . -1571) (undo-tree-id9902 . -1) (#("p" 0 1 (fontified t)) . -1572) (undo-tree-id9903 . -1) (#("o" 0 1 (fontified t)) . -1573) (undo-tree-id9904 . -1) (#("p" 0 1 (fontified t)) . -1574) (undo-tree-id9905 . -1) (#(" " 0 1 (fontified t)) . -1575) (undo-tree-id9906 . -1) (#("+" 0 1 (face font-lock-operator-face fontified t)) . -1576) (undo-tree-id9907 . -1) (#(" " 0 1 (fontified t)) . -1577) (undo-tree-id9908 . -1) (#("1" 0 1 (fontified t)) . -1578) (undo-tree-id9909 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1579) (undo-tree-id9910 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . -1580) (undo-tree-id9911 . -1) 1581) nil (25891 48867 365367 7000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1539) (undo-tree-id9870 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1540) (undo-tree-id9871 . -1) (#("." 0 1 (fontified t)) . -1541) (undo-tree-id9872 . -1) (#("c" 0 1 (fontified t)) . -1542) (undo-tree-id9873 . -1) (#("s" 0 1 (fontified t)) . -1543) (undo-tree-id9874 . -1) (#("u" 0 1 (fontified t)) . -1544) (undo-tree-id9875 . -1) (#("m" 0 1 (fontified t)) . -1545) (undo-tree-id9876 . -1) (#("N" 0 1 (fontified t)) . -1546) (undo-tree-id9877 . -1) (#("a" 0 1 (fontified t)) . -1547) (undo-tree-id9878 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1548) (undo-tree-id9879 . -1) (#("i" 0 1 (fontified nil)) . -1549) (undo-tree-id9880 . -1) (#("_" 0 1 (fontified nil)) . -1550) (undo-tree-id9881 . -1) (#("p" 0 1 (fontified nil)) . -1551) (undo-tree-id9882 . -1) (#("o" 0 1 (fontified nil)) . -1552) (undo-tree-id9883 . -1) (#("p" 0 1 (fontified nil)) . -1553) (undo-tree-id9884 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1554) (undo-tree-id9885 . -1) (#(" " 0 1 (fontified t)) . -1555) (undo-tree-id9886 . -1) (#(":" 0 1 (fontified t)) . -1556) (undo-tree-id9887 . -1) (#(" " 0 1 (fontified t)) . -1557) (undo-tree-id9888 . -1) (#("s" 0 1 (fontified t)) . -1558) (undo-tree-id9889 . -1) (#("e" 0 1 (fontified t)) . -1559) (undo-tree-id9890 . -1) 1560) nil (25891 48867 365341 458000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1536) (undo-tree-id9867 . -1) (#("s" 0 1 (fontified t)) . -1537) (undo-tree-id9868 . -1) (#("e" 0 1 (fontified t)) . -1538) (undo-tree-id9869 . -1) 1539) nil (25891 48867 365309 49000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1504) (undo-tree-id9861 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1505) (#("i" 0 1 (fontified t)) . -1505) (undo-tree-id9862 . -1) (#("_" 0 1 (fontified t)) . -1506) (undo-tree-id9863 . -1) (#("p" 0 1 (fontified t)) . -1507) (undo-tree-id9864 . -1) (#("o" 0 1 (fontified t)) . -1508) (undo-tree-id9865 . -1) (#("p" 0 1 (fontified t)) . -1509) (undo-tree-id9866 . -1) 1510) nil (25891 48867 365301 878000) 0 nil])
([nil nil ((1505 . 1506) (1504 . 1506) (#("[" 0 1 (fontified nil)) . -1504) (1504 . 1505)) nil (25891 48867 365295 488000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1469) (undo-tree-id9840 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1470) (undo-tree-id9841 . -1) (#("." 0 1 (fontified t)) . -1471) (undo-tree-id9842 . -1) (#("c" 0 1 (fontified t)) . -1472) (undo-tree-id9843 . -1) (#("s" 0 1 (fontified t)) . -1473) (undo-tree-id9844 . -1) (#("u" 0 1 (fontified t)) . -1474) (undo-tree-id9845 . -1) (#("m" 0 1 (fontified t)) . -1475) (undo-tree-id9846 . -1) (#("N" 0 1 (fontified t)) . -1476) (undo-tree-id9847 . -1) (#("a" 0 1 (fontified nil)) . -1477) (undo-tree-id9848 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1478) (undo-tree-id9849 . -1) (#("i" 0 1 (fontified nil)) . -1479) (undo-tree-id9850 . -1) (#("_" 0 1 (fontified nil)) . -1480) (undo-tree-id9851 . -1) (#("p" 0 1 (fontified nil)) . -1481) (undo-tree-id9852 . -1) (#("o" 0 1 (fontified nil)) . -1482) (undo-tree-id9853 . -1) (#("p" 0 1 (fontified nil)) . -1483) (undo-tree-id9854 . -1) (#(" " 0 1 (fontified t)) . -1484) (undo-tree-id9855 . -1) (#("+" 0 1 (face font-lock-operator-face fontified t)) . -1485) (undo-tree-id9856 . -1) (#(" " 0 1 (fontified t)) . -1486) (undo-tree-id9857 . -1) (#("1" 0 1 (fontified t)) . -1487) (undo-tree-id9858 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1488) (undo-tree-id9859 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . -1489) (undo-tree-id9860 . -1) 1490) nil (25891 48867 365290 488000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-keyword-face fontified nil)) . -1448) (undo-tree-id9819 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified nil)) . -1449) (undo-tree-id9820 . -1) (#("." 0 1 (fontified nil)) . -1450) (undo-tree-id9821 . -1) (#("c" 0 1 (fontified nil)) . -1451) (undo-tree-id9822 . -1) (#("s" 0 1 (fontified nil)) . -1452) (undo-tree-id9823 . -1) (#("u" 0 1 (fontified t)) . -1453) (undo-tree-id9824 . -1) (#("m" 0 1 (fontified t)) . -1454) (undo-tree-id9825 . -1) (#("N" 0 1 (fontified t)) . -1455) (undo-tree-id9826 . -1) (#("a" 0 1 (fontified t)) . -1456) (undo-tree-id9827 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1457) (undo-tree-id9828 . -1) (#("i" 0 1 (fontified t)) . -1458) (undo-tree-id9829 . -1) (#("_" 0 1 (fontified t)) . -1459) (undo-tree-id9830 . -1) (#("p" 0 1 (fontified t)) . -1460) (undo-tree-id9831 . -1) (#("o" 0 1 (fontified t)) . -1461) (undo-tree-id9832 . -1) (#("p" 0 1 (fontified t)) . -1462) (undo-tree-id9833 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1463) (undo-tree-id9834 . -1) (#(" " 0 1 (fontified t)) . -1464) (undo-tree-id9835 . -1) (#(":" 0 1 (fontified t)) . -1465) (undo-tree-id9836 . -1) (#(" " 0 1 (fontified t)) . -1466) (undo-tree-id9837 . -1) (#("s" 0 1 (fontified t)) . -1467) (undo-tree-id9838 . -1) (#("e" 0 1 (fontified t)) . -1468) (undo-tree-id9839 . -1) 1469) nil (25891 48867 365263 293000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1445) (undo-tree-id9816 . -1) (#("s" 0 1 (fontified t)) . -1446) (undo-tree-id9817 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -1447) (undo-tree-id9818 . -1) 1448) nil (25891 48867 365240 111000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-keyword-face fontified nil)) . -1416) (undo-tree-id9795 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified nil)) . -1417) (undo-tree-id9796 . -1) (#("." 0 1 (fontified nil)) . -1418) (undo-tree-id9797 . -1) (#("c" 0 1 (fontified nil)) . -1419) (undo-tree-id9798 . -1) (#("s" 0 1 (fontified nil)) . -1420) (undo-tree-id9799 . -1) (#("u" 0 1 (fontified t)) . -1421) (undo-tree-id9800 . -1) (#("m" 0 1 (fontified nil)) . -1422) (undo-tree-id9801 . -1) (#("N" 0 1 (fontified t)) . -1423) (undo-tree-id9802 . -1) (#("a" 0 1 (fontified t)) . -1424) (undo-tree-id9803 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1425) (undo-tree-id9804 . -1) (#("i" 0 1 (fontified t)) . -1426) (undo-tree-id9805 . -1) (#("_" 0 1 (fontified t)) . -1427) (undo-tree-id9806 . -1) (#("p" 0 1 (fontified nil)) . -1428) (undo-tree-id9807 . -1) (#("o" 0 1 (fontified t)) . -1429) (undo-tree-id9808 . -1) (#("p" 0 1 (fontified t)) . -1430) (undo-tree-id9809 . -1) (#(" " 0 1 (fontified t)) . -1431) (undo-tree-id9810 . -1) (#("+" 0 1 (face font-lock-operator-face fontified nil)) . -1432) (undo-tree-id9811 . -1) (#(" " 0 1 (fontified t)) . -1433) (undo-tree-id9812 . -1) (#("1" 0 1 (fontified t)) . -1434) (undo-tree-id9813 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1435) (undo-tree-id9814 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . -1436) (undo-tree-id9815 . -1) 1437) nil (25891 48867 365232 967000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1395) (undo-tree-id9774 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1396) (undo-tree-id9775 . -1) (#("." 0 1 (fontified t)) . -1397) (undo-tree-id9776 . -1) (#("c" 0 1 (fontified t)) . -1398) (undo-tree-id9777 . -1) (#("s" 0 1 (fontified t)) . -1399) (undo-tree-id9778 . -1) (#("u" 0 1 (fontified t)) . -1400) (undo-tree-id9779 . -1) (#("m" 0 1 (fontified t)) . -1401) (undo-tree-id9780 . -1) (#("N" 0 1 (fontified t)) . -1402) (undo-tree-id9781 . -1) (#("a" 0 1 (fontified t)) . -1403) (undo-tree-id9782 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1404) (undo-tree-id9783 . -1) (#("i" 0 1 (fontified t)) . -1405) (undo-tree-id9784 . -1) (#("_" 0 1 (fontified t)) . -1406) (undo-tree-id9785 . -1) (#("p" 0 1 (fontified t)) . -1407) (undo-tree-id9786 . -1) (#("o" 0 1 (fontified t)) . -1408) (undo-tree-id9787 . -1) (#("p" 0 1 (fontified t)) . -1409) (undo-tree-id9788 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1410) (undo-tree-id9789 . -1) (#(" " 0 1 (fontified nil)) . -1411) (undo-tree-id9790 . -1) (#(":" 0 1 (fontified nil)) . -1412) (undo-tree-id9791 . -1) (#(" " 0 1 (fontified nil)) . -1413) (undo-tree-id9792 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified nil)) . -1414) (undo-tree-id9793 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -1415) (undo-tree-id9794 . -1) 1416) nil (25891 48867 365204 944000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1392) (undo-tree-id9771 . -1) (#("s" 0 1 (fontified t)) . -1393) (undo-tree-id9772 . -1) (#("e" 0 1 (fontified t)) . -1394) (undo-tree-id9773 . -1) 1395) nil (25891 48867 365179 605000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 1255) (#(" " 0 1 (fontified t)) . 1255) (#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1255) (#("p" 0 1 (fontified t)) . 1255) (#("o" 0 1 (fontified nil)) . 1255) (#("p" 0 1 (fontified t)) . 1255) (#("_" 0 1 (fontified t)) . 1255) (#("i" 0 1 (fontified t)) . 1255) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1255) (#("a" 0 1 (fontified t)) . 1255) (#("N" 0 1 (fontified t)) . 1255) (#("m" 0 1 (fontified t)) . 1255) (#("u" 0 1 (fontified t)) . 1255) (#("s" 0 1 (fontified nil)) . 1255) (#("c" 0 1 (fontified t)) . 1255) (#("." 0 1 (fontified t)) . 1255) (#("f" 0 1 (fontified t)) . 1255) (#("l" 0 1 (fontified t)) . 1255) (#("e" 0 1 (fontified t)) . 1255) (#("s" 0 1 (fontified t)) . 1255) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1255)) nil (25891 48867 365173 136000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1255) (#("+" 0 1 (face font-lock-operator-face fontified nil)) . 1255) (#(" " 0 1 (fontified nil)) . 1255) (#("p" 0 1 (fontified t)) . 1255) (#("o" 0 1 (fontified t)) . 1255) (#("p" 0 1 (fontified t)) . 1255) (#("_" 0 1 (fontified t)) . 1255) (#("i" 0 1 (fontified t)) . 1255) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1255) (#("a" 0 1 (fontified t)) . 1255) (#("N" 0 1 (fontified nil)) . 1255) (#("m" 0 1 (fontified t)) . 1255) (#("u" 0 1 (fontified nil)) . 1255) (#("s" 0 1 (fontified nil)) . 1255) (#("c" 0 1 (fontified nil)) . 1255) (#("." 0 1 (fontified nil)) . 1255) (#("f" 0 1 (fontified nil)) . 1255) (#("l" 0 1 (fontified t)) . 1255) (#("e" 0 1 (fontified nil)) . 1255) (#("s" 0 1 (fontified t)) . 1255) (#(" " 0 1 (fontified t)) . 1255)) nil (25891 48867 365166 630000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t rear-nonsticky t)) . 1255) (#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified nil)) . 1255) (#("1" 0 1 (fontified nil)) . 1255)) nil (25891 48867 365162 322000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1327) (undo-tree-id9765 . -1) (#("_" 0 1 (fontified t)) . -1328) (undo-tree-id9766 . -1) (#("p" 0 1 (fontified t)) . -1329) (undo-tree-id9767 . -1) (#("o" 0 1 (fontified t)) . -1330) (undo-tree-id9768 . -1) (#("p" 0 1 (fontified t)) . -1331) (undo-tree-id9769 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1332) (undo-tree-id9770 . -1) 1333) nil (25891 48867 365159 997000) 0 nil])
([nil nil ((1327 . 1329)) nil (25891 48867 365152 896000) 0 nil])
([nil nil ((#("o" 0 1 (fontified nil)) . -1300) (undo-tree-id9757 . -1) (#("p" 0 1 (fontified t)) . -1301) (undo-tree-id9758 . -1) (#(" " 0 1 (fontified nil)) . -1302) (undo-tree-id9759 . -1) (#("+" 0 1 (face font-lock-operator-face fontified t)) . -1303) (undo-tree-id9760 . -1) (#(" " 0 1 (fontified t)) . -1304) (undo-tree-id9761 . -1) (#("1" 0 1 (fontified t)) . -1305) (undo-tree-id9762 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1306) (undo-tree-id9763 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t)) . -1307) (undo-tree-id9764 . -1) 1308) nil (25891 48867 365150 505000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1279) (undo-tree-id9736 . -1) (#("p" 0 1 (fontified t)) . -1280) (undo-tree-id9737 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1281) (undo-tree-id9738 . -1) (#(" " 0 1 (fontified t)) . -1282) (undo-tree-id9739 . -1) (#(":" 0 1 (fontified t)) . -1283) (undo-tree-id9740 . -1) (#(" " 0 1 (fontified t)) . -1284) (undo-tree-id9741 . -1) (#("s" 0 1 (fontified t)) . -1285) (undo-tree-id9742 . -1) (#("e" 0 1 (fontified t)) . -1286) (undo-tree-id9743 . -1) (#("l" 0 1 (fontified t)) . -1287) (undo-tree-id9744 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1288) (undo-tree-id9745 . -1) (#("." 0 1 (fontified t)) . -1289) (undo-tree-id9746 . -1) (#("c" 0 1 (fontified t)) . -1290) (undo-tree-id9747 . -1) (#("s" 0 1 (fontified t)) . -1291) (undo-tree-id9748 . -1) (#("u" 0 1 (fontified t)) . -1292) (undo-tree-id9749 . -1) (#("m" 0 1 (fontified t)) . -1293) (undo-tree-id9750 . -1) (#("N" 0 1 (fontified t)) . -1294) (undo-tree-id9751 . -1) (#("a" 0 1 (fontified t)) . -1295) (undo-tree-id9752 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1296) (undo-tree-id9753 . -1) (#("i" 0 1 (fontified nil)) . -1297) (undo-tree-id9754 . -1) (#("_" 0 1 (fontified nil)) . -1298) (undo-tree-id9755 . -1) (#("p" 0 1 (fontified nil)) . -1299) (undo-tree-id9756 . -1) 1300) nil (25891 48867 365135 74000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1263) (undo-tree-id9696 . -1) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -1) (undo-tree-id9705 . -1) (undo-tree-id9706 . -1) (undo-tree-id9707 . -1) (undo-tree-id9708 . -1) (undo-tree-id9709 . -1) (undo-tree-id9710 . -1) (undo-tree-id9711 . -1) (undo-tree-id9712 . -1) (undo-tree-id9713 . -1) (undo-tree-id9714 . -1) (undo-tree-id9715 . -1) (undo-tree-id9716 . -1) (undo-tree-id9717 . -1) (undo-tree-id9718 . -1) (undo-tree-id9719 . -1) (undo-tree-id9720 . -1) (#("s" 0 1 (fontified t)) . -1264) (undo-tree-id9721 . -1) (#("e" 0 1 (fontified t)) . -1265) (undo-tree-id9722 . -1) (#("l" 0 1 (fontified t)) . -1266) (undo-tree-id9723 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1267) (undo-tree-id9724 . -1) (#("." 0 1 (fontified t)) . -1268) (undo-tree-id9725 . -1) (#("c" 0 1 (fontified t)) . -1269) (undo-tree-id9726 . -1) (#("s" 0 1 (fontified t)) . -1270) (undo-tree-id9727 . -1) (#("u" 0 1 (fontified t)) . -1271) (undo-tree-id9728 . -1) (#("m" 0 1 (fontified t)) . -1272) (undo-tree-id9729 . -1) (#("N" 0 1 (fontified t)) . -1273) (undo-tree-id9730 . -1) (#("a" 0 1 (fontified t)) . -1274) (undo-tree-id9731 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1275) (undo-tree-id9732 . -1) (#("i" 0 1 (fontified t)) . -1276) (undo-tree-id9733 . -1) (#("_" 0 1 (fontified t)) . -1277) (undo-tree-id9734 . -1) (#("p" 0 1 (fontified t)) . -1278) (undo-tree-id9735 . -1) 1279) nil (25891 48867 365038 132000) 0 nil])
([nil nil ((apply -12 1359 1974 undo--wrap-and-run-primitive-undo 1359 1974 ((1763 . 1765) (1620 . 1622) (1578 . 1580) (1455 . 1457) (1409 . 1411) (1367 . 1369) 1953))) nil (25891 48867 364975 231000) 0 nil])
([nil nil ((1241 . 1250) (t 25891 48867 402323 251000)) nil (25891 48975 256379 730000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1347 . 1348) (nil fontified nil 1347 . 1348) (nil fontified nil 1346 . 1347) (nil fontified nil 1345 . 1346) (nil fontified nil 1344 . 1345) (nil fontified nil 1342 . 1344) (nil fontified nil 1341 . 1342) (nil fontified nil 1336 . 1341) (nil fontified nil 1335 . 1336) (nil fontified nil 1334 . 1335) (nil fontified nil 1327 . 1334) (nil fontified nil 1323 . 1327) (nil fontified nil 1322 . 1323) (nil fontified nil 1320 . 1322) (nil fontified nil 1319 . 1320) (nil fontified nil 1315 . 1319) (nil fontified nil 1314 . 1315) (nil fontified nil 1313 . 1314) (nil fontified nil 1307 . 1313) (nil fontified nil 1306 . 1307) (nil fontified nil 1302 . 1306) (nil fontified nil 1301 . 1302) (nil fontified nil 1296 . 1301) (nil fontified nil 1295 . 1296) (nil fontified nil 1294 . 1295) (nil fontified nil 1289 . 1294) (nil fontified nil 1288 . 1289) (nil fontified nil 1287 . 1288) (nil fontified nil 1282 . 1287) (nil fontified nil 1281 . 1282) (nil fontified nil 1277 . 1281) (nil fontified nil 1273 . 1277) (nil fontified nil 1272 . 1273) (nil fontified nil 1271 . 1272) (nil fontified nil 1270 . 1271) (nil fontified nil 1269 . 1270) (nil fontified nil 1260 . 1269) (nil fontified nil 1252 . 1260) (nil fontified nil 1250 . 1252) (nil fontified nil 1242 . 1250) (1242 . 1348)) nil (25891 48975 256372 913000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#(" " 0 1 (fontified t)) . 1250) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1250)) nil (25891 48975 256354 716000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1287) (#("a" 0 1 (fontified t)) . 1287)) nil (25891 48975 256349 237000) 0 nil])
([nil nil ((1287 . 1289)) nil (25891 48975 256347 172000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1292) (#(":" 0 1 (fontified t)) . 1292) (#(" " 0 1 (fontified t)) . 1292) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1292) (#("p" 0 1 (fontified nil)) . 1292) (#("o" 0 1 (fontified t)) . 1292) (#("p" 0 1 (fontified t)) . 1292) (#("_" 0 1 (fontified nil)) . 1292) (#("j" 0 1 (fontified t)) . 1292) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . 1292) (#("a" 0 1 (fontified nil)) . 1292) (#("N" 0 1 (fontified nil)) . 1292) (#("m" 0 1 (fontified nil)) . 1292) (#("u" 0 1 (fontified nil)) . 1292) (#("s" 0 1 (fontified nil)) . 1292) (#("c" 0 1 (fontified t)) . 1292) (#("." 0 1 (fontified t)) . 1292) (#("f" 0 1 (fontified t)) . 1292) (#("l" 0 1 (fontified t)) . 1292) (#("e" 0 1 (fontified t)) . 1292) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 1292)) nil (25891 48975 256339 171000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1292) (#(" " 0 1 (fontified t)) . 1292) (#("+" 0 1 (face font-lock-operator-face fontified t)) . 1292) (#(" " 0 1 (fontified nil)) . 1292) (#("p" 0 1 (fontified t)) . 1292) (#("o" 0 1 (fontified nil)) . 1292) (#("p" 0 1 (fontified t)) . 1292) (#("_" 0 1 (fontified nil)) . 1292) (#("j" 0 1 (fontified t)) . 1292) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1292) (#("a" 0 1 (fontified nil)) . 1292) (#("N" 0 1 (fontified t)) . 1292) (#("m" 0 1 (fontified t)) . 1292) (#("u" 0 1 (fontified t)) . 1292) (#("s" 0 1 (fontified t)) . 1292) (#("c" 0 1 (fontified t)) . 1292) (#("." 0 1 (fontified t)) . 1292) (#("f" 0 1 (fontified t)) . 1292) (#("l" 0 1 (fontified t)) . 1292) (#("e" 0 1 (fontified t)) . 1292) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . 1292)) nil (25891 48975 256325 19000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t rear-nonsticky t)) . 1292) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1292)) nil (25891 48975 256315 501000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1291) (undo-tree-id9958 . -1) 1292) nil (25891 48975 256313 230000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1279) (undo-tree-id9953 . -1) (#("_" 0 1 (fontified t)) . -1280) (undo-tree-id9954 . -1) (#("p" 0 1 (fontified t)) . -1281) (undo-tree-id9955 . -1) (#("o" 0 1 (fontified t)) . -1282) (undo-tree-id9956 . -1) (#("p" 0 1 (fontified t)) . -1283) (undo-tree-id9957 . -1) 1284) nil (25891 48975 256307 431000) 0 nil])
([nil nil ((1279 . 1280)) nil (25891 48975 256293 885000) 0 nil])
([nil nil ((#("_" 0 1 (fontified nil)) . -1273) (undo-tree-id9949 . -1) (#("p" 0 1 (fontified t)) . -1274) (undo-tree-id9950 . -1) (#("o" 0 1 (fontified t)) . -1275) (undo-tree-id9951 . -1) (#("p" 0 1 (fontified t)) . -1276) (undo-tree-id9952 . -1) 1277) nil (25891 48975 256290 268000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1272) (undo-tree-id9948 . -1) 1273) nil (25891 48975 256278 352000) 0 nil])
([nil nil ((1272 . 1273)) nil (25891 48975 256274 90000) 0 nil])
([nil nil ((1241 . 1249)) nil (25891 48975 256272 563000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-operator-face fontified t)) . -1268) (undo-tree-id9947 . -1) 1269) nil (25891 48975 256270 402000) 0 nil])
([nil nil ((1270 . 1281)) nil (25891 48975 256266 269000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1280) (undo-tree-id9946 . -1) 1281) nil (25891 48975 256264 108000) 0 nil])
([nil nil ((1280 . 1283)) nil (25891 48975 256259 8000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1240) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) (undo-tree-id9916 . -1) (undo-tree-id9917 . -1) (undo-tree-id9918 . -1) (undo-tree-id9919 . -1) (undo-tree-id9920 . -1) (undo-tree-id9921 . -1) (undo-tree-id9922 . -1) (undo-tree-id9923 . -1) (undo-tree-id9924 . -1) (undo-tree-id9925 . -1) (undo-tree-id9926 . -1) (undo-tree-id9927 . -1) (undo-tree-id9928 . -1) (undo-tree-id9929 . -1) (undo-tree-id9930 . -1) (undo-tree-id9931 . -1) (undo-tree-id9932 . -1) (undo-tree-id9933 . -1) (undo-tree-id9934 . -1) (undo-tree-id9935 . -1) (undo-tree-id9936 . -1) (undo-tree-id9937 . -1) (undo-tree-id9938 . -1) (undo-tree-id9939 . -1) (undo-tree-id9940 . -1) (undo-tree-id9941 . -1) (undo-tree-id9942 . -1) (undo-tree-id9943 . -1) (undo-tree-id9944 . -1) (undo-tree-id9945 . -1) 1241) nil (25891 48975 256249 803000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1278) (undo-tree-id9959 . -1) (undo-tree-id9960 . -1) (undo-tree-id9961 . -1) (undo-tree-id9962 . -1) (undo-tree-id9963 . -1) (undo-tree-id9964 . -1) (undo-tree-id9965 . -1) (undo-tree-id9966 . -1) (undo-tree-id9967 . -1) (undo-tree-id9968 . -1) (undo-tree-id9969 . -1) (undo-tree-id9970 . -1) (undo-tree-id9971 . -1) (undo-tree-id9972 . -1) (undo-tree-id9973 . -1) (undo-tree-id9974 . -1) (undo-tree-id9975 . -1) (undo-tree-id9976 . -1) (undo-tree-id9977 . -1) (undo-tree-id9978 . -1) (undo-tree-id9979 . -1) (undo-tree-id9980 . -1) (undo-tree-id9981 . -1) (undo-tree-id9982 . -1) (undo-tree-id9983 . -1) 1279 (t 25891 48975 293622 963000)) nil (25891 49020 83266 885000) 0 nil])
([nil nil ((apply -12 592 975 undo--wrap-and-run-primitive-undo 592 975 ((919 . 921) (852 . 854) (765 . 767) (719 . 721) (677 . 679) (600 . 602) 946))) nil (25891 49067 425674 181000) 0 nil] [nil nil ((apply -6 592 842 undo--wrap-and-run-primitive-undo 592 842 ((719 . 721) (677 . 679) (600 . 602) 751))) ((apply 6 592 836 undo--wrap-and-run-primitive-undo 592 836 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 600) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 677) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 719) 757))) (25891 49020 81375 814000) 0 nil])
([nil nil ((1092 . 1096) (1083 . 1084)) nil (25891 49067 425673 230000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t)) . -765) 757) ((765 . 773)) (25891 49020 80805 212000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1225 . 1226) (nil fontified nil 1225 . 1226) (nil fontified nil 1224 . 1225) (nil fontified nil 1212 . 1224) (nil fontified nil 1211 . 1212) (nil fontified nil 1199 . 1211) (nil fontified nil 1195 . 1199) (nil fontified nil 1194 . 1195) (nil fontified nil 1193 . 1194) (nil fontified nil 1192 . 1193) (nil fontified nil 1188 . 1192) (nil fontified nil 1161 . 1188) (nil fontified nil 1160 . 1161) (nil fontified nil 1159 . 1160) (nil fontified nil 1158 . 1159) (nil fontified nil 1153 . 1158) (nil fontified nil 1151 . 1153) (nil fontified nil 1146 . 1151) (nil fontified nil 1145 . 1146) (nil fontified nil 1144 . 1145) (nil fontified nil 1138 . 1144) (nil fontified nil 1137 . 1138) (nil fontified nil 1132 . 1137) (nil fontified nil 1131 . 1132) (nil fontified nil 1128 . 1131) (nil fontified nil 1124 . 1128) (nil fontified nil 1122 . 1124) (nil fontified nil 1121 . 1122) (nil fontified nil 1116 . 1121) (nil fontified nil 1115 . 1116) (nil fontified nil 1112 . 1115) (nil fontified nil 1108 . 1112) (nil fontified nil 1107 . 1108) (nil fontified nil 1097 . 1107) (nil fontified nil 1096 . 1097) (nil fontified nil 1095 . 1096) (nil fontified nil 1092 . 1095) (nil fontified nil 1084 . 1092) (1084 . 1226)) nil (25891 49067 425670 803000) 0 nil])
nil
([nil nil ((#("        " 0 8 (fontified t)) . -1169) 1161) nil (25891 49067 425663 521000) 0 nil])
([nil nil ((#("i" 0 1 (face font-lock-variable-name-face fontified nil)) . -1093) (undo-tree-id10081 . -1) (#("j" 0 1 (face font-lock-variable-name-face fontified t)) . -1094) (undo-tree-id10082 . -1) 1095) nil (25891 49067 425661 797000) 0 nil])
([nil nil ((1093 . 1095)) nil (25891 49067 425658 229000) 0 nil])
([nil nil ((#("i" 0 1 (fontified nil)) . -1170) (undo-tree-id10079 . -1) (#("j" 0 1 (fontified t)) . -1171) (undo-tree-id10080 . -1) 1172) nil (25891 49067 425656 661000) 0 nil])
([nil nil ((1170 . 1172)) nil (25891 49067 425652 952000) 0 nil])
([nil nil ((#("i_pop" 0 5 (fontified t)) . 1204)) nil (25891 49067 425651 985000) 0 nil])
([nil nil ((1204 . 1205)) nil (25891 49067 425651 292000) 0 nil])
([nil nil ((#("j_pop" 0 5 (fontified t)) . 1207)) nil (25891 49067 425650 460000) 0 nil])
([nil nil ((1207 . 1208)) nil (25891 49067 425649 699000) 0 nil])
([nil nil ((#("j_pop" 0 5 (fontified t)) . 1132)) nil (25891 49067 425648 910000) 0 nil])
([nil nil ((1132 . 1133)) nil (25891 49067 425648 175000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1116) (undo-tree-id10074 . -1) (#("_" 0 1 (fontified t)) . -1117) (undo-tree-id10075 . -1) (#("p" 0 1 (fontified t)) . -1118) (undo-tree-id10076 . -1) (#("o" 0 1 (fontified t)) . -1119) (undo-tree-id10077 . -1) (#("p" 0 1 (fontified t)) . -1120) (undo-tree-id10078 . -1) 1121) nil (25891 49067 425646 65000) 0 nil])
([nil nil ((1116 . 1117)) nil (25891 49067 425636 840000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . -1137) (undo-tree-id10061 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1138) (#("i" 0 1 (fontified t)) . -1138) (undo-tree-id10062 . -1) (#("_" 0 1 (fontified nil)) . -1139) (undo-tree-id10063 . -1) (#("p" 0 1 (fontified nil)) . -1140) (undo-tree-id10064 . -1) (#("o" 0 1 (fontified nil)) . -1141) (undo-tree-id10065 . -1) (#("p" 0 1 (fontified nil)) . -1142) (undo-tree-id10066 . -1) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . -1143) (undo-tree-id10067 . -1) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . -1144) (undo-tree-id10068 . -1) (#("j" 0 1 (fontified nil)) . -1145) (undo-tree-id10069 . -1) (#("_" 0 1 (fontified nil)) . -1146) (undo-tree-id10070 . -1) (#("p" 0 1 (fontified nil)) . -1147) (undo-tree-id10071 . -1) (#("o" 0 1 (fontified t)) . -1148) (undo-tree-id10072 . -1) (#("p" 0 1 (fontified t)) . -1149) (undo-tree-id10073 . -1) 1150) nil (25891 49067 425632 203000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1137)) nil (25891 49067 425615 771000) 0 nil])
([nil nil ((1137 . 1142)) nil (25891 49067 425615 2000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -1141) (undo-tree-id10060 . -1) 1142) nil (25891 49067 425614 36000) 0 nil])
([nil nil ((1141 . 1142)) nil (25891 49067 425611 895000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1259 . 1260) (nil fontified nil 1259 . 1260) (nil fontified nil 1258 . 1259) (nil fontified nil 1257 . 1258) (nil fontified nil 1252 . 1257) (nil fontified nil 1251 . 1252) (nil fontified nil 1248 . 1251) (nil fontified nil 1247 . 1248) (nil fontified nil 1243 . 1247) (nil fontified nil 1242 . 1243) (nil fontified nil 1226 . 1242) (nil fontified nil 1225 . 1226) (nil fontified nil 1220 . 1225) (nil fontified nil 1219 . 1220) (nil fontified nil 1218 . 1219) (nil fontified nil 1213 . 1218) (nil fontified nil 1212 . 1213) (nil fontified nil 1208 . 1212) (nil fontified nil 1204 . 1208) (nil fontified nil 1192 . 1204) (1192 . 1260)) nil (25891 49067 425610 301000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1200) 1192) nil (25891 49067 425606 866000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1208) (#("p" 0 1 (fontified t)) . 1208) (#("o" 0 1 (fontified t)) . 1208) (#("p" 0 1 (fontified t)) . 1208) (#("_" 0 1 (fontified t)) . 1208) (#("i" 0 1 (fontified t)) . 1208) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1208) (#("]" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . 1208) (#("p" 0 1 (fontified t)) . 1208) (#("o" 0 1 (fontified t)) . 1208) (#("p" 0 1 (fontified t)) . 1208) (#("_" 0 1 (fontified t)) . 1208) (#("i" 0 1 (fontified t)) . 1208) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1208)) nil (25891 49067 425602 754000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1235) (undo-tree-id10057 . -1) (#("p" 0 1 (fontified t)) . -1236) (undo-tree-id10058 . -1) (#("o" 0 1 (fontified t)) . -1237) (undo-tree-id10059 . -1) 1238) nil (25891 49067 425599 513000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 1235)) nil (25891 49067 425594 926000) 0 nil])
([nil nil ((1235 . 1236)) nil (25891 49067 425594 180000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1234) (undo-tree-id10056 . -1) 1235) nil (25891 49067 425592 769000) 0 nil])
([nil nil ((apply -4 975 1088 undo--wrap-and-run-primitive-undo 975 1088 ((1025 . 1027) (983 . 985) 1083))) nil (25891 49067 425587 494000) 0 nil])
([nil nil ((1087 . 1095)) nil (25891 49067 425586 428000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1258) (undo-tree-id9984 . -4) (undo-tree-id9985 . -4) (undo-tree-id9986 . -4) (undo-tree-id9987 . -4) (undo-tree-id9988 . -4) (undo-tree-id9989 . -4) (undo-tree-id9990 . -4) (undo-tree-id9991 . -4) (undo-tree-id9992 . -4) (undo-tree-id9993 . -4) (undo-tree-id9994 . -4) (undo-tree-id9995 . -4) (undo-tree-id9996 . -4) (undo-tree-id9997 . -4) (undo-tree-id9998 . -4) (undo-tree-id9999 . -4) (undo-tree-id10000 . -4) (undo-tree-id10001 . -4) (undo-tree-id10002 . -4) (undo-tree-id10003 . -4) (undo-tree-id10004 . -4) (undo-tree-id10005 . -4) (undo-tree-id10006 . -4) (undo-tree-id10007 . -4) (undo-tree-id10008 . -4) (undo-tree-id10009 . -4) (undo-tree-id10010 . -4) (undo-tree-id10011 . -4) (undo-tree-id10012 . -4) (undo-tree-id10013 . -4) (undo-tree-id10014 . -4) (undo-tree-id10015 . -4) (undo-tree-id10016 . -4) (undo-tree-id10017 . -4) (undo-tree-id10018 . -4) (undo-tree-id10019 . -4) (undo-tree-id10020 . -4) (undo-tree-id10021 . -4) (undo-tree-id10022 . -4) (undo-tree-id10023 . -4) (undo-tree-id10024 . -4) (undo-tree-id10025 . -4) (undo-tree-id10026 . -4) (undo-tree-id10027 . -4) (undo-tree-id10028 . -4) (undo-tree-id10029 . -4) (undo-tree-id10030 . -4) (undo-tree-id10031 . -4) (undo-tree-id10032 . -4) (undo-tree-id10033 . -4) (undo-tree-id10034 . -4) (undo-tree-id10035 . -4) (undo-tree-id10036 . -4) (undo-tree-id10037 . -4) (undo-tree-id10038 . -4) (undo-tree-id10039 . -4) (undo-tree-id10040 . -4) (undo-tree-id10041 . -4) (undo-tree-id10042 . -4) (undo-tree-id10043 . -4) (undo-tree-id10044 . -4) (undo-tree-id10045 . -4) (undo-tree-id10046 . -4) (undo-tree-id10047 . -4) (undo-tree-id10048 . -4) (undo-tree-id10049 . -4) (undo-tree-id10050 . -4) (undo-tree-id10051 . -4) (undo-tree-id10052 . -4) (undo-tree-id10053 . -4) (undo-tree-id10054 . -4) (undo-tree-id10055 . -4) 1262) nil (25891 49067 425578 814000) 0 nil])
([nil nil ((1104 . 1109) (t 25891 49067 472733 576000)) nil (25891 49097 107222 599000) 0 nil])
([nil nil ((1168 . 1173)) nil (25891 49097 107215 621000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1478) (undo-tree-id10083 . -1) (undo-tree-id10084 . -1) (undo-tree-id10085 . -1) (undo-tree-id10086 . -1) (undo-tree-id10087 . -1) (undo-tree-id10088 . -1) (undo-tree-id10089 . -1) (undo-tree-id10090 . -1) (undo-tree-id10091 . -1) (undo-tree-id10092 . -1) (undo-tree-id10093 . -1) (undo-tree-id10094 . -1) (undo-tree-id10095 . -1) (undo-tree-id10096 . -1) (undo-tree-id10097 . -1) (undo-tree-id10098 . -1) (undo-tree-id10099 . -1) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1) (undo-tree-id10104 . -1) (undo-tree-id10105 . -1) (undo-tree-id10106 . -1) (undo-tree-id10107 . -1) (undo-tree-id10108 . -1) (undo-tree-id10109 . -1) (undo-tree-id10110 . -1) (undo-tree-id10111 . -1) (undo-tree-id10112 . -1) (undo-tree-id10113 . -1) (undo-tree-id10114 . -1) (undo-tree-id10115 . -1) (undo-tree-id10116 . -1) (undo-tree-id10117 . -1) (undo-tree-id10118 . -1) (undo-tree-id10119 . -1) (undo-tree-id10120 . -1) (undo-tree-id10121 . -1) (undo-tree-id10122 . -1) (undo-tree-id10123 . -1) (undo-tree-id10124 . -1) (undo-tree-id10125 . -1) (undo-tree-id10126 . -1) (undo-tree-id10127 . -1) (undo-tree-id10128 . -1) (undo-tree-id10129 . -1) (undo-tree-id10130 . -1) (undo-tree-id10131 . -1) (undo-tree-id10132 . -1) (undo-tree-id10133 . -1) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1) (undo-tree-id10148 . -1) (undo-tree-id10149 . -1) (undo-tree-id10150 . -1) (undo-tree-id10151 . -1) (undo-tree-id10152 . -1) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) (undo-tree-id10155 . -1) (undo-tree-id10156 . -1) (undo-tree-id10157 . -1) (undo-tree-id10158 . -1) (undo-tree-id10159 . -1) (undo-tree-id10160 . -1) (undo-tree-id10161 . -1) (undo-tree-id10162 . -1) (undo-tree-id10163 . -1) (undo-tree-id10164 . -1) (undo-tree-id10165 . -1) (undo-tree-id10166 . -1) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -1) (undo-tree-id10176 . -1) (undo-tree-id10177 . -1) (#("0" 0 1 (fontified nil)) . -1479) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (undo-tree-id10181 . -1) (undo-tree-id10182 . -1) (undo-tree-id10183 . -1) (undo-tree-id10184 . -1) (undo-tree-id10185 . -1) (undo-tree-id10186 . -1) (undo-tree-id10187 . -1) (undo-tree-id10188 . -1) (undo-tree-id10189 . -1) (undo-tree-id10190 . -1) (undo-tree-id10191 . -1) (undo-tree-id10192 . -1) (undo-tree-id10193 . -1) (undo-tree-id10194 . -1) (undo-tree-id10195 . -1) (undo-tree-id10196 . -1) (undo-tree-id10197 . -1) (undo-tree-id10198 . -1) (undo-tree-id10199 . -1) (undo-tree-id10200 . -1) (undo-tree-id10201 . -1) (undo-tree-id10202 . -1) (undo-tree-id10203 . -1) (undo-tree-id10204 . -1) (undo-tree-id10205 . -1) (undo-tree-id10206 . -1) (undo-tree-id10207 . -1) (undo-tree-id10208 . -1) (undo-tree-id10209 . -1) (undo-tree-id10210 . -1) (undo-tree-id10211 . -1) (undo-tree-id10212 . -1) (undo-tree-id10213 . -1) (undo-tree-id10214 . -1) (undo-tree-id10215 . -1) (undo-tree-id10216 . -1) (undo-tree-id10217 . -1) (undo-tree-id10218 . -1) (undo-tree-id10219 . -1) (undo-tree-id10220 . -1) (undo-tree-id10221 . -1) (undo-tree-id10222 . -1) (undo-tree-id10223 . -1) (undo-tree-id10224 . -1) (undo-tree-id10225 . -1) (undo-tree-id10226 . -1) (undo-tree-id10227 . -1) (undo-tree-id10228 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1480) (undo-tree-id10229 . -1) (undo-tree-id10230 . -1) (undo-tree-id10231 . -1) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) (undo-tree-id10240 . -1) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -1) (undo-tree-id10244 . -1) (undo-tree-id10245 . -1) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1) (undo-tree-id10270 . -1) (undo-tree-id10271 . -1) (undo-tree-id10272 . -1) (undo-tree-id10273 . -1) (undo-tree-id10274 . -1) (undo-tree-id10275 . -1) (undo-tree-id10276 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -1481) (undo-tree-id10277 . -1) (undo-tree-id10278 . -1) (undo-tree-id10279 . -1) (undo-tree-id10280 . -1) (undo-tree-id10281 . -1) (undo-tree-id10282 . -1) (undo-tree-id10283 . -1) (undo-tree-id10284 . -1) (undo-tree-id10285 . -1) (undo-tree-id10286 . -1) (undo-tree-id10287 . -1) (undo-tree-id10288 . -1) (undo-tree-id10289 . -1) (undo-tree-id10290 . -1) (undo-tree-id10291 . -1) (undo-tree-id10292 . -1) (undo-tree-id10293 . -1) (undo-tree-id10294 . -1) (undo-tree-id10295 . -1) (undo-tree-id10296 . -1) (undo-tree-id10297 . -1) (undo-tree-id10298 . -1) (undo-tree-id10299 . -1) (undo-tree-id10300 . -1) (undo-tree-id10301 . -1) (undo-tree-id10302 . -1) (undo-tree-id10303 . -1) (undo-tree-id10304 . -1) (undo-tree-id10305 . -1) (undo-tree-id10306 . -1) (undo-tree-id10307 . -1) (undo-tree-id10308 . -1) (undo-tree-id10309 . -1) (undo-tree-id10310 . -1) (undo-tree-id10311 . -1) (undo-tree-id10312 . -1) (undo-tree-id10313 . -1) (undo-tree-id10314 . -1) (undo-tree-id10315 . -1) (undo-tree-id10316 . -1) (undo-tree-id10317 . -1) (undo-tree-id10318 . -1) (undo-tree-id10319 . -1) (#("0" 0 1 (fontified t)) . -1482) (undo-tree-id10320 . -1) (undo-tree-id10321 . -1) (undo-tree-id10322 . -1) (undo-tree-id10323 . -1) (undo-tree-id10324 . -1) (undo-tree-id10325 . -1) (undo-tree-id10326 . -1) (undo-tree-id10327 . -1) (undo-tree-id10328 . -1) (undo-tree-id10329 . -1) (undo-tree-id10330 . -1) (undo-tree-id10331 . -1) (undo-tree-id10332 . -1) (undo-tree-id10333 . -1) (undo-tree-id10334 . -1) (undo-tree-id10335 . -1) (undo-tree-id10336 . -1) (undo-tree-id10337 . -1) (undo-tree-id10338 . -1) (undo-tree-id10339 . -1) (undo-tree-id10340 . -1) (undo-tree-id10341 . -1) (undo-tree-id10342 . -1) (undo-tree-id10343 . -1) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) (undo-tree-id10358 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1483) (undo-tree-id10359 . -1) (undo-tree-id10360 . -1) (undo-tree-id10361 . -1) (undo-tree-id10362 . -1) (undo-tree-id10363 . -1) (undo-tree-id10364 . -1) (undo-tree-id10365 . -1) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) 1484 (t 25891 49097 148267 41000)) nil (25891 49109 533048 829000) 0 nil])
([nil nil ((3622 . 3627) (t 25891 49109 563857 348000)) nil (25891 49170 173634 621000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -3622) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -3623) (undo-tree-id10394 . -1) (#("l" 0 1 (face font-lock-variable-name-face fontified t)) . -3624) (undo-tree-id10395 . -1) (#("f" 0 1 (face font-lock-variable-name-face fontified t)) . -3625) (undo-tree-id10396 . -1) (#("." 0 1 (fontified t)) . -3626) (undo-tree-id10397 . -1) 3627) nil (25891 49170 173628 331000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -6146) (undo-tree-id10399 . -1) (#("*" 0 1 (face font-lock-operator-face fontified t)) . -6147) (undo-tree-id10400 . -1) 6148 (t 25891 49170 214816 545000)) nil (25891 49487 234157 630000) 0 nil])
([nil nil ((6146 . 6147)) nil (25891 49487 234153 143000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6156 . 6157) (nil fontified nil 6154 . 6157) (nil fontified nil 6153 . 6154) (nil fontified nil 6149 . 6153) (6149 . 6157)) nil (25891 49487 234152 139000) 0 nil])
([nil nil ((6157 . 6160)) nil (25891 49487 234150 239000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6192) (undo-tree-id10398 . -1) 6193) nil (25891 49487 234144 661000) 0 nil])
([nil nil ((5843 . 5844) (t 25891 49487 280339 191000)) nil (25891 49511 162573 798000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -5843) (undo-tree-id10401 . -1) 5844) nil (25891 49511 162572 541000) 0 nil])
([nil nil ((5982 . 5986) (5973 . 5974)) nil (25891 49511 162563 544000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6033 . 6034) (nil fontified nil 6033 . 6034) (nil fontified nil 6032 . 6033) (nil fontified nil 6028 . 6032) (nil fontified nil 6024 . 6028) (nil fontified nil 6022 . 6024) (nil fontified nil 6017 . 6022) (nil fontified nil 6016 . 6017) (nil fontified nil 6011 . 6016) (nil fontified nil 6001 . 6011) (nil fontified nil 6000 . 6001) (nil fontified nil 5999 . 6000) (nil fontified nil 5995 . 5999) (nil fontified nil 5989 . 5995) (nil fontified nil 5985 . 5989) (nil fontified nil 5984 . 5985) (nil fontified nil 5982 . 5984) (nil fontified nil 5976 . 5982) (nil fontified nil 5974 . 5976) (5974 . 6034)) nil (25891 49511 162562 109000) 0 nil])
([nil nil ((6018 . 6025)) nil (25891 49511 162559 670000) 0 nil])
([nil nil ((6142 . 6155)) nil (25891 49511 162559 189000) 0 nil])
([nil nil ((6278 . 6287)) nil (25891 49511 162558 539000) 0 nil])
([nil nil ((nil fontified nil 6338 . 6339) (nil fontified nil 6337 . 6338) (nil fontified nil 6333 . 6337) (nil fontified nil 6329 . 6333) (nil fontified nil 6327 . 6329) (nil fontified nil 6322 . 6327) (nil fontified nil 6321 . 6322) (nil fontified nil 6316 . 6321) (nil fontified nil 6304 . 6316) (nil fontified nil 6294 . 6304) (nil fontified nil 6290 . 6294) (nil fontified nil 6289 . 6290) (nil fontified nil 6287 . 6289) (nil fontified nil 6279 . 6287) (6279 . 6339)) nil (25891 49511 162557 391000) 0 nil])
([nil nil ((6323 . 6325)) nil (25891 49511 162555 201000) 0 nil])
([nil nil ((6325 . 6330)) nil (25891 49511 162554 199000) 0 nil])
([nil nil ((6354 . 6355) 6345) nil (25891 49511 162548 533000) 0 nil])
([nil nil ((5044 . 5052) (#("        " 0 8 (fontified nil)) . 5043) (undo-tree-id10469 . -8) (undo-tree-id10470 . -8) (undo-tree-id10471 . -8) (undo-tree-id10472 . -8) (undo-tree-id10473 . -8) (5051 . 5052) (t 25891 49511 205267 570000)) nil (25891 49688 395280 853000) 0 nil])
([nil nil ((nil fontified nil 5110 . 5111) (nil fontified nil 5109 . 5110) (nil fontified nil 5105 . 5109) (nil fontified nil 5101 . 5105) (nil fontified nil 5099 . 5101) (nil fontified nil 5087 . 5099) (nil fontified nil 5086 . 5087) (nil fontified nil 5081 . 5086) (nil fontified nil 5071 . 5081) (nil fontified nil 5070 . 5071) (nil fontified nil 5069 . 5070) (nil fontified nil 5065 . 5069) (nil fontified nil 5059 . 5065) (nil fontified nil 5055 . 5059) (nil fontified nil 5054 . 5055) (nil fontified nil 5052 . 5054) (nil fontified nil 5046 . 5052) (nil fontified nil 5044 . 5046) (5044 . 5111)) nil (25891 49688 395270 30000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -5088) (undo-tree-id10459 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -5089) (undo-tree-id10460 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -5090) (undo-tree-id10461 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -5091) (undo-tree-id10462 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -5092) (undo-tree-id10463 . -1) (#("d" 0 1 (face font-lock-string-face fontified t)) . -5093) (undo-tree-id10464 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -5094) (undo-tree-id10465 . -1) (#("J" 0 1 (face font-lock-string-face fontified t)) . -5095) (undo-tree-id10466 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -5096) (undo-tree-id10467 . -1) (#("b" 0 1 (face font-lock-string-face fontified t)) . -5097) (undo-tree-id10468 . -1) 5098) nil (25891 49688 395260 948000) 0 nil])
([nil nil ((5088 . 5090)) nil (25891 49688 395238 379000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t)) . -5098) (undo-tree-id10456 . -1) (#("a" 0 1 (fontified t)) . -5099) (undo-tree-id10457 . -1) (#("b" 0 1 (fontified t)) . -5100) (undo-tree-id10458 . -1) 5101) nil (25891 49688 395236 470000) 0 nil])
([nil nil ((5102 . 5104) (#("'" 0 1 (fontified nil)) . -5102) (5098 . 5103)) nil (25891 49688 395229 823000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified nil)) . -5102) (undo-tree-id10455 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . 5103)) nil (25891 49688 395227 783000) 0 nil])
([nil nil ((5103 . 5105) (5102 . 5104) (#("\"" 0 1 (fontified nil)) . -5102) (5102 . 5103)) nil (25891 49688 395224 355000) 0 nil])
([nil nil ((5106 . 5117)) nil (25891 49688 395222 586000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -5113) (undo-tree-id10454 . -1) 5114) nil (25891 49688 395221 254000) 0 nil])
([nil nil ((5113 . 5114)) nil (25891 49688 395218 546000) 0 nil])
([nil nil ((5117 . 5118)) nil (25891 49688 395217 567000) 0 nil])
([nil nil ((#("c" 0 1 (fontified nil)) . -5117) 5118) nil (25891 49688 395216 166000) 0 nil])
([nil nil ((5117 . 5118)) nil (25891 49688 395214 956000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -5117) (undo-tree-id10453 . -1) 5118) nil (25891 49688 395213 477000) 0 nil])
([nil nil ((5117 . 5121)) nil (25891 49688 395209 962000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -5117) (undo-tree-id10449 . -1) (#("s" 0 1 (fontified t)) . -5118) (undo-tree-id10450 . -1) (#("i" 0 1 (fontified t)) . -5119) (undo-tree-id10451 . -1) (#("m" 0 1 (fontified t)) . -5120) (undo-tree-id10452 . -1) 5121) nil (25891 49688 395207 360000) 0 nil])
([nil nil ((#("\"" 0 1 (syntax-table (15) face font-lock-string-face fontified nil)) . 5119) (5118 . 5119) (5117 . 5119) (#("\"" 0 1 (fontified nil)) . -5117) (5117 . 5118)) nil (25891 49688 395198 65000) 0 nil])
([nil nil ((5118 . 5124)) nil (25891 49688 395196 123000) 0 nil])
([nil nil ((5125 . 5134)) nil (25891 49688 395195 73000) 0 nil])
([nil nil ((5134 . 5138)) nil (25891 49688 395194 32000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5397 . 5398) (nil fontified nil 5394 . 5398) (nil fontified nil 5388 . 5394) (nil fontified nil 5384 . 5388) (nil fontified nil 5383 . 5384) (nil fontified nil 5381 . 5383) (nil fontified nil 5375 . 5381) (nil fontified nil 5373 . 5375) (5373 . 5398)) nil (25891 49688 395192 216000) 0 nil])
([nil nil ((5382 . 5386) (5373 . 5374)) nil (25891 49688 395189 544000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5382) (undo-tree-id10448 . -4) 5386) nil (25891 49688 395187 582000) 0 nil])
([nil nil ((5399 . 5411)) nil (25891 49688 395184 398000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 5418) (5417 . 5418) (5416 . 5418) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5416) (5411 . 5417)) nil (25891 49688 395182 945000) 0 nil])
([nil nil ((5417 . 5424)) nil (25891 49688 395181 174000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -5423) (undo-tree-id10447 . -1) 5424) nil (25891 49688 395179 772000) 0 nil])
([nil nil ((5423 . 5429)) nil (25891 49688 395172 804000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t)) . -5428) (undo-tree-id10446 . -1) 5429) nil (25891 49688 395171 464000) 0 nil])
([nil nil ((5428 . 5432)) nil (25891 49688 395168 183000) 0 nil])
([nil nil ((#("Y" 0 1 (fontified t)) . -5431) (undo-tree-id10445 . -1) 5432) nil (25891 49688 395166 850000) 0 nil])
([nil nil ((5431 . 5432)) nil (25891 49688 395163 904000) 0 nil])
([nil nil ((5433 . 5446)) nil (25891 49688 395162 997000) 0 nil])
([nil nil ((5432 . 5434)) nil (25891 49688 395162 5000) 0 nil])
([nil nil ((5434 . 5440)) nil (25891 49688 395161 154000) 0 nil])
([nil nil ((5434 . 5441)) nil (25891 49688 395160 259000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -5440) (undo-tree-id10444 . -1) 5441) nil (25891 49688 395158 915000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . 5439)) nil (25891 49688 395155 963000) 0 nil])
([nil nil ((5434 . 5436) (#("'" 0 1 (fontified nil)) . -5434) (5434 . 5435)) nil (25891 49688 395154 550000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified nil)) . -5434) (undo-tree-id10443 . -1) (#("'" 0 1 (face font-lock-string-face fontified t)) . 5435)) nil (25891 49688 395152 503000) 0 nil])
([nil nil ((5434 . 5435)) nil (25891 49688 395149 690000) 0 nil])
([nil nil ((#("é" 0 1 (fontified t)) . -5434) (undo-tree-id10442 . -1) 5435) nil (25891 49688 395148 372000) 0 nil])
([nil nil ((5434 . 5436) (#("\"" 0 1 (fontified nil)) . -5434) (5434 . 5435)) nil (25891 49688 395145 283000) 0 nil])
([nil nil ((5435 . 5441)) nil (25891 49688 395143 977000) 0 nil])
([nil nil ((5442 . 5444)) nil (25891 49688 395143 56000) 0 nil])
([nil nil ((5417 . 5418)) nil (25891 49688 395142 108000) 0 nil])
([nil nil ((5418 . 5419)) nil (25891 49688 395141 231000) 0 nil])
([nil nil ((5418 . 5428) (5417 . 5419) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5417) (5417 . 5418)) nil (25891 49688 395139 670000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5479) (undo-tree-id10441 . -4) 5483) nil (25891 49688 395137 920000) 0 nil])
([nil nil ((nil fontified nil 5822 . 5823) (nil fontified nil 5819 . 5822) (nil fontified nil 5813 . 5819) (nil fontified nil 5809 . 5813) (nil fontified nil 5808 . 5809) (nil fontified nil 5806 . 5808) (nil fontified nil 5800 . 5806) (nil fontified nil 5798 . 5800) (5798 . 5823)) nil (25891 49688 395134 586000) 0 nil])
([nil nil ((5798 . 5799)) nil (25891 49688 395132 206000) 0 nil])
([nil nil ((5832 . 5836)) nil (25891 49688 395131 276000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 5843) (5842 . 5843) (5841 . 5843) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5841) (5836 . 5842)) nil (25891 49688 395129 726000) 0 nil])
([nil nil ((5842 . 5844)) nil (25891 49688 395127 934000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -5842) (undo-tree-id10439 . -1) (#("T" 0 1 (fontified t)) . -5843) (undo-tree-id10440 . -1) 5844) nil (25891 49688 395125 559000) 0 nil])
([nil nil ((5842 . 5845)) nil (25891 49688 395120 852000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-builtin-face fontified t)) . -5844) (undo-tree-id10438 . -1) 5845) nil (25891 49688 395119 427000) 0 nil])
([nil nil ((5844 . 5847)) nil (25891 49688 395116 733000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -5845) (undo-tree-id10436 . -1) (#("f" 0 1 (fontified t)) . -5846) (undo-tree-id10437 . -1) 5847) nil (25891 49688 395115 100000) 0 nil])
([nil nil ((5845 . 5846)) nil (25891 49688 395110 121000) 0 nil])
([nil nil ((5846 . 5856)) nil (25891 49688 395109 46000) 0 nil])
([nil nil ((5857 . 5870)) nil (25891 49688 395107 946000) 0 nil])
([nil nil ((5870 . 5876)) nil (25891 49688 395106 432000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -5874) (undo-tree-id10434 . -1) (#("t" 0 1 (fontified t)) . -5875) (undo-tree-id10435 . -1) 5876) nil (25891 49688 395104 533000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5877) (5875 . 5877) (5874 . 5876) (#("(" 0 1 (fontified nil)) . -5874) (5874 . 5875)) nil (25891 49688 395098 890000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -5874) (undo-tree-id10431 . -1) (#("à" 0 1 (fontified t)) . -5875) (undo-tree-id10432 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -5876) (undo-tree-id10433 . -1) 5877) nil (25891 49688 395096 27000) 0 nil])
([nil nil ((5874 . 5876) (#("(" 0 1 (fontified nil)) . -5874) (5874 . 5875)) nil (25891 49688 395089 117000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5874) (undo-tree-id10430 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 5875)) nil (25891 49688 395086 953000) 0 nil])
([nil nil ((5876 . 5880) (5875 . 5877) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5875) (5874 . 5876)) nil (25891 49688 395082 865000) 0 nil])
([nil nil ((5880 . 5886)) nil (25891 49688 395081 55000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -5884) (undo-tree-id10428 . -1) (#("M" 0 1 (fontified t)) . -5885) (undo-tree-id10429 . -1) 5886) nil (25891 49688 395079 124000) 0 nil])
([nil nil ((5884 . 5886)) nil (25891 49688 395073 133000) 0 nil])
([nil nil ((5887 . 5900)) nil (25891 49688 395072 98000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5907) (5906 . 5907) (5905 . 5907) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5905) (5900 . 5906)) nil (25891 49688 395070 464000) 0 nil])
([nil nil ((5906 . 5916)) nil (25891 49688 395068 554000) 0 nil])
([nil nil ((5917 . 5930)) nil (25891 49688 395067 431000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5937) (5936 . 5937) (5935 . 5937) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5935) (5930 . 5936)) nil (25891 49688 395065 446000) 0 nil])
([nil nil ((5936 . 5941)) nil (25891 49688 395063 66000) 0 nil])
([nil nil ((5941 . 5946)) nil (25891 49688 395061 455000) 0 nil])
([nil nil ((5949 . 5961) (#("            " 0 12 (fontified nil)) . 5948) (undo-tree-id10402 . -12) (undo-tree-id10403 . -12) (undo-tree-id10404 . -12) (undo-tree-id10405 . -12) (undo-tree-id10406 . -12) (undo-tree-id10407 . -12) (undo-tree-id10408 . -12) (undo-tree-id10409 . -12) (undo-tree-id10410 . -12) (undo-tree-id10411 . -12) (undo-tree-id10412 . -12) (undo-tree-id10413 . -12) (undo-tree-id10414 . -12) (undo-tree-id10415 . -12) (undo-tree-id10416 . -12) (undo-tree-id10417 . -12) (undo-tree-id10418 . -12) (undo-tree-id10419 . -12) (undo-tree-id10420 . -12) (undo-tree-id10421 . -12) (undo-tree-id10422 . -12) (undo-tree-id10423 . -12) (undo-tree-id10424 . -12) (undo-tree-id10425 . -12) (undo-tree-id10426 . -12) (undo-tree-id10427 . -12) (5947 . 5961)) nil (25891 49688 395052 78000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5144) (undo-tree-id10514 . -4) 5148 (t 25891 49688 466049 497000)) nil (25891 49752 87362 644000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -5139) (undo-tree-id10511 . -1) (undo-tree-id10512 . -1) (undo-tree-id10513 . -1) 5140) nil (25891 49752 87360 267000) 0 nil])
([nil nil ((5043 . 5052)) nil (25891 49752 87355 854000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5068 . 5069) (nil fontified nil 5065 . 5069) (nil fontified nil 5059 . 5065) (nil fontified nil 5055 . 5059) (nil fontified nil 5054 . 5055) (nil fontified nil 5052 . 5054) (nil fontified nil 5046 . 5052) (nil fontified nil 5044 . 5046) (5044 . 5069)) nil (25891 49752 87354 343000) 0 nil])
([nil nil ((5077 . 5081)) nil (25891 49752 87351 976000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 5088) (5087 . 5088) (5086 . 5088) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -5086) (5081 . 5087)) nil (25891 49752 87350 560000) 0 nil])
([nil nil ((5088 . 5090) (5087 . 5089) (#("'" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5087) (5087 . 5088)) nil (25891 49752 87348 863000) 0 nil])
([nil nil ((5091 . 5101)) nil (25891 49752 87347 410000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -5100) (undo-tree-id10510 . -1) 5101) nil (25891 49752 87346 126000) 0 nil])
([nil nil ((5098 . 5101) (5097 . 5099) (#("\"" 0 1 (fontified nil)) . -5097) (5097 . 5098)) nil (25891 49752 87343 526000) 0 nil])
([nil nil ((#("Y" 0 1 (face font-lock-string-face fontified t)) . -5100) (undo-tree-id10509 . -1) 5101) nil (25891 49752 87341 363000) 0 nil])
([nil nil ((5100 . 5101)) nil (25891 49752 87339 156000) 0 nil])
([nil nil ((5102 . 5104)) nil (25891 49752 87338 181000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -5090) (undo-tree-id10508 . -1) 5091) nil (25891 49752 87337 131000) 0 nil])
([nil nil ((5090 . 5091)) nil (25891 49752 87335 227000) 0 nil])
([nil nil ((#("'" 0 1 (face font-lock-string-face fontified t)) . -5087) 5088) nil (25891 49752 87334 6000) 0 nil])
([nil nil ((5087 . 5089) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -5087) (5087 . 5088)) nil (25891 49752 87332 756000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . 5088)) nil (25891 49752 87331 231000) 0 nil])
([nil nil ((5108 . 5121)) nil (25891 49752 87330 316000) 0 nil])
([nil nil ((#("        if self.VERBOSE:
            print(\"DT\", DT, \"TAU\", TAU)
" 0 2 (fontified t) 2 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 15 (face font-lock-keyword-face fontified t) 15 21 (fontified t) 21 24 (fontified t) 24 25 (rear-nonsticky t fontified t) 25 37 (fontified t) 37 42 (face font-lock-builtin-face fontified t) 42 43 (face (rainbow-delimiters-depth-1-face) fontified t) 43 44 (face font-lock-string-face fontified t) 44 46 (face font-lock-string-face fontified t) 46 47 (face font-lock-string-face fontified t) 47 53 (fontified t) 53 54 (face font-lock-string-face fontified t) 54 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 60 (fontified t) 60 63 (fontified t) 63 64 (face (rainbow-delimiters-depth-1-face) fontified t) 64 65 (fontified t)) . 5044) (undo-tree-id10507 . -65)) nil (25891 49752 87329 18000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5043) (undo-tree-id10504 . -1) (undo-tree-id10505 . -1) (undo-tree-id10506 . -1) 5044) nil (25891 49752 87326 902000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5444 . 5445) (nil fontified nil 5444 . 5445) (nil fontified nil 5443 . 5444) (nil fontified nil 5440 . 5443) (nil fontified nil 5438 . 5440) (nil fontified nil 5437 . 5438) (nil fontified nil 5434 . 5437) (nil fontified nil 5433 . 5434) (nil fontified nil 5427 . 5433) (nil fontified nil 5426 . 5427) (nil fontified nil 5424 . 5426) (nil fontified nil 5423 . 5424) (nil fontified nil 5422 . 5423) (nil fontified nil 5417 . 5422) (nil fontified nil 5405 . 5417) (nil fontified nil 5404 . 5405) (nil fontified nil 5401 . 5404) (nil fontified nil 5395 . 5401) (nil fontified nil 5391 . 5395) (nil fontified nil 5390 . 5391) (nil fontified nil 5388 . 5390) (nil fontified nil 5382 . 5388) (nil fontified nil 5380 . 5382) (5380 . 5445)) nil (25891 49752 87321 690000) 0 nil])
([nil nil ((5381 . 5393) (#("            " 0 12 (fontified nil)) . 5380) (undo-tree-id10474 . -12) (undo-tree-id10475 . -12) (undo-tree-id10476 . -12) (undo-tree-id10477 . -12) (undo-tree-id10478 . -12) (undo-tree-id10479 . -12) (undo-tree-id10480 . -12) (undo-tree-id10481 . -12) (undo-tree-id10482 . -12) (undo-tree-id10483 . -12) (undo-tree-id10484 . -12) (undo-tree-id10485 . -12) (undo-tree-id10486 . -12) (undo-tree-id10487 . -12) (undo-tree-id10488 . -12) (undo-tree-id10489 . -12) (undo-tree-id10490 . -12) (undo-tree-id10491 . -12) (undo-tree-id10492 . -12) (undo-tree-id10493 . -12) (undo-tree-id10494 . -12) (undo-tree-id10495 . -12) (undo-tree-id10496 . -12) (undo-tree-id10497 . -12) (undo-tree-id10498 . -12) (undo-tree-id10499 . -12) (undo-tree-id10500 . -12) (undo-tree-id10501 . -12) (undo-tree-id10502 . -12) (undo-tree-id10503 . -12) (5379 . 5393)) nil (25891 49752 87313 29000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -5380) (undo-tree-id10515 . -1) (undo-tree-id10516 . -1) (undo-tree-id10517 . -1) (undo-tree-id10518 . -1) (undo-tree-id10519 . -1) (undo-tree-id10520 . -1) (undo-tree-id10521 . -1) (undo-tree-id10522 . -1) (undo-tree-id10523 . -1) (undo-tree-id10524 . -1) (undo-tree-id10525 . -1) (undo-tree-id10526 . -1) (undo-tree-id10527 . -1) (undo-tree-id10528 . -1) (undo-tree-id10529 . -1) (undo-tree-id10530 . -1) (undo-tree-id10531 . -1) (undo-tree-id10532 . -1) (undo-tree-id10533 . -1) (undo-tree-id10534 . -1) 5381 (t 25891 49752 127943 462000)) nil (25891 49754 741572 680000) 0 nil])
([nil nil ((5453 . 5458) (t 25891 49754 784196 727000)) nil (25891 49775 772984 521000) 0 nil])
([nil nil ((5442 . 5447)) nil (25891 49775 772978 827000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 3783) (3782 . 3783) (3781 . 3783) (#("(" 0 1 (fontified nil)) . -3781) (3776 . 3782) (t 25891 49775 810217 867000)) nil (25891 50031 737205 166000) 0 nil])
([nil nil ((3782 . 3787)) nil (25891 50031 737198 507000) 0 nil])
([nil nil ((3788 . 3801)) nil (25891 50031 737190 208000) 0 nil])
([nil nil ((#("            print(theta)
" 0 12 (fontified t) 12 17 (face font-lock-builtin-face fontified t) 17 18 (face (rainbow-delimiters-depth-1-face) fontified t) 18 23 (fontified t) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t) 24 25 (fontified t)) . 3764) (undo-tree-id10535 . -25) (t 25891 50031 796742 380000)) nil (25891 50049 415227 314000) 0 nil])
([nil nil ((6025 . 6026) (t 25891 50049 452709 958000)) nil (25891 50283 799826 948000) 0 nil])
([nil nil ((#("<" 0 1 (face font-lock-operator-face fontified t)) . -6025) (undo-tree-id10536 . -1) 6026) nil (25891 50283 799819 500000) 0 nil])
([nil nil ((4396 . 4398) (#("(" 0 1 (fontified nil)) . -4396) (4396 . 4397) (t 25891 50283 855376 347000)) nil (25891 50457 505799 3000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4396) (undo-tree-id10538 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4397)) nil (25891 50457 505795 327000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4398) (4397 . 4398) (4396 . 4398) (#("(" 0 1 (fontified nil)) . -4396) (4396 . 4397)) nil (25891 50457 505787 228000) 0 nil])
([nil nil ((4397 . 4398)) nil (25891 50457 505783 329000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -4397) (undo-tree-id10537 . -1) 4398) nil (25891 50457 505780 925000) 0 nil])
([nil nil ((4397 . 4402)) nil (25891 50457 505767 788000) 0 nil])
([nil nil ((4403 . 4404)) nil (25891 50457 505760 957000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-builtin-face fontified nil)) . -4400) (undo-tree-id10546 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified nil)) . -4401) (undo-tree-id10547 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4402) (undo-tree-id10548 . -1) (#(" " 0 1 (fontified t)) . -4403) (undo-tree-id10549 . -1) 4404 (t 25891 50457 569351 357000)) nil (25891 50481 974348 914000) 0 nil])
([nil nil ((#("flo" 0 3 (face font-lock-builtin-face fontified nil)) . -4397) (undo-tree-id10545 . -3) 4400) nil (25891 50481 974344 100000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4395) (undo-tree-id10539 . -1) (undo-tree-id10540 . -1) (undo-tree-id10541 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4396) (undo-tree-id10542 . -1) (undo-tree-id10543 . -1) (undo-tree-id10544 . -1) 4397) nil (25891 50481 974341 436000) 0 nil])
([nil nil ((4395 . 4396)) nil (25891 50481 974319 828000) 0 nil])
([nil nil ((3667 . 3669) (t 25891 50482 10943 12000)) nil (25891 50512 667894 177000) 0 nil])
([nil nil ((3745 . 3747)) nil (25891 50512 667888 979000) 0 nil])
([nil nil ((4962 . 4964) (t 25891 50512 704989 918000)) nil (25891 50517 462691 623000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5057) (undo-tree-id10561 . -4) 5061 (t 25891 50517 501314 243000)) nil (25891 50575 361504 47000) 0 nil])
([nil nil ((5722 . 5724)) nil (25891 50575 361499 739000) 0 nil])
([nil nil ((5818 . 5820)) nil (25891 50575 361497 612000) 0 nil])
([nil nil ((#("FloatTensor" 0 11 (fontified t src-block t font-lock-fontified t gptel response)) . 6236)) nil (25891 50575 361495 184000) 0 nil])
([nil nil ((6236 . 6242)) nil (25891 50575 361492 657000) 0 nil])
([nil nil ((6251 . 6257)) nil (25891 50575 361489 136000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6255) (undo-tree-id10559 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6256) (undo-tree-id10560 . -1) 6257) nil (25891 50575 361483 666000) 0 nil])
([nil nil ((6255 . 6265)) nil (25891 50575 361468 390000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6264) (undo-tree-id10558 . -1) 6265) nil (25891 50575 361466 87000) 0 nil])
([nil nil ((6264 . 6272)) nil (25891 50575 361454 739000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . 6656)) nil (25891 50575 361450 942000) 0 nil])
([nil nil ((6656 . 6657)) nil (25891 50575 361446 995000) 0 nil])
([nil nil ((#("Tensor" 0 5 (fontified t src-block t font-lock-fontified t gptel response) 5 6 (fontified t src-block t font-lock-fontified t gptel response)) . 6661)) nil (25891 50575 361443 8000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6656) (undo-tree-id10553 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . -6657) (undo-tree-id10554 . -1) (#("o" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . -6658) (undo-tree-id10555 . -1) (#("a" 0 1 (face font-lock-builtin-face fontified nil src-block t font-lock-fontified t gptel response)) . -6659) (undo-tree-id10556 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t src-block t font-lock-fontified t gptel response)) . -6660) (undo-tree-id10557 . -1) 6661) nil (25891 50575 361436 417000) 0 nil])
([nil nil ((6656 . 6662)) nil (25891 50575 361418 304000) 0 nil])
([nil nil ((6671 . 6675)) nil (25891 50575 361416 902000) 0 nil])
([nil nil ((6675 . 6684)) nil (25891 50575 361415 423000) 0 nil])
([nil nil ((6679 . 6685)) nil (25891 50575 361413 687000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6682) (undo-tree-id10550 . -1) (#("h" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6683) (undo-tree-id10551 . -1) (#("j" 0 1 (fontified t src-block t font-lock-fontified t gptel response)) . -6684) (undo-tree-id10552 . -1) 6685) nil (25891 50575 361405 863000) 0 nil])
([nil nil ((6682 . 6685)) nil (25891 50575 361371 952000) 0 nil])
([nil nil ((6690 . 6692)) nil (25891 50575 361360 762000) 0 nil])
([nil nil ((nil gptel response 6631 . 6636) (nil font-lock-fontified t 6631 . 6636) (nil src-block t 6631 . 6636) (nil fontified t 6631 . 6636) (#("torch.float64" 0 6 (fontified t src-block t font-lock-fontified t gptel response) 6 13 (fontified t src-block t font-lock-fontified t gptel response)) . -6631) (6644 . 6649) (nil gptel response 6219 . 6224) (nil font-lock-fontified t 6219 . 6224) (nil src-block t 6219 . 6224) (nil fontified t 6219 . 6224) (#("torch.float64" 0 6 (fontified t src-block t font-lock-fontified t gptel response) 6 13 (fontified t src-block t font-lock-fontified t gptel response)) . -6219) (6232 . 6237) (nil gptel response 5775 . 5780) (nil font-lock-fontified t 5775 . 5780) (nil src-block t 5775 . 5780) (nil fontified t 5775 . 5780) (#("torch.float64" 0 5 (fontified t src-block t font-lock-fontified t gptel response) 5 6 (fontified t src-block t font-lock-fontified t gptel response) 6 13 (fontified t src-block t font-lock-fontified t gptel response)) . -5775) (5788 . 5793) (nil gptel response 5687 . 5692) (nil font-lock-fontified t 5687 . 5692) (nil src-block t 5687 . 5692) (nil fontified t 5687 . 5692) (#("torch.float64" 0 6 (fontified t src-block t font-lock-fontified t gptel response) 6 13 (fontified t src-block t font-lock-fontified t gptel response)) . -5687) (5700 . 5705) (nil gptel response 4935 . 4940) (nil font-lock-fontified t 4935 . 4940) (nil src-block t 4935 . 4940) (nil fontified t 4935 . 4940) (#("torch.float64" 0 5 (fontified t src-block t font-lock-fontified t gptel response) 5 6 (fontified t src-block t font-lock-fontified t gptel response) 6 13 (fontified t src-block t font-lock-fontified t gptel response)) . -4935) (4948 . 4953) (nil fontified t 3726 . 3731) (#("torch.float64" 0 5 (fontified t) 5 6 (fontified t) 6 13 (fontified t)) . -3726) (3739 . 3744) (nil fontified t 3656 . 3661) (t 25891 50575 437316 418000) (#("torch.float64" 0 6 (fontified t) 6 13 (fontified t)) . -3656) (t 25891 50575 437316 418000) (3669 . 3674) (t 25891 50575 437316 418000)) nil (25891 50955 470221 895000) 0 nil])
([nil nil ((3346 . 3358) (#("        " 0 8 (fontified nil)) . 3345) (undo-tree-id10613 . -8) (3353 . 3354) (t 25891 50955 511832 136000)) nil (25891 51029 257418 670000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3354) (undo-tree-id10612 . -4) 3358) nil (25891 51029 257414 876000) 0 nil])
([nil nil ((3354 . 3362)) nil (25891 51029 257411 348000) 0 nil])
([nil nil ((3345 . 3358)) nil (25891 51029 257409 527000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3354) (undo-tree-id10611 . -4) 3358) nil (25891 51029 257407 685000) 0 nil])
([nil nil ((3354 . 3367)) nil (25891 51029 257405 714000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -3366) (undo-tree-id10610 . -1) 3367) nil (25891 51029 257404 461000) 0 nil])
([nil nil ((3366 . 3370)) nil (25891 51029 257402 181000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t)) . -3368) (undo-tree-id10608 . -1) (#("N" 0 1 (fontified t)) . -3369) (undo-tree-id10609 . -1) 3370) nil (25891 51029 257400 564000) 0 nil])
([nil nil ((3368 . 3379)) nil (25891 51029 257396 714000) 0 nil])
([nil nil ((3396 . 3404) (#(" " 0 1 (fontified nil)) . 3395) (undo-tree-id10607 . -1) (3396 . 3397)) nil (25891 51029 257395 344000) 0 nil])
([nil nil ((3388 . 3392)) nil (25891 51029 257392 774000) 0 nil])
([nil nil ((3399 . 3411)) nil (25891 51029 257391 949000) 0 nil])
([nil nil ((3411 . 3424)) nil (25891 51029 257390 843000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3420) (undo-tree-id10562 . -4) (undo-tree-id10563 . -4) (undo-tree-id10564 . -4) (undo-tree-id10565 . -4) (undo-tree-id10566 . -4) (undo-tree-id10567 . -4) (undo-tree-id10568 . -4) (undo-tree-id10569 . -4) (undo-tree-id10570 . -4) (undo-tree-id10571 . -4) (undo-tree-id10572 . -4) (undo-tree-id10573 . -4) (undo-tree-id10574 . -4) (undo-tree-id10575 . -4) (undo-tree-id10576 . -4) (undo-tree-id10577 . -4) (undo-tree-id10578 . -4) (undo-tree-id10579 . -4) (undo-tree-id10580 . -4) (undo-tree-id10581 . -4) (undo-tree-id10582 . -4) (undo-tree-id10583 . -4) (undo-tree-id10584 . -4) (undo-tree-id10585 . -4) (undo-tree-id10586 . -4) (undo-tree-id10587 . -4) (undo-tree-id10588 . -4) (undo-tree-id10589 . -4) (undo-tree-id10590 . -4) (undo-tree-id10591 . -4) (undo-tree-id10592 . -4) (undo-tree-id10593 . -4) (undo-tree-id10594 . -4) (undo-tree-id10595 . -4) (undo-tree-id10596 . -4) (undo-tree-id10597 . -4) (undo-tree-id10598 . -4) (undo-tree-id10599 . -4) (undo-tree-id10600 . -4) (undo-tree-id10601 . -4) (undo-tree-id10602 . -4) (undo-tree-id10603 . -4) (undo-tree-id10604 . -4) (undo-tree-id10605 . -4) (undo-tree-id10606 . -4) (3424 . 3429)) nil (25891 51029 257387 107000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3457 . 3458) (nil fontified nil 3457 . 3458) (nil fontified nil 3452 . 3457) (nil fontified nil 3445 . 3452) (nil fontified nil 3444 . 3445) (nil fontified nil 3443 . 3444) (nil fontified nil 3438 . 3443) (nil fontified nil 3426 . 3438) (3426 . 3458)) nil (25891 51029 257314 766000) 0 nil])
([nil nil ((3457 . 3459)) nil (25891 51029 257305 682000) 0 nil])
([nil nil ((3392 . 3395) (t 25891 51029 305904 505000)) nil (25891 51063 864847 25000) 0 nil])
([nil nil ((3395 . 3397)) nil (25891 51063 864846 282000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -3396) (undo-tree-id10705 . -1) 3397) nil (25891 51063 864845 249000) 0 nil])
([nil nil ((3396 . 3397)) nil (25891 51063 864843 128000) 0 nil])
([nil nil ((3443 . 3448)) nil (25891 51063 864842 321000) 0 nil])
([nil nil ((3357 . 3360)) nil (25891 51063 864841 666000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -3358) (undo-tree-id10614 . -1) (undo-tree-id10615 . -1) (undo-tree-id10616 . -1) (undo-tree-id10617 . -1) (undo-tree-id10618 . -1) (undo-tree-id10619 . -1) (undo-tree-id10620 . -1) (undo-tree-id10621 . -1) (undo-tree-id10622 . -1) (undo-tree-id10623 . -1) (undo-tree-id10624 . -1) (undo-tree-id10625 . -1) (undo-tree-id10626 . -1) (undo-tree-id10627 . -1) (undo-tree-id10628 . -1) (undo-tree-id10629 . -1) (undo-tree-id10630 . -1) (undo-tree-id10631 . -1) (undo-tree-id10632 . -1) (undo-tree-id10633 . -1) (undo-tree-id10634 . -1) (undo-tree-id10635 . -1) (undo-tree-id10636 . -1) (undo-tree-id10637 . -1) (undo-tree-id10638 . -1) (undo-tree-id10639 . -1) (undo-tree-id10640 . -1) (undo-tree-id10641 . -1) (undo-tree-id10642 . -1) (undo-tree-id10643 . -1) (undo-tree-id10644 . -1) (undo-tree-id10645 . -1) (undo-tree-id10646 . -1) (undo-tree-id10647 . -1) (undo-tree-id10648 . -1) (undo-tree-id10649 . -1) (undo-tree-id10650 . -1) (undo-tree-id10651 . -1) (undo-tree-id10652 . -1) (undo-tree-id10653 . -1) (undo-tree-id10654 . -1) (undo-tree-id10655 . -1) (undo-tree-id10656 . -1) (undo-tree-id10657 . -1) (undo-tree-id10658 . -1) (undo-tree-id10659 . -1) (undo-tree-id10660 . -1) (undo-tree-id10661 . -1) (undo-tree-id10662 . -1) (undo-tree-id10663 . -1) (undo-tree-id10664 . -1) (undo-tree-id10665 . -1) (undo-tree-id10666 . -1) (undo-tree-id10667 . -1) (undo-tree-id10668 . -1) (undo-tree-id10669 . -1) (undo-tree-id10670 . -1) (undo-tree-id10671 . -1) (undo-tree-id10672 . -1) (undo-tree-id10673 . -1) (undo-tree-id10674 . -1) (undo-tree-id10675 . -1) (undo-tree-id10676 . -1) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (undo-tree-id10679 . -1) (#("e" 0 1 (fontified t)) . -3359) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) 3360) nil (25891 51063 864836 911000) 0 nil])
([nil nil ((3358 . 3362)) nil (25891 51063 864697 186000) 0 nil])
([nil nil ((3791 . 3792) (t 25891 51063 908853 665000)) nil (25891 51084 960095 938000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3791) (undo-tree-id10706 . -1) 3792) nil (25891 51084 960094 242000) 0 nil])
([nil nil (("FLOAT" . -6791) (6796 . 6806) ("FLOAT" . -6374) (6379 . 6389) ("FLOAT" . -5925) (5930 . 5940) ("FLOAT" . -5832) (5837 . 5847) (nil fontified t 5080 . 5085) (#("FLOAT" 0 5 (fontified t)) . -5075) (5080 . 5090) (nil fontified t 3866 . 3871) (#("FLOAT" 0 5 (fontified t)) . -3861) (3866 . 3876) (nil fontified t 3791 . 3796) (#("FLOAT" 0 5 (fontified t)) . -3786) (3791 . 3801)) nil (25891 51084 960077 245000) 0 nil])
([nil nil ((4504 . 4506) (#("(" 0 1 (fontified nil)) . -4504) (4493 . 4505) (t 25891 51085 2165 91000)) nil (25891 51186 629496 217000) 0 nil])
([nil nil ((4539 . 4540)) nil (25891 51186 629494 579000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4505)) nil (25891 51186 629492 65000) 0 nil])
([nil nil ((4538 . 4541)) nil (25891 51186 629484 777000) 0 nil])
([nil nil ((4540 . 4545) (t 25891 51186 684597 373000)) nil (25891 51260 903293 766000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -4544) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1) (undo-tree-id10723 . -1) (undo-tree-id10724 . -1) (undo-tree-id10725 . -1) (undo-tree-id10726 . -1) (undo-tree-id10727 . -1) (undo-tree-id10728 . -1) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) 4545) nil (25891 51260 903291 533000) 0 nil])
([nil nil ((4544 . 4548)) nil (25891 51260 903267 600000) 0 nil])
([nil nil ((#("e" 0 1 (fontified nil)) . -4547) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) 4548) nil (25891 51260 903265 396000) 0 nil])
([nil nil ((4547 . 4549)) nil (25891 51260 903247 785000) 0 nil])
([nil nil ((4552 . 4564) (t 25891 51260 944368 160000)) nil (25891 51289 109270 145000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -4560) (undo-tree-id10741 . -4) 4564) nil (25891 51289 109267 134000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . -4549) (undo-tree-id10734 . -1) (undo-tree-id10735 . -1) (undo-tree-id10736 . -1) (undo-tree-id10737 . -1) (undo-tree-id10738 . -1) (undo-tree-id10739 . -1) (undo-tree-id10740 . -1) 4550) nil (25891 51289 109259 926000) 0 nil])
([nil nil ((4549 . 4550)) nil (25891 51289 109235 985000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . -4549) (undo-tree-id10742 . -1) (undo-tree-id10743 . -1) (undo-tree-id10744 . -1) (undo-tree-id10745 . -1) (undo-tree-id10746 . -1) (undo-tree-id10747 . -1) (undo-tree-id10748 . -1) (undo-tree-id10749 . -1) 4550 (t 25891 51289 147226 387000)) nil (25891 51301 928939 948000) 0 nil])
([nil nil ((4549 . 4550)) nil (25891 51301 928917 864000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t)) . -4549) (undo-tree-id10750 . -1) (undo-tree-id10751 . -1) (undo-tree-id10752 . -1) (undo-tree-id10753 . -1) (undo-tree-id10754 . -1) (undo-tree-id10755 . -1) (undo-tree-id10756 . -1) (undo-tree-id10757 . -1) 4550 (t 25891 51301 962780 2000)) nil (25891 51317 227830 629000) 0 nil])
([nil nil ((4549 . 4550)) nil (25891 51317 227791 12000) 0 nil])
([nil nil ((apply -8 5549 5739 undo--wrap-and-run-primitive-undo 5549 5739 ((5664 . 5666) (5637 . 5639) (5584 . 5586) (5557 . 5559) 5722))) nil (25891 51432 877706 773000) 0 nil])
([nil nil ((5308 . 5320) (#("    " 0 4 (fontified nil)) . 5307) (undo-tree-id10758 . -4) (undo-tree-id10759 . -4) (undo-tree-id10760 . -4) (undo-tree-id10761 . -4) (undo-tree-id10762 . -4) (undo-tree-id10763 . -4) (undo-tree-id10764 . -4) (undo-tree-id10765 . -4) (undo-tree-id10766 . -4) (undo-tree-id10767 . -4) (undo-tree-id10768 . -4) (undo-tree-id10769 . -4) (undo-tree-id10770 . -4) (undo-tree-id10771 . -4) (undo-tree-id10772 . -4) (undo-tree-id10773 . -4) (undo-tree-id10774 . -4) (undo-tree-id10775 . -4) (undo-tree-id10776 . -4) (undo-tree-id10777 . -4) (undo-tree-id10778 . -4) (undo-tree-id10779 . -4) (undo-tree-id10780 . -4) (undo-tree-id10781 . -4) (undo-tree-id10782 . -4) (undo-tree-id10783 . -4) (undo-tree-id10784 . -4) (undo-tree-id10785 . -4) (undo-tree-id10786 . -4) (undo-tree-id10787 . -4) (undo-tree-id10788 . -4) (undo-tree-id10789 . -4) (5311 . 5312)) nil (25891 51432 877703 24000) 0 nil])
([nil nil ((apply -4 5212 5325 undo--wrap-and-run-primitive-undo 5212 5325 ((5247 . 5249) (5220 . 5222) 5212))) nil (25891 51432 877628 190000) 0 nil])
([nil nil ((apply -4 6933 7013 undo--wrap-and-run-primitive-undo 6933 7013 ((6968 . 6970) (6941 . 6943) 7000))) nil (25891 51453 371100 930000) 0 nil])
([nil nil ((apply -4 6615 6699 undo--wrap-and-run-primitive-undo 6615 6699 ((6650 . 6652) (6623 . 6625) 6682))) nil (25891 51453 371094 292000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . 202) (201 . 202) (200 . 202) (#("(" 0 1 (fontified nil)) . -200) (197 . 201) (t 25891 51453 420198 955000)) nil (25891 51534 917443 18000) 0 nil])
([nil nil ((201 . 212)) nil (25891 51534 917436 32000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -216) (undo-tree-id10790 . -1) (undo-tree-id10791 . -1) (undo-tree-id10792 . -1) (undo-tree-id10793 . -1) (undo-tree-id10794 . -1) (undo-tree-id10795 . -1) (undo-tree-id10796 . -1) (undo-tree-id10797 . -1) (undo-tree-id10798 . -1) (undo-tree-id10799 . -1) (undo-tree-id10800 . -1) (undo-tree-id10801 . -1) (undo-tree-id10802 . -1) (undo-tree-id10803 . -1) (undo-tree-id10804 . -1) (undo-tree-id10805 . -1) (undo-tree-id10806 . -1) (undo-tree-id10807 . -1) (undo-tree-id10808 . -1) (#("p" 0 1 (fontified t)) . -217) (undo-tree-id10809 . -1) 218 (t 25891 51534 960313 842000)) nil (25891 51554 626083 969000) 0 nil])
([nil nil ((216 . 221)) nil (25891 51554 626034 590000) 0 nil])
([nil nil ((183 . 184) (t 25891 51554 676453 695000)) nil (25891 51563 415950 496000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t)) . -183) (undo-tree-id10810 . -1) (undo-tree-id10811 . -1) (undo-tree-id10812 . -1) (undo-tree-id10813 . -1) (undo-tree-id10814 . -1) (undo-tree-id10815 . -1) (undo-tree-id10816 . -1) (undo-tree-id10817 . -1) (undo-tree-id10818 . -1) (undo-tree-id10819 . -1) (undo-tree-id10820 . -1) (undo-tree-id10821 . -1) (undo-tree-id10822 . -1) (undo-tree-id10823 . -1) (undo-tree-id10824 . -1) (undo-tree-id10825 . -1) (undo-tree-id10826 . -1) (undo-tree-id10827 . -1) (undo-tree-id10828 . -1) (undo-tree-id10829 . -1) (undo-tree-id10830 . -1) (undo-tree-id10831 . -1) (undo-tree-id10832 . -1) (undo-tree-id10833 . -1) (undo-tree-id10834 . -1) (undo-tree-id10835 . -1) (undo-tree-id10836 . -1) (undo-tree-id10837 . -1) (undo-tree-id10838 . -1) (undo-tree-id10839 . -1) (undo-tree-id10840 . -1) (undo-tree-id10841 . -1) (undo-tree-id10842 . -1) (undo-tree-id10843 . -1) (undo-tree-id10844 . -1) (undo-tree-id10845 . -1) (undo-tree-id10846 . -1) (undo-tree-id10847 . -1) (undo-tree-id10848 . -1) 184) nil (25891 51563 415947 631000) 0 nil])
([nil nil ((183 . 185)) nil (25891 51563 415894 597000) 0 nil])
([nil nil ((#("b" 0 1 (fontified nil)) . -4558) (undo-tree-id10850 . -1) (undo-tree-id10851 . -1) (undo-tree-id10852 . -1) (undo-tree-id10853 . -1) (undo-tree-id10854 . -1) (undo-tree-id10855 . -1) (undo-tree-id10856 . -1) (undo-tree-id10857 . -1) (undo-tree-id10858 . -1) (undo-tree-id10859 . -1) (undo-tree-id10860 . -1) (undo-tree-id10861 . -1) (undo-tree-id10862 . -1) (undo-tree-id10863 . -1) (undo-tree-id10864 . -1) (undo-tree-id10865 . -1) (undo-tree-id10866 . -1) (undo-tree-id10867 . -1) (undo-tree-id10868 . -1) (undo-tree-id10869 . -1) (undo-tree-id10870 . -1) (undo-tree-id10871 . -1) (#("," 0 1 (fontified nil)) . -4559) (undo-tree-id10872 . -1) (undo-tree-id10873 . -1) (undo-tree-id10874 . -1) (undo-tree-id10875 . -1) (undo-tree-id10876 . -1) (undo-tree-id10877 . -1) (undo-tree-id10878 . -1) (undo-tree-id10879 . -1) (undo-tree-id10880 . -1) (undo-tree-id10881 . -1) (undo-tree-id10882 . -1) (undo-tree-id10883 . -1) (undo-tree-id10884 . -1) (undo-tree-id10885 . -1) (undo-tree-id10886 . -1) (undo-tree-id10887 . -1) (undo-tree-id10888 . -1) (undo-tree-id10889 . -1) (#(" " 0 1 (fontified nil)) . -4560) (undo-tree-id10890 . -1) (undo-tree-id10891 . -1) (undo-tree-id10892 . -1) (undo-tree-id10893 . -1) (undo-tree-id10894 . -1) (undo-tree-id10895 . -1) (undo-tree-id10896 . -1) (undo-tree-id10897 . -1) (undo-tree-id10898 . -1) (undo-tree-id10899 . -1) (undo-tree-id10900 . -1) (undo-tree-id10901 . -1) (undo-tree-id10902 . -1) (undo-tree-id10903 . -1) (undo-tree-id10904 . -1) (undo-tree-id10905 . -1) (undo-tree-id10906 . -1) (undo-tree-id10907 . -1) (#("d" 0 1 (fontified nil)) . -4561) (undo-tree-id10908 . -1) (undo-tree-id10909 . -1) (undo-tree-id10910 . -1) (undo-tree-id10911 . -1) (undo-tree-id10912 . -1) (undo-tree-id10913 . -1) (undo-tree-id10914 . -1) (undo-tree-id10915 . -1) (undo-tree-id10916 . -1) (undo-tree-id10917 . -1) (undo-tree-id10918 . -1) (undo-tree-id10919 . -1) (undo-tree-id10920 . -1) (undo-tree-id10921 . -1) (undo-tree-id10922 . -1) (undo-tree-id10923 . -1) (undo-tree-id10924 . -1) (undo-tree-id10925 . -1) (#("e" 0 1 (fontified nil)) . -4562) (undo-tree-id10926 . -1) (undo-tree-id10927 . -1) (undo-tree-id10928 . -1) (undo-tree-id10929 . -1) (undo-tree-id10930 . -1) (undo-tree-id10931 . -1) (undo-tree-id10932 . -1) (undo-tree-id10933 . -1) (undo-tree-id10934 . -1) (undo-tree-id10935 . -1) (undo-tree-id10936 . -1) (undo-tree-id10937 . -1) (undo-tree-id10938 . -1) (undo-tree-id10939 . -1) (undo-tree-id10940 . -1) (undo-tree-id10941 . -1) (undo-tree-id10942 . -1) (undo-tree-id10943 . -1) (#("c" 0 1 (fontified nil)) . -4563) (undo-tree-id10944 . -1) (undo-tree-id10945 . -1) (undo-tree-id10946 . -1) (undo-tree-id10947 . -1) (undo-tree-id10948 . -1) (undo-tree-id10949 . -1) (undo-tree-id10950 . -1) (undo-tree-id10951 . -1) (undo-tree-id10952 . -1) (undo-tree-id10953 . -1) (undo-tree-id10954 . -1) (undo-tree-id10955 . -1) (undo-tree-id10956 . -1) (undo-tree-id10957 . -1) (undo-tree-id10958 . -1) (undo-tree-id10959 . -1) (undo-tree-id10960 . -1) (undo-tree-id10961 . -1) (#("i" 0 1 (fontified nil)) . -4564) (undo-tree-id10962 . -1) (undo-tree-id10963 . -1) (undo-tree-id10964 . -1) (undo-tree-id10965 . -1) (undo-tree-id10966 . -1) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) (undo-tree-id10975 . -1) (undo-tree-id10976 . -1) (undo-tree-id10977 . -1) (undo-tree-id10978 . -1) (undo-tree-id10979 . -1) (#("m" 0 1 (fontified nil)) . -4565) (undo-tree-id10980 . -1) (undo-tree-id10981 . -1) (undo-tree-id10982 . -1) (undo-tree-id10983 . -1) (undo-tree-id10984 . -1) (undo-tree-id10985 . -1) (undo-tree-id10986 . -1) (undo-tree-id10987 . -1) (undo-tree-id10988 . -1) (undo-tree-id10989 . -1) (undo-tree-id10990 . -1) (undo-tree-id10991 . -1) (undo-tree-id10992 . -1) (undo-tree-id10993 . -1) (undo-tree-id10994 . -1) (undo-tree-id10995 . -1) (undo-tree-id10996 . -1) (undo-tree-id10997 . -1) (#("a" 0 1 (fontified nil)) . -4566) (undo-tree-id10998 . -1) (undo-tree-id10999 . -1) (undo-tree-id11000 . -1) (undo-tree-id11001 . -1) (undo-tree-id11002 . -1) (undo-tree-id11003 . -1) (undo-tree-id11004 . -1) (undo-tree-id11005 . -1) (undo-tree-id11006 . -1) (undo-tree-id11007 . -1) (undo-tree-id11008 . -1) (undo-tree-id11009 . -1) (undo-tree-id11010 . -1) (undo-tree-id11011 . -1) (undo-tree-id11012 . -1) (undo-tree-id11013 . -1) (undo-tree-id11014 . -1) (undo-tree-id11015 . -1) (#("l" 0 1 (fontified nil)) . -4567) (undo-tree-id11016 . -1) (undo-tree-id11017 . -1) (undo-tree-id11018 . -1) (undo-tree-id11019 . -1) (undo-tree-id11020 . -1) (undo-tree-id11021 . -1) (undo-tree-id11022 . -1) (undo-tree-id11023 . -1) (undo-tree-id11024 . -1) (undo-tree-id11025 . -1) (undo-tree-id11026 . -1) (undo-tree-id11027 . -1) (undo-tree-id11028 . -1) (undo-tree-id11029 . -1) (undo-tree-id11030 . -1) (undo-tree-id11031 . -1) (undo-tree-id11032 . -1) (undo-tree-id11033 . -1) (#("s" 0 1 (fontified nil)) . -4568) (undo-tree-id11034 . -1) (undo-tree-id11035 . -1) (undo-tree-id11036 . -1) (undo-tree-id11037 . -1) (undo-tree-id11038 . -1) (undo-tree-id11039 . -1) (undo-tree-id11040 . -1) (undo-tree-id11041 . -1) (undo-tree-id11042 . -1) (undo-tree-id11043 . -1) (undo-tree-id11044 . -1) (undo-tree-id11045 . -1) (undo-tree-id11046 . -1) (undo-tree-id11047 . -1) (undo-tree-id11048 . -1) (undo-tree-id11049 . -1) (undo-tree-id11050 . -1) (undo-tree-id11051 . -1) (#("=" 0 1 (face font-lock-operator-face fontified nil)) . -4569) (undo-tree-id11052 . -1) (undo-tree-id11053 . -1) (undo-tree-id11054 . -1) (undo-tree-id11055 . -1) (undo-tree-id11056 . -1) (undo-tree-id11057 . -1) (undo-tree-id11058 . -1) (undo-tree-id11059 . -1) (undo-tree-id11060 . -1) (undo-tree-id11061 . -1) (undo-tree-id11062 . -1) (undo-tree-id11063 . -1) (undo-tree-id11064 . -1) (undo-tree-id11065 . -1) (undo-tree-id11066 . -1) (undo-tree-id11067 . -1) (undo-tree-id11068 . -1) (undo-tree-id11069 . -1) (#("5" 0 1 (fontified t)) . -4570) (undo-tree-id11070 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4571) (undo-tree-id11071 . -1) 4572 (t 25891 51563 456528 97000)) nil (25891 51755 213769 88000) 0 nil])
([nil nil ((4558 . 4559)) nil (25891 51755 213472 359000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 4515) (#("d" 0 1 (fontified t)) . 4515) (#("n" 0 1 (face font-lock-builtin-face fontified nil)) . 4515) (#("u" 0 1 (face font-lock-builtin-face fontified nil)) . 4515) (#("o" 0 1 (face font-lock-builtin-face fontified nil)) . 4515) (#("r" 0 1 (face font-lock-builtin-face fontified nil)) . 4515) (#("." 0 1 (fontified nil)) . 4515) (#("h" 0 1 (fontified t)) . 4515) (#("c" 0 1 (fontified t)) . 4515) (#("r" 0 1 (fontified t)) . 4515) (#("o" 0 1 (fontified t)) . 4515)) nil (25891 51755 213469 856000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -4514) (undo-tree-id10849 . -1) 4515) nil (25891 51755 213467 903000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 4726) (4725 . 4726) (4724 . 4726) (#("(" 0 1 (fontified nil)) . -4724) (4721 . 4725)) nil (25891 51755 213458 516000) 0 nil])
([nil nil ((4725 . 4736)) nil (25891 51755 213452 320000) 0 nil])
([nil nil ((3570 . 3578) (t 25891 51755 251573 675000)) nil (25891 52889 318886 157000) 0 nil])
([nil nil ((3578 . 3583)) nil (25891 52889 318871 31000) 0 nil])
([nil nil ((1432 . 1437) (t 25891 52889 410281 649000)) nil (25891 53060 928392 205000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1436) (undo-tree-id11072 . -1) 1437) nil (25891 53060 928390 902000) 0 nil])
([nil nil ((1436 . 1445)) nil (25891 53060 928378 642000) 0 nil])
([nil nil ((1440 . 1445)) nil (25891 53060 928377 719000) 0 nil])
([nil nil ((3596 . 3601)) nil (25891 53060 928373 57000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -199) (undo-tree-id11073 . -1) (undo-tree-id11074 . -1) (undo-tree-id11075 . -1) (undo-tree-id11076 . -1) (undo-tree-id11077 . -1) (undo-tree-id11078 . -1) (undo-tree-id11079 . -1) (undo-tree-id11080 . -1) (undo-tree-id11081 . -1) (undo-tree-id11082 . -1) (undo-tree-id11083 . -1) (undo-tree-id11084 . -1) (undo-tree-id11085 . -1) (undo-tree-id11086 . -1) (undo-tree-id11087 . -1) (undo-tree-id11088 . -1) (undo-tree-id11089 . -1) (undo-tree-id11090 . -1) (undo-tree-id11091 . -1) (undo-tree-id11092 . -1) (undo-tree-id11093 . -1) (undo-tree-id11094 . -1) (undo-tree-id11095 . -1) (undo-tree-id11096 . -1) (undo-tree-id11097 . -1) (undo-tree-id11098 . -1) (undo-tree-id11099 . -1) (undo-tree-id11100 . -1) (undo-tree-id11101 . -1) (undo-tree-id11102 . -1) (undo-tree-id11103 . -1) (undo-tree-id11104 . -1) (undo-tree-id11105 . -1) (undo-tree-id11106 . -1) (undo-tree-id11107 . -1) (undo-tree-id11108 . -1) (undo-tree-id11109 . -1) (undo-tree-id11110 . -1) (undo-tree-id11111 . -1) (undo-tree-id11112 . -1) (undo-tree-id11113 . -1) (undo-tree-id11114 . -1) (undo-tree-id11115 . -1) (undo-tree-id11116 . -1) (undo-tree-id11117 . -1) (undo-tree-id11118 . -1) (undo-tree-id11119 . -1) (undo-tree-id11120 . -1) (undo-tree-id11121 . -1) (undo-tree-id11122 . -1) (undo-tree-id11123 . -1) (undo-tree-id11124 . -1) (undo-tree-id11125 . -1) (undo-tree-id11126 . -1) (undo-tree-id11127 . -1) (undo-tree-id11128 . -1) (undo-tree-id11129 . -1) (undo-tree-id11130 . -1) (undo-tree-id11131 . -1) (undo-tree-id11132 . -1) (undo-tree-id11133 . -1) (undo-tree-id11134 . -1) (undo-tree-id11135 . -1) (undo-tree-id11136 . -1) (undo-tree-id11137 . -1) (undo-tree-id11138 . -1) (undo-tree-id11139 . -1) (undo-tree-id11140 . -1) (undo-tree-id11141 . -1) (undo-tree-id11142 . -1) (undo-tree-id11143 . -1) (undo-tree-id11144 . -1) (undo-tree-id11145 . -1) (undo-tree-id11146 . -1) (undo-tree-id11147 . -1) (undo-tree-id11148 . -1) (undo-tree-id11149 . -1) (undo-tree-id11150 . -1) (undo-tree-id11151 . -1) (undo-tree-id11152 . -1) (undo-tree-id11153 . -1) (undo-tree-id11154 . -1) (undo-tree-id11155 . -1) (undo-tree-id11156 . -1) (undo-tree-id11157 . -1) (undo-tree-id11158 . -1) (undo-tree-id11159 . -1) (undo-tree-id11160 . -1) (undo-tree-id11161 . -1) (undo-tree-id11162 . -1) (undo-tree-id11163 . -1) (undo-tree-id11164 . -1) (undo-tree-id11165 . -1) (undo-tree-id11166 . -1) (undo-tree-id11167 . -1) (undo-tree-id11168 . -1) (undo-tree-id11169 . -1) (undo-tree-id11170 . -1) (undo-tree-id11171 . -1) (undo-tree-id11172 . -1) (undo-tree-id11173 . -1) (undo-tree-id11174 . -1) (undo-tree-id11175 . -1) (undo-tree-id11176 . -1) (undo-tree-id11177 . -1) (undo-tree-id11178 . -1) (undo-tree-id11179 . -1) (undo-tree-id11180 . -1) (undo-tree-id11181 . -1) (undo-tree-id11182 . -1) (undo-tree-id11183 . -1) (undo-tree-id11184 . -1) (undo-tree-id11185 . -1) (undo-tree-id11186 . -1) (undo-tree-id11187 . -1) (undo-tree-id11188 . -1) (undo-tree-id11189 . -1) (undo-tree-id11190 . -1) (undo-tree-id11191 . -1) (undo-tree-id11192 . -1) (undo-tree-id11193 . -1) (undo-tree-id11194 . -1) (undo-tree-id11195 . -1) (undo-tree-id11196 . -1) (undo-tree-id11197 . -1) (undo-tree-id11198 . -1) (undo-tree-id11199 . -1) (undo-tree-id11200 . -1) (undo-tree-id11201 . -1) (undo-tree-id11202 . -1) (undo-tree-id11203 . -1) (undo-tree-id11204 . -1) (undo-tree-id11205 . -1) (undo-tree-id11206 . -1) (undo-tree-id11207 . -1) (undo-tree-id11208 . -1) (undo-tree-id11209 . -1) (undo-tree-id11210 . -1) (undo-tree-id11211 . -1) (undo-tree-id11212 . -1) (undo-tree-id11213 . -1) (undo-tree-id11214 . -1) (undo-tree-id11215 . -1) (undo-tree-id11216 . -1) (undo-tree-id11217 . -1) (undo-tree-id11218 . -1) (undo-tree-id11219 . -1) (undo-tree-id11220 . -1) (undo-tree-id11221 . -1) (undo-tree-id11222 . -1) (undo-tree-id11223 . -1) (undo-tree-id11224 . -1) (undo-tree-id11225 . -1) (undo-tree-id11226 . -1) (undo-tree-id11227 . -1) (undo-tree-id11228 . -1) (undo-tree-id11229 . -1) (undo-tree-id11230 . -1) (undo-tree-id11231 . -1) (undo-tree-id11232 . -1) (undo-tree-id11233 . -1) (undo-tree-id11234 . -1) (undo-tree-id11235 . -1) (undo-tree-id11236 . -1) (undo-tree-id11237 . -1) (undo-tree-id11238 . -1) (undo-tree-id11239 . -1) (undo-tree-id11240 . -1) (undo-tree-id11241 . -1) (undo-tree-id11242 . -1) (undo-tree-id11243 . -1) (undo-tree-id11244 . -1) (undo-tree-id11245 . -1) (undo-tree-id11246 . -1) (undo-tree-id11247 . -1) (undo-tree-id11248 . -1) (undo-tree-id11249 . -1) (undo-tree-id11250 . -1) (undo-tree-id11251 . -1) (undo-tree-id11252 . -1) (undo-tree-id11253 . -1) (undo-tree-id11254 . -1) (undo-tree-id11255 . -1) (undo-tree-id11256 . -1) (undo-tree-id11257 . -1) (undo-tree-id11258 . -1) (undo-tree-id11259 . -1) (undo-tree-id11260 . -1) (undo-tree-id11261 . -1) (undo-tree-id11262 . -1) (undo-tree-id11263 . -1) (undo-tree-id11264 . -1) (undo-tree-id11265 . -1) (undo-tree-id11266 . -1) (undo-tree-id11267 . -1) (undo-tree-id11268 . -1) (undo-tree-id11269 . -1) (undo-tree-id11270 . -1) (undo-tree-id11271 . -1) (undo-tree-id11272 . -1) (undo-tree-id11273 . -1) (undo-tree-id11274 . -1) (undo-tree-id11275 . -1) (undo-tree-id11276 . -1) (undo-tree-id11277 . -1) (undo-tree-id11278 . -1) (undo-tree-id11279 . -1) (undo-tree-id11280 . -1) (undo-tree-id11281 . -1) (undo-tree-id11282 . -1) (undo-tree-id11283 . -1) (undo-tree-id11284 . -1) (undo-tree-id11285 . -1) (undo-tree-id11286 . -1) (undo-tree-id11287 . -1) (undo-tree-id11288 . -1) (undo-tree-id11289 . -1) (undo-tree-id11290 . -1) (undo-tree-id11291 . -1) (undo-tree-id11292 . -1) (undo-tree-id11293 . -1) (undo-tree-id11294 . -1) (undo-tree-id11295 . -1) (undo-tree-id11296 . -1) (undo-tree-id11297 . -1) (undo-tree-id11298 . -1) (undo-tree-id11299 . -1) (undo-tree-id11300 . -1) (undo-tree-id11301 . -1) (undo-tree-id11302 . -1) (undo-tree-id11303 . -1) (undo-tree-id11304 . -1) (undo-tree-id11305 . -1) (undo-tree-id11306 . -1) (undo-tree-id11307 . -1) (undo-tree-id11308 . -1) (undo-tree-id11309 . -1) (undo-tree-id11310 . -1) (undo-tree-id11311 . -1) (undo-tree-id11312 . -1) (undo-tree-id11313 . -1) (undo-tree-id11314 . -1) (undo-tree-id11315 . -1) (undo-tree-id11316 . -1) (undo-tree-id11317 . -1) (undo-tree-id11318 . -1) (undo-tree-id11319 . -1) (undo-tree-id11320 . -1) (undo-tree-id11321 . -1) (undo-tree-id11322 . -1) (undo-tree-id11323 . -1) (undo-tree-id11324 . -1) (undo-tree-id11325 . -1) (undo-tree-id11326 . -1) (undo-tree-id11327 . -1) (undo-tree-id11328 . -1) (undo-tree-id11329 . -1) (undo-tree-id11330 . -1) (undo-tree-id11331 . -1) (undo-tree-id11332 . -1) (undo-tree-id11333 . -1) (undo-tree-id11334 . -1) (undo-tree-id11335 . -1) (undo-tree-id11336 . -1) (undo-tree-id11337 . -1) (undo-tree-id11338 . -1) (undo-tree-id11339 . -1) (undo-tree-id11340 . -1) (undo-tree-id11341 . -1) (undo-tree-id11342 . -1) (undo-tree-id11343 . -1) (undo-tree-id11344 . -1) (undo-tree-id11345 . -1) (undo-tree-id11346 . -1) (undo-tree-id11347 . -1) (undo-tree-id11348 . -1) (undo-tree-id11349 . -1) (undo-tree-id11350 . -1) (undo-tree-id11351 . -1) (undo-tree-id11352 . -1) (undo-tree-id11353 . -1) (undo-tree-id11354 . -1) (undo-tree-id11355 . -1) (undo-tree-id11356 . -1) (undo-tree-id11357 . -1) (undo-tree-id11358 . -1) (undo-tree-id11359 . -1) (undo-tree-id11360 . -1) (undo-tree-id11361 . -1) (undo-tree-id11362 . -1) (undo-tree-id11363 . -1) (undo-tree-id11364 . -1) (undo-tree-id11365 . -1) (undo-tree-id11366 . -1) (undo-tree-id11367 . -1) (undo-tree-id11368 . -1) (undo-tree-id11369 . -1) (undo-tree-id11370 . -1) (undo-tree-id11371 . -1) (undo-tree-id11372 . -1) (undo-tree-id11373 . -1) (undo-tree-id11374 . -1) (undo-tree-id11375 . -1) (undo-tree-id11376 . -1) (undo-tree-id11377 . -1) (undo-tree-id11378 . -1) (undo-tree-id11379 . -1) (undo-tree-id11380 . -1) (undo-tree-id11381 . -1) (undo-tree-id11382 . -1) (undo-tree-id11383 . -1) (undo-tree-id11384 . -1) (undo-tree-id11385 . -1) (undo-tree-id11386 . -1) (undo-tree-id11387 . -1) (undo-tree-id11388 . -1) (undo-tree-id11389 . -1) (undo-tree-id11390 . -1) (undo-tree-id11391 . -1) (undo-tree-id11392 . -1) (undo-tree-id11393 . -1) (undo-tree-id11394 . -1) (undo-tree-id11395 . -1) (undo-tree-id11396 . -1) (undo-tree-id11397 . -1) (undo-tree-id11398 . -1) (undo-tree-id11399 . -1) (undo-tree-id11400 . -1) (undo-tree-id11401 . -1) (undo-tree-id11402 . -1) (undo-tree-id11403 . -1) (undo-tree-id11404 . -1) (undo-tree-id11405 . -1) (undo-tree-id11406 . -1) (undo-tree-id11407 . -1) (undo-tree-id11408 . -1) (undo-tree-id11409 . -1) (undo-tree-id11410 . -1) (undo-tree-id11411 . -1) (undo-tree-id11412 . -1) (undo-tree-id11413 . -1) (undo-tree-id11414 . -1) (undo-tree-id11415 . -1) (undo-tree-id11416 . -1) (undo-tree-id11417 . -1) (undo-tree-id11418 . -1) (#("t" 0 1 (fontified t)) . -200) (undo-tree-id11419 . -1) (undo-tree-id11420 . -1) (undo-tree-id11421 . -1) (undo-tree-id11422 . -1) (undo-tree-id11423 . -1) (undo-tree-id11424 . -1) (undo-tree-id11425 . -1) (undo-tree-id11426 . -1) (undo-tree-id11427 . -1) (undo-tree-id11428 . -1) (undo-tree-id11429 . -1) (undo-tree-id11430 . -1) (undo-tree-id11431 . -1) (undo-tree-id11432 . -1) (undo-tree-id11433 . -1) (undo-tree-id11434 . -1) (undo-tree-id11435 . -1) (undo-tree-id11436 . -1) (undo-tree-id11437 . -1) (undo-tree-id11438 . -1) (undo-tree-id11439 . -1) (undo-tree-id11440 . -1) (undo-tree-id11441 . -1) (undo-tree-id11442 . -1) (undo-tree-id11443 . -1) (undo-tree-id11444 . -1) (undo-tree-id11445 . -1) (undo-tree-id11446 . -1) (undo-tree-id11447 . -1) (undo-tree-id11448 . -1) (undo-tree-id11449 . -1) (undo-tree-id11450 . -1) (undo-tree-id11451 . -1) (undo-tree-id11452 . -1) (undo-tree-id11453 . -1) (undo-tree-id11454 . -1) (undo-tree-id11455 . -1) (undo-tree-id11456 . -1) (undo-tree-id11457 . -1) (undo-tree-id11458 . -1) (undo-tree-id11459 . -1) (undo-tree-id11460 . -1) (undo-tree-id11461 . -1) (undo-tree-id11462 . -1) (undo-tree-id11463 . -1) (undo-tree-id11464 . -1) (undo-tree-id11465 . -1) (undo-tree-id11466 . -1) (undo-tree-id11467 . -1) (undo-tree-id11468 . -1) (undo-tree-id11469 . -1) (undo-tree-id11470 . -1) (undo-tree-id11471 . -1) (undo-tree-id11472 . -1) (undo-tree-id11473 . -1) (undo-tree-id11474 . -1) (undo-tree-id11475 . -1) (undo-tree-id11476 . -1) (undo-tree-id11477 . -1) (undo-tree-id11478 . -1) (undo-tree-id11479 . -1) (undo-tree-id11480 . -1) (undo-tree-id11481 . -1) (undo-tree-id11482 . -1) (undo-tree-id11483 . -1) (undo-tree-id11484 . -1) (undo-tree-id11485 . -1) (undo-tree-id11486 . -1) (undo-tree-id11487 . -1) (undo-tree-id11488 . -1) (undo-tree-id11489 . -1) (undo-tree-id11490 . -1) (undo-tree-id11491 . -1) (undo-tree-id11492 . -1) (undo-tree-id11493 . -1) (undo-tree-id11494 . -1) (undo-tree-id11495 . -1) (undo-tree-id11496 . -1) (undo-tree-id11497 . -1) (undo-tree-id11498 . -1) (undo-tree-id11499 . -1) (undo-tree-id11500 . -1) (undo-tree-id11501 . -1) (undo-tree-id11502 . -1) (undo-tree-id11503 . -1) (undo-tree-id11504 . -1) (undo-tree-id11505 . -1) (undo-tree-id11506 . -1) (undo-tree-id11507 . -1) (undo-tree-id11508 . -1) (undo-tree-id11509 . -1) (undo-tree-id11510 . -1) (undo-tree-id11511 . -1) (undo-tree-id11512 . -1) (undo-tree-id11513 . -1) (undo-tree-id11514 . -1) (undo-tree-id11515 . -1) (undo-tree-id11516 . -1) (undo-tree-id11517 . -1) (undo-tree-id11518 . -1) (undo-tree-id11519 . -1) (undo-tree-id11520 . -1) (undo-tree-id11521 . -1) (undo-tree-id11522 . -1) (undo-tree-id11523 . -1) (undo-tree-id11524 . -1) (undo-tree-id11525 . -1) (undo-tree-id11526 . -1) (undo-tree-id11527 . -1) (undo-tree-id11528 . -1) (undo-tree-id11529 . -1) (undo-tree-id11530 . -1) (undo-tree-id11531 . -1) (undo-tree-id11532 . -1) (undo-tree-id11533 . -1) (undo-tree-id11534 . -1) (undo-tree-id11535 . -1) (undo-tree-id11536 . -1) (undo-tree-id11537 . -1) (undo-tree-id11538 . -1) (undo-tree-id11539 . -1) (undo-tree-id11540 . -1) (undo-tree-id11541 . -1) (undo-tree-id11542 . -1) (undo-tree-id11543 . -1) (undo-tree-id11544 . -1) (undo-tree-id11545 . -1) (undo-tree-id11546 . -1) (undo-tree-id11547 . -1) (undo-tree-id11548 . -1) (undo-tree-id11549 . -1) (undo-tree-id11550 . -1) (undo-tree-id11551 . -1) (undo-tree-id11552 . -1) (undo-tree-id11553 . -1) (undo-tree-id11554 . -1) (undo-tree-id11555 . -1) (undo-tree-id11556 . -1) (undo-tree-id11557 . -1) (undo-tree-id11558 . -1) (undo-tree-id11559 . -1) (undo-tree-id11560 . -1) (undo-tree-id11561 . -1) (undo-tree-id11562 . -1) (undo-tree-id11563 . -1) (undo-tree-id11564 . -1) (undo-tree-id11565 . -1) (undo-tree-id11566 . -1) (undo-tree-id11567 . -1) (undo-tree-id11568 . -1) (undo-tree-id11569 . -1) (undo-tree-id11570 . -1) (undo-tree-id11571 . -1) (undo-tree-id11572 . -1) (undo-tree-id11573 . -1) (undo-tree-id11574 . -1) (undo-tree-id11575 . -1) (undo-tree-id11576 . -1) (undo-tree-id11577 . -1) (undo-tree-id11578 . -1) (undo-tree-id11579 . -1) (undo-tree-id11580 . -1) (undo-tree-id11581 . -1) (undo-tree-id11582 . -1) (undo-tree-id11583 . -1) (undo-tree-id11584 . -1) (undo-tree-id11585 . -1) (undo-tree-id11586 . -1) (undo-tree-id11587 . -1) (undo-tree-id11588 . -1) (undo-tree-id11589 . -1) (undo-tree-id11590 . -1) (undo-tree-id11591 . -1) (undo-tree-id11592 . -1) (undo-tree-id11593 . -1) (undo-tree-id11594 . -1) (undo-tree-id11595 . -1) (undo-tree-id11596 . -1) (undo-tree-id11597 . -1) (undo-tree-id11598 . -1) (undo-tree-id11599 . -1) (undo-tree-id11600 . -1) (undo-tree-id11601 . -1) (undo-tree-id11602 . -1) (undo-tree-id11603 . -1) (undo-tree-id11604 . -1) (undo-tree-id11605 . -1) (undo-tree-id11606 . -1) (undo-tree-id11607 . -1) (undo-tree-id11608 . -1) (undo-tree-id11609 . -1) (undo-tree-id11610 . -1) (undo-tree-id11611 . -1) (undo-tree-id11612 . -1) (undo-tree-id11613 . -1) (undo-tree-id11614 . -1) (undo-tree-id11615 . -1) (undo-tree-id11616 . -1) (undo-tree-id11617 . -1) (undo-tree-id11618 . -1) (undo-tree-id11619 . -1) (undo-tree-id11620 . -1) (undo-tree-id11621 . -1) (undo-tree-id11622 . -1) (undo-tree-id11623 . -1) (undo-tree-id11624 . -1) (undo-tree-id11625 . -1) (undo-tree-id11626 . -1) (undo-tree-id11627 . -1) (undo-tree-id11628 . -1) (undo-tree-id11629 . -1) (undo-tree-id11630 . -1) (undo-tree-id11631 . -1) (undo-tree-id11632 . -1) (undo-tree-id11633 . -1) (undo-tree-id11634 . -1) (undo-tree-id11635 . -1) (undo-tree-id11636 . -1) (undo-tree-id11637 . -1) (undo-tree-id11638 . -1) (undo-tree-id11639 . -1) (undo-tree-id11640 . -1) (undo-tree-id11641 . -1) (undo-tree-id11642 . -1) (undo-tree-id11643 . -1) (undo-tree-id11644 . -1) (undo-tree-id11645 . -1) (undo-tree-id11646 . -1) (undo-tree-id11647 . -1) (undo-tree-id11648 . -1) (undo-tree-id11649 . -1) (undo-tree-id11650 . -1) (undo-tree-id11651 . -1) (undo-tree-id11652 . -1) (undo-tree-id11653 . -1) (undo-tree-id11654 . -1) (undo-tree-id11655 . -1) (undo-tree-id11656 . -1) (undo-tree-id11657 . -1) (undo-tree-id11658 . -1) (undo-tree-id11659 . -1) (undo-tree-id11660 . -1) (undo-tree-id11661 . -1) (undo-tree-id11662 . -1) (undo-tree-id11663 . -1) (undo-tree-id11664 . -1) (undo-tree-id11665 . -1) (undo-tree-id11666 . -1) (undo-tree-id11667 . -1) (undo-tree-id11668 . -1) (undo-tree-id11669 . -1) (undo-tree-id11670 . -1) (undo-tree-id11671 . -1) (undo-tree-id11672 . -1) (undo-tree-id11673 . -1) (undo-tree-id11674 . -1) (undo-tree-id11675 . -1) (undo-tree-id11676 . -1) (undo-tree-id11677 . -1) (undo-tree-id11678 . -1) (undo-tree-id11679 . -1) (undo-tree-id11680 . -1) (undo-tree-id11681 . -1) (undo-tree-id11682 . -1) (undo-tree-id11683 . -1) (undo-tree-id11684 . -1) (undo-tree-id11685 . -1) (undo-tree-id11686 . -1) (undo-tree-id11687 . -1) (undo-tree-id11688 . -1) (undo-tree-id11689 . -1) (undo-tree-id11690 . -1) (undo-tree-id11691 . -1) (undo-tree-id11692 . -1) (undo-tree-id11693 . -1) (undo-tree-id11694 . -1) (undo-tree-id11695 . -1) (undo-tree-id11696 . -1) (undo-tree-id11697 . -1) (undo-tree-id11698 . -1) (undo-tree-id11699 . -1) (undo-tree-id11700 . -1) (undo-tree-id11701 . -1) (undo-tree-id11702 . -1) (undo-tree-id11703 . -1) (undo-tree-id11704 . -1) (undo-tree-id11705 . -1) (undo-tree-id11706 . -1) (undo-tree-id11707 . -1) (undo-tree-id11708 . -1) (undo-tree-id11709 . -1) (undo-tree-id11710 . -1) (undo-tree-id11711 . -1) (undo-tree-id11712 . -1) (undo-tree-id11713 . -1) (undo-tree-id11714 . -1) (undo-tree-id11715 . -1) (undo-tree-id11716 . -1) (undo-tree-id11717 . -1) (undo-tree-id11718 . -1) (undo-tree-id11719 . -1) (undo-tree-id11720 . -1) (undo-tree-id11721 . -1) (undo-tree-id11722 . -1) (undo-tree-id11723 . -1) (undo-tree-id11724 . -1) (undo-tree-id11725 . -1) (undo-tree-id11726 . -1) (undo-tree-id11727 . -1) (undo-tree-id11728 . -1) (undo-tree-id11729 . -1) (undo-tree-id11730 . -1) (undo-tree-id11731 . -1) (undo-tree-id11732 . -1) (undo-tree-id11733 . -1) (undo-tree-id11734 . -1) (undo-tree-id11735 . -1) (undo-tree-id11736 . -1) (undo-tree-id11737 . -1) (undo-tree-id11738 . -1) (undo-tree-id11739 . -1) (undo-tree-id11740 . -1) (undo-tree-id11741 . -1) (undo-tree-id11742 . -1) (undo-tree-id11743 . -1) (undo-tree-id11744 . -1) (undo-tree-id11745 . -1) (undo-tree-id11746 . -1) (undo-tree-id11747 . -1) (#("o" 0 1 (fontified t)) . -201) (undo-tree-id11748 . -1) (undo-tree-id11749 . -1) (undo-tree-id11750 . -1) (undo-tree-id11751 . -1) (undo-tree-id11752 . -1) (undo-tree-id11753 . -1) (undo-tree-id11754 . -1) (undo-tree-id11755 . -1) (undo-tree-id11756 . -1) (undo-tree-id11757 . -1) (undo-tree-id11758 . -1) (undo-tree-id11759 . -1) (undo-tree-id11760 . -1) (undo-tree-id11761 . -1) (undo-tree-id11762 . -1) (undo-tree-id11763 . -1) (undo-tree-id11764 . -1) (undo-tree-id11765 . -1) (undo-tree-id11766 . -1) (undo-tree-id11767 . -1) (undo-tree-id11768 . -1) (undo-tree-id11769 . -1) (undo-tree-id11770 . -1) (undo-tree-id11771 . -1) (undo-tree-id11772 . -1) (undo-tree-id11773 . -1) (undo-tree-id11774 . -1) (undo-tree-id11775 . -1) (undo-tree-id11776 . -1) (undo-tree-id11777 . -1) (undo-tree-id11778 . -1) (undo-tree-id11779 . -1) (undo-tree-id11780 . -1) (undo-tree-id11781 . -1) (undo-tree-id11782 . -1) (undo-tree-id11783 . -1) (undo-tree-id11784 . -1) (undo-tree-id11785 . -1) (undo-tree-id11786 . -1) (undo-tree-id11787 . -1) (undo-tree-id11788 . -1) (undo-tree-id11789 . -1) (undo-tree-id11790 . -1) (undo-tree-id11791 . -1) (undo-tree-id11792 . -1) (undo-tree-id11793 . -1) (undo-tree-id11794 . -1) (undo-tree-id11795 . -1) (undo-tree-id11796 . -1) (undo-tree-id11797 . -1) (undo-tree-id11798 . -1) (undo-tree-id11799 . -1) (undo-tree-id11800 . -1) (undo-tree-id11801 . -1) (undo-tree-id11802 . -1) (undo-tree-id11803 . -1) (undo-tree-id11804 . -1) (undo-tree-id11805 . -1) (undo-tree-id11806 . -1) (undo-tree-id11807 . -1) (undo-tree-id11808 . -1) (undo-tree-id11809 . -1) (undo-tree-id11810 . -1) (undo-tree-id11811 . -1) (undo-tree-id11812 . -1) (undo-tree-id11813 . -1) (undo-tree-id11814 . -1) (undo-tree-id11815 . -1) (undo-tree-id11816 . -1) (undo-tree-id11817 . -1) (undo-tree-id11818 . -1) (undo-tree-id11819 . -1) (undo-tree-id11820 . -1) (undo-tree-id11821 . -1) (undo-tree-id11822 . -1) (undo-tree-id11823 . -1) (undo-tree-id11824 . -1) (undo-tree-id11825 . -1) (undo-tree-id11826 . -1) (undo-tree-id11827 . -1) (undo-tree-id11828 . -1) (undo-tree-id11829 . -1) (undo-tree-id11830 . -1) (undo-tree-id11831 . -1) (undo-tree-id11832 . -1) (undo-tree-id11833 . -1) (undo-tree-id11834 . -1) (undo-tree-id11835 . -1) (undo-tree-id11836 . -1) (undo-tree-id11837 . -1) (undo-tree-id11838 . -1) (undo-tree-id11839 . -1) (undo-tree-id11840 . -1) (undo-tree-id11841 . -1) (undo-tree-id11842 . -1) (undo-tree-id11843 . -1) (undo-tree-id11844 . -1) (undo-tree-id11845 . -1) (undo-tree-id11846 . -1) (undo-tree-id11847 . -1) (undo-tree-id11848 . -1) (undo-tree-id11849 . -1) (undo-tree-id11850 . -1) (undo-tree-id11851 . -1) (undo-tree-id11852 . -1) (undo-tree-id11853 . -1) (undo-tree-id11854 . -1) (undo-tree-id11855 . -1) (undo-tree-id11856 . -1) (undo-tree-id11857 . -1) (undo-tree-id11858 . -1) (undo-tree-id11859 . -1) (undo-tree-id11860 . -1) (undo-tree-id11861 . -1) (undo-tree-id11862 . -1) (undo-tree-id11863 . -1) (undo-tree-id11864 . -1) (undo-tree-id11865 . -1) (undo-tree-id11866 . -1) (undo-tree-id11867 . -1) (undo-tree-id11868 . -1) (undo-tree-id11869 . -1) (undo-tree-id11870 . -1) (undo-tree-id11871 . -1) (undo-tree-id11872 . -1) (undo-tree-id11873 . -1) (undo-tree-id11874 . -1) (undo-tree-id11875 . -1) (undo-tree-id11876 . -1) (undo-tree-id11877 . -1) (undo-tree-id11878 . -1) (undo-tree-id11879 . -1) (undo-tree-id11880 . -1) (undo-tree-id11881 . -1) (undo-tree-id11882 . -1) (undo-tree-id11883 . -1) (undo-tree-id11884 . -1) (undo-tree-id11885 . -1) (undo-tree-id11886 . -1) (undo-tree-id11887 . -1) (undo-tree-id11888 . -1) (undo-tree-id11889 . -1) (undo-tree-id11890 . -1) (undo-tree-id11891 . -1) (undo-tree-id11892 . -1) (undo-tree-id11893 . -1) (undo-tree-id11894 . -1) (undo-tree-id11895 . -1) (undo-tree-id11896 . -1) (undo-tree-id11897 . -1) (undo-tree-id11898 . -1) (undo-tree-id11899 . -1) (undo-tree-id11900 . -1) (undo-tree-id11901 . -1) (undo-tree-id11902 . -1) (undo-tree-id11903 . -1) (undo-tree-id11904 . -1) (undo-tree-id11905 . -1) (undo-tree-id11906 . -1) (undo-tree-id11907 . -1) (undo-tree-id11908 . -1) (undo-tree-id11909 . -1) (undo-tree-id11910 . -1) (undo-tree-id11911 . -1) (undo-tree-id11912 . -1) (undo-tree-id11913 . -1) (undo-tree-id11914 . -1) (undo-tree-id11915 . -1) (undo-tree-id11916 . -1) (undo-tree-id11917 . -1) (undo-tree-id11918 . -1) (undo-tree-id11919 . -1) (undo-tree-id11920 . -1) (undo-tree-id11921 . -1) (undo-tree-id11922 . -1) (undo-tree-id11923 . -1) (undo-tree-id11924 . -1) (undo-tree-id11925 . -1) (undo-tree-id11926 . -1) (undo-tree-id11927 . -1) (undo-tree-id11928 . -1) (undo-tree-id11929 . -1) (undo-tree-id11930 . -1) (undo-tree-id11931 . -1) (undo-tree-id11932 . -1) (undo-tree-id11933 . -1) (undo-tree-id11934 . -1) (undo-tree-id11935 . -1) (undo-tree-id11936 . -1) (undo-tree-id11937 . -1) (undo-tree-id11938 . -1) (undo-tree-id11939 . -1) (undo-tree-id11940 . -1) (undo-tree-id11941 . -1) (undo-tree-id11942 . -1) (undo-tree-id11943 . -1) (undo-tree-id11944 . -1) (undo-tree-id11945 . -1) (undo-tree-id11946 . -1) (undo-tree-id11947 . -1) (undo-tree-id11948 . -1) (undo-tree-id11949 . -1) (undo-tree-id11950 . -1) (undo-tree-id11951 . -1) (undo-tree-id11952 . -1) (undo-tree-id11953 . -1) (undo-tree-id11954 . -1) (undo-tree-id11955 . -1) (undo-tree-id11956 . -1) (undo-tree-id11957 . -1) (undo-tree-id11958 . -1) (undo-tree-id11959 . -1) (undo-tree-id11960 . -1) (undo-tree-id11961 . -1) (undo-tree-id11962 . -1) (undo-tree-id11963 . -1) (undo-tree-id11964 . -1) (undo-tree-id11965 . -1) (undo-tree-id11966 . -1) (undo-tree-id11967 . -1) (undo-tree-id11968 . -1) (undo-tree-id11969 . -1) (undo-tree-id11970 . -1) (undo-tree-id11971 . -1) (undo-tree-id11972 . -1) (undo-tree-id11973 . -1) (undo-tree-id11974 . -1) (undo-tree-id11975 . -1) (undo-tree-id11976 . -1) (undo-tree-id11977 . -1) (undo-tree-id11978 . -1) (undo-tree-id11979 . -1) (undo-tree-id11980 . -1) (undo-tree-id11981 . -1) (undo-tree-id11982 . -1) (undo-tree-id11983 . -1) (undo-tree-id11984 . -1) (undo-tree-id11985 . -1) (undo-tree-id11986 . -1) (undo-tree-id11987 . -1) (undo-tree-id11988 . -1) (undo-tree-id11989 . -1) (undo-tree-id11990 . -1) (undo-tree-id11991 . -1) (undo-tree-id11992 . -1) (undo-tree-id11993 . -1) (undo-tree-id11994 . -1) (undo-tree-id11995 . -1) (undo-tree-id11996 . -1) (undo-tree-id11997 . -1) (undo-tree-id11998 . -1) (undo-tree-id11999 . -1) (undo-tree-id12000 . -1) (undo-tree-id12001 . -1) (undo-tree-id12002 . -1) (undo-tree-id12003 . -1) (undo-tree-id12004 . -1) (undo-tree-id12005 . -1) (undo-tree-id12006 . -1) (undo-tree-id12007 . -1) (undo-tree-id12008 . -1) (undo-tree-id12009 . -1) (undo-tree-id12010 . -1) (undo-tree-id12011 . -1) (undo-tree-id12012 . -1) (undo-tree-id12013 . -1) (undo-tree-id12014 . -1) (undo-tree-id12015 . -1) (undo-tree-id12016 . -1) (undo-tree-id12017 . -1) (undo-tree-id12018 . -1) (undo-tree-id12019 . -1) (undo-tree-id12020 . -1) (undo-tree-id12021 . -1) (undo-tree-id12022 . -1) (undo-tree-id12023 . -1) (undo-tree-id12024 . -1) (undo-tree-id12025 . -1) (undo-tree-id12026 . -1) (undo-tree-id12027 . -1) (undo-tree-id12028 . -1) (undo-tree-id12029 . -1) (undo-tree-id12030 . -1) (undo-tree-id12031 . -1) (undo-tree-id12032 . -1) (undo-tree-id12033 . -1) (undo-tree-id12034 . -1) (undo-tree-id12035 . -1) (undo-tree-id12036 . -1) (undo-tree-id12037 . -1) (undo-tree-id12038 . -1) (undo-tree-id12039 . -1) (undo-tree-id12040 . -1) (undo-tree-id12041 . -1) (undo-tree-id12042 . -1) (undo-tree-id12043 . -1) (undo-tree-id12044 . -1) (undo-tree-id12045 . -1) (undo-tree-id12046 . -1) (undo-tree-id12047 . -1) (undo-tree-id12048 . -1) (undo-tree-id12049 . -1) (undo-tree-id12050 . -1) (undo-tree-id12051 . -1) (undo-tree-id12052 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -202) (undo-tree-id12053 . -1) (undo-tree-id12054 . -1) (undo-tree-id12055 . -1) (undo-tree-id12056 . -1) (undo-tree-id12057 . -1) (undo-tree-id12058 . -1) (undo-tree-id12059 . -1) (undo-tree-id12060 . -1) (undo-tree-id12061 . -1) (undo-tree-id12062 . -1) (undo-tree-id12063 . -1) (undo-tree-id12064 . -1) (undo-tree-id12065 . -1) (undo-tree-id12066 . -1) (undo-tree-id12067 . -1) (undo-tree-id12068 . -1) (undo-tree-id12069 . -1) (undo-tree-id12070 . -1) (undo-tree-id12071 . -1) (undo-tree-id12072 . -1) (undo-tree-id12073 . -1) (undo-tree-id12074 . -1) (undo-tree-id12075 . -1) (undo-tree-id12076 . -1) (undo-tree-id12077 . -1) (undo-tree-id12078 . -1) (undo-tree-id12079 . -1) (undo-tree-id12080 . -1) (undo-tree-id12081 . -1) (undo-tree-id12082 . -1) (undo-tree-id12083 . -1) (undo-tree-id12084 . -1) (undo-tree-id12085 . -1) (undo-tree-id12086 . -1) (undo-tree-id12087 . -1) (undo-tree-id12088 . -1) (undo-tree-id12089 . -1) (undo-tree-id12090 . -1) (undo-tree-id12091 . -1) (undo-tree-id12092 . -1) (undo-tree-id12093 . -1) (undo-tree-id12094 . -1) (undo-tree-id12095 . -1) (undo-tree-id12096 . -1) (undo-tree-id12097 . -1) (undo-tree-id12098 . -1) (undo-tree-id12099 . -1) (undo-tree-id12100 . -1) (undo-tree-id12101 . -1) (undo-tree-id12102 . -1) (undo-tree-id12103 . -1) (undo-tree-id12104 . -1) (undo-tree-id12105 . -1) (undo-tree-id12106 . -1) (undo-tree-id12107 . -1) (undo-tree-id12108 . -1) (undo-tree-id12109 . -1) (undo-tree-id12110 . -1) (undo-tree-id12111 . -1) (undo-tree-id12112 . -1) (undo-tree-id12113 . -1) (undo-tree-id12114 . -1) (undo-tree-id12115 . -1) (undo-tree-id12116 . -1) (undo-tree-id12117 . -1) (undo-tree-id12118 . -1) (undo-tree-id12119 . -1) (undo-tree-id12120 . -1) (undo-tree-id12121 . -1) (undo-tree-id12122 . -1) (undo-tree-id12123 . -1) (undo-tree-id12124 . -1) (undo-tree-id12125 . -1) (undo-tree-id12126 . -1) (undo-tree-id12127 . -1) (undo-tree-id12128 . -1) (undo-tree-id12129 . -1) (undo-tree-id12130 . -1) (undo-tree-id12131 . -1) (undo-tree-id12132 . -1) (undo-tree-id12133 . -1) (undo-tree-id12134 . -1) (undo-tree-id12135 . -1) (undo-tree-id12136 . -1) (undo-tree-id12137 . -1) (undo-tree-id12138 . -1) (undo-tree-id12139 . -1) (undo-tree-id12140 . -1) (undo-tree-id12141 . -1) (undo-tree-id12142 . -1) (undo-tree-id12143 . -1) (undo-tree-id12144 . -1) (undo-tree-id12145 . -1) (undo-tree-id12146 . -1) (undo-tree-id12147 . -1) (undo-tree-id12148 . -1) (undo-tree-id12149 . -1) (undo-tree-id12150 . -1) (undo-tree-id12151 . -1) (undo-tree-id12152 . -1) (undo-tree-id12153 . -1) (undo-tree-id12154 . -1) (undo-tree-id12155 . -1) (undo-tree-id12156 . -1) (undo-tree-id12157 . -1) (undo-tree-id12158 . -1) (undo-tree-id12159 . -1) (undo-tree-id12160 . -1) (undo-tree-id12161 . -1) (undo-tree-id12162 . -1) (undo-tree-id12163 . -1) (undo-tree-id12164 . -1) (undo-tree-id12165 . -1) (undo-tree-id12166 . -1) (undo-tree-id12167 . -1) (undo-tree-id12168 . -1) (undo-tree-id12169 . -1) (undo-tree-id12170 . -1) (undo-tree-id12171 . -1) (undo-tree-id12172 . -1) (undo-tree-id12173 . -1) (undo-tree-id12174 . -1) (undo-tree-id12175 . -1) (undo-tree-id12176 . -1) (undo-tree-id12177 . -1) (undo-tree-id12178 . -1) (undo-tree-id12179 . -1) (undo-tree-id12180 . -1) (undo-tree-id12181 . -1) (undo-tree-id12182 . -1) (undo-tree-id12183 . -1) (undo-tree-id12184 . -1) (undo-tree-id12185 . -1) (undo-tree-id12186 . -1) (undo-tree-id12187 . -1) (undo-tree-id12188 . -1) (undo-tree-id12189 . -1) (undo-tree-id12190 . -1) (undo-tree-id12191 . -1) (undo-tree-id12192 . -1) (undo-tree-id12193 . -1) (undo-tree-id12194 . -1) (undo-tree-id12195 . -1) (undo-tree-id12196 . -1) (undo-tree-id12197 . -1) (undo-tree-id12198 . -1) (undo-tree-id12199 . -1) (undo-tree-id12200 . -1) (undo-tree-id12201 . -1) (undo-tree-id12202 . -1) (undo-tree-id12203 . -1) (undo-tree-id12204 . -1) (undo-tree-id12205 . -1) (undo-tree-id12206 . -1) (undo-tree-id12207 . -1) (undo-tree-id12208 . -1) (undo-tree-id12209 . -1) (undo-tree-id12210 . -1) (undo-tree-id12211 . -1) (undo-tree-id12212 . -1) (undo-tree-id12213 . -1) (undo-tree-id12214 . -1) (undo-tree-id12215 . -1) (undo-tree-id12216 . -1) (undo-tree-id12217 . -1) (undo-tree-id12218 . -1) (undo-tree-id12219 . -1) (undo-tree-id12220 . -1) (undo-tree-id12221 . -1) (undo-tree-id12222 . -1) (undo-tree-id12223 . -1) (undo-tree-id12224 . -1) (undo-tree-id12225 . -1) (undo-tree-id12226 . -1) (undo-tree-id12227 . -1) (undo-tree-id12228 . -1) (undo-tree-id12229 . -1) (undo-tree-id12230 . -1) (undo-tree-id12231 . -1) (undo-tree-id12232 . -1) (undo-tree-id12233 . -1) (undo-tree-id12234 . -1) (undo-tree-id12235 . -1) (undo-tree-id12236 . -1) (undo-tree-id12237 . -1) (undo-tree-id12238 . -1) (undo-tree-id12239 . -1) (undo-tree-id12240 . -1) (undo-tree-id12241 . -1) (undo-tree-id12242 . -1) (undo-tree-id12243 . -1) (undo-tree-id12244 . -1) (undo-tree-id12245 . -1) (undo-tree-id12246 . -1) (undo-tree-id12247 . -1) (undo-tree-id12248 . -1) (undo-tree-id12249 . -1) (undo-tree-id12250 . -1) (undo-tree-id12251 . -1) (undo-tree-id12252 . -1) (undo-tree-id12253 . -1) (undo-tree-id12254 . -1) (undo-tree-id12255 . -1) (undo-tree-id12256 . -1) (undo-tree-id12257 . -1) (undo-tree-id12258 . -1) (undo-tree-id12259 . -1) (undo-tree-id12260 . -1) (undo-tree-id12261 . -1) (undo-tree-id12262 . -1) (undo-tree-id12263 . -1) (undo-tree-id12264 . -1) (undo-tree-id12265 . -1) (undo-tree-id12266 . -1) (undo-tree-id12267 . -1) (undo-tree-id12268 . -1) (undo-tree-id12269 . -1) (undo-tree-id12270 . -1) (undo-tree-id12271 . -1) (undo-tree-id12272 . -1) (undo-tree-id12273 . -1) (undo-tree-id12274 . -1) (undo-tree-id12275 . -1) (undo-tree-id12276 . -1) (undo-tree-id12277 . -1) (undo-tree-id12278 . -1) (undo-tree-id12279 . -1) (undo-tree-id12280 . -1) (undo-tree-id12281 . -1) (undo-tree-id12282 . -1) (undo-tree-id12283 . -1) (undo-tree-id12284 . -1) (undo-tree-id12285 . -1) (undo-tree-id12286 . -1) (undo-tree-id12287 . -1) (undo-tree-id12288 . -1) (undo-tree-id12289 . -1) (undo-tree-id12290 . -1) (undo-tree-id12291 . -1) (undo-tree-id12292 . -1) (undo-tree-id12293 . -1) (undo-tree-id12294 . -1) (undo-tree-id12295 . -1) (undo-tree-id12296 . -1) (undo-tree-id12297 . -1) (undo-tree-id12298 . -1) (undo-tree-id12299 . -1) (undo-tree-id12300 . -1) (undo-tree-id12301 . -1) (undo-tree-id12302 . -1) (undo-tree-id12303 . -1) (undo-tree-id12304 . -1) (undo-tree-id12305 . -1) (undo-tree-id12306 . -1) (undo-tree-id12307 . -1) (undo-tree-id12308 . -1) (undo-tree-id12309 . -1) (undo-tree-id12310 . -1) (undo-tree-id12311 . -1) (undo-tree-id12312 . -1) (undo-tree-id12313 . -1) (undo-tree-id12314 . -1) (undo-tree-id12315 . -1) (undo-tree-id12316 . -1) (undo-tree-id12317 . -1) (undo-tree-id12318 . -1) (undo-tree-id12319 . -1) (undo-tree-id12320 . -1) (undo-tree-id12321 . -1) (undo-tree-id12322 . -1) (undo-tree-id12323 . -1) (undo-tree-id12324 . -1) (#("t" 0 1 (fontified t)) . -203) (undo-tree-id12325 . -1) (undo-tree-id12326 . -1) (undo-tree-id12327 . -1) (undo-tree-id12328 . -1) (undo-tree-id12329 . -1) (undo-tree-id12330 . -1) (undo-tree-id12331 . -1) (undo-tree-id12332 . -1) (undo-tree-id12333 . -1) (undo-tree-id12334 . -1) (undo-tree-id12335 . -1) (undo-tree-id12336 . -1) (undo-tree-id12337 . -1) (undo-tree-id12338 . -1) (undo-tree-id12339 . -1) (undo-tree-id12340 . -1) (undo-tree-id12341 . -1) (undo-tree-id12342 . -1) (undo-tree-id12343 . -1) (undo-tree-id12344 . -1) (undo-tree-id12345 . -1) (undo-tree-id12346 . -1) (undo-tree-id12347 . -1) (undo-tree-id12348 . -1) (undo-tree-id12349 . -1) (undo-tree-id12350 . -1) (undo-tree-id12351 . -1) (undo-tree-id12352 . -1) (undo-tree-id12353 . -1) (undo-tree-id12354 . -1) (undo-tree-id12355 . -1) (undo-tree-id12356 . -1) (undo-tree-id12357 . -1) (undo-tree-id12358 . -1) (undo-tree-id12359 . -1) (undo-tree-id12360 . -1) (undo-tree-id12361 . -1) (undo-tree-id12362 . -1) (undo-tree-id12363 . -1) (undo-tree-id12364 . -1) (undo-tree-id12365 . -1) (undo-tree-id12366 . -1) (undo-tree-id12367 . -1) (undo-tree-id12368 . -1) (undo-tree-id12369 . -1) (undo-tree-id12370 . -1) (undo-tree-id12371 . -1) (undo-tree-id12372 . -1) (undo-tree-id12373 . -1) (undo-tree-id12374 . -1) (undo-tree-id12375 . -1) (undo-tree-id12376 . -1) (undo-tree-id12377 . -1) (undo-tree-id12378 . -1) (undo-tree-id12379 . -1) (undo-tree-id12380 . -1) (undo-tree-id12381 . -1) (undo-tree-id12382 . -1) (undo-tree-id12383 . -1) (undo-tree-id12384 . -1) (undo-tree-id12385 . -1) (undo-tree-id12386 . -1) (undo-tree-id12387 . -1) (undo-tree-id12388 . -1) (undo-tree-id12389 . -1) (undo-tree-id12390 . -1) (undo-tree-id12391 . -1) (undo-tree-id12392 . -1) (undo-tree-id12393 . -1) (undo-tree-id12394 . -1) (undo-tree-id12395 . -1) (undo-tree-id12396 . -1) (undo-tree-id12397 . -1) (undo-tree-id12398 . -1) (undo-tree-id12399 . -1) (undo-tree-id12400 . -1) (undo-tree-id12401 . -1) (undo-tree-id12402 . -1) (undo-tree-id12403 . -1) (undo-tree-id12404 . -1) (undo-tree-id12405 . -1) (undo-tree-id12406 . -1) (undo-tree-id12407 . -1) (undo-tree-id12408 . -1) (undo-tree-id12409 . -1) (undo-tree-id12410 . -1) (undo-tree-id12411 . -1) (undo-tree-id12412 . -1) (undo-tree-id12413 . -1) (undo-tree-id12414 . -1) (undo-tree-id12415 . -1) (undo-tree-id12416 . -1) (undo-tree-id12417 . -1) (undo-tree-id12418 . -1) (undo-tree-id12419 . -1) (undo-tree-id12420 . -1) (undo-tree-id12421 . -1) (undo-tree-id12422 . -1) (undo-tree-id12423 . -1) (undo-tree-id12424 . -1) (undo-tree-id12425 . -1) (undo-tree-id12426 . -1) (undo-tree-id12427 . -1) (undo-tree-id12428 . -1) (undo-tree-id12429 . -1) (undo-tree-id12430 . -1) (undo-tree-id12431 . -1) (undo-tree-id12432 . -1) (undo-tree-id12433 . -1) (undo-tree-id12434 . -1) (undo-tree-id12435 . -1) (undo-tree-id12436 . -1) (undo-tree-id12437 . -1) (undo-tree-id12438 . -1) (undo-tree-id12439 . -1) (undo-tree-id12440 . -1) (undo-tree-id12441 . -1) (undo-tree-id12442 . -1) (undo-tree-id12443 . -1) (undo-tree-id12444 . -1) (undo-tree-id12445 . -1) (undo-tree-id12446 . -1) (undo-tree-id12447 . -1) (undo-tree-id12448 . -1) (undo-tree-id12449 . -1) (undo-tree-id12450 . -1) (undo-tree-id12451 . -1) (undo-tree-id12452 . -1) (undo-tree-id12453 . -1) (undo-tree-id12454 . -1) (undo-tree-id12455 . -1) (undo-tree-id12456 . -1) (undo-tree-id12457 . -1) (undo-tree-id12458 . -1) (undo-tree-id12459 . -1) (undo-tree-id12460 . -1) (undo-tree-id12461 . -1) (undo-tree-id12462 . -1) (undo-tree-id12463 . -1) (undo-tree-id12464 . -1) (undo-tree-id12465 . -1) (undo-tree-id12466 . -1) (undo-tree-id12467 . -1) (undo-tree-id12468 . -1) (undo-tree-id12469 . -1) (undo-tree-id12470 . -1) (undo-tree-id12471 . -1) (undo-tree-id12472 . -1) (undo-tree-id12473 . -1) (undo-tree-id12474 . -1) (undo-tree-id12475 . -1) (undo-tree-id12476 . -1) (undo-tree-id12477 . -1) (undo-tree-id12478 . -1) (undo-tree-id12479 . -1) (undo-tree-id12480 . -1) (undo-tree-id12481 . -1) (undo-tree-id12482 . -1) (undo-tree-id12483 . -1) (undo-tree-id12484 . -1) (undo-tree-id12485 . -1) (undo-tree-id12486 . -1) (undo-tree-id12487 . -1) (undo-tree-id12488 . -1) (undo-tree-id12489 . -1) (undo-tree-id12490 . -1) (undo-tree-id12491 . -1) (undo-tree-id12492 . -1) (undo-tree-id12493 . -1) (undo-tree-id12494 . -1) (undo-tree-id12495 . -1) (undo-tree-id12496 . -1) (undo-tree-id12497 . -1) (undo-tree-id12498 . -1) (undo-tree-id12499 . -1) (undo-tree-id12500 . -1) (undo-tree-id12501 . -1) (undo-tree-id12502 . -1) (undo-tree-id12503 . -1) (undo-tree-id12504 . -1) (undo-tree-id12505 . -1) (undo-tree-id12506 . -1) (undo-tree-id12507 . -1) (undo-tree-id12508 . -1) (undo-tree-id12509 . -1) (undo-tree-id12510 . -1) (undo-tree-id12511 . -1) (undo-tree-id12512 . -1) (undo-tree-id12513 . -1) (undo-tree-id12514 . -1) (undo-tree-id12515 . -1) (undo-tree-id12516 . -1) (undo-tree-id12517 . -1) (undo-tree-id12518 . -1) (undo-tree-id12519 . -1) (undo-tree-id12520 . -1) (undo-tree-id12521 . -1) (undo-tree-id12522 . -1) (undo-tree-id12523 . -1) (undo-tree-id12524 . -1) (undo-tree-id12525 . -1) (undo-tree-id12526 . -1) (undo-tree-id12527 . -1) (undo-tree-id12528 . -1) (undo-tree-id12529 . -1) (undo-tree-id12530 . -1) (undo-tree-id12531 . -1) (undo-tree-id12532 . -1) (undo-tree-id12533 . -1) (undo-tree-id12534 . -1) (undo-tree-id12535 . -1) (undo-tree-id12536 . -1) (undo-tree-id12537 . -1) (undo-tree-id12538 . -1) (undo-tree-id12539 . -1) (undo-tree-id12540 . -1) (undo-tree-id12541 . -1) (undo-tree-id12542 . -1) (undo-tree-id12543 . -1) (undo-tree-id12544 . -1) (undo-tree-id12545 . -1) (undo-tree-id12546 . -1) (undo-tree-id12547 . -1) (undo-tree-id12548 . -1) (undo-tree-id12549 . -1) (undo-tree-id12550 . -1) (undo-tree-id12551 . -1) (undo-tree-id12552 . -1) (undo-tree-id12553 . -1) (undo-tree-id12554 . -1) (undo-tree-id12555 . -1) (undo-tree-id12556 . -1) (undo-tree-id12557 . -1) (undo-tree-id12558 . -1) (undo-tree-id12559 . -1) (undo-tree-id12560 . -1) (undo-tree-id12561 . -1) (undo-tree-id12562 . -1) (undo-tree-id12563 . -1) (undo-tree-id12564 . -1) (undo-tree-id12565 . -1) (undo-tree-id12566 . -1) (undo-tree-id12567 . -1) (undo-tree-id12568 . -1) (undo-tree-id12569 . -1) (undo-tree-id12570 . -1) (undo-tree-id12571 . -1) (undo-tree-id12572 . -1) (undo-tree-id12573 . -1) (undo-tree-id12574 . -1) (undo-tree-id12575 . -1) (undo-tree-id12576 . -1) (undo-tree-id12577 . -1) (#("o" 0 1 (fontified t)) . -204) (undo-tree-id12578 . -1) (undo-tree-id12579 . -1) (undo-tree-id12580 . -1) (undo-tree-id12581 . -1) (undo-tree-id12582 . -1) (undo-tree-id12583 . -1) (undo-tree-id12584 . -1) (undo-tree-id12585 . -1) (undo-tree-id12586 . -1) (undo-tree-id12587 . -1) (undo-tree-id12588 . -1) (undo-tree-id12589 . -1) (undo-tree-id12590 . -1) (undo-tree-id12591 . -1) (undo-tree-id12592 . -1) (undo-tree-id12593 . -1) (undo-tree-id12594 . -1) (undo-tree-id12595 . -1) (undo-tree-id12596 . -1) (undo-tree-id12597 . -1) (undo-tree-id12598 . -1) (undo-tree-id12599 . -1) (undo-tree-id12600 . -1) (undo-tree-id12601 . -1) (undo-tree-id12602 . -1) (undo-tree-id12603 . -1) (undo-tree-id12604 . -1) (undo-tree-id12605 . -1) (undo-tree-id12606 . -1) (undo-tree-id12607 . -1) (undo-tree-id12608 . -1) (undo-tree-id12609 . -1) (undo-tree-id12610 . -1) (undo-tree-id12611 . -1) (undo-tree-id12612 . -1) (undo-tree-id12613 . -1) (undo-tree-id12614 . -1) (undo-tree-id12615 . -1) (undo-tree-id12616 . -1) (undo-tree-id12617 . -1) (undo-tree-id12618 . -1) (undo-tree-id12619 . -1) (undo-tree-id12620 . -1) (undo-tree-id12621 . -1) (undo-tree-id12622 . -1) (undo-tree-id12623 . -1) (undo-tree-id12624 . -1) (undo-tree-id12625 . -1) (undo-tree-id12626 . -1) (undo-tree-id12627 . -1) (undo-tree-id12628 . -1) (undo-tree-id12629 . -1) (undo-tree-id12630 . -1) (undo-tree-id12631 . -1) (undo-tree-id12632 . -1) (undo-tree-id12633 . -1) (undo-tree-id12634 . -1) (undo-tree-id12635 . -1) (undo-tree-id12636 . -1) (undo-tree-id12637 . -1) (undo-tree-id12638 . -1) (undo-tree-id12639 . -1) (undo-tree-id12640 . -1) (undo-tree-id12641 . -1) (undo-tree-id12642 . -1) (undo-tree-id12643 . -1) (undo-tree-id12644 . -1) (undo-tree-id12645 . -1) (undo-tree-id12646 . -1) (undo-tree-id12647 . -1) (undo-tree-id12648 . -1) (undo-tree-id12649 . -1) (undo-tree-id12650 . -1) (undo-tree-id12651 . -1) (undo-tree-id12652 . -1) (undo-tree-id12653 . -1) (undo-tree-id12654 . -1) (undo-tree-id12655 . -1) (undo-tree-id12656 . -1) (undo-tree-id12657 . -1) (undo-tree-id12658 . -1) (undo-tree-id12659 . -1) (undo-tree-id12660 . -1) (undo-tree-id12661 . -1) (undo-tree-id12662 . -1) (undo-tree-id12663 . -1) (undo-tree-id12664 . -1) (undo-tree-id12665 . -1) (undo-tree-id12666 . -1) (undo-tree-id12667 . -1) (undo-tree-id12668 . -1) (undo-tree-id12669 . -1) (undo-tree-id12670 . -1) (undo-tree-id12671 . -1) (undo-tree-id12672 . -1) (undo-tree-id12673 . -1) (undo-tree-id12674 . -1) (undo-tree-id12675 . -1) (undo-tree-id12676 . -1) (undo-tree-id12677 . -1) (undo-tree-id12678 . -1) (undo-tree-id12679 . -1) (undo-tree-id12680 . -1) (undo-tree-id12681 . -1) (undo-tree-id12682 . -1) (undo-tree-id12683 . -1) (undo-tree-id12684 . -1) (undo-tree-id12685 . -1) (undo-tree-id12686 . -1) (undo-tree-id12687 . -1) (undo-tree-id12688 . -1) (undo-tree-id12689 . -1) (undo-tree-id12690 . -1) (undo-tree-id12691 . -1) (undo-tree-id12692 . -1) (undo-tree-id12693 . -1) (undo-tree-id12694 . -1) (undo-tree-id12695 . -1) (undo-tree-id12696 . -1) (undo-tree-id12697 . -1) (undo-tree-id12698 . -1) (undo-tree-id12699 . -1) (undo-tree-id12700 . -1) (undo-tree-id12701 . -1) (undo-tree-id12702 . -1) (undo-tree-id12703 . -1) (undo-tree-id12704 . -1) (undo-tree-id12705 . -1) (undo-tree-id12706 . -1) (undo-tree-id12707 . -1) (undo-tree-id12708 . -1) (undo-tree-id12709 . -1) (undo-tree-id12710 . -1) (undo-tree-id12711 . -1) (undo-tree-id12712 . -1) (undo-tree-id12713 . -1) (undo-tree-id12714 . -1) (undo-tree-id12715 . -1) (undo-tree-id12716 . -1) (undo-tree-id12717 . -1) (undo-tree-id12718 . -1) (undo-tree-id12719 . -1) (undo-tree-id12720 . -1) (undo-tree-id12721 . -1) (undo-tree-id12722 . -1) (undo-tree-id12723 . -1) (undo-tree-id12724 . -1) (undo-tree-id12725 . -1) (undo-tree-id12726 . -1) (undo-tree-id12727 . -1) (undo-tree-id12728 . -1) (undo-tree-id12729 . -1) (undo-tree-id12730 . -1) (undo-tree-id12731 . -1) (undo-tree-id12732 . -1) (undo-tree-id12733 . -1) (undo-tree-id12734 . -1) (undo-tree-id12735 . -1) (undo-tree-id12736 . -1) (undo-tree-id12737 . -1) (undo-tree-id12738 . -1) (undo-tree-id12739 . -1) (undo-tree-id12740 . -1) (undo-tree-id12741 . -1) (undo-tree-id12742 . -1) (undo-tree-id12743 . -1) (undo-tree-id12744 . -1) (undo-tree-id12745 . -1) (undo-tree-id12746 . -1) (undo-tree-id12747 . -1) (undo-tree-id12748 . -1) (undo-tree-id12749 . -1) (undo-tree-id12750 . -1) (undo-tree-id12751 . -1) (undo-tree-id12752 . -1) (undo-tree-id12753 . -1) (undo-tree-id12754 . -1) (undo-tree-id12755 . -1) (undo-tree-id12756 . -1) (undo-tree-id12757 . -1) (undo-tree-id12758 . -1) (undo-tree-id12759 . -1) (undo-tree-id12760 . -1) (undo-tree-id12761 . -1) (undo-tree-id12762 . -1) (undo-tree-id12763 . -1) (undo-tree-id12764 . -1) (undo-tree-id12765 . -1) (undo-tree-id12766 . -1) (undo-tree-id12767 . -1) (undo-tree-id12768 . -1) (undo-tree-id12769 . -1) (undo-tree-id12770 . -1) (undo-tree-id12771 . -1) (undo-tree-id12772 . -1) (undo-tree-id12773 . -1) (undo-tree-id12774 . -1) (undo-tree-id12775 . -1) (undo-tree-id12776 . -1) (undo-tree-id12777 . -1) (undo-tree-id12778 . -1) (undo-tree-id12779 . -1) (undo-tree-id12780 . -1) (undo-tree-id12781 . -1) (undo-tree-id12782 . -1) (undo-tree-id12783 . -1) (undo-tree-id12784 . -1) (undo-tree-id12785 . -1) (undo-tree-id12786 . -1) (undo-tree-id12787 . -1) (undo-tree-id12788 . -1) (undo-tree-id12789 . -1) (undo-tree-id12790 . -1) (undo-tree-id12791 . -1) (undo-tree-id12792 . -1) (undo-tree-id12793 . -1) (undo-tree-id12794 . -1) (undo-tree-id12795 . -1) (undo-tree-id12796 . -1) (undo-tree-id12797 . -1) (undo-tree-id12798 . -1) (undo-tree-id12799 . -1) (undo-tree-id12800 . -1) (undo-tree-id12801 . -1) (undo-tree-id12802 . -1) (undo-tree-id12803 . -1) (undo-tree-id12804 . -1) (undo-tree-id12805 . -1) (undo-tree-id12806 . -1) (undo-tree-id12807 . -1) (undo-tree-id12808 . -1) (undo-tree-id12809 . -1) (undo-tree-id12810 . -1) (undo-tree-id12811 . -1) (undo-tree-id12812 . -1) (undo-tree-id12813 . -1) (#("r" 0 1 (fontified t)) . -205) (undo-tree-id12814 . -1) (undo-tree-id12815 . -1) (undo-tree-id12816 . -1) (undo-tree-id12817 . -1) (undo-tree-id12818 . -1) (undo-tree-id12819 . -1) (undo-tree-id12820 . -1) (undo-tree-id12821 . -1) (undo-tree-id12822 . -1) (undo-tree-id12823 . -1) (undo-tree-id12824 . -1) (undo-tree-id12825 . -1) (undo-tree-id12826 . -1) (undo-tree-id12827 . -1) (undo-tree-id12828 . -1) (undo-tree-id12829 . -1) (undo-tree-id12830 . -1) (undo-tree-id12831 . -1) (undo-tree-id12832 . -1) (undo-tree-id12833 . -1) (undo-tree-id12834 . -1) (undo-tree-id12835 . -1) (undo-tree-id12836 . -1) (undo-tree-id12837 . -1) (undo-tree-id12838 . -1) (undo-tree-id12839 . -1) (undo-tree-id12840 . -1) (undo-tree-id12841 . -1) (undo-tree-id12842 . -1) (undo-tree-id12843 . -1) (undo-tree-id12844 . -1) (undo-tree-id12845 . -1) (undo-tree-id12846 . -1) (undo-tree-id12847 . -1) (undo-tree-id12848 . -1) (undo-tree-id12849 . -1) (undo-tree-id12850 . -1) (undo-tree-id12851 . -1) (undo-tree-id12852 . -1) (undo-tree-id12853 . -1) (undo-tree-id12854 . -1) (undo-tree-id12855 . -1) (undo-tree-id12856 . -1) (undo-tree-id12857 . -1) (undo-tree-id12858 . -1) (undo-tree-id12859 . -1) (undo-tree-id12860 . -1) (undo-tree-id12861 . -1) (undo-tree-id12862 . -1) (undo-tree-id12863 . -1) (undo-tree-id12864 . -1) (undo-tree-id12865 . -1) (undo-tree-id12866 . -1) (undo-tree-id12867 . -1) (undo-tree-id12868 . -1) (undo-tree-id12869 . -1) (undo-tree-id12870 . -1) (undo-tree-id12871 . -1) (undo-tree-id12872 . -1) (undo-tree-id12873 . -1) (undo-tree-id12874 . -1) (undo-tree-id12875 . -1) (undo-tree-id12876 . -1) (undo-tree-id12877 . -1) (undo-tree-id12878 . -1) (undo-tree-id12879 . -1) (undo-tree-id12880 . -1) (undo-tree-id12881 . -1) (undo-tree-id12882 . -1) (undo-tree-id12883 . -1) (undo-tree-id12884 . -1) (undo-tree-id12885 . -1) (undo-tree-id12886 . -1) (undo-tree-id12887 . -1) (undo-tree-id12888 . -1) (undo-tree-id12889 . -1) (undo-tree-id12890 . -1) (undo-tree-id12891 . -1) (undo-tree-id12892 . -1) (undo-tree-id12893 . -1) (undo-tree-id12894 . -1) (undo-tree-id12895 . -1) (undo-tree-id12896 . -1) (undo-tree-id12897 . -1) (undo-tree-id12898 . -1) (undo-tree-id12899 . -1) (undo-tree-id12900 . -1) (undo-tree-id12901 . -1) (undo-tree-id12902 . -1) (undo-tree-id12903 . -1) (undo-tree-id12904 . -1) (undo-tree-id12905 . -1) (undo-tree-id12906 . -1) (undo-tree-id12907 . -1) (undo-tree-id12908 . -1) (undo-tree-id12909 . -1) (undo-tree-id12910 . -1) (undo-tree-id12911 . -1) (undo-tree-id12912 . -1) (undo-tree-id12913 . -1) (undo-tree-id12914 . -1) (undo-tree-id12915 . -1) (undo-tree-id12916 . -1) (undo-tree-id12917 . -1) (undo-tree-id12918 . -1) (undo-tree-id12919 . -1) (undo-tree-id12920 . -1) (undo-tree-id12921 . -1) (undo-tree-id12922 . -1) (undo-tree-id12923 . -1) (undo-tree-id12924 . -1) (undo-tree-id12925 . -1) (undo-tree-id12926 . -1) (undo-tree-id12927 . -1) (undo-tree-id12928 . -1) (undo-tree-id12929 . -1) (undo-tree-id12930 . -1) (undo-tree-id12931 . -1) (undo-tree-id12932 . -1) (undo-tree-id12933 . -1) (undo-tree-id12934 . -1) (undo-tree-id12935 . -1) (undo-tree-id12936 . -1) (undo-tree-id12937 . -1) (undo-tree-id12938 . -1) (undo-tree-id12939 . -1) (undo-tree-id12940 . -1) (undo-tree-id12941 . -1) (undo-tree-id12942 . -1) (undo-tree-id12943 . -1) (undo-tree-id12944 . -1) (undo-tree-id12945 . -1) (undo-tree-id12946 . -1) (undo-tree-id12947 . -1) (undo-tree-id12948 . -1) (undo-tree-id12949 . -1) (undo-tree-id12950 . -1) (undo-tree-id12951 . -1) (undo-tree-id12952 . -1) (undo-tree-id12953 . -1) (undo-tree-id12954 . -1) (undo-tree-id12955 . -1) (undo-tree-id12956 . -1) (undo-tree-id12957 . -1) (undo-tree-id12958 . -1) (undo-tree-id12959 . -1) (undo-tree-id12960 . -1) (undo-tree-id12961 . -1) (undo-tree-id12962 . -1) (undo-tree-id12963 . -1) (undo-tree-id12964 . -1) (undo-tree-id12965 . -1) (undo-tree-id12966 . -1) (undo-tree-id12967 . -1) (undo-tree-id12968 . -1) (undo-tree-id12969 . -1) (undo-tree-id12970 . -1) (undo-tree-id12971 . -1) (undo-tree-id12972 . -1) (undo-tree-id12973 . -1) (undo-tree-id12974 . -1) (undo-tree-id12975 . -1) (undo-tree-id12976 . -1) (undo-tree-id12977 . -1) (undo-tree-id12978 . -1) (undo-tree-id12979 . -1) (undo-tree-id12980 . -1) (undo-tree-id12981 . -1) (undo-tree-id12982 . -1) (undo-tree-id12983 . -1) (undo-tree-id12984 . -1) (undo-tree-id12985 . -1) (undo-tree-id12986 . -1) (undo-tree-id12987 . -1) (undo-tree-id12988 . -1) (undo-tree-id12989 . -1) (undo-tree-id12990 . -1) (undo-tree-id12991 . -1) (undo-tree-id12992 . -1) (undo-tree-id12993 . -1) (undo-tree-id12994 . -1) (undo-tree-id12995 . -1) (undo-tree-id12996 . -1) (undo-tree-id12997 . -1) (undo-tree-id12998 . -1) (undo-tree-id12999 . -1) (undo-tree-id13000 . -1) (undo-tree-id13001 . -1) (undo-tree-id13002 . -1) (undo-tree-id13003 . -1) (undo-tree-id13004 . -1) (undo-tree-id13005 . -1) (undo-tree-id13006 . -1) (undo-tree-id13007 . -1) (undo-tree-id13008 . -1) (undo-tree-id13009 . -1) (undo-tree-id13010 . -1) (undo-tree-id13011 . -1) (undo-tree-id13012 . -1) (undo-tree-id13013 . -1) (undo-tree-id13014 . -1) (undo-tree-id13015 . -1) (undo-tree-id13016 . -1) (undo-tree-id13017 . -1) (undo-tree-id13018 . -1) (undo-tree-id13019 . -1) (undo-tree-id13020 . -1) (undo-tree-id13021 . -1) (undo-tree-id13022 . -1) (undo-tree-id13023 . -1) (undo-tree-id13024 . -1) (undo-tree-id13025 . -1) (undo-tree-id13026 . -1) (undo-tree-id13027 . -1) (undo-tree-id13028 . -1) (undo-tree-id13029 . -1) (undo-tree-id13030 . -1) (undo-tree-id13031 . -1) (undo-tree-id13032 . -1) (#("c" 0 1 (fontified t)) . -206) (undo-tree-id13033 . -1) (undo-tree-id13034 . -1) (undo-tree-id13035 . -1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) (undo-tree-id13040 . -1) (undo-tree-id13041 . -1) (undo-tree-id13042 . -1) (undo-tree-id13043 . -1) (undo-tree-id13044 . -1) (undo-tree-id13045 . -1) (undo-tree-id13046 . -1) (undo-tree-id13047 . -1) (undo-tree-id13048 . -1) (undo-tree-id13049 . -1) (undo-tree-id13050 . -1) (undo-tree-id13051 . -1) (undo-tree-id13052 . -1) (undo-tree-id13053 . -1) (undo-tree-id13054 . -1) (undo-tree-id13055 . -1) (undo-tree-id13056 . -1) (undo-tree-id13057 . -1) (undo-tree-id13058 . -1) (undo-tree-id13059 . -1) (undo-tree-id13060 . -1) (undo-tree-id13061 . -1) (undo-tree-id13062 . -1) (undo-tree-id13063 . -1) (undo-tree-id13064 . -1) (undo-tree-id13065 . -1) (undo-tree-id13066 . -1) (undo-tree-id13067 . -1) (undo-tree-id13068 . -1) (undo-tree-id13069 . -1) (undo-tree-id13070 . -1) (undo-tree-id13071 . -1) (undo-tree-id13072 . -1) (undo-tree-id13073 . -1) (undo-tree-id13074 . -1) (undo-tree-id13075 . -1) (undo-tree-id13076 . -1) (undo-tree-id13077 . -1) (undo-tree-id13078 . -1) (undo-tree-id13079 . -1) (undo-tree-id13080 . -1) (undo-tree-id13081 . -1) (undo-tree-id13082 . -1) (undo-tree-id13083 . -1) (undo-tree-id13084 . -1) (undo-tree-id13085 . -1) (undo-tree-id13086 . -1) (undo-tree-id13087 . -1) (undo-tree-id13088 . -1) (undo-tree-id13089 . -1) (undo-tree-id13090 . -1) (undo-tree-id13091 . -1) (undo-tree-id13092 . -1) (undo-tree-id13093 . -1) (undo-tree-id13094 . -1) (undo-tree-id13095 . -1) (undo-tree-id13096 . -1) (undo-tree-id13097 . -1) (undo-tree-id13098 . -1) (undo-tree-id13099 . -1) (undo-tree-id13100 . -1) (undo-tree-id13101 . -1) (undo-tree-id13102 . -1) (undo-tree-id13103 . -1) (undo-tree-id13104 . -1) (undo-tree-id13105 . -1) (undo-tree-id13106 . -1) (undo-tree-id13107 . -1) (undo-tree-id13108 . -1) (undo-tree-id13109 . -1) (undo-tree-id13110 . -1) (undo-tree-id13111 . -1) (undo-tree-id13112 . -1) (undo-tree-id13113 . -1) (undo-tree-id13114 . -1) (undo-tree-id13115 . -1) (undo-tree-id13116 . -1) (undo-tree-id13117 . -1) (undo-tree-id13118 . -1) (undo-tree-id13119 . -1) (undo-tree-id13120 . -1) (undo-tree-id13121 . -1) (undo-tree-id13122 . -1) (undo-tree-id13123 . -1) (undo-tree-id13124 . -1) (undo-tree-id13125 . -1) (undo-tree-id13126 . -1) (undo-tree-id13127 . -1) (undo-tree-id13128 . -1) (undo-tree-id13129 . -1) (undo-tree-id13130 . -1) (undo-tree-id13131 . -1) (undo-tree-id13132 . -1) (undo-tree-id13133 . -1) (undo-tree-id13134 . -1) (undo-tree-id13135 . -1) (undo-tree-id13136 . -1) (undo-tree-id13137 . -1) (undo-tree-id13138 . -1) (undo-tree-id13139 . -1) (undo-tree-id13140 . -1) (undo-tree-id13141 . -1) (undo-tree-id13142 . -1) (undo-tree-id13143 . -1) (undo-tree-id13144 . -1) (undo-tree-id13145 . -1) (undo-tree-id13146 . -1) (undo-tree-id13147 . -1) (undo-tree-id13148 . -1) (undo-tree-id13149 . -1) (undo-tree-id13150 . -1) (undo-tree-id13151 . -1) (undo-tree-id13152 . -1) (undo-tree-id13153 . -1) (undo-tree-id13154 . -1) (undo-tree-id13155 . -1) (undo-tree-id13156 . -1) (undo-tree-id13157 . -1) (undo-tree-id13158 . -1) (undo-tree-id13159 . -1) (undo-tree-id13160 . -1) (undo-tree-id13161 . -1) (undo-tree-id13162 . -1) (undo-tree-id13163 . -1) (undo-tree-id13164 . -1) (undo-tree-id13165 . -1) (undo-tree-id13166 . -1) (undo-tree-id13167 . -1) (undo-tree-id13168 . -1) (undo-tree-id13169 . -1) (undo-tree-id13170 . -1) (undo-tree-id13171 . -1) (undo-tree-id13172 . -1) (undo-tree-id13173 . -1) (undo-tree-id13174 . -1) (undo-tree-id13175 . -1) (undo-tree-id13176 . -1) (undo-tree-id13177 . -1) (undo-tree-id13178 . -1) (undo-tree-id13179 . -1) (undo-tree-id13180 . -1) (undo-tree-id13181 . -1) (undo-tree-id13182 . -1) (undo-tree-id13183 . -1) (undo-tree-id13184 . -1) (undo-tree-id13185 . -1) (undo-tree-id13186 . -1) (undo-tree-id13187 . -1) (undo-tree-id13188 . -1) (undo-tree-id13189 . -1) (undo-tree-id13190 . -1) (undo-tree-id13191 . -1) (undo-tree-id13192 . -1) (undo-tree-id13193 . -1) (undo-tree-id13194 . -1) (undo-tree-id13195 . -1) (undo-tree-id13196 . -1) (undo-tree-id13197 . -1) (undo-tree-id13198 . -1) (undo-tree-id13199 . -1) (undo-tree-id13200 . -1) (undo-tree-id13201 . -1) (undo-tree-id13202 . -1) (undo-tree-id13203 . -1) (undo-tree-id13204 . -1) (undo-tree-id13205 . -1) (undo-tree-id13206 . -1) (undo-tree-id13207 . -1) (undo-tree-id13208 . -1) (undo-tree-id13209 . -1) (undo-tree-id13210 . -1) (undo-tree-id13211 . -1) (undo-tree-id13212 . -1) (undo-tree-id13213 . -1) (undo-tree-id13214 . -1) (undo-tree-id13215 . -1) (undo-tree-id13216 . -1) (undo-tree-id13217 . -1) (undo-tree-id13218 . -1) (undo-tree-id13219 . -1) (undo-tree-id13220 . -1) (undo-tree-id13221 . -1) (undo-tree-id13222 . -1) (undo-tree-id13223 . -1) (undo-tree-id13224 . -1) (undo-tree-id13225 . -1) (undo-tree-id13226 . -1) (undo-tree-id13227 . -1) (undo-tree-id13228 . -1) (undo-tree-id13229 . -1) (undo-tree-id13230 . -1) (undo-tree-id13231 . -1) (undo-tree-id13232 . -1) (undo-tree-id13233 . -1) (undo-tree-id13234 . -1) (undo-tree-id13235 . -1) (undo-tree-id13236 . -1) (undo-tree-id13237 . -1) (undo-tree-id13238 . -1) (undo-tree-id13239 . -1) (undo-tree-id13240 . -1) (undo-tree-id13241 . -1) (#("h" 0 1 (fontified t)) . -207) (undo-tree-id13242 . -1) (undo-tree-id13243 . -1) (undo-tree-id13244 . -1) (undo-tree-id13245 . -1) (undo-tree-id13246 . -1) (undo-tree-id13247 . -1) (undo-tree-id13248 . -1) (undo-tree-id13249 . -1) (undo-tree-id13250 . -1) (undo-tree-id13251 . -1) (undo-tree-id13252 . -1) (undo-tree-id13253 . -1) (undo-tree-id13254 . -1) (undo-tree-id13255 . -1) (undo-tree-id13256 . -1) (undo-tree-id13257 . -1) (undo-tree-id13258 . -1) (undo-tree-id13259 . -1) (undo-tree-id13260 . -1) (undo-tree-id13261 . -1) (undo-tree-id13262 . -1) (undo-tree-id13263 . -1) (undo-tree-id13264 . -1) (undo-tree-id13265 . -1) (undo-tree-id13266 . -1) (undo-tree-id13267 . -1) (undo-tree-id13268 . -1) (undo-tree-id13269 . -1) (undo-tree-id13270 . -1) (undo-tree-id13271 . -1) (undo-tree-id13272 . -1) (undo-tree-id13273 . -1) (undo-tree-id13274 . -1) (undo-tree-id13275 . -1) (undo-tree-id13276 . -1) (undo-tree-id13277 . -1) (undo-tree-id13278 . -1) (undo-tree-id13279 . -1) (undo-tree-id13280 . -1) (undo-tree-id13281 . -1) (undo-tree-id13282 . -1) (undo-tree-id13283 . -1) (undo-tree-id13284 . -1) (undo-tree-id13285 . -1) (undo-tree-id13286 . -1) (undo-tree-id13287 . -1) (undo-tree-id13288 . -1) (undo-tree-id13289 . -1) (undo-tree-id13290 . -1) (undo-tree-id13291 . -1) (undo-tree-id13292 . -1) (undo-tree-id13293 . -1) (undo-tree-id13294 . -1) (undo-tree-id13295 . -1) (undo-tree-id13296 . -1) (undo-tree-id13297 . -1) (undo-tree-id13298 . -1) (undo-tree-id13299 . -1) (undo-tree-id13300 . -1) (undo-tree-id13301 . -1) (undo-tree-id13302 . -1) (undo-tree-id13303 . -1) (undo-tree-id13304 . -1) (undo-tree-id13305 . -1) (undo-tree-id13306 . -1) (undo-tree-id13307 . -1) (undo-tree-id13308 . -1) (undo-tree-id13309 . -1) (undo-tree-id13310 . -1) (undo-tree-id13311 . -1) (undo-tree-id13312 . -1) (undo-tree-id13313 . -1) (undo-tree-id13314 . -1) (undo-tree-id13315 . -1) (undo-tree-id13316 . -1) (undo-tree-id13317 . -1) (undo-tree-id13318 . -1) (undo-tree-id13319 . -1) (undo-tree-id13320 . -1) (undo-tree-id13321 . -1) (undo-tree-id13322 . -1) (undo-tree-id13323 . -1) (undo-tree-id13324 . -1) (undo-tree-id13325 . -1) (undo-tree-id13326 . -1) (undo-tree-id13327 . -1) (undo-tree-id13328 . -1) (undo-tree-id13329 . -1) (undo-tree-id13330 . -1) (undo-tree-id13331 . -1) (undo-tree-id13332 . -1) (undo-tree-id13333 . -1) (undo-tree-id13334 . -1) (undo-tree-id13335 . -1) (undo-tree-id13336 . -1) (undo-tree-id13337 . -1) (undo-tree-id13338 . -1) (undo-tree-id13339 . -1) (undo-tree-id13340 . -1) (undo-tree-id13341 . -1) (undo-tree-id13342 . -1) (undo-tree-id13343 . -1) (undo-tree-id13344 . -1) (undo-tree-id13345 . -1) (undo-tree-id13346 . -1) (undo-tree-id13347 . -1) (undo-tree-id13348 . -1) (undo-tree-id13349 . -1) (undo-tree-id13350 . -1) (undo-tree-id13351 . -1) (undo-tree-id13352 . -1) (undo-tree-id13353 . -1) (undo-tree-id13354 . -1) (undo-tree-id13355 . -1) (undo-tree-id13356 . -1) (undo-tree-id13357 . -1) (undo-tree-id13358 . -1) (undo-tree-id13359 . -1) (undo-tree-id13360 . -1) (undo-tree-id13361 . -1) (undo-tree-id13362 . -1) (undo-tree-id13363 . -1) (undo-tree-id13364 . -1) (undo-tree-id13365 . -1) (undo-tree-id13366 . -1) (undo-tree-id13367 . -1) (undo-tree-id13368 . -1) (undo-tree-id13369 . -1) (undo-tree-id13370 . -1) (undo-tree-id13371 . -1) (undo-tree-id13372 . -1) (undo-tree-id13373 . -1) (undo-tree-id13374 . -1) (undo-tree-id13375 . -1) (undo-tree-id13376 . -1) (undo-tree-id13377 . -1) (undo-tree-id13378 . -1) (undo-tree-id13379 . -1) (undo-tree-id13380 . -1) (undo-tree-id13381 . -1) (undo-tree-id13382 . -1) (undo-tree-id13383 . -1) (undo-tree-id13384 . -1) (undo-tree-id13385 . -1) (undo-tree-id13386 . -1) (undo-tree-id13387 . -1) (undo-tree-id13388 . -1) (undo-tree-id13389 . -1) (undo-tree-id13390 . -1) (undo-tree-id13391 . -1) (undo-tree-id13392 . -1) (undo-tree-id13393 . -1) (undo-tree-id13394 . -1) (undo-tree-id13395 . -1) (undo-tree-id13396 . -1) (undo-tree-id13397 . -1) (undo-tree-id13398 . -1) (undo-tree-id13399 . -1) (undo-tree-id13400 . -1) (undo-tree-id13401 . -1) (undo-tree-id13402 . -1) (undo-tree-id13403 . -1) (undo-tree-id13404 . -1) (undo-tree-id13405 . -1) (undo-tree-id13406 . -1) (undo-tree-id13407 . -1) (undo-tree-id13408 . -1) (undo-tree-id13409 . -1) (undo-tree-id13410 . -1) (undo-tree-id13411 . -1) (undo-tree-id13412 . -1) (undo-tree-id13413 . -1) (undo-tree-id13414 . -1) (undo-tree-id13415 . -1) (undo-tree-id13416 . -1) (undo-tree-id13417 . -1) (undo-tree-id13418 . -1) (undo-tree-id13419 . -1) (undo-tree-id13420 . -1) (undo-tree-id13421 . -1) (undo-tree-id13422 . -1) (undo-tree-id13423 . -1) (undo-tree-id13424 . -1) (undo-tree-id13425 . -1) (undo-tree-id13426 . -1) (undo-tree-id13427 . -1) (undo-tree-id13428 . -1) (undo-tree-id13429 . -1) (undo-tree-id13430 . -1) (undo-tree-id13431 . -1) (undo-tree-id13432 . -1) (undo-tree-id13433 . -1) (#("." 0 1 (fontified t)) . -208) (undo-tree-id13434 . -1) (undo-tree-id13435 . -1) (undo-tree-id13436 . -1) (undo-tree-id13437 . -1) (undo-tree-id13438 . -1) (undo-tree-id13439 . -1) (undo-tree-id13440 . -1) (undo-tree-id13441 . -1) (undo-tree-id13442 . -1) (undo-tree-id13443 . -1) (undo-tree-id13444 . -1) (undo-tree-id13445 . -1) (undo-tree-id13446 . -1) (undo-tree-id13447 . -1) (undo-tree-id13448 . -1) (undo-tree-id13449 . -1) (undo-tree-id13450 . -1) (undo-tree-id13451 . -1) (undo-tree-id13452 . -1) (undo-tree-id13453 . -1) (undo-tree-id13454 . -1) (undo-tree-id13455 . -1) (undo-tree-id13456 . -1) (undo-tree-id13457 . -1) (undo-tree-id13458 . -1) (undo-tree-id13459 . -1) (undo-tree-id13460 . -1) (undo-tree-id13461 . -1) (undo-tree-id13462 . -1) (undo-tree-id13463 . -1) (undo-tree-id13464 . -1) (undo-tree-id13465 . -1) (undo-tree-id13466 . -1) (undo-tree-id13467 . -1) (undo-tree-id13468 . -1) (undo-tree-id13469 . -1) (undo-tree-id13470 . -1) (undo-tree-id13471 . -1) (undo-tree-id13472 . -1) (undo-tree-id13473 . -1) (undo-tree-id13474 . -1) (undo-tree-id13475 . -1) (undo-tree-id13476 . -1) (undo-tree-id13477 . -1) (undo-tree-id13478 . -1) (undo-tree-id13479 . -1) (undo-tree-id13480 . -1) (undo-tree-id13481 . -1) (undo-tree-id13482 . -1) (undo-tree-id13483 . -1) (undo-tree-id13484 . -1) (undo-tree-id13485 . -1) (undo-tree-id13486 . -1) (undo-tree-id13487 . -1) (undo-tree-id13488 . -1) (undo-tree-id13489 . -1) (undo-tree-id13490 . -1) (undo-tree-id13491 . -1) (undo-tree-id13492 . -1) (undo-tree-id13493 . -1) (undo-tree-id13494 . -1) (undo-tree-id13495 . -1) (undo-tree-id13496 . -1) (undo-tree-id13497 . -1) (undo-tree-id13498 . -1) (undo-tree-id13499 . -1) (undo-tree-id13500 . -1) (undo-tree-id13501 . -1) (undo-tree-id13502 . -1) (undo-tree-id13503 . -1) (undo-tree-id13504 . -1) (undo-tree-id13505 . -1) (undo-tree-id13506 . -1) (undo-tree-id13507 . -1) (undo-tree-id13508 . -1) (undo-tree-id13509 . -1) (undo-tree-id13510 . -1) (undo-tree-id13511 . -1) (undo-tree-id13512 . -1) (undo-tree-id13513 . -1) (undo-tree-id13514 . -1) (undo-tree-id13515 . -1) (undo-tree-id13516 . -1) (undo-tree-id13517 . -1) (undo-tree-id13518 . -1) (undo-tree-id13519 . -1) (undo-tree-id13520 . -1) (undo-tree-id13521 . -1) (undo-tree-id13522 . -1) (undo-tree-id13523 . -1) (undo-tree-id13524 . -1) (undo-tree-id13525 . -1) (undo-tree-id13526 . -1) (undo-tree-id13527 . -1) (undo-tree-id13528 . -1) (undo-tree-id13529 . -1) (undo-tree-id13530 . -1) (undo-tree-id13531 . -1) (undo-tree-id13532 . -1) (undo-tree-id13533 . -1) (undo-tree-id13534 . -1) (undo-tree-id13535 . -1) (undo-tree-id13536 . -1) (undo-tree-id13537 . -1) (undo-tree-id13538 . -1) (undo-tree-id13539 . -1) (undo-tree-id13540 . -1) (undo-tree-id13541 . -1) (undo-tree-id13542 . -1) (undo-tree-id13543 . -1) (undo-tree-id13544 . -1) (undo-tree-id13545 . -1) (undo-tree-id13546 . -1) (undo-tree-id13547 . -1) (undo-tree-id13548 . -1) (undo-tree-id13549 . -1) (undo-tree-id13550 . -1) (undo-tree-id13551 . -1) (undo-tree-id13552 . -1) (undo-tree-id13553 . -1) (undo-tree-id13554 . -1) (undo-tree-id13555 . -1) (undo-tree-id13556 . -1) (undo-tree-id13557 . -1) (undo-tree-id13558 . -1) (undo-tree-id13559 . -1) (undo-tree-id13560 . -1) (undo-tree-id13561 . -1) (undo-tree-id13562 . -1) (undo-tree-id13563 . -1) (undo-tree-id13564 . -1) (undo-tree-id13565 . -1) (undo-tree-id13566 . -1) (undo-tree-id13567 . -1) (undo-tree-id13568 . -1) (undo-tree-id13569 . -1) (undo-tree-id13570 . -1) (undo-tree-id13571 . -1) (undo-tree-id13572 . -1) (undo-tree-id13573 . -1) (undo-tree-id13574 . -1) (undo-tree-id13575 . -1) (undo-tree-id13576 . -1) (undo-tree-id13577 . -1) (undo-tree-id13578 . -1) (undo-tree-id13579 . -1) (undo-tree-id13580 . -1) (undo-tree-id13581 . -1) (undo-tree-id13582 . -1) (undo-tree-id13583 . -1) (undo-tree-id13584 . -1) (undo-tree-id13585 . -1) (undo-tree-id13586 . -1) (undo-tree-id13587 . -1) (undo-tree-id13588 . -1) (undo-tree-id13589 . -1) (undo-tree-id13590 . -1) (undo-tree-id13591 . -1) (undo-tree-id13592 . -1) (undo-tree-id13593 . -1) (undo-tree-id13594 . -1) (undo-tree-id13595 . -1) (undo-tree-id13596 . -1) (undo-tree-id13597 . -1) (undo-tree-id13598 . -1) (undo-tree-id13599 . -1) (undo-tree-id13600 . -1) (undo-tree-id13601 . -1) (undo-tree-id13602 . -1) (undo-tree-id13603 . -1) (undo-tree-id13604 . -1) (undo-tree-id13605 . -1) (undo-tree-id13606 . -1) (undo-tree-id13607 . -1) (undo-tree-id13608 . -1) (#("f" 0 1 (fontified t)) . -209) (undo-tree-id13609 . -1) (undo-tree-id13610 . -1) (undo-tree-id13611 . -1) (undo-tree-id13612 . -1) (undo-tree-id13613 . -1) (undo-tree-id13614 . -1) (undo-tree-id13615 . -1) (undo-tree-id13616 . -1) (undo-tree-id13617 . -1) (undo-tree-id13618 . -1) (undo-tree-id13619 . -1) (undo-tree-id13620 . -1) (undo-tree-id13621 . -1) (undo-tree-id13622 . -1) (undo-tree-id13623 . -1) (undo-tree-id13624 . -1) (undo-tree-id13625 . -1) (undo-tree-id13626 . -1) (undo-tree-id13627 . -1) (undo-tree-id13628 . -1) (undo-tree-id13629 . -1) (undo-tree-id13630 . -1) (undo-tree-id13631 . -1) (undo-tree-id13632 . -1) (undo-tree-id13633 . -1) (undo-tree-id13634 . -1) (undo-tree-id13635 . -1) (undo-tree-id13636 . -1) (undo-tree-id13637 . -1) (undo-tree-id13638 . -1) (undo-tree-id13639 . -1) (undo-tree-id13640 . -1) (undo-tree-id13641 . -1) (undo-tree-id13642 . -1) (undo-tree-id13643 . -1) (undo-tree-id13644 . -1) (undo-tree-id13645 . -1) (undo-tree-id13646 . -1) (undo-tree-id13647 . -1) (undo-tree-id13648 . -1) (undo-tree-id13649 . -1) (undo-tree-id13650 . -1) (undo-tree-id13651 . -1) (undo-tree-id13652 . -1) (undo-tree-id13653 . -1) (undo-tree-id13654 . -1) (undo-tree-id13655 . -1) (undo-tree-id13656 . -1) (undo-tree-id13657 . -1) (undo-tree-id13658 . -1) (undo-tree-id13659 . -1) (undo-tree-id13660 . -1) (undo-tree-id13661 . -1) (undo-tree-id13662 . -1) (undo-tree-id13663 . -1) (undo-tree-id13664 . -1) (undo-tree-id13665 . -1) (undo-tree-id13666 . -1) (undo-tree-id13667 . -1) (undo-tree-id13668 . -1) (undo-tree-id13669 . -1) (undo-tree-id13670 . -1) (undo-tree-id13671 . -1) (undo-tree-id13672 . -1) (undo-tree-id13673 . -1) (undo-tree-id13674 . -1) (undo-tree-id13675 . -1) (undo-tree-id13676 . -1) (undo-tree-id13677 . -1) (undo-tree-id13678 . -1) (undo-tree-id13679 . -1) (undo-tree-id13680 . -1) (undo-tree-id13681 . -1) (undo-tree-id13682 . -1) (undo-tree-id13683 . -1) (undo-tree-id13684 . -1) (undo-tree-id13685 . -1) (undo-tree-id13686 . -1) (undo-tree-id13687 . -1) (undo-tree-id13688 . -1) (undo-tree-id13689 . -1) (undo-tree-id13690 . -1) (undo-tree-id13691 . -1) (undo-tree-id13692 . -1) (undo-tree-id13693 . -1) (undo-tree-id13694 . -1) (undo-tree-id13695 . -1) (undo-tree-id13696 . -1) (undo-tree-id13697 . -1) (undo-tree-id13698 . -1) (undo-tree-id13699 . -1) (undo-tree-id13700 . -1) (undo-tree-id13701 . -1) (undo-tree-id13702 . -1) (undo-tree-id13703 . -1) (undo-tree-id13704 . -1) (undo-tree-id13705 . -1) (undo-tree-id13706 . -1) (undo-tree-id13707 . -1) (undo-tree-id13708 . -1) (undo-tree-id13709 . -1) (undo-tree-id13710 . -1) (undo-tree-id13711 . -1) (undo-tree-id13712 . -1) (undo-tree-id13713 . -1) (undo-tree-id13714 . -1) (undo-tree-id13715 . -1) (undo-tree-id13716 . -1) (undo-tree-id13717 . -1) (undo-tree-id13718 . -1) (undo-tree-id13719 . -1) (undo-tree-id13720 . -1) (undo-tree-id13721 . -1) (undo-tree-id13722 . -1) (undo-tree-id13723 . -1) (undo-tree-id13724 . -1) (undo-tree-id13725 . -1) (undo-tree-id13726 . -1) (undo-tree-id13727 . -1) (undo-tree-id13728 . -1) (undo-tree-id13729 . -1) (undo-tree-id13730 . -1) (undo-tree-id13731 . -1) (undo-tree-id13732 . -1) (undo-tree-id13733 . -1) (undo-tree-id13734 . -1) (undo-tree-id13735 . -1) (undo-tree-id13736 . -1) (undo-tree-id13737 . -1) (undo-tree-id13738 . -1) (undo-tree-id13739 . -1) (undo-tree-id13740 . -1) (undo-tree-id13741 . -1) (undo-tree-id13742 . -1) (undo-tree-id13743 . -1) (undo-tree-id13744 . -1) (undo-tree-id13745 . -1) (undo-tree-id13746 . -1) (undo-tree-id13747 . -1) (undo-tree-id13748 . -1) (undo-tree-id13749 . -1) (undo-tree-id13750 . -1) (undo-tree-id13751 . -1) (undo-tree-id13752 . -1) (undo-tree-id13753 . -1) (undo-tree-id13754 . -1) (undo-tree-id13755 . -1) (undo-tree-id13756 . -1) (undo-tree-id13757 . -1) (undo-tree-id13758 . -1) (undo-tree-id13759 . -1) (undo-tree-id13760 . -1) (undo-tree-id13761 . -1) (undo-tree-id13762 . -1) (undo-tree-id13763 . -1) (undo-tree-id13764 . -1) (undo-tree-id13765 . -1) (undo-tree-id13766 . -1) (#("l" 0 1 (fontified t)) . -210) (undo-tree-id13767 . -1) (undo-tree-id13768 . -1) (undo-tree-id13769 . -1) (undo-tree-id13770 . -1) (undo-tree-id13771 . -1) (undo-tree-id13772 . -1) (undo-tree-id13773 . -1) (undo-tree-id13774 . -1) (undo-tree-id13775 . -1) (undo-tree-id13776 . -1) (undo-tree-id13777 . -1) (undo-tree-id13778 . -1) (undo-tree-id13779 . -1) (undo-tree-id13780 . -1) (undo-tree-id13781 . -1) (undo-tree-id13782 . -1) (undo-tree-id13783 . -1) (undo-tree-id13784 . -1) (undo-tree-id13785 . -1) (undo-tree-id13786 . -1) (undo-tree-id13787 . -1) (undo-tree-id13788 . -1) (undo-tree-id13789 . -1) (undo-tree-id13790 . -1) (undo-tree-id13791 . -1) (undo-tree-id13792 . -1) (undo-tree-id13793 . -1) (undo-tree-id13794 . -1) (undo-tree-id13795 . -1) (undo-tree-id13796 . -1) (undo-tree-id13797 . -1) (undo-tree-id13798 . -1) (undo-tree-id13799 . -1) (undo-tree-id13800 . -1) (undo-tree-id13801 . -1) (undo-tree-id13802 . -1) (undo-tree-id13803 . -1) (undo-tree-id13804 . -1) (undo-tree-id13805 . -1) (undo-tree-id13806 . -1) (undo-tree-id13807 . -1) (undo-tree-id13808 . -1) (undo-tree-id13809 . -1) (undo-tree-id13810 . -1) (undo-tree-id13811 . -1) (undo-tree-id13812 . -1) (undo-tree-id13813 . -1) (undo-tree-id13814 . -1) (undo-tree-id13815 . -1) (undo-tree-id13816 . -1) (undo-tree-id13817 . -1) (undo-tree-id13818 . -1) (undo-tree-id13819 . -1) (undo-tree-id13820 . -1) (undo-tree-id13821 . -1) (undo-tree-id13822 . -1) (undo-tree-id13823 . -1) (undo-tree-id13824 . -1) (undo-tree-id13825 . -1) (undo-tree-id13826 . -1) (undo-tree-id13827 . -1) (undo-tree-id13828 . -1) (undo-tree-id13829 . -1) (undo-tree-id13830 . -1) (undo-tree-id13831 . -1) (undo-tree-id13832 . -1) (undo-tree-id13833 . -1) (undo-tree-id13834 . -1) (undo-tree-id13835 . -1) (undo-tree-id13836 . -1) (undo-tree-id13837 . -1) (undo-tree-id13838 . -1) (undo-tree-id13839 . -1) (undo-tree-id13840 . -1) (undo-tree-id13841 . -1) (undo-tree-id13842 . -1) (undo-tree-id13843 . -1) (undo-tree-id13844 . -1) (undo-tree-id13845 . -1) (undo-tree-id13846 . -1) (undo-tree-id13847 . -1) (undo-tree-id13848 . -1) (undo-tree-id13849 . -1) (undo-tree-id13850 . -1) (undo-tree-id13851 . -1) (undo-tree-id13852 . -1) (undo-tree-id13853 . -1) (undo-tree-id13854 . -1) (undo-tree-id13855 . -1) (undo-tree-id13856 . -1) (undo-tree-id13857 . -1) (undo-tree-id13858 . -1) (undo-tree-id13859 . -1) (undo-tree-id13860 . -1) (undo-tree-id13861 . -1) (undo-tree-id13862 . -1) (undo-tree-id13863 . -1) (undo-tree-id13864 . -1) (undo-tree-id13865 . -1) (undo-tree-id13866 . -1) (undo-tree-id13867 . -1) (undo-tree-id13868 . -1) (undo-tree-id13869 . -1) (undo-tree-id13870 . -1) (undo-tree-id13871 . -1) (undo-tree-id13872 . -1) (undo-tree-id13873 . -1) (undo-tree-id13874 . -1) (undo-tree-id13875 . -1) (undo-tree-id13876 . -1) (undo-tree-id13877 . -1) (undo-tree-id13878 . -1) (undo-tree-id13879 . -1) (undo-tree-id13880 . -1) (undo-tree-id13881 . -1) (undo-tree-id13882 . -1) (undo-tree-id13883 . -1) (undo-tree-id13884 . -1) (undo-tree-id13885 . -1) (undo-tree-id13886 . -1) (undo-tree-id13887 . -1) (undo-tree-id13888 . -1) (undo-tree-id13889 . -1) (undo-tree-id13890 . -1) (undo-tree-id13891 . -1) (undo-tree-id13892 . -1) (undo-tree-id13893 . -1) (undo-tree-id13894 . -1) (undo-tree-id13895 . -1) (undo-tree-id13896 . -1) (undo-tree-id13897 . -1) (undo-tree-id13898 . -1) (undo-tree-id13899 . -1) (undo-tree-id13900 . -1) (undo-tree-id13901 . -1) (undo-tree-id13902 . -1) (undo-tree-id13903 . -1) (undo-tree-id13904 . -1) (undo-tree-id13905 . -1) (undo-tree-id13906 . -1) (undo-tree-id13907 . -1) (#("o" 0 1 (fontified t)) . -211) (undo-tree-id13908 . -1) (undo-tree-id13909 . -1) (undo-tree-id13910 . -1) (undo-tree-id13911 . -1) (undo-tree-id13912 . -1) (undo-tree-id13913 . -1) (undo-tree-id13914 . -1) (undo-tree-id13915 . -1) (undo-tree-id13916 . -1) (undo-tree-id13917 . -1) (undo-tree-id13918 . -1) (undo-tree-id13919 . -1) (undo-tree-id13920 . -1) (undo-tree-id13921 . -1) (undo-tree-id13922 . -1) (undo-tree-id13923 . -1) (undo-tree-id13924 . -1) (undo-tree-id13925 . -1) (undo-tree-id13926 . -1) (undo-tree-id13927 . -1) (undo-tree-id13928 . -1) (undo-tree-id13929 . -1) (undo-tree-id13930 . -1) (undo-tree-id13931 . -1) (undo-tree-id13932 . -1) (undo-tree-id13933 . -1) (undo-tree-id13934 . -1) (undo-tree-id13935 . -1) (undo-tree-id13936 . -1) (undo-tree-id13937 . -1) (undo-tree-id13938 . -1) (undo-tree-id13939 . -1) (undo-tree-id13940 . -1) (undo-tree-id13941 . -1) (undo-tree-id13942 . -1) (undo-tree-id13943 . -1) (undo-tree-id13944 . -1) (undo-tree-id13945 . -1) (undo-tree-id13946 . -1) (undo-tree-id13947 . -1) (undo-tree-id13948 . -1) (undo-tree-id13949 . -1) (undo-tree-id13950 . -1) (undo-tree-id13951 . -1) (undo-tree-id13952 . -1) (undo-tree-id13953 . -1) (undo-tree-id13954 . -1) (undo-tree-id13955 . -1) (undo-tree-id13956 . -1) (undo-tree-id13957 . -1) (undo-tree-id13958 . -1) (undo-tree-id13959 . -1) (undo-tree-id13960 . -1) (undo-tree-id13961 . -1) (undo-tree-id13962 . -1) (undo-tree-id13963 . -1) (undo-tree-id13964 . -1) (undo-tree-id13965 . -1) (undo-tree-id13966 . -1) (undo-tree-id13967 . -1) (undo-tree-id13968 . -1) (undo-tree-id13969 . -1) (undo-tree-id13970 . -1) (undo-tree-id13971 . -1) (undo-tree-id13972 . -1) (undo-tree-id13973 . -1) (undo-tree-id13974 . -1) (undo-tree-id13975 . -1) (undo-tree-id13976 . -1) (undo-tree-id13977 . -1) (undo-tree-id13978 . -1) (undo-tree-id13979 . -1) (undo-tree-id13980 . -1) (undo-tree-id13981 . -1) (undo-tree-id13982 . -1) (undo-tree-id13983 . -1) (undo-tree-id13984 . -1) (undo-tree-id13985 . -1) (undo-tree-id13986 . -1) (undo-tree-id13987 . -1) (undo-tree-id13988 . -1) (undo-tree-id13989 . -1) (undo-tree-id13990 . -1) (undo-tree-id13991 . -1) (undo-tree-id13992 . -1) (undo-tree-id13993 . -1) (undo-tree-id13994 . -1) (undo-tree-id13995 . -1) (undo-tree-id13996 . -1) (undo-tree-id13997 . -1) (undo-tree-id13998 . -1) (undo-tree-id13999 . -1) (undo-tree-id14000 . -1) (undo-tree-id14001 . -1) (undo-tree-id14002 . -1) (undo-tree-id14003 . -1) (undo-tree-id14004 . -1) (undo-tree-id14005 . -1) (undo-tree-id14006 . -1) (undo-tree-id14007 . -1) (undo-tree-id14008 . -1) (undo-tree-id14009 . -1) (undo-tree-id14010 . -1) (undo-tree-id14011 . -1) (undo-tree-id14012 . -1) (undo-tree-id14013 . -1) (undo-tree-id14014 . -1) (undo-tree-id14015 . -1) (undo-tree-id14016 . -1) (undo-tree-id14017 . -1) (undo-tree-id14018 . -1) (undo-tree-id14019 . -1) (undo-tree-id14020 . -1) (undo-tree-id14021 . -1) (undo-tree-id14022 . -1) (undo-tree-id14023 . -1) (undo-tree-id14024 . -1) (undo-tree-id14025 . -1) (undo-tree-id14026 . -1) (undo-tree-id14027 . -1) (undo-tree-id14028 . -1) (undo-tree-id14029 . -1) (undo-tree-id14030 . -1) (undo-tree-id14031 . -1) (#("a" 0 1 (fontified t)) . -212) (undo-tree-id14032 . -1) (undo-tree-id14033 . -1) (undo-tree-id14034 . -1) (undo-tree-id14035 . -1) (undo-tree-id14036 . -1) (undo-tree-id14037 . -1) (undo-tree-id14038 . -1) (undo-tree-id14039 . -1) (undo-tree-id14040 . -1) (undo-tree-id14041 . -1) (undo-tree-id14042 . -1) (undo-tree-id14043 . -1) (undo-tree-id14044 . -1) (undo-tree-id14045 . -1) (undo-tree-id14046 . -1) (undo-tree-id14047 . -1) (undo-tree-id14048 . -1) (undo-tree-id14049 . -1) (undo-tree-id14050 . -1) (undo-tree-id14051 . -1) (undo-tree-id14052 . -1) (undo-tree-id14053 . -1) (undo-tree-id14054 . -1) (undo-tree-id14055 . -1) (undo-tree-id14056 . -1) (undo-tree-id14057 . -1) (undo-tree-id14058 . -1) (undo-tree-id14059 . -1) (undo-tree-id14060 . -1) (undo-tree-id14061 . -1) (undo-tree-id14062 . -1) (undo-tree-id14063 . -1) (undo-tree-id14064 . -1) (undo-tree-id14065 . -1) (undo-tree-id14066 . -1) (undo-tree-id14067 . -1) (undo-tree-id14068 . -1) (undo-tree-id14069 . -1) (undo-tree-id14070 . -1) (undo-tree-id14071 . -1) (undo-tree-id14072 . -1) (undo-tree-id14073 . -1) (undo-tree-id14074 . -1) (undo-tree-id14075 . -1) (undo-tree-id14076 . -1) (undo-tree-id14077 . -1) (undo-tree-id14078 . -1) (undo-tree-id14079 . -1) (undo-tree-id14080 . -1) (undo-tree-id14081 . -1) (undo-tree-id14082 . -1) (undo-tree-id14083 . -1) (undo-tree-id14084 . -1) (undo-tree-id14085 . -1) (undo-tree-id14086 . -1) (undo-tree-id14087 . -1) (undo-tree-id14088 . -1) (undo-tree-id14089 . -1) (undo-tree-id14090 . -1) (undo-tree-id14091 . -1) (undo-tree-id14092 . -1) (undo-tree-id14093 . -1) (undo-tree-id14094 . -1) (undo-tree-id14095 . -1) (undo-tree-id14096 . -1) (undo-tree-id14097 . -1) (undo-tree-id14098 . -1) (undo-tree-id14099 . -1) (undo-tree-id14100 . -1) (undo-tree-id14101 . -1) (undo-tree-id14102 . -1) (undo-tree-id14103 . -1) (undo-tree-id14104 . -1) (undo-tree-id14105 . -1) (undo-tree-id14106 . -1) (undo-tree-id14107 . -1) (undo-tree-id14108 . -1) (undo-tree-id14109 . -1) (undo-tree-id14110 . -1) (undo-tree-id14111 . -1) (undo-tree-id14112 . -1) (undo-tree-id14113 . -1) (undo-tree-id14114 . -1) (undo-tree-id14115 . -1) (undo-tree-id14116 . -1) (undo-tree-id14117 . -1) (undo-tree-id14118 . -1) (undo-tree-id14119 . -1) (undo-tree-id14120 . -1) (undo-tree-id14121 . -1) (undo-tree-id14122 . -1) (undo-tree-id14123 . -1) (undo-tree-id14124 . -1) (undo-tree-id14125 . -1) (undo-tree-id14126 . -1) (undo-tree-id14127 . -1) (undo-tree-id14128 . -1) (undo-tree-id14129 . -1) (undo-tree-id14130 . -1) (undo-tree-id14131 . -1) (undo-tree-id14132 . -1) (undo-tree-id14133 . -1) (undo-tree-id14134 . -1) (undo-tree-id14135 . -1) (undo-tree-id14136 . -1) (undo-tree-id14137 . -1) (undo-tree-id14138 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . -213) (undo-tree-id14139 . -1) (undo-tree-id14140 . -1) (undo-tree-id14141 . -1) (undo-tree-id14142 . -1) (undo-tree-id14143 . -1) (undo-tree-id14144 . -1) (undo-tree-id14145 . -1) (undo-tree-id14146 . -1) (undo-tree-id14147 . -1) (undo-tree-id14148 . -1) (undo-tree-id14149 . -1) (undo-tree-id14150 . -1) (undo-tree-id14151 . -1) (undo-tree-id14152 . -1) (undo-tree-id14153 . -1) (undo-tree-id14154 . -1) (undo-tree-id14155 . -1) (undo-tree-id14156 . -1) (undo-tree-id14157 . -1) (undo-tree-id14158 . -1) (undo-tree-id14159 . -1) (undo-tree-id14160 . -1) (undo-tree-id14161 . -1) (undo-tree-id14162 . -1) (undo-tree-id14163 . -1) (undo-tree-id14164 . -1) (undo-tree-id14165 . -1) (undo-tree-id14166 . -1) (undo-tree-id14167 . -1) (undo-tree-id14168 . -1) (undo-tree-id14169 . -1) (undo-tree-id14170 . -1) (undo-tree-id14171 . -1) (undo-tree-id14172 . -1) (undo-tree-id14173 . -1) (undo-tree-id14174 . -1) (undo-tree-id14175 . -1) (undo-tree-id14176 . -1) (undo-tree-id14177 . -1) (undo-tree-id14178 . -1) (undo-tree-id14179 . -1) (undo-tree-id14180 . -1) (undo-tree-id14181 . -1) (undo-tree-id14182 . -1) (undo-tree-id14183 . -1) (undo-tree-id14184 . -1) (undo-tree-id14185 . -1) (undo-tree-id14186 . -1) (undo-tree-id14187 . -1) (undo-tree-id14188 . -1) (undo-tree-id14189 . -1) (undo-tree-id14190 . -1) (undo-tree-id14191 . -1) (undo-tree-id14192 . -1) (undo-tree-id14193 . -1) (undo-tree-id14194 . -1) (undo-tree-id14195 . -1) (undo-tree-id14196 . -1) (undo-tree-id14197 . -1) (undo-tree-id14198 . -1) (undo-tree-id14199 . -1) (undo-tree-id14200 . -1) (undo-tree-id14201 . -1) (undo-tree-id14202 . -1) (undo-tree-id14203 . -1) (undo-tree-id14204 . -1) (undo-tree-id14205 . -1) (undo-tree-id14206 . -1) (undo-tree-id14207 . -1) (undo-tree-id14208 . -1) (undo-tree-id14209 . -1) (undo-tree-id14210 . -1) (undo-tree-id14211 . -1) (undo-tree-id14212 . -1) (undo-tree-id14213 . -1) (undo-tree-id14214 . -1) (undo-tree-id14215 . -1) (undo-tree-id14216 . -1) (undo-tree-id14217 . -1) (undo-tree-id14218 . -1) (undo-tree-id14219 . -1) (undo-tree-id14220 . -1) (undo-tree-id14221 . -1) (undo-tree-id14222 . -1) (undo-tree-id14223 . -1) (undo-tree-id14224 . -1) (undo-tree-id14225 . -1) (undo-tree-id14226 . -1) (undo-tree-id14227 . -1) (undo-tree-id14228 . -1) (undo-tree-id14229 . -1) (undo-tree-id14230 . -1) (undo-tree-id14231 . -1) (undo-tree-id14232 . -1) (undo-tree-id14233 . -1) (undo-tree-id14234 . -1) (undo-tree-id14235 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -214) (undo-tree-id14236 . -1) (undo-tree-id14237 . -1) (undo-tree-id14238 . -1) (undo-tree-id14239 . -1) (undo-tree-id14240 . -1) (undo-tree-id14241 . -1) (undo-tree-id14242 . -1) (undo-tree-id14243 . -1) (undo-tree-id14244 . -1) (undo-tree-id14245 . -1) (undo-tree-id14246 . -1) (undo-tree-id14247 . -1) (undo-tree-id14248 . -1) (undo-tree-id14249 . -1) (undo-tree-id14250 . -1) (undo-tree-id14251 . -1) (undo-tree-id14252 . -1) (undo-tree-id14253 . -1) (undo-tree-id14254 . -1) (undo-tree-id14255 . -1) (undo-tree-id14256 . -1) (undo-tree-id14257 . -1) (undo-tree-id14258 . -1) (undo-tree-id14259 . -1) (undo-tree-id14260 . -1) (undo-tree-id14261 . -1) (undo-tree-id14262 . -1) 215 (t 25891 53060 962254 332000)) nil (25891 53075 351903 505000) 0 nil])
([nil nil ((1163 . 1181) (t 25891 53075 386607 661000)) nil (25891 53118 805191 205000) 0 nil])
([nil nil ((6664 . 6676) (t 25891 53118 839685 327000)) nil (25891 53210 177093 656000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -6672) (undo-tree-id14271 . -4) 6676) nil (25891 53210 177092 121000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1470) (undo-tree-id14263 . -1) (#(" " 0 1 (fontified t)) . -1471) (undo-tree-id14264 . -1) (#(" " 0 1 (fontified t)) . -1472) (undo-tree-id14265 . -1) (#(" " 0 1 (fontified t)) . -1473) (undo-tree-id14266 . -1) (#(" " 0 1 (fontified t)) . -1474) (undo-tree-id14267 . -1) (#(" " 0 1 (fontified t)) . -1475) (undo-tree-id14268 . -1) (#(" " 0 1 (fontified t)) . -1476) (undo-tree-id14269 . -1) (#(" " 0 1 (fontified t)) . -1477) (undo-tree-id14270 . -1) 1478) nil (25891 53210 177086 128000) 0 nil])
([nil nil ((2437 . 2445) (t 25891 53210 214005 170000)) nil (25891 53302 789028 559000) 0 nil])
([nil nil ((#("net_input + " 0 10 (fontified t) 10 11 (face font-lock-operator-face fontified t) 11 12 (fontified t)) . -1491) (undo-tree-id14272 . -7) (undo-tree-id14273 . -6) (undo-tree-id14274 . -7) (undo-tree-id14275 . -7) (undo-tree-id14276 . -7) (undo-tree-id14277 . -7) (undo-tree-id14278 . -7) (undo-tree-id14279 . -7) (undo-tree-id14280 . -7) (undo-tree-id14281 . -7) (undo-tree-id14282 . -7) (undo-tree-id14283 . -7) (undo-tree-id14284 . -7) (undo-tree-id14285 . -8) (undo-tree-id14286 . -7) (undo-tree-id14287 . -9) (undo-tree-id14288 . -7) (undo-tree-id14289 . -10) (undo-tree-id14290 . -7) (undo-tree-id14291 . -11) (undo-tree-id14292 . -7) (undo-tree-id14293 . -12) (undo-tree-id14294 . -7) (undo-tree-id14295 . -12) (undo-tree-id14296 . -12) (undo-tree-id14297 . -12) (undo-tree-id14298 . -12) (undo-tree-id14299 . -12) (undo-tree-id14300 . -12) (undo-tree-id14301 . -12) (undo-tree-id14302 . -12) (undo-tree-id14303 . -12) (undo-tree-id14304 . -12) (undo-tree-id14305 . -12) (undo-tree-id14306 . -12) (undo-tree-id14307 . -12) (undo-tree-id14308 . -12) (undo-tree-id14309 . -12) (undo-tree-id14310 . -12) (undo-tree-id14311 . -12) (undo-tree-id14312 . -12) (undo-tree-id14313 . -12) (undo-tree-id14314 . -12) (undo-tree-id14315 . -12) (undo-tree-id14316 . -12) (undo-tree-id14317 . -12) (undo-tree-id14318 . -12) (undo-tree-id14319 . -12) (undo-tree-id14320 . -12) (undo-tree-id14321 . -12) (undo-tree-id14322 . -12) (undo-tree-id14323 . -12) (undo-tree-id14324 . -12) (undo-tree-id14325 . -12) (undo-tree-id14326 . -12) (undo-tree-id14327 . -12) (undo-tree-id14328 . -12) (undo-tree-id14329 . -12) (undo-tree-id14330 . -12) (undo-tree-id14331 . -12) (undo-tree-id14332 . -12) (undo-tree-id14333 . -12) (undo-tree-id14334 . -12) (undo-tree-id14335 . -12) 1503 (t 25891 53302 824411 848000)) nil (25891 53422 989763 943000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -3496) (undo-tree-id14336 . -1) (undo-tree-id14337 . -1) (undo-tree-id14338 . -1) (undo-tree-id14339 . -1) (#("l" 0 1 (fontified t)) . -3497) (undo-tree-id14340 . -1) (undo-tree-id14341 . -1) (undo-tree-id14342 . -1) (undo-tree-id14343 . -1) (#("o" 0 1 (fontified t)) . -3498) (undo-tree-id14344 . -1) (undo-tree-id14345 . -1) (undo-tree-id14346 . -1) (undo-tree-id14347 . -1) (#("a" 0 1 (fontified t)) . -3499) (undo-tree-id14348 . -1) (undo-tree-id14349 . -1) (undo-tree-id14350 . -1) (undo-tree-id14351 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . -3500) (undo-tree-id14352 . -1) (undo-tree-id14353 . -1) (undo-tree-id14354 . -1) (undo-tree-id14355 . -1) (#("6" 0 1 (fontified t)) . -3501) (undo-tree-id14356 . -1) (undo-tree-id14357 . -1) (undo-tree-id14358 . -1) (undo-tree-id14359 . -1) (#("4" 0 1 (fontified t)) . -3502) (undo-tree-id14360 . -1) (undo-tree-id14361 . -1) (undo-tree-id14362 . -1) (undo-tree-id14363 . -1) 3503 (t 25891 53423 27204 805000)) nil (25891 53728 586148 155000) 0 nil])
([nil nil ((3496 . 3502)) (("double" . 3496)) (25891 53730 741328 910000) 0 nil])
([nil nil ((apply -2 1380 1509 undo--wrap-and-run-primitive-undo 1380 1509 ((1388 . 1390) 1471))) nil (25891 53758 695964 746000) 0 nil] [nil nil (("    " . 5357) (undo-tree-id14889 . -4) (undo-tree-id14890 . -4) (undo-tree-id14891 . -4) (undo-tree-id14892 . -4) (undo-tree-id14893 . -4) (undo-tree-id14894 . -4) (undo-tree-id14895 . -4) (undo-tree-id14896 . -4) (undo-tree-id14897 . -4) (undo-tree-id14898 . -4) (undo-tree-id14899 . -4) (undo-tree-id14900 . -4) (undo-tree-id14901 . -4) (undo-tree-id14902 . -4) (undo-tree-id14903 . -4) (undo-tree-id14904 . -4) (undo-tree-id14905 . -4) (undo-tree-id14906 . -4) (undo-tree-id14907 . -4) (undo-tree-id14908 . -4) (undo-tree-id14909 . -4) (undo-tree-id14910 . -4) (undo-tree-id14911 . -4) (undo-tree-id14912 . -4) (undo-tree-id14913 . -4) (undo-tree-id14914 . -4) (undo-tree-id14915 . -4) (undo-tree-id14916 . -4) (undo-tree-id14917 . -4) (undo-tree-id14918 . -4) (undo-tree-id14919 . -4) (undo-tree-id14920 . -4) (undo-tree-id14921 . -4) (undo-tree-id14922 . -4) (undo-tree-id14923 . -4) (undo-tree-id14924 . -4) (undo-tree-id14925 . -4) (undo-tree-id14926 . -4) (undo-tree-id14927 . -4) (undo-tree-id14928 . -4) (undo-tree-id14929 . -4) (undo-tree-id14930 . -4) (undo-tree-id14931 . -4) (undo-tree-id14932 . -4) (undo-tree-id14933 . -4) (undo-tree-id14934 . -4) (undo-tree-id14935 . -4) (undo-tree-id14936 . -4) (undo-tree-id14937 . -4) (undo-tree-id14938 . -4) (undo-tree-id14939 . -4) (undo-tree-id14940 . -4) (undo-tree-id14941 . -4) (undo-tree-id14942 . -4) (undo-tree-id14943 . -4) (undo-tree-id14944 . -4) (undo-tree-id14945 . -4) (undo-tree-id14946 . -4) (undo-tree-id14947 . -4) (undo-tree-id14948 . -4) (undo-tree-id14949 . -4) (undo-tree-id14950 . -4)) ((5357 . 5361)) (25891 53729 625967 243000) 0 nil])
([nil nil ((1472 . 1481)) nil (25891 53758 695964 220000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1163) (undo-tree-id14459 . -1) (undo-tree-id14460 . -1) (undo-tree-id14461 . -1) (undo-tree-id14462 . -1) (#(" " 0 1 (fontified t)) . -1164) (undo-tree-id14463 . -1) (undo-tree-id14464 . -1) (undo-tree-id14465 . -1) (undo-tree-id14466 . -1) (#("d" 0 1 (fontified nil)) . -1165) (undo-tree-id14467 . -1) (undo-tree-id14468 . -1) (undo-tree-id14469 . -1) (undo-tree-id14470 . -1) (#("t" 0 1 (fontified nil)) . -1166) (undo-tree-id14471 . -1) (undo-tree-id14472 . -1) (undo-tree-id14473 . -1) (undo-tree-id14474 . -1) (#("y" 0 1 (fontified t)) . -1167) (undo-tree-id14475 . -1) (undo-tree-id14476 . -1) (undo-tree-id14477 . -1) (undo-tree-id14478 . -1) (#("p" 0 1 (fontified t)) . -1168) (undo-tree-id14479 . -1) (undo-tree-id14480 . -1) (undo-tree-id14481 . -1) (undo-tree-id14482 . -1) (#("e" 0 1 (fontified t)) . -1169) (undo-tree-id14483 . -1) (undo-tree-id14484 . -1) (undo-tree-id14485 . -1) (undo-tree-id14486 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1170) (undo-tree-id14487 . -1) (undo-tree-id14488 . -1) (undo-tree-id14489 . -1) (undo-tree-id14490 . -1) (#("s" 0 1 (fontified t)) . -1171) (undo-tree-id14491 . -1) (undo-tree-id14492 . -1) (undo-tree-id14493 . -1) (undo-tree-id14494 . -1) (#("e" 0 1 (fontified nil)) . -1172) (undo-tree-id14495 . -1) (undo-tree-id14496 . -1) (undo-tree-id14497 . -1) (undo-tree-id14498 . -1) (#("l" 0 1 (fontified t)) . -1173) (undo-tree-id14499 . -1) (undo-tree-id14500 . -1) (undo-tree-id14501 . -1) (undo-tree-id14502 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1174) (undo-tree-id14503 . -1) (undo-tree-id14504 . -1) (undo-tree-id14505 . -1) (undo-tree-id14506 . -1) (#("." 0 1 (fontified t)) . -1175) (undo-tree-id14507 . -1) (undo-tree-id14508 . -1) (undo-tree-id14509 . -1) (undo-tree-id14510 . -1) (#("F" 0 1 (fontified t)) . -1176) (undo-tree-id14511 . -1) (undo-tree-id14512 . -1) (undo-tree-id14513 . -1) (undo-tree-id14514 . -1) (#("L" 0 1 (fontified t)) . -1177) (undo-tree-id14515 . -1) (undo-tree-id14516 . -1) (undo-tree-id14517 . -1) (undo-tree-id14518 . -1) (#("O" 0 1 (fontified t)) . -1178) (undo-tree-id14519 . -1) (undo-tree-id14520 . -1) (undo-tree-id14521 . -1) (undo-tree-id14522 . -1) (#("A" 0 1 (fontified t)) . -1179) (undo-tree-id14523 . -1) (undo-tree-id14524 . -1) (undo-tree-id14525 . -1) (undo-tree-id14526 . -1) (#("T" 0 1 (fontified t)) . -1180) (undo-tree-id14527 . -1) (undo-tree-id14528 . -1) (undo-tree-id14529 . -1) (undo-tree-id14530 . -1) 1181 (t 25891 53559 193713 26000)) ((1163 . 1181)) (25891 53727 199411 33000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1488) (1487 . 1488) (1486 . 1488) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1486) (1481 . 1487)) nil (25891 53758 695963 76000) 0 nil])
([nil nil ((1224 . 1225) (1223 . 1225) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1223) (1218 . 1224)) ((#(".type(" 0 1 (fontified nil) 1 5 (face font-lock-builtin-face fontified nil) 5 6 (face font-lock-builtin-face fontified nil)) . 1218) (undo-tree-id14583 . -5) (undo-tree-id14584 . -5) (undo-tree-id14585 . -5) (undo-tree-id14586 . -5) (undo-tree-id14587 . -5) (undo-tree-id14588 . -5) (undo-tree-id14589 . -5) (undo-tree-id14590 . -5) (undo-tree-id14591 . -5) (undo-tree-id14592 . -5) (undo-tree-id14593 . -5) (undo-tree-id14594 . -5) (undo-tree-id14595 . -5) (undo-tree-id14596 . -5) (undo-tree-id14597 . -5) (undo-tree-id14598 . -5) (undo-tree-id14599 . -5) (undo-tree-id14600 . -5) (undo-tree-id14601 . -5) (undo-tree-id14602 . -5) (undo-tree-id14603 . -5) (undo-tree-id14604 . -5) (undo-tree-id14605 . -5) (undo-tree-id14606 . -5) (undo-tree-id14607 . -5) (undo-tree-id14608 . -5) (undo-tree-id14609 . -5) (undo-tree-id14610 . -5) (undo-tree-id14611 . -5) (undo-tree-id14612 . -5) (undo-tree-id14613 . -5) (undo-tree-id14614 . -5) (undo-tree-id14615 . -5) (undo-tree-id14616 . -5) (undo-tree-id14617 . -5) (undo-tree-id14618 . -5) (undo-tree-id14619 . -5) (undo-tree-id14620 . -5) (undo-tree-id14621 . -5) (undo-tree-id14622 . -5) (undo-tree-id14623 . -5) (undo-tree-id14624 . -5) (undo-tree-id14625 . -5) (undo-tree-id14626 . -5) (undo-tree-id14627 . -5) (undo-tree-id14628 . -5) (undo-tree-id14629 . -5) (undo-tree-id14630 . -5) (undo-tree-id14631 . -5) (undo-tree-id14632 . -5) (undo-tree-id14633 . -5) (undo-tree-id14634 . -5) (undo-tree-id14635 . -5) (undo-tree-id14636 . -5) (undo-tree-id14637 . -5) (undo-tree-id14638 . -5) (undo-tree-id14639 . -5) (undo-tree-id14640 . -5) (undo-tree-id14641 . -5) (undo-tree-id14642 . -5) (undo-tree-id14643 . -5) (undo-tree-id14644 . -5) (undo-tree-id14645 . -5) (undo-tree-id14646 . -5) (undo-tree-id14647 . -5) (undo-tree-id14648 . -5) (undo-tree-id14649 . -5) (undo-tree-id14650 . -5) (undo-tree-id14651 . -5) (undo-tree-id14652 . -5) (undo-tree-id14653 . -5) (undo-tree-id14654 . -5) (undo-tree-id14655 . -5) (undo-tree-id14656 . -5) (undo-tree-id14657 . -5) (undo-tree-id14658 . -5) (undo-tree-id14659 . -5) (undo-tree-id14660 . -5) (undo-tree-id14661 . -5) (undo-tree-id14662 . -5) (undo-tree-id14663 . -5) (undo-tree-id14664 . -5) (undo-tree-id14665 . -5) (undo-tree-id14666 . -5) (undo-tree-id14667 . -5) (undo-tree-id14668 . -5) (undo-tree-id14669 . -5) (undo-tree-id14670 . -5) (undo-tree-id14671 . -5) (undo-tree-id14672 . -5) (undo-tree-id14673 . -5) (undo-tree-id14674 . -5) (undo-tree-id14675 . -5) (undo-tree-id14676 . -5) (undo-tree-id14677 . -5) (undo-tree-id14678 . -5) (undo-tree-id14679 . -5) (undo-tree-id14680 . -5) (undo-tree-id14681 . -5) (undo-tree-id14682 . -5) (undo-tree-id14683 . -5) (undo-tree-id14684 . -5) (undo-tree-id14685 . -5) (undo-tree-id14686 . -5) (undo-tree-id14687 . -5) (undo-tree-id14688 . -5) (undo-tree-id14689 . -5) (undo-tree-id14690 . -5) (undo-tree-id14691 . -5) (undo-tree-id14692 . -5) (undo-tree-id14693 . -5) (undo-tree-id14694 . -5) (undo-tree-id14695 . -5) (undo-tree-id14696 . -5) (undo-tree-id14697 . -5) (undo-tree-id14698 . -5) (undo-tree-id14699 . -5) (undo-tree-id14700 . -5) (undo-tree-id14701 . -5) (undo-tree-id14702 . -5) (undo-tree-id14703 . -5) (undo-tree-id14704 . -5) (undo-tree-id14705 . -5) (undo-tree-id14706 . -5) (undo-tree-id14707 . -5) (undo-tree-id14708 . -5) (undo-tree-id14709 . -5) (undo-tree-id14710 . -5) (undo-tree-id14711 . -5) (undo-tree-id14712 . -5) (undo-tree-id14713 . -5) (undo-tree-id14714 . -5) (undo-tree-id14715 . -5) (undo-tree-id14716 . -5) (undo-tree-id14717 . -5) (undo-tree-id14718 . -5) (undo-tree-id14719 . -5) (undo-tree-id14720 . -5) (undo-tree-id14721 . -5) (undo-tree-id14722 . -5) (1223 . 1224) (#("()" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil) 1 2 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1223) (undo-tree-id14723 . -2) (undo-tree-id14724 . -2) (undo-tree-id14725 . -2) (undo-tree-id14726 . -2) (undo-tree-id14727 . -2) (undo-tree-id14728 . -2) (undo-tree-id14729 . -2) (undo-tree-id14730 . -2) (undo-tree-id14731 . -2) (undo-tree-id14732 . -2) (undo-tree-id14733 . -2) (undo-tree-id14734 . -2) (undo-tree-id14735 . -2) (undo-tree-id14736 . -2) (undo-tree-id14737 . -2) (undo-tree-id14738 . -2) (undo-tree-id14739 . -2) (undo-tree-id14740 . -2) (undo-tree-id14741 . -2) (undo-tree-id14742 . -2) (undo-tree-id14743 . -2) (undo-tree-id14744 . -2) (undo-tree-id14745 . -2) (undo-tree-id14746 . -2) (undo-tree-id14747 . -2) (undo-tree-id14748 . -2) (undo-tree-id14749 . -2) (undo-tree-id14750 . -2) (undo-tree-id14751 . -2) (undo-tree-id14752 . -2) (undo-tree-id14753 . -2) (undo-tree-id14754 . -2) (undo-tree-id14755 . -2) (undo-tree-id14756 . -2) (undo-tree-id14757 . -2) (undo-tree-id14758 . -2) (undo-tree-id14759 . -2) (undo-tree-id14760 . -2) (undo-tree-id14761 . -2) (undo-tree-id14762 . -2) (undo-tree-id14763 . -1) (undo-tree-id14764 . -1) (undo-tree-id14765 . -1) (undo-tree-id14766 . -1) (undo-tree-id14767 . -1) (undo-tree-id14768 . -1) (undo-tree-id14769 . -1) (undo-tree-id14770 . -1) (undo-tree-id14771 . -1) (undo-tree-id14772 . -1) (undo-tree-id14773 . -1) (undo-tree-id14774 . -1) (undo-tree-id14775 . -1) (undo-tree-id14776 . -1) (undo-tree-id14777 . -1) (undo-tree-id14778 . -1) (undo-tree-id14779 . -1) (undo-tree-id14780 . -1) (undo-tree-id14781 . -1) (undo-tree-id14782 . -1) (undo-tree-id14783 . -1) (undo-tree-id14784 . -1) (undo-tree-id14785 . -1) (undo-tree-id14786 . -1) (undo-tree-id14787 . -1) (undo-tree-id14788 . -1) (undo-tree-id14789 . -1) (undo-tree-id14790 . -1) (undo-tree-id14791 . -1) (undo-tree-id14792 . -1) (undo-tree-id14793 . -1) (undo-tree-id14794 . -1) (undo-tree-id14795 . -1) (undo-tree-id14796 . -1) (undo-tree-id14797 . -1) (undo-tree-id14798 . -1) (undo-tree-id14799 . -1) (undo-tree-id14800 . -1) (undo-tree-id14801 . -1) (undo-tree-id14802 . -1) (undo-tree-id14803 . -1) (undo-tree-id14804 . -1) (undo-tree-id14805 . -1) (undo-tree-id14806 . -1) (undo-tree-id14807 . -1) (undo-tree-id14808 . -1) (undo-tree-id14809 . -1) (undo-tree-id14810 . -1) (undo-tree-id14811 . -1) (undo-tree-id14812 . -1) (undo-tree-id14813 . -1) (undo-tree-id14814 . -1) (undo-tree-id14815 . -1) (undo-tree-id14816 . -1) (undo-tree-id14817 . -1) (undo-tree-id14818 . -1) (undo-tree-id14819 . -1) (undo-tree-id14820 . -1) (undo-tree-id14821 . -1) (undo-tree-id14822 . -1) (undo-tree-id14823 . -1) (undo-tree-id14824 . -1) (undo-tree-id14825 . -1) (undo-tree-id14826 . -1) (undo-tree-id14827 . -1) (undo-tree-id14828 . -1) (undo-tree-id14829 . -1) (undo-tree-id14830 . -1) (undo-tree-id14831 . -1) (undo-tree-id14832 . -1) (undo-tree-id14833 . -1) (undo-tree-id14834 . -1) (undo-tree-id14835 . -1) (undo-tree-id14836 . -1) (undo-tree-id14837 . -1) (undo-tree-id14838 . -1) (undo-tree-id14839 . -1) (undo-tree-id14840 . -1) (undo-tree-id14841 . -1) (undo-tree-id14842 . -1) (undo-tree-id14843 . -1) (undo-tree-id14844 . -1) (undo-tree-id14845 . -1) (undo-tree-id14846 . -1) (undo-tree-id14847 . -1) (undo-tree-id14848 . -1) (undo-tree-id14849 . -1) (undo-tree-id14850 . -1) (undo-tree-id14851 . -1) (undo-tree-id14852 . -1) (undo-tree-id14853 . -1) (undo-tree-id14854 . -1) (undo-tree-id14855 . -1) (undo-tree-id14856 . -1) (undo-tree-id14857 . -1) (undo-tree-id14858 . -1) (undo-tree-id14859 . -1) (undo-tree-id14860 . -1) (undo-tree-id14861 . -1) (undo-tree-id14862 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . 1224) (undo-tree-id14863 . -1) (undo-tree-id14864 . -1) (undo-tree-id14865 . -1) (undo-tree-id14866 . -1) (undo-tree-id14867 . -1) (undo-tree-id14868 . -1) (undo-tree-id14869 . -1) (undo-tree-id14870 . -1) (undo-tree-id14871 . -1) (undo-tree-id14872 . -1) (undo-tree-id14873 . -1) (undo-tree-id14874 . -1) (undo-tree-id14875 . -1) (undo-tree-id14876 . -1) (undo-tree-id14877 . -1) (undo-tree-id14878 . -1) (undo-tree-id14879 . -1) (undo-tree-id14880 . -1) (undo-tree-id14881 . -1) (undo-tree-id14882 . -1) (undo-tree-id14883 . -1) (undo-tree-id14884 . -1) (undo-tree-id14885 . -1) (undo-tree-id14886 . -1) (undo-tree-id14887 . -1) (undo-tree-id14888 . -1)) (25891 53727 18829 62000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified nil)) . 1499) (1498 . 1499) (1497 . 1499) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1497) (undo-tree-id14951 . -1) (undo-tree-id14952 . -1) (1487 . 1498)) nil (25891 53758 695959 190000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . -1224) (undo-tree-id14458 . -1) 1225) ((1224 . 1225)) (25891 53726 831137 305000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1564 . 1565) (nil fontified nil 1564 . 1565) (nil fontified nil 1563 . 1564) (nil fontified nil 1562 . 1563) (nil fontified nil 1561 . 1562) (nil fontified nil 1557 . 1561) (nil fontified nil 1551 . 1557) (nil fontified nil 1550 . 1551) (nil fontified nil 1545 . 1550) (nil fontified nil 1537 . 1545) (1537 . 1565) (t 25891 53758 729379 503000)) nil (25891 53798 394468 822000) 0 nil])
([nil nil ((1224 . 1226)) ((#("tp" 0 1 (fontified t) 1 2 (fontified t)) . 1224) (undo-tree-id14533 . -1) (undo-tree-id14534 . -1) (undo-tree-id14535 . -1) (undo-tree-id14536 . -1) (undo-tree-id14537 . -1) (undo-tree-id14538 . -1) (undo-tree-id14539 . -1) (undo-tree-id14540 . -1) (undo-tree-id14541 . -1) (undo-tree-id14542 . -1) (undo-tree-id14543 . -1) (undo-tree-id14544 . -1) (undo-tree-id14545 . -1) (undo-tree-id14546 . -1) (undo-tree-id14547 . -1) (undo-tree-id14548 . -1) (undo-tree-id14549 . -1) (undo-tree-id14550 . -1) (undo-tree-id14551 . -1) (undo-tree-id14552 . -1) (undo-tree-id14553 . -1) (undo-tree-id14554 . -1) (undo-tree-id14555 . -1) (undo-tree-id14556 . -1) (undo-tree-id14557 . -2) (undo-tree-id14558 . -2) (undo-tree-id14559 . -2) (undo-tree-id14560 . -2) (undo-tree-id14561 . -2) (undo-tree-id14562 . -2) (undo-tree-id14563 . -2) (undo-tree-id14564 . -2) (undo-tree-id14565 . -2) (undo-tree-id14566 . -2) (undo-tree-id14567 . -2) (undo-tree-id14568 . -2) (undo-tree-id14569 . -2) (undo-tree-id14570 . -2) (undo-tree-id14571 . -2) (undo-tree-id14572 . -2) (undo-tree-id14573 . -2) (undo-tree-id14574 . -2) (undo-tree-id14575 . -2) (undo-tree-id14576 . -2) (undo-tree-id14577 . -2) (undo-tree-id14578 . -2) (undo-tree-id14579 . -2) (undo-tree-id14580 . -2) (undo-tree-id14581 . -2) (undo-tree-id14582 . -2)) (25891 53726 655427 393000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1551) (undo-tree-id14985 . -1) (#("a" 0 1 (fontified t)) . -1552) (undo-tree-id14986 . -1) (#("t" 0 1 (fontified t)) . -1553) (undo-tree-id14987 . -1) (#("e" 0 1 (fontified t)) . -1554) (undo-tree-id14988 . -1) (#("s" 0 1 (fontified t)) . -1555) (undo-tree-id14989 . -1) 1556) nil (25891 53798 394463 905000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1225) (undo-tree-id14457 . -1) 1226) ((1225 . 1226)) (25891 53726 489251 899000) 0 nil])
([nil nil ((1551 . 1559)) nil (25891 53798 394456 301000) 0 nil])
([nil nil ((1225 . 1230)) ((#("orch." 0 5 (fontified nil)) . 1225) (undo-tree-id14531 . -5) (undo-tree-id14532 . -5)) (25891 53726 488755 420000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -1558) (undo-tree-id14953 . -1) (undo-tree-id14954 . -1) (undo-tree-id14955 . -1) (undo-tree-id14956 . -1) (undo-tree-id14957 . -1) (undo-tree-id14958 . -1) (undo-tree-id14959 . -1) (undo-tree-id14960 . -1) (undo-tree-id14961 . -1) (undo-tree-id14962 . -1) (undo-tree-id14963 . -1) (undo-tree-id14964 . -1) (undo-tree-id14965 . -1) (undo-tree-id14966 . -1) (undo-tree-id14967 . -1) (undo-tree-id14968 . -1) (undo-tree-id14969 . -1) (undo-tree-id14970 . -1) (undo-tree-id14971 . -1) (undo-tree-id14972 . -1) (undo-tree-id14973 . -1) (undo-tree-id14974 . -1) (undo-tree-id14975 . -1) (undo-tree-id14976 . -1) (undo-tree-id14977 . -1) (undo-tree-id14978 . -1) (undo-tree-id14979 . -1) (undo-tree-id14980 . -1) (undo-tree-id14981 . -1) (undo-tree-id14982 . -1) (undo-tree-id14983 . -1) (undo-tree-id14984 . -1) 1559) nil (25891 53798 394452 856000) 0 nil])
([nil nil ((1230 . 1235)) ((#("float" 0 5 (face font-lock-builtin-face fontified t)) . 1230)) (25891 53726 171426 406000) 0 nil])
([nil nil ((1558 . 1560)) nil (25891 53798 394399 789000) 0 nil])
([nil nil ((#("," 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1434) (undo-tree-id14366 . -1) (undo-tree-id14368 . -1) (undo-tree-id14370 . -1) (undo-tree-id14372 . -1) (undo-tree-id14374 . -1) (undo-tree-id14376 . -1) (undo-tree-id14378 . -1) (undo-tree-id14380 . -1) (undo-tree-id14382 . -1) (undo-tree-id14384 . -1) (undo-tree-id14386 . -1) (undo-tree-id14388 . -1) (undo-tree-id14390 . -1) (undo-tree-id14392 . -1) (undo-tree-id14394 . -1) (undo-tree-id14396 . -1) (undo-tree-id14398 . -1) (undo-tree-id14400 . -1) (undo-tree-id14402 . -1) (undo-tree-id14404 . -1) (undo-tree-id14406 . -1) (undo-tree-id14408 . -1) (undo-tree-id14410 . -1) (undo-tree-id14411 . -1) (undo-tree-id14413 . -1) (undo-tree-id14415 . -1) (#(" " 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1435) (undo-tree-id14418 . -1) (undo-tree-id14420 . -1) (undo-tree-id14422 . -1) (undo-tree-id14424 . -1) (undo-tree-id14426 . -1) (undo-tree-id14428 . -1) (undo-tree-id14430 . -1) (undo-tree-id14432 . -1) (undo-tree-id14434 . -1) (undo-tree-id14436 . -1) (#("d" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1436) (undo-tree-id14439 . -1) (undo-tree-id14440 . -1) (#("t" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1437) (undo-tree-id14442 . -1) (#("y" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1438) (undo-tree-id14443 . -1) (#("p" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1439) (undo-tree-id14444 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1440) (undo-tree-id14445 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1441) (undo-tree-id14446 . -1) (#("s" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1442) (undo-tree-id14447 . -1) (#("e" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1443) (undo-tree-id14448 . -1) (#("l" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1444) (undo-tree-id14449 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1445) (undo-tree-id14450 . -1) (#("." 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1446) (undo-tree-id14451 . -1) (#("F" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1447) (undo-tree-id14452 . -1) (#("L" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1448) (undo-tree-id14453 . -1) (#("O" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1449) (undo-tree-id14454 . -1) (#("A" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1450) (undo-tree-id14455 . -1) (#("T" 0 1 (fontified t src-block t font-lock-fontified t isearch-open-invisible-temporary org-fold-core--isearch-show-temporary isearch-open-invisible org-fold-core--isearch-show)) . -1451) (undo-tree-id14456 . -1) 1452) ((1434 . 1452) (t 25891 53690 201286 628000)) (25891 53690 141040 205000) 0 nil])
([nil nil ((1536 . 1540) (t 25891 53798 449518 133000)) nil (25891 53840 582558 962000) 0 nil])
nil
([nil nil ((#("u" 0 1 (fontified t)) . -1538) (undo-tree-id14993 . -1) (#("p" 0 1 (fontified t)) . -1539) (undo-tree-id14994 . -1) 1540) nil (25891 53840 582556 173000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1543) (1542 . 1543) (1541 . 1543) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1541) (1538 . 1542)) nil (25891 53840 582552 362000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t)) . 1509) (#(" " 0 1 (fontified t)) . 1509) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("u" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("p" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("i" 0 1 (face font-lock-builtin-face fontified t)) . 1509) (#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 1509) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . 1509)) nil (25891 53840 582547 657000) 0 nil])
([nil nil ((1514 . 1516) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1514) (1509 . 1515)) nil (25891 53840 582542 290000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1515) (undo-tree-id14990 . -1) (undo-tree-id14991 . -1) (undo-tree-id14992 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1515)) nil (25891 53840 582539 125000) 0 nil])
([nil nil ((1537 . 1538)) nil (25891 53840 582527 713000) 0 nil])
([nil nil ((apply -2 1539 1582 undo--wrap-and-run-primitive-undo 1539 1582 ((1547 . 1549) 1571))) nil (25891 53840 582526 738000) 0 nil])
([nil nil ((apply 2 1331 1378 undo--wrap-and-run-primitive-undo 1331 1378 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1339) 1331))) nil (25891 53840 582521 710000) 0 nil])
([nil nil ((1534 . 1536) (#("(" 0 1 (fontified nil)) . -1534) (undo-tree-id14995 . -1) (undo-tree-id14996 . -1) (1527 . 1535) (t 25891 53840 617727 15000)) nil (25891 53863 16914 886000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1527) (undo-tree-id15284 . -1) (#("d" 0 1 (fontified t)) . -1528) (undo-tree-id15285 . -1) (#("o" 0 1 (fontified t)) . -1529) (undo-tree-id15286 . -1) (#("u" 0 1 (fontified t)) . -1530) (undo-tree-id15287 . -1) (#("b" 0 1 (fontified t)) . -1531) (undo-tree-id15288 . -1) (#("l" 0 1 (fontified t)) . -1532) (undo-tree-id15289 . -1) (#("e" 0 1 (fontified t)) . -1533) (undo-tree-id15290 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified nil)) . -1534) (undo-tree-id15291 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1535) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . -1535) (undo-tree-id15292 . -1) 1536 (t 25891 53863 61862 410000)) nil (25891 53915 907713 261000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . 1527) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t)) . 1527) (#("e" 0 1 (fontified t)) . 1527) (#("p" 0 1 (fontified t)) . 1527) (#("y" 0 1 (fontified t)) . 1527) (#("t" 0 1 (fontified t)) . 1527) (#("." 0 1 (fontified t)) . 1527)) nil (25891 53915 907704 289000) 0 nil])
([nil nil ((1528 . 1529)) nil (25891 53915 907703 125000) 0 nil])
([nil nil ((1498 . 1507)) nil (25891 53915 907702 558000) 0 nil])
([nil nil ((1507 . 1508)) nil (25891 53915 907701 968000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 1514) (1513 . 1514) (1512 . 1514) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1512) (1508 . 1513)) nil (25891 53915 907701 39000) 0 nil])
([nil nil ((1513 . 1518)) nil (25891 53915 907699 790000) 0 nil])
([nil nil ((1518 . 1520)) nil (25891 53915 907699 37000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -1519) (undo-tree-id15283 . -1) 1520) nil (25891 53915 907698 270000) 0 nil])
([nil nil ((1533 . 1535) (#("(" 0 1 (face font-lock-builtin-face fontified nil)) . -1533) (1519 . 1534)) nil (25891 53915 907696 692000) 0 nil])
([nil nil ((1536 . 1545)) nil (25891 53915 907695 923000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1574 . 1575) (nil fontified nil 1574 . 1575) (nil fontified nil 1573 . 1574) (nil fontified nil 1572 . 1573) (nil fontified nil 1571 . 1572) (nil fontified nil 1567 . 1571) (nil fontified nil 1555 . 1567) (nil fontified nil 1551 . 1555) (nil fontified nil 1550 . 1551) (nil fontified nil 1545 . 1550) (nil fontified nil 1537 . 1545) (1537 . 1575)) nil (25891 53915 907695 10000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . -1560) (undo-tree-id14997 . -1) (undo-tree-id14998 . -1) (undo-tree-id14999 . -1) (undo-tree-id15000 . -1) (undo-tree-id15001 . -1) (undo-tree-id15002 . -1) (undo-tree-id15003 . -1) (undo-tree-id15004 . -1) (undo-tree-id15005 . -1) (undo-tree-id15006 . -1) (undo-tree-id15007 . -1) (undo-tree-id15008 . -1) (undo-tree-id15009 . -1) (undo-tree-id15010 . -1) (undo-tree-id15011 . -1) (undo-tree-id15012 . -1) (undo-tree-id15013 . -1) (undo-tree-id15014 . -1) (undo-tree-id15015 . -1) (undo-tree-id15016 . -1) (undo-tree-id15017 . -1) (undo-tree-id15018 . -1) (undo-tree-id15019 . -1) (undo-tree-id15020 . -1) (undo-tree-id15021 . -1) (undo-tree-id15022 . -1) (undo-tree-id15023 . -1) (undo-tree-id15024 . -1) (undo-tree-id15025 . -1) (undo-tree-id15026 . -1) (undo-tree-id15027 . -1) (undo-tree-id15028 . -1) (undo-tree-id15029 . -1) (undo-tree-id15030 . -1) (undo-tree-id15031 . -1) (undo-tree-id15032 . -1) (undo-tree-id15033 . -1) (undo-tree-id15034 . -1) (undo-tree-id15035 . -1) (undo-tree-id15036 . -1) (undo-tree-id15037 . -1) (undo-tree-id15038 . -1) (undo-tree-id15039 . -1) (undo-tree-id15040 . -1) (undo-tree-id15041 . -1) (undo-tree-id15042 . -1) (undo-tree-id15043 . -1) (undo-tree-id15044 . -1) (undo-tree-id15045 . -1) (undo-tree-id15046 . -1) (undo-tree-id15047 . -1) (undo-tree-id15048 . -1) (undo-tree-id15049 . -1) (undo-tree-id15050 . -1) (undo-tree-id15051 . -1) (undo-tree-id15052 . -1) (undo-tree-id15053 . -1) (undo-tree-id15054 . -1) (undo-tree-id15055 . -1) (undo-tree-id15056 . -1) (undo-tree-id15057 . -1) (undo-tree-id15058 . -1) (undo-tree-id15059 . -1) (undo-tree-id15060 . -1) (undo-tree-id15061 . -1) (undo-tree-id15062 . -1) (undo-tree-id15063 . -1) (undo-tree-id15064 . -1) (undo-tree-id15065 . -1) (undo-tree-id15066 . -1) (undo-tree-id15067 . -1) (undo-tree-id15068 . -1) (undo-tree-id15069 . -1) (undo-tree-id15070 . -1) (undo-tree-id15071 . -1) (undo-tree-id15072 . -1) (undo-tree-id15073 . -1) (undo-tree-id15074 . -1) (undo-tree-id15075 . -1) (undo-tree-id15076 . -1) (undo-tree-id15077 . -1) (undo-tree-id15078 . -1) (undo-tree-id15079 . -1) (undo-tree-id15080 . -1) (undo-tree-id15081 . -1) (undo-tree-id15082 . -1) (undo-tree-id15083 . -1) (undo-tree-id15084 . -1) (undo-tree-id15085 . -1) (undo-tree-id15086 . -1) (undo-tree-id15087 . -1) (#("e" 0 1 (fontified t)) . -1561) (undo-tree-id15088 . -1) (undo-tree-id15089 . -1) (undo-tree-id15090 . -1) (undo-tree-id15091 . -1) (undo-tree-id15092 . -1) (undo-tree-id15093 . -1) (undo-tree-id15094 . -1) (undo-tree-id15095 . -1) (undo-tree-id15096 . -1) (undo-tree-id15097 . -1) (undo-tree-id15098 . -1) (undo-tree-id15099 . -1) (undo-tree-id15100 . -1) (undo-tree-id15101 . -1) (undo-tree-id15102 . -1) (undo-tree-id15103 . -1) (undo-tree-id15104 . -1) (undo-tree-id15105 . -1) (undo-tree-id15106 . -1) (undo-tree-id15107 . -1) (undo-tree-id15108 . -1) (undo-tree-id15109 . -1) (undo-tree-id15110 . -1) (undo-tree-id15111 . -1) (undo-tree-id15112 . -1) (undo-tree-id15113 . -1) (undo-tree-id15114 . -1) (undo-tree-id15115 . -1) (undo-tree-id15116 . -1) (undo-tree-id15117 . -1) (undo-tree-id15118 . -1) (undo-tree-id15119 . -1) (undo-tree-id15120 . -1) (undo-tree-id15121 . -1) (undo-tree-id15122 . -1) (undo-tree-id15123 . -1) (undo-tree-id15124 . -1) (undo-tree-id15125 . -1) (undo-tree-id15126 . -1) (undo-tree-id15127 . -1) (undo-tree-id15128 . -1) (undo-tree-id15129 . -1) (undo-tree-id15130 . -1) (undo-tree-id15131 . -1) (undo-tree-id15132 . -1) (undo-tree-id15133 . -1) (undo-tree-id15134 . -1) (undo-tree-id15135 . -1) (undo-tree-id15136 . -1) (undo-tree-id15137 . -1) (undo-tree-id15138 . -1) (undo-tree-id15139 . -1) (undo-tree-id15140 . -1) (undo-tree-id15141 . -1) (undo-tree-id15142 . -1) (undo-tree-id15143 . -1) (undo-tree-id15144 . -1) (undo-tree-id15145 . -1) (undo-tree-id15146 . -1) (undo-tree-id15147 . -1) (undo-tree-id15148 . -1) (undo-tree-id15149 . -1) (undo-tree-id15150 . -1) (undo-tree-id15151 . -1) (undo-tree-id15152 . -1) (undo-tree-id15153 . -1) (undo-tree-id15154 . -1) (undo-tree-id15155 . -1) (undo-tree-id15156 . -1) (undo-tree-id15157 . -1) (undo-tree-id15158 . -1) (undo-tree-id15159 . -1) (undo-tree-id15160 . -1) (undo-tree-id15161 . -1) (#("i" 0 1 (fontified t)) . -1562) (undo-tree-id15162 . -1) (undo-tree-id15163 . -1) (undo-tree-id15164 . -1) (undo-tree-id15165 . -1) (undo-tree-id15166 . -1) (undo-tree-id15167 . -1) (undo-tree-id15168 . -1) (undo-tree-id15169 . -1) (undo-tree-id15170 . -1) (undo-tree-id15171 . -1) (undo-tree-id15172 . -1) (undo-tree-id15173 . -1) (undo-tree-id15174 . -1) (undo-tree-id15175 . -1) (undo-tree-id15176 . -1) (undo-tree-id15177 . -1) (undo-tree-id15178 . -1) (undo-tree-id15179 . -1) (undo-tree-id15180 . -1) (undo-tree-id15181 . -1) (undo-tree-id15182 . -1) (undo-tree-id15183 . -1) (undo-tree-id15184 . -1) (undo-tree-id15185 . -1) (undo-tree-id15186 . -1) (undo-tree-id15187 . -1) (undo-tree-id15188 . -1) (undo-tree-id15189 . -1) (undo-tree-id15190 . -1) (undo-tree-id15191 . -1) (undo-tree-id15192 . -1) (undo-tree-id15193 . -1) (undo-tree-id15194 . -1) (undo-tree-id15195 . -1) (undo-tree-id15196 . -1) (undo-tree-id15197 . -1) (undo-tree-id15198 . -1) (undo-tree-id15199 . -1) (undo-tree-id15200 . -1) (undo-tree-id15201 . -1) (undo-tree-id15202 . -1) (undo-tree-id15203 . -1) (undo-tree-id15204 . -1) (undo-tree-id15205 . -1) (undo-tree-id15206 . -1) (undo-tree-id15207 . -1) (undo-tree-id15208 . -1) (undo-tree-id15209 . -1) (undo-tree-id15210 . -1) (undo-tree-id15211 . -1) (undo-tree-id15212 . -1) (undo-tree-id15213 . -1) (undo-tree-id15214 . -1) (undo-tree-id15215 . -1) (undo-tree-id15216 . -1) (undo-tree-id15217 . -1) (undo-tree-id15218 . -1) (#("g" 0 1 (fontified t)) . -1563) (undo-tree-id15219 . -1) (undo-tree-id15220 . -1) (undo-tree-id15221 . -1) (undo-tree-id15222 . -1) (undo-tree-id15223 . -1) (undo-tree-id15224 . -1) (undo-tree-id15225 . -1) (undo-tree-id15226 . -1) (undo-tree-id15227 . -1) (undo-tree-id15228 . -1) (undo-tree-id15229 . -1) (undo-tree-id15230 . -1) (undo-tree-id15231 . -1) (undo-tree-id15232 . -1) (undo-tree-id15233 . -1) (undo-tree-id15234 . -1) (undo-tree-id15235 . -1) (undo-tree-id15236 . -1) (undo-tree-id15237 . -1) (undo-tree-id15238 . -1) (undo-tree-id15239 . -1) (undo-tree-id15240 . -1) (undo-tree-id15241 . -1) (undo-tree-id15242 . -1) (undo-tree-id15243 . -1) (undo-tree-id15244 . -1) (undo-tree-id15245 . -1) (undo-tree-id15246 . -1) (undo-tree-id15247 . -1) (undo-tree-id15248 . -1) (undo-tree-id15249 . -1) (undo-tree-id15250 . -1) (undo-tree-id15251 . -1) (undo-tree-id15252 . -1) (undo-tree-id15253 . -1) (undo-tree-id15254 . -1) (undo-tree-id15255 . -1) (undo-tree-id15256 . -1) (undo-tree-id15257 . -1) (undo-tree-id15258 . -1) (#("h" 0 1 (fontified t)) . -1564) (undo-tree-id15259 . -1) (undo-tree-id15260 . -1) (undo-tree-id15261 . -1) (undo-tree-id15262 . -1) (undo-tree-id15263 . -1) (undo-tree-id15264 . -1) (undo-tree-id15265 . -1) (undo-tree-id15266 . -1) (undo-tree-id15267 . -1) (undo-tree-id15268 . -1) (undo-tree-id15269 . -1) (undo-tree-id15270 . -1) (undo-tree-id15271 . -1) (undo-tree-id15272 . -1) (undo-tree-id15273 . -1) (undo-tree-id15274 . -1) (undo-tree-id15275 . -1) (undo-tree-id15276 . -1) (undo-tree-id15277 . -1) (undo-tree-id15278 . -1) (undo-tree-id15279 . -1) (undo-tree-id15280 . -1) (undo-tree-id15281 . -1) (#("t" 0 1 (fontified t)) . -1565) (undo-tree-id15282 . -1) 1566) nil (25891 53915 907686 107000) 0 nil])
([nil nil ((1560 . 1562)) nil (25891 53915 907429 461000) 0 nil])
([nil nil ((1562 . 1564)) nil (25891 53915 907425 41000) 0 nil])
([nil nil ((4307 . 4310) (t 25891 53915 942243 0)) nil (25891 53957 218186 173000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -4309) (undo-tree-id15295 . -1) 4310) nil (25891 53957 218185 101000) 0 nil])
([nil nil ((4309 . 4313)) nil (25891 53957 218183 936000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -4312) (undo-tree-id15294 . -1) 4313) nil (25891 53957 218183 344000) 0 nil])
([nil nil ((4312 . 4322)) nil (25891 53957 218181 838000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t)) . -4321) (undo-tree-id15293 . -1) 4322) nil (25891 53957 218180 704000) 0 nil])
([nil nil ((4321 . 4325)) nil (25891 53957 218169 654000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . -4903) (undo-tree-id15296 . -1) (undo-tree-id15297 . -1) (undo-tree-id15298 . -1) (undo-tree-id15299 . -1) (undo-tree-id15300 . -1) (undo-tree-id15301 . -1) (undo-tree-id15302 . -1) (undo-tree-id15303 . -1) (undo-tree-id15304 . -1) (undo-tree-id15305 . -1) (undo-tree-id15306 . -1) (undo-tree-id15307 . -1) (undo-tree-id15308 . -1) (undo-tree-id15309 . -1) (undo-tree-id15310 . -1) (undo-tree-id15311 . -1) (undo-tree-id15312 . -1) (undo-tree-id15313 . -1) (undo-tree-id15314 . -1) (undo-tree-id15315 . -1) (undo-tree-id15316 . -1) (undo-tree-id15317 . -1) (undo-tree-id15318 . -1) (undo-tree-id15319 . -1) (undo-tree-id15320 . -1) (undo-tree-id15321 . -1) (undo-tree-id15322 . -1) (undo-tree-id15323 . -1) (#("." 0 1 (fontified nil)) . -4904) (undo-tree-id15324 . -1) (undo-tree-id15325 . -1) (undo-tree-id15326 . -1) (undo-tree-id15327 . -1) (undo-tree-id15328 . -1) (undo-tree-id15329 . -1) (undo-tree-id15330 . -1) (undo-tree-id15331 . -1) (undo-tree-id15332 . -1) (undo-tree-id15333 . -1) (undo-tree-id15334 . -1) (undo-tree-id15335 . -1) (undo-tree-id15336 . -1) (undo-tree-id15337 . -1) (undo-tree-id15338 . -1) (undo-tree-id15339 . -1) (undo-tree-id15340 . -1) (undo-tree-id15341 . -1) (undo-tree-id15342 . -1) (undo-tree-id15343 . -1) (undo-tree-id15344 . -1) (undo-tree-id15345 . -1) (undo-tree-id15346 . -1) (undo-tree-id15347 . -1) (undo-tree-id15348 . -1) (undo-tree-id15349 . -1) (#("t" 0 1 (fontified nil)) . -4905) (undo-tree-id15350 . -1) (undo-tree-id15351 . -1) (undo-tree-id15352 . -1) (undo-tree-id15353 . -1) (undo-tree-id15354 . -1) (undo-tree-id15355 . -1) (undo-tree-id15356 . -1) (undo-tree-id15357 . -1) (undo-tree-id15358 . -1) (undo-tree-id15359 . -1) (undo-tree-id15360 . -1) (undo-tree-id15361 . -1) (undo-tree-id15362 . -1) (undo-tree-id15363 . -1) (undo-tree-id15364 . -1) (undo-tree-id15365 . -1) (undo-tree-id15366 . -1) (undo-tree-id15367 . -1) (undo-tree-id15368 . -1) (undo-tree-id15369 . -1) (undo-tree-id15370 . -1) (undo-tree-id15371 . -1) (undo-tree-id15372 . -1) (undo-tree-id15373 . -1) (#("o" 0 1 (fontified nil)) . -4906) (undo-tree-id15374 . -1) (undo-tree-id15375 . -1) (undo-tree-id15376 . -1) (undo-tree-id15377 . -1) (undo-tree-id15378 . -1) (undo-tree-id15379 . -1) (undo-tree-id15380 . -1) (undo-tree-id15381 . -1) (undo-tree-id15382 . -1) (undo-tree-id15383 . -1) (undo-tree-id15384 . -1) (undo-tree-id15385 . -1) (undo-tree-id15386 . -1) (undo-tree-id15387 . -1) (undo-tree-id15388 . -1) (undo-tree-id15389 . -1) (undo-tree-id15390 . -1) (undo-tree-id15391 . -1) (undo-tree-id15392 . -1) (undo-tree-id15393 . -1) (undo-tree-id15394 . -1) (undo-tree-id15395 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . -4907) (undo-tree-id15396 . -1) (undo-tree-id15397 . -1) (undo-tree-id15398 . -1) (undo-tree-id15399 . -1) (undo-tree-id15400 . -1) (undo-tree-id15401 . -1) (undo-tree-id15402 . -1) (undo-tree-id15403 . -1) (undo-tree-id15404 . -1) (undo-tree-id15405 . -1) (undo-tree-id15406 . -1) (undo-tree-id15407 . -1) (undo-tree-id15408 . -1) (undo-tree-id15409 . -1) (undo-tree-id15410 . -1) (undo-tree-id15411 . -1) (undo-tree-id15412 . -1) (undo-tree-id15413 . -1) (#("t" 0 1 (fontified nil)) . -4908) (undo-tree-id15414 . -1) (undo-tree-id15415 . -1) (undo-tree-id15416 . -1) (undo-tree-id15417 . -1) (undo-tree-id15418 . -1) (undo-tree-id15419 . -1) (undo-tree-id15420 . -1) (undo-tree-id15421 . -1) (undo-tree-id15422 . -1) (undo-tree-id15423 . -1) (undo-tree-id15424 . -1) (undo-tree-id15425 . -1) (undo-tree-id15426 . -1) (undo-tree-id15427 . -1) (#("o" 0 1 (fontified nil)) . -4909) (undo-tree-id15428 . -1) (undo-tree-id15429 . -1) (undo-tree-id15430 . -1) (undo-tree-id15431 . -1) (undo-tree-id15432 . -1) (undo-tree-id15433 . -1) (undo-tree-id15434 . -1) (undo-tree-id15435 . -1) (undo-tree-id15436 . -1) (undo-tree-id15437 . -1) (undo-tree-id15438 . -1) (undo-tree-id15439 . -1) (#("r" 0 1 (fontified nil)) . -4910) (undo-tree-id15440 . -1) (undo-tree-id15441 . -1) (undo-tree-id15442 . -1) (undo-tree-id15443 . -1) (undo-tree-id15444 . -1) (undo-tree-id15445 . -1) (undo-tree-id15446 . -1) (undo-tree-id15447 . -1) (undo-tree-id15448 . -1) (undo-tree-id15449 . -1) (#("c" 0 1 (fontified nil)) . -4911) (undo-tree-id15450 . -1) (undo-tree-id15451 . -1) (undo-tree-id15452 . -1) (undo-tree-id15453 . -1) (undo-tree-id15454 . -1) (undo-tree-id15455 . -1) (undo-tree-id15456 . -1) (undo-tree-id15457 . -1) (#("h" 0 1 (fontified nil)) . -4912) (undo-tree-id15458 . -1) (undo-tree-id15459 . -1) (undo-tree-id15460 . -1) (undo-tree-id15461 . -1) (undo-tree-id15462 . -1) (undo-tree-id15463 . -1) (#("." 0 1 (fontified nil)) . -4913) (undo-tree-id15464 . -1) (undo-tree-id15465 . -1) (undo-tree-id15466 . -1) (undo-tree-id15467 . -1) (#("f" 0 1 (face font-lock-builtin-face fontified nil)) . -4914) (undo-tree-id15468 . -1) (#("l" 0 1 (face font-lock-builtin-face fontified nil)) . -4915) (undo-tree-id15469 . -1) (#("o" 0 1 (face font-lock-builtin-face fontified nil)) . -4916) (undo-tree-id15470 . -1) (#("a" 0 1 (face font-lock-builtin-face fontified nil)) . -4917) (undo-tree-id15471 . -1) (#("t" 0 1 (face font-lock-builtin-face fontified t)) . -4918) (undo-tree-id15472 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -4919) (undo-tree-id15473 . -1) 4920 (t 25891 53957 250596 86000)) nil (25891 53971 299074 778000) 0 nil])
([nil nil ((4903 . 4904)) nil (25891 53971 298948 305000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4307) (undo-tree-id15474 . -1) (undo-tree-id15475 . -1) (undo-tree-id15476 . -1) (undo-tree-id15477 . -1) (undo-tree-id15478 . -1) (undo-tree-id15479 . -1) (undo-tree-id15480 . -1) (undo-tree-id15481 . -1) (undo-tree-id15482 . -1) (undo-tree-id15483 . -1) (undo-tree-id15484 . -1) (undo-tree-id15485 . -1) (undo-tree-id15486 . -1) (undo-tree-id15487 . -1) (undo-tree-id15488 . -1) (undo-tree-id15489 . -1) (undo-tree-id15490 . -1) (undo-tree-id15491 . -1) (undo-tree-id15492 . -1) (undo-tree-id15493 . -1) (undo-tree-id15494 . -1) (undo-tree-id15495 . -1) (undo-tree-id15496 . -1) (undo-tree-id15497 . -1) (undo-tree-id15498 . -1) (undo-tree-id15499 . -1) (undo-tree-id15500 . -1) (undo-tree-id15501 . -1) (undo-tree-id15502 . -1) (undo-tree-id15503 . -1) (undo-tree-id15504 . -1) (undo-tree-id15505 . -1) (undo-tree-id15506 . -1) (undo-tree-id15507 . -1) (undo-tree-id15508 . -1) (undo-tree-id15509 . -1) (undo-tree-id15510 . -1) (undo-tree-id15511 . -1) (undo-tree-id15512 . -1) (undo-tree-id15513 . -1) (undo-tree-id15514 . -1) (undo-tree-id15515 . -1) (undo-tree-id15516 . -1) (undo-tree-id15517 . -1) (undo-tree-id15518 . -1) (undo-tree-id15519 . -1) (undo-tree-id15520 . -1) (undo-tree-id15521 . -1) (undo-tree-id15522 . -1) (undo-tree-id15523 . -1) (undo-tree-id15524 . -1) (undo-tree-id15525 . -1) (undo-tree-id15526 . -1) (undo-tree-id15527 . -1) (undo-tree-id15528 . -1) (undo-tree-id15529 . -1) (undo-tree-id15530 . -1) (undo-tree-id15531 . -1) (undo-tree-id15532 . -1) (undo-tree-id15533 . -1) (undo-tree-id15534 . -1) (undo-tree-id15535 . -1) (undo-tree-id15536 . -1) (undo-tree-id15537 . -1) (undo-tree-id15538 . -1) (undo-tree-id15539 . -1) (undo-tree-id15540 . -1) (undo-tree-id15541 . -1) (undo-tree-id15542 . -1) (undo-tree-id15543 . -1) (undo-tree-id15544 . -1) (undo-tree-id15545 . -1) (undo-tree-id15546 . -1) (undo-tree-id15547 . -1) (undo-tree-id15548 . -1) (undo-tree-id15549 . -1) (undo-tree-id15550 . -1) (undo-tree-id15551 . -1) (undo-tree-id15552 . -1) (undo-tree-id15553 . -1) (undo-tree-id15554 . -1) (undo-tree-id15555 . -1) (undo-tree-id15556 . -1) (undo-tree-id15557 . -1) (undo-tree-id15558 . -1) (undo-tree-id15559 . -1) (undo-tree-id15560 . -1) (undo-tree-id15561 . -1) (undo-tree-id15562 . -1) (undo-tree-id15563 . -1) (undo-tree-id15564 . -1) (undo-tree-id15565 . -1) (undo-tree-id15566 . -1) (undo-tree-id15567 . -1) (undo-tree-id15568 . -1) (undo-tree-id15569 . -1) (undo-tree-id15570 . -1) (undo-tree-id15571 . -1) (undo-tree-id15572 . -1) (undo-tree-id15573 . -1) (undo-tree-id15574 . -1) (undo-tree-id15575 . -1) (undo-tree-id15576 . -1) (undo-tree-id15577 . -1) (undo-tree-id15578 . -1) (undo-tree-id15579 . -1) (undo-tree-id15580 . -1) (undo-tree-id15581 . -1) (undo-tree-id15582 . -1) (undo-tree-id15583 . -1) (undo-tree-id15584 . -1) (undo-tree-id15585 . -1) (undo-tree-id15586 . -1) (undo-tree-id15587 . -1) (undo-tree-id15588 . -1) (undo-tree-id15589 . -1) (undo-tree-id15590 . -1) (undo-tree-id15591 . -1) (undo-tree-id15592 . -1) (undo-tree-id15593 . -1) (undo-tree-id15594 . -1) (undo-tree-id15595 . -1) (undo-tree-id15596 . -1) (undo-tree-id15597 . -1) (undo-tree-id15598 . -1) (undo-tree-id15599 . -1) (undo-tree-id15600 . -1) (undo-tree-id15601 . -1) (undo-tree-id15602 . -1) (undo-tree-id15603 . -1) (undo-tree-id15604 . -1) (undo-tree-id15605 . -1) (undo-tree-id15606 . -1) (undo-tree-id15607 . -1) (undo-tree-id15608 . -1) (undo-tree-id15609 . -1) (undo-tree-id15610 . -1) (undo-tree-id15611 . -1) (undo-tree-id15612 . -1) (undo-tree-id15613 . -1) (undo-tree-id15614 . -1) (undo-tree-id15615 . -1) (undo-tree-id15616 . -1) (undo-tree-id15617 . -1) (undo-tree-id15618 . -1) (undo-tree-id15619 . -1) (undo-tree-id15620 . -1) (undo-tree-id15621 . -1) (undo-tree-id15622 . -1) (undo-tree-id15623 . -1) (undo-tree-id15624 . -1) (undo-tree-id15625 . -1) (undo-tree-id15626 . -1) (undo-tree-id15627 . -1) (undo-tree-id15628 . -1) (#(" " 0 1 (fontified t)) . -4308) (undo-tree-id15629 . -1) (undo-tree-id15630 . -1) (undo-tree-id15631 . -1) (undo-tree-id15632 . -1) (undo-tree-id15633 . -1) (undo-tree-id15634 . -1) (undo-tree-id15635 . -1) (undo-tree-id15636 . -1) (undo-tree-id15637 . -1) (undo-tree-id15638 . -1) (undo-tree-id15639 . -1) (undo-tree-id15640 . -1) (undo-tree-id15641 . -1) (undo-tree-id15642 . -1) (undo-tree-id15643 . -1) (undo-tree-id15644 . -1) (undo-tree-id15645 . -1) (undo-tree-id15646 . -1) (undo-tree-id15647 . -1) (undo-tree-id15648 . -1) (undo-tree-id15649 . -1) (undo-tree-id15650 . -1) (undo-tree-id15651 . -1) (undo-tree-id15652 . -1) (undo-tree-id15653 . -1) (undo-tree-id15654 . -1) (undo-tree-id15655 . -1) (undo-tree-id15656 . -1) (undo-tree-id15657 . -1) (undo-tree-id15658 . -1) (undo-tree-id15659 . -1) (undo-tree-id15660 . -1) (undo-tree-id15661 . -1) (undo-tree-id15662 . -1) (undo-tree-id15663 . -1) (undo-tree-id15664 . -1) (undo-tree-id15665 . -1) (undo-tree-id15666 . -1) (undo-tree-id15667 . -1) (undo-tree-id15668 . -1) (undo-tree-id15669 . -1) (undo-tree-id15670 . -1) (undo-tree-id15671 . -1) (undo-tree-id15672 . -1) (undo-tree-id15673 . -1) (undo-tree-id15674 . -1) (undo-tree-id15675 . -1) (undo-tree-id15676 . -1) (undo-tree-id15677 . -1) (undo-tree-id15678 . -1) (undo-tree-id15679 . -1) (undo-tree-id15680 . -1) (undo-tree-id15681 . -1) (undo-tree-id15682 . -1) (undo-tree-id15683 . -1) (undo-tree-id15684 . -1) (undo-tree-id15685 . -1) (undo-tree-id15686 . -1) (undo-tree-id15687 . -1) (undo-tree-id15688 . -1) (undo-tree-id15689 . -1) (undo-tree-id15690 . -1) (undo-tree-id15691 . -1) (undo-tree-id15692 . -1) (undo-tree-id15693 . -1) (undo-tree-id15694 . -1) (undo-tree-id15695 . -1) (undo-tree-id15696 . -1) (undo-tree-id15697 . -1) (undo-tree-id15698 . -1) (undo-tree-id15699 . -1) (undo-tree-id15700 . -1) (undo-tree-id15701 . -1) (undo-tree-id15702 . -1) (undo-tree-id15703 . -1) (undo-tree-id15704 . -1) (undo-tree-id15705 . -1) (undo-tree-id15706 . -1) (undo-tree-id15707 . -1) (undo-tree-id15708 . -1) (undo-tree-id15709 . -1) (undo-tree-id15710 . -1) (undo-tree-id15711 . -1) (undo-tree-id15712 . -1) (undo-tree-id15713 . -1) (undo-tree-id15714 . -1) (undo-tree-id15715 . -1) (undo-tree-id15716 . -1) (undo-tree-id15717 . -1) (undo-tree-id15718 . -1) (undo-tree-id15719 . -1) (undo-tree-id15720 . -1) (undo-tree-id15721 . -1) (undo-tree-id15722 . -1) (undo-tree-id15723 . -1) (undo-tree-id15724 . -1) (undo-tree-id15725 . -1) (undo-tree-id15726 . -1) (undo-tree-id15727 . -1) (undo-tree-id15728 . -1) (undo-tree-id15729 . -1) (undo-tree-id15730 . -1) (undo-tree-id15731 . -1) (undo-tree-id15732 . -1) (undo-tree-id15733 . -1) (undo-tree-id15734 . -1) (undo-tree-id15735 . -1) (undo-tree-id15736 . -1) (undo-tree-id15737 . -1) (undo-tree-id15738 . -1) (undo-tree-id15739 . -1) (undo-tree-id15740 . -1) (undo-tree-id15741 . -1) (undo-tree-id15742 . -1) (undo-tree-id15743 . -1) (undo-tree-id15744 . -1) (undo-tree-id15745 . -1) (undo-tree-id15746 . -1) (undo-tree-id15747 . -1) (undo-tree-id15748 . -1) (undo-tree-id15749 . -1) (undo-tree-id15750 . -1) (undo-tree-id15751 . -1) (undo-tree-id15752 . -1) (undo-tree-id15753 . -1) (undo-tree-id15754 . -1) (undo-tree-id15755 . -1) (undo-tree-id15756 . -1) (undo-tree-id15757 . -1) (undo-tree-id15758 . -1) (undo-tree-id15759 . -1) (undo-tree-id15760 . -1) (undo-tree-id15761 . -1) (undo-tree-id15762 . -1) (undo-tree-id15763 . -1) (undo-tree-id15764 . -1) (undo-tree-id15765 . -1) (undo-tree-id15766 . -1) (#("d" 0 1 (fontified t)) . -4309) (undo-tree-id15767 . -1) (undo-tree-id15768 . -1) (undo-tree-id15769 . -1) (undo-tree-id15770 . -1) (undo-tree-id15771 . -1) (undo-tree-id15772 . -1) (undo-tree-id15773 . -1) (undo-tree-id15774 . -1) (undo-tree-id15775 . -1) (undo-tree-id15776 . -1) (undo-tree-id15777 . -1) (undo-tree-id15778 . -1) (undo-tree-id15779 . -1) (undo-tree-id15780 . -1) (undo-tree-id15781 . -1) (undo-tree-id15782 . -1) (undo-tree-id15783 . -1) (undo-tree-id15784 . -1) (undo-tree-id15785 . -1) (undo-tree-id15786 . -1) (undo-tree-id15787 . -1) (undo-tree-id15788 . -1) (undo-tree-id15789 . -1) (undo-tree-id15790 . -1) (undo-tree-id15791 . -1) (undo-tree-id15792 . -1) (undo-tree-id15793 . -1) (undo-tree-id15794 . -1) (undo-tree-id15795 . -1) (undo-tree-id15796 . -1) (undo-tree-id15797 . -1) (undo-tree-id15798 . -1) (undo-tree-id15799 . -1) (undo-tree-id15800 . -1) (undo-tree-id15801 . -1) (undo-tree-id15802 . -1) (undo-tree-id15803 . -1) (undo-tree-id15804 . -1) (undo-tree-id15805 . -1) (undo-tree-id15806 . -1) (undo-tree-id15807 . -1) (undo-tree-id15808 . -1) (undo-tree-id15809 . -1) (undo-tree-id15810 . -1) (undo-tree-id15811 . -1) (undo-tree-id15812 . -1) (undo-tree-id15813 . -1) (undo-tree-id15814 . -1) (undo-tree-id15815 . -1) (undo-tree-id15816 . -1) (undo-tree-id15817 . -1) (undo-tree-id15818 . -1) (undo-tree-id15819 . -1) (undo-tree-id15820 . -1) (undo-tree-id15821 . -1) (undo-tree-id15822 . -1) (undo-tree-id15823 . -1) (undo-tree-id15824 . -1) (undo-tree-id15825 . -1) (undo-tree-id15826 . -1) (undo-tree-id15827 . -1) (undo-tree-id15828 . -1) (undo-tree-id15829 . -1) (undo-tree-id15830 . -1) (undo-tree-id15831 . -1) (undo-tree-id15832 . -1) (undo-tree-id15833 . -1) (undo-tree-id15834 . -1) (undo-tree-id15835 . -1) (undo-tree-id15836 . -1) (undo-tree-id15837 . -1) (undo-tree-id15838 . -1) (undo-tree-id15839 . -1) (undo-tree-id15840 . -1) (undo-tree-id15841 . -1) (undo-tree-id15842 . -1) (undo-tree-id15843 . -1) (undo-tree-id15844 . -1) (undo-tree-id15845 . -1) (undo-tree-id15846 . -1) (undo-tree-id15847 . -1) (undo-tree-id15848 . -1) (undo-tree-id15849 . -1) (undo-tree-id15850 . -1) (undo-tree-id15851 . -1) (undo-tree-id15852 . -1) (undo-tree-id15853 . -1) (undo-tree-id15854 . -1) (undo-tree-id15855 . -1) (undo-tree-id15856 . -1) (undo-tree-id15857 . -1) (undo-tree-id15858 . -1) (undo-tree-id15859 . -1) (undo-tree-id15860 . -1) (undo-tree-id15861 . -1) (undo-tree-id15862 . -1) (undo-tree-id15863 . -1) (undo-tree-id15864 . -1) (undo-tree-id15865 . -1) (undo-tree-id15866 . -1) (undo-tree-id15867 . -1) (undo-tree-id15868 . -1) (undo-tree-id15869 . -1) (undo-tree-id15870 . -1) (undo-tree-id15871 . -1) (undo-tree-id15872 . -1) (undo-tree-id15873 . -1) (undo-tree-id15874 . -1) (undo-tree-id15875 . -1) (undo-tree-id15876 . -1) (undo-tree-id15877 . -1) (undo-tree-id15878 . -1) (undo-tree-id15879 . -1) (undo-tree-id15880 . -1) (undo-tree-id15881 . -1) (undo-tree-id15882 . -1) (undo-tree-id15883 . -1) (undo-tree-id15884 . -1) (undo-tree-id15885 . -1) (undo-tree-id15886 . -1) (undo-tree-id15887 . -1) (#("t" 0 1 (fontified t)) . -4310) (undo-tree-id15888 . -1) (undo-tree-id15889 . -1) (undo-tree-id15890 . -1) (undo-tree-id15891 . -1) (undo-tree-id15892 . -1) (undo-tree-id15893 . -1) (undo-tree-id15894 . -1) (undo-tree-id15895 . -1) (undo-tree-id15896 . -1) (undo-tree-id15897 . -1) (undo-tree-id15898 . -1) (undo-tree-id15899 . -1) (undo-tree-id15900 . -1) (undo-tree-id15901 . -1) (undo-tree-id15902 . -1) (undo-tree-id15903 . -1) (undo-tree-id15904 . -1) (undo-tree-id15905 . -1) (undo-tree-id15906 . -1) (undo-tree-id15907 . -1) (undo-tree-id15908 . -1) (undo-tree-id15909 . -1) (undo-tree-id15910 . -1) (undo-tree-id15911 . -1) (undo-tree-id15912 . -1) (undo-tree-id15913 . -1) (undo-tree-id15914 . -1) (undo-tree-id15915 . -1) (undo-tree-id15916 . -1) (undo-tree-id15917 . -1) (undo-tree-id15918 . -1) (undo-tree-id15919 . -1) (undo-tree-id15920 . -1) (undo-tree-id15921 . -1) (undo-tree-id15922 . -1) (undo-tree-id15923 . -1) (undo-tree-id15924 . -1) (undo-tree-id15925 . -1) (undo-tree-id15926 . -1) (undo-tree-id15927 . -1) (undo-tree-id15928 . -1) (undo-tree-id15929 . -1) (undo-tree-id15930 . -1) (undo-tree-id15931 . -1) (undo-tree-id15932 . -1) (undo-tree-id15933 . -1) (undo-tree-id15934 . -1) (undo-tree-id15935 . -1) (undo-tree-id15936 . -1) (undo-tree-id15937 . -1) (undo-tree-id15938 . -1) (undo-tree-id15939 . -1) (undo-tree-id15940 . -1) (undo-tree-id15941 . -1) (undo-tree-id15942 . -1) (undo-tree-id15943 . -1) (undo-tree-id15944 . -1) (undo-tree-id15945 . -1) (undo-tree-id15946 . -1) (undo-tree-id15947 . -1) (undo-tree-id15948 . -1) (undo-tree-id15949 . -1) (undo-tree-id15950 . -1) (undo-tree-id15951 . -1) (undo-tree-id15952 . -1) (undo-tree-id15953 . -1) (undo-tree-id15954 . -1) (undo-tree-id15955 . -1) (undo-tree-id15956 . -1) (undo-tree-id15957 . -1) (undo-tree-id15958 . -1) (undo-tree-id15959 . -1) (undo-tree-id15960 . -1) (undo-tree-id15961 . -1) (undo-tree-id15962 . -1) (undo-tree-id15963 . -1) (undo-tree-id15964 . -1) (undo-tree-id15965 . -1) (undo-tree-id15966 . -1) (undo-tree-id15967 . -1) (undo-tree-id15968 . -1) (undo-tree-id15969 . -1) (undo-tree-id15970 . -1) (undo-tree-id15971 . -1) (undo-tree-id15972 . -1) (undo-tree-id15973 . -1) (undo-tree-id15974 . -1) (undo-tree-id15975 . -1) (undo-tree-id15976 . -1) (undo-tree-id15977 . -1) (undo-tree-id15978 . -1) (undo-tree-id15979 . -1) (undo-tree-id15980 . -1) (undo-tree-id15981 . -1) (undo-tree-id15982 . -1) (undo-tree-id15983 . -1) (undo-tree-id15984 . -1) (undo-tree-id15985 . -1) (undo-tree-id15986 . -1) (undo-tree-id15987 . -1) (undo-tree-id15988 . -1) (undo-tree-id15989 . -1) (undo-tree-id15990 . -1) (undo-tree-id15991 . -1) (#("y" 0 1 (fontified t)) . -4311) (undo-tree-id15992 . -1) (undo-tree-id15993 . -1) (undo-tree-id15994 . -1) (undo-tree-id15995 . -1) (undo-tree-id15996 . -1) (undo-tree-id15997 . -1) (undo-tree-id15998 . -1) (undo-tree-id15999 . -1) (undo-tree-id16000 . -1) (undo-tree-id16001 . -1) (undo-tree-id16002 . -1) (undo-tree-id16003 . -1) (undo-tree-id16004 . -1) (undo-tree-id16005 . -1) (undo-tree-id16006 . -1) (undo-tree-id16007 . -1) (undo-tree-id16008 . -1) (undo-tree-id16009 . -1) (undo-tree-id16010 . -1) (undo-tree-id16011 . -1) (undo-tree-id16012 . -1) (undo-tree-id16013 . -1) (undo-tree-id16014 . -1) (undo-tree-id16015 . -1) (undo-tree-id16016 . -1) (undo-tree-id16017 . -1) (undo-tree-id16018 . -1) (undo-tree-id16019 . -1) (undo-tree-id16020 . -1) (undo-tree-id16021 . -1) (undo-tree-id16022 . -1) (undo-tree-id16023 . -1) (undo-tree-id16024 . -1) (undo-tree-id16025 . -1) (undo-tree-id16026 . -1) (undo-tree-id16027 . -1) (undo-tree-id16028 . -1) (undo-tree-id16029 . -1) (undo-tree-id16030 . -1) (undo-tree-id16031 . -1) (undo-tree-id16032 . -1) (undo-tree-id16033 . -1) (undo-tree-id16034 . -1) (undo-tree-id16035 . -1) (undo-tree-id16036 . -1) (undo-tree-id16037 . -1) (undo-tree-id16038 . -1) (undo-tree-id16039 . -1) (undo-tree-id16040 . -1) (undo-tree-id16041 . -1) (undo-tree-id16042 . -1) (undo-tree-id16043 . -1) (undo-tree-id16044 . -1) (undo-tree-id16045 . -1) (undo-tree-id16046 . -1) (undo-tree-id16047 . -1) (undo-tree-id16048 . -1) (undo-tree-id16049 . -1) (undo-tree-id16050 . -1) (undo-tree-id16051 . -1) (undo-tree-id16052 . -1) (undo-tree-id16053 . -1) (undo-tree-id16054 . -1) (undo-tree-id16055 . -1) (undo-tree-id16056 . -1) (undo-tree-id16057 . -1) (undo-tree-id16058 . -1) (undo-tree-id16059 . -1) (undo-tree-id16060 . -1) (undo-tree-id16061 . -1) (undo-tree-id16062 . -1) (undo-tree-id16063 . -1) (undo-tree-id16064 . -1) (undo-tree-id16065 . -1) (undo-tree-id16066 . -1) (undo-tree-id16067 . -1) (undo-tree-id16068 . -1) (undo-tree-id16069 . -1) (undo-tree-id16070 . -1) (undo-tree-id16071 . -1) (undo-tree-id16072 . -1) (undo-tree-id16073 . -1) (undo-tree-id16074 . -1) (undo-tree-id16075 . -1) (undo-tree-id16076 . -1) (undo-tree-id16077 . -1) (undo-tree-id16078 . -1) (#("p" 0 1 (fontified t)) . -4312) (undo-tree-id16079 . -1) (undo-tree-id16080 . -1) (undo-tree-id16081 . -1) (undo-tree-id16082 . -1) (undo-tree-id16083 . -1) (undo-tree-id16084 . -1) (undo-tree-id16085 . -1) (undo-tree-id16086 . -1) (undo-tree-id16087 . -1) (undo-tree-id16088 . -1) (undo-tree-id16089 . -1) (undo-tree-id16090 . -1) (undo-tree-id16091 . -1) (undo-tree-id16092 . -1) (undo-tree-id16093 . -1) (undo-tree-id16094 . -1) (undo-tree-id16095 . -1) (undo-tree-id16096 . -1) (undo-tree-id16097 . -1) (undo-tree-id16098 . -1) (undo-tree-id16099 . -1) (undo-tree-id16100 . -1) (undo-tree-id16101 . -1) (undo-tree-id16102 . -1) (undo-tree-id16103 . -1) (undo-tree-id16104 . -1) (undo-tree-id16105 . -1) (undo-tree-id16106 . -1) (undo-tree-id16107 . -1) (undo-tree-id16108 . -1) (undo-tree-id16109 . -1) (undo-tree-id16110 . -1) (undo-tree-id16111 . -1) (undo-tree-id16112 . -1) (undo-tree-id16113 . -1) (undo-tree-id16114 . -1) (undo-tree-id16115 . -1) (undo-tree-id16116 . -1) (undo-tree-id16117 . -1) (undo-tree-id16118 . -1) (undo-tree-id16119 . -1) (undo-tree-id16120 . -1) (undo-tree-id16121 . -1) (undo-tree-id16122 . -1) (undo-tree-id16123 . -1) (undo-tree-id16124 . -1) (undo-tree-id16125 . -1) (undo-tree-id16126 . -1) (undo-tree-id16127 . -1) (undo-tree-id16128 . -1) (undo-tree-id16129 . -1) (undo-tree-id16130 . -1) (undo-tree-id16131 . -1) (undo-tree-id16132 . -1) (undo-tree-id16133 . -1) (undo-tree-id16134 . -1) (undo-tree-id16135 . -1) (undo-tree-id16136 . -1) (undo-tree-id16137 . -1) (undo-tree-id16138 . -1) (undo-tree-id16139 . -1) (undo-tree-id16140 . -1) (undo-tree-id16141 . -1) (undo-tree-id16142 . -1) (undo-tree-id16143 . -1) (undo-tree-id16144 . -1) (undo-tree-id16145 . -1) (undo-tree-id16146 . -1) (undo-tree-id16147 . -1) (undo-tree-id16148 . -1) (#("e" 0 1 (fontified t)) . -4313) (undo-tree-id16149 . -1) (undo-tree-id16150 . -1) (undo-tree-id16151 . -1) (undo-tree-id16152 . -1) (undo-tree-id16153 . -1) (undo-tree-id16154 . -1) (undo-tree-id16155 . -1) (undo-tree-id16156 . -1) (undo-tree-id16157 . -1) (undo-tree-id16158 . -1) (undo-tree-id16159 . -1) (undo-tree-id16160 . -1) (undo-tree-id16161 . -1) (undo-tree-id16162 . -1) (undo-tree-id16163 . -1) (undo-tree-id16164 . -1) (undo-tree-id16165 . -1) (undo-tree-id16166 . -1) (undo-tree-id16167 . -1) (undo-tree-id16168 . -1) (undo-tree-id16169 . -1) (undo-tree-id16170 . -1) (undo-tree-id16171 . -1) (undo-tree-id16172 . -1) (undo-tree-id16173 . -1) (undo-tree-id16174 . -1) (undo-tree-id16175 . -1) (undo-tree-id16176 . -1) (undo-tree-id16177 . -1) (undo-tree-id16178 . -1) (undo-tree-id16179 . -1) (undo-tree-id16180 . -1) (undo-tree-id16181 . -1) (undo-tree-id16182 . -1) (undo-tree-id16183 . -1) (undo-tree-id16184 . -1) (undo-tree-id16185 . -1) (undo-tree-id16186 . -1) (undo-tree-id16187 . -1) (undo-tree-id16188 . -1) (undo-tree-id16189 . -1) (undo-tree-id16190 . -1) (undo-tree-id16191 . -1) (undo-tree-id16192 . -1) (undo-tree-id16193 . -1) (undo-tree-id16194 . -1) (undo-tree-id16195 . -1) (undo-tree-id16196 . -1) (undo-tree-id16197 . -1) (undo-tree-id16198 . -1) (undo-tree-id16199 . -1) (undo-tree-id16200 . -1) (undo-tree-id16201 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -4314) (undo-tree-id16202 . -1) (undo-tree-id16203 . -1) (undo-tree-id16204 . -1) (undo-tree-id16205 . -1) (undo-tree-id16206 . -1) (undo-tree-id16207 . -1) (undo-tree-id16208 . -1) (undo-tree-id16209 . -1) (undo-tree-id16210 . -1) (undo-tree-id16211 . -1) (undo-tree-id16212 . -1) (undo-tree-id16213 . -1) (undo-tree-id16214 . -1) (undo-tree-id16215 . -1) (undo-tree-id16216 . -1) (undo-tree-id16217 . -1) (undo-tree-id16218 . -1) (undo-tree-id16219 . -1) (undo-tree-id16220 . -1) (undo-tree-id16221 . -1) (undo-tree-id16222 . -1) (undo-tree-id16223 . -1) (undo-tree-id16224 . -1) (undo-tree-id16225 . -1) (undo-tree-id16226 . -1) (undo-tree-id16227 . -1) (undo-tree-id16228 . -1) (undo-tree-id16229 . -1) (undo-tree-id16230 . -1) (undo-tree-id16231 . -1) (undo-tree-id16232 . -1) (undo-tree-id16233 . -1) (undo-tree-id16234 . -1) (undo-tree-id16235 . -1) (undo-tree-id16236 . -1) (undo-tree-id16237 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified nil)) . -4315) (undo-tree-id16238 . -1) (undo-tree-id16239 . -1) (undo-tree-id16240 . -1) (undo-tree-id16241 . -1) (undo-tree-id16242 . -1) (undo-tree-id16243 . -1) (undo-tree-id16244 . -1) (undo-tree-id16245 . -1) (undo-tree-id16246 . -1) (undo-tree-id16247 . -1) (undo-tree-id16248 . -1) (undo-tree-id16249 . -1) (undo-tree-id16250 . -1) (undo-tree-id16251 . -1) (undo-tree-id16252 . -1) (undo-tree-id16253 . -1) (undo-tree-id16254 . -1) (undo-tree-id16255 . -1) (undo-tree-id16256 . -1) (undo-tree-id16257 . -1) (undo-tree-id16258 . -1) (undo-tree-id16259 . -1) (undo-tree-id16260 . -1) (undo-tree-id16261 . -1) (undo-tree-id16262 . -1) (undo-tree-id16263 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . -4316) (undo-tree-id16264 . -1) (undo-tree-id16265 . -1) (undo-tree-id16266 . -1) (undo-tree-id16267 . -1) (undo-tree-id16268 . -1) (undo-tree-id16269 . -1) (undo-tree-id16270 . -1) (undo-tree-id16271 . -1) (undo-tree-id16272 . -1) (undo-tree-id16273 . -1) (undo-tree-id16274 . -1) (undo-tree-id16275 . -1) (undo-tree-id16276 . -1) (undo-tree-id16277 . -1) (undo-tree-id16278 . -1) (undo-tree-id16279 . -1) (undo-tree-id16280 . -1) (undo-tree-id16281 . -1) (undo-tree-id16282 . -1) (undo-tree-id16283 . -1) (undo-tree-id16284 . -1) (undo-tree-id16285 . -1) (undo-tree-id16286 . -1) (undo-tree-id16287 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified nil)) . -4317) (undo-tree-id16288 . -1) (undo-tree-id16289 . -1) (undo-tree-id16290 . -1) (undo-tree-id16291 . -1) (undo-tree-id16292 . -1) (undo-tree-id16293 . -1) (undo-tree-id16294 . -1) (undo-tree-id16295 . -1) (undo-tree-id16296 . -1) (undo-tree-id16297 . -1) (undo-tree-id16298 . -1) (undo-tree-id16299 . -1) (undo-tree-id16300 . -1) (undo-tree-id16301 . -1) (undo-tree-id16302 . -1) (undo-tree-id16303 . -1) (undo-tree-id16304 . -1) (undo-tree-id16305 . -1) (undo-tree-id16306 . -1) (undo-tree-id16307 . -1) (undo-tree-id16308 . -1) (undo-tree-id16309 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified nil)) . -4318) (undo-tree-id16310 . -1) (undo-tree-id16311 . -1) (undo-tree-id16312 . -1) (undo-tree-id16313 . -1) (undo-tree-id16314 . -1) (undo-tree-id16315 . -1) (undo-tree-id16316 . -1) (undo-tree-id16317 . -1) (undo-tree-id16318 . -1) (undo-tree-id16319 . -1) (undo-tree-id16320 . -1) (undo-tree-id16321 . -1) (undo-tree-id16322 . -1) (undo-tree-id16323 . -1) (undo-tree-id16324 . -1) (undo-tree-id16325 . -1) (undo-tree-id16326 . -1) (undo-tree-id16327 . -1) (undo-tree-id16328 . -1) (undo-tree-id16329 . -1) (#("." 0 1 (fontified t)) . -4319) (undo-tree-id16330 . -1) (undo-tree-id16331 . -1) (undo-tree-id16332 . -1) (undo-tree-id16333 . -1) (undo-tree-id16334 . -1) (undo-tree-id16335 . -1) (undo-tree-id16336 . -1) (undo-tree-id16337 . -1) (undo-tree-id16338 . -1) (undo-tree-id16339 . -1) (undo-tree-id16340 . -1) (undo-tree-id16341 . -1) (undo-tree-id16342 . -1) (undo-tree-id16343 . -1) (undo-tree-id16344 . -1) (undo-tree-id16345 . -1) (undo-tree-id16346 . -1) (undo-tree-id16347 . -1) (#("F" 0 1 (fontified t)) . -4320) (undo-tree-id16348 . -1) (#("L" 0 1 (fontified t)) . -4321) (undo-tree-id16349 . -1) (#("O" 0 1 (fontified t)) . -4322) (undo-tree-id16350 . -1) (#("A" 0 1 (fontified t)) . -4323) (undo-tree-id16351 . -1) (#("T" 0 1 (fontified t)) . -4324) (undo-tree-id16352 . -1) 4325 (t 25891 53971 326726 817000)) nil (25891 53982 187235 700000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . -206) (undo-tree-id16367 . -1) 207 (t 25891 53982 218831 454000)) nil (25891 54000 580697 163000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -202) (undo-tree-id16353 . -1) (undo-tree-id16354 . -1) (undo-tree-id16355 . -1) (undo-tree-id16356 . -1) (undo-tree-id16357 . -1) (undo-tree-id16358 . -1) (undo-tree-id16359 . -1) (undo-tree-id16360 . -1) (undo-tree-id16361 . -1) (undo-tree-id16362 . -1) (undo-tree-id16363 . -1) (#("o" 0 1 (fontified t)) . -203) (undo-tree-id16364 . -1) (#("r" 0 1 (fontified nil)) . -204) (undo-tree-id16365 . -1) (#("c" 0 1 (fontified t)) . -205) (undo-tree-id16366 . -1) 206) nil (25891 54000 580694 14000) 0 nil])
([nil nil ((202 . 204)) nil (25891 54000 580671 832000) 0 nil])
([nil nil ((apply 2 1375 1466 undo--wrap-and-run-primitive-undo 1375 1466 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1383) 1468))) nil (25891 54009 883696 834000) 0 nil])
([nil nil ((apply -2 1328 1468 undo--wrap-and-run-primitive-undo 1328 1468 ((1336 . 1338) 1375))) nil (25891 54009 883691 525000) 0 nil])
([nil nil ((#("        print(rates.type())
        print(self.Wab.weight.type())
        print(self.Wab.bias.type())
" 0 8 (fontified t) 8 13 (face font-lock-builtin-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 20 (fontified t) 20 24 (face font-lock-builtin-face fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face (rainbow-delimiters-depth-2-face) fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 28 (fontified t) 28 36 (fontified t) 36 41 (face font-lock-builtin-face fontified t) 41 42 (face (rainbow-delimiters-depth-1-face) fontified t) 42 46 (face font-lock-keyword-face fontified t) 46 58 (fontified t) 58 62 (face font-lock-builtin-face fontified t) 62 63 (face (rainbow-delimiters-depth-2-face) fontified t) 63 64 (face (rainbow-delimiters-depth-2-face) fontified t) 64 65 (face (rainbow-delimiters-depth-1-face) fontified t) 65 66 (fontified t) 66 74 (fontified t) 74 79 (face font-lock-builtin-face fontified t) 79 80 (face (rainbow-delimiters-depth-1-face) fontified t) 80 84 (face font-lock-keyword-face fontified t) 84 94 (fontified t) 94 98 (face font-lock-builtin-face fontified t) 98 99 (face (rainbow-delimiters-depth-2-face) fontified t) 99 100 (face (rainbow-delimiters-depth-2-face) fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 102 (fontified t rear-nonsticky t)) . -1468) (undo-tree-id16403 . -26) (undo-tree-id16404 . -26) (undo-tree-id16405 . -26) (undo-tree-id16406 . -26) (undo-tree-id16407 . -66) (undo-tree-id16408 . -93) (undo-tree-id16409 . -93) (undo-tree-id16410 . -93) (undo-tree-id16411 . -101) (undo-tree-id16412 . -102) 1570 (t 25891 54009 919110 777000)) nil (25891 54025 764480 389000) 0 nil])
([nil nil ((#("print" 0 5 (face font-lock-builtin-face fontified t)) . 1485)) nil (25891 54025 764473 982000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1485) (undo-tree-id16400 . -1) (undo-tree-id16401 . -1) (undo-tree-id16402 . -1)) nil (25891 54025 764472 921000) 0 nil])
([nil nil ((1485 . 1501)) nil (25891 54025 764470 490000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -1500) (undo-tree-id16399 . -1) 1501) nil (25891 54025 764469 417000) 0 nil])
([nil nil ((1500 . 1507)) nil (25891 54025 764468 94000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -1506) (undo-tree-id16398 . -1) 1507) nil (25891 54025 764467 355000) 0 nil])
([nil nil ((1506 . 1509)) nil (25891 54025 764466 75000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-unmatched-face) fontified t)) . -1524) (undo-tree-id16397 . -1) 1525) nil (25891 54025 764464 806000) 0 nil])
([nil nil ((#("        # print(net_input.type())
" 0 8 (fontified t) 8 10 (face font-lock-comment-delimiter-face fontified t) 10 15 (face font-lock-comment-face fontified t) 15 16 (face font-lock-comment-face fontified t) 16 25 (face font-lock-comment-face fontified t) 25 26 (face font-lock-comment-face fontified t) 26 30 (face font-lock-comment-face fontified t) 30 31 (face font-lock-comment-face fontified t) 31 32 (face font-lock-comment-face fontified t) 32 33 (face font-lock-comment-face fontified t) 33 34 (face font-lock-comment-face fontified t rear-nonsticky t)) . -1525) (undo-tree-id16368 . -25) (undo-tree-id16369 . -25) (undo-tree-id16370 . -25) (undo-tree-id16371 . -34) (undo-tree-id16372 . -34) (undo-tree-id16373 . -34) (undo-tree-id16374 . -34) (undo-tree-id16375 . -34) (undo-tree-id16376 . -34) (undo-tree-id16377 . -34) (undo-tree-id16378 . -34) (undo-tree-id16379 . -34) (undo-tree-id16380 . -34) (undo-tree-id16381 . -34) (undo-tree-id16382 . -34) (undo-tree-id16383 . -34) (undo-tree-id16384 . -34) (undo-tree-id16385 . -34) (undo-tree-id16386 . -34) (undo-tree-id16387 . -34) (undo-tree-id16388 . -34) (undo-tree-id16389 . -34) (undo-tree-id16390 . -34) (undo-tree-id16391 . -34) (undo-tree-id16392 . -34) (undo-tree-id16393 . -34) (undo-tree-id16394 . -34) (undo-tree-id16395 . -34) (undo-tree-id16396 . -34) 1559) nil (25891 54025 764460 73000) 0 nil])
([nil nil ((apply -10 6108 6268 undo--wrap-and-run-primitive-undo 6108 6268 ((6243 . 6245) (6211 . 6213) (6179 . 6181) (6143 . 6145) (6116 . 6118) 6257))) nil (25891 54055 856050 536000) 0 nil])
([nil nil ((6267 . 6275)) nil (25891 54055 856044 717000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3481) (undo-tree-id16419 . -1) 3482 (t 25891 54055 887613 911000)) nil (25891 54240 117364 267000) 0 nil])
([nil nil ((3481 . 3482)) nil (25891 54240 117362 23000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -3514) (undo-tree-id16413 . -1) (#("o" 0 1 (fontified t)) . -3515) (undo-tree-id16414 . -1) (#("u" 0 1 (fontified t)) . -3516) (undo-tree-id16415 . -1) (#("b" 0 1 (fontified t)) . -3517) (undo-tree-id16416 . -1) (#("l" 0 1 (fontified t)) . -3518) (undo-tree-id16417 . -1) (#("e" 0 1 (fontified t)) . -3519) (undo-tree-id16418 . -1) 3520) nil (25891 54240 117358 253000) 0 nil])
([nil nil ((3514 . 3521)) nil (25891 54240 117335 803000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -4587) (undo-tree-id16420 . -1) (undo-tree-id16421 . -1) (undo-tree-id16422 . -1) (undo-tree-id16423 . -1) (undo-tree-id16424 . -1) (undo-tree-id16425 . -1) (undo-tree-id16426 . -1) (undo-tree-id16427 . -1) (undo-tree-id16428 . -1) (undo-tree-id16429 . -1) (undo-tree-id16430 . -1) (undo-tree-id16431 . -1) (undo-tree-id16432 . -1) (undo-tree-id16433 . -1) (undo-tree-id16434 . -1) (undo-tree-id16435 . -1) (undo-tree-id16436 . -1) (undo-tree-id16437 . -1) (undo-tree-id16438 . -1) (undo-tree-id16439 . -1) (undo-tree-id16440 . -1) (undo-tree-id16441 . -1) (undo-tree-id16442 . -1) (undo-tree-id16443 . -1) (undo-tree-id16444 . -1) (undo-tree-id16445 . -1) (undo-tree-id16446 . -1) (undo-tree-id16447 . -1) (undo-tree-id16448 . -1) (undo-tree-id16449 . -1) (undo-tree-id16450 . -1) (undo-tree-id16451 . -1) (undo-tree-id16452 . -1) (undo-tree-id16453 . -1) (undo-tree-id16454 . -1) (undo-tree-id16455 . -1) (undo-tree-id16456 . -1) (undo-tree-id16457 . -1) (undo-tree-id16458 . -1) (undo-tree-id16459 . -1) (undo-tree-id16460 . -1) (undo-tree-id16461 . -1) (undo-tree-id16462 . -1) (undo-tree-id16463 . -1) (undo-tree-id16464 . -1) (undo-tree-id16465 . -1) (undo-tree-id16466 . -1) (undo-tree-id16467 . -1) (undo-tree-id16468 . -1) (undo-tree-id16469 . -1) (undo-tree-id16470 . -1) (undo-tree-id16471 . -1) (undo-tree-id16472 . -1) (undo-tree-id16473 . -1) (undo-tree-id16474 . -1) (undo-tree-id16475 . -1) (undo-tree-id16476 . -1) (undo-tree-id16477 . -1) (undo-tree-id16478 . -1) (undo-tree-id16479 . -1) (undo-tree-id16480 . -1) (undo-tree-id16481 . -1) (undo-tree-id16482 . -1) (undo-tree-id16483 . -1) (undo-tree-id16484 . -1) (undo-tree-id16485 . -1) (undo-tree-id16486 . -1) (undo-tree-id16487 . -1) (undo-tree-id16488 . -1) (undo-tree-id16489 . -1) (undo-tree-id16490 . -1) (undo-tree-id16491 . -1) (undo-tree-id16492 . -1) (undo-tree-id16493 . -1) (undo-tree-id16494 . -1) (undo-tree-id16495 . -1) (undo-tree-id16496 . -1) (undo-tree-id16497 . -1) (undo-tree-id16498 . -1) (undo-tree-id16499 . -1) (undo-tree-id16500 . -1) (undo-tree-id16501 . -1) (undo-tree-id16502 . -1) (undo-tree-id16503 . -1) (undo-tree-id16504 . -1) (undo-tree-id16505 . -1) (undo-tree-id16506 . -1) (undo-tree-id16507 . -1) (undo-tree-id16508 . -1) (undo-tree-id16509 . -1) (undo-tree-id16510 . -1) (undo-tree-id16511 . -1) (undo-tree-id16512 . -1) (undo-tree-id16513 . -1) (undo-tree-id16514 . -1) (undo-tree-id16515 . -1) (undo-tree-id16516 . -1) (undo-tree-id16517 . -1) (undo-tree-id16518 . -1) (undo-tree-id16519 . -1) (undo-tree-id16520 . -1) (undo-tree-id16521 . -1) (undo-tree-id16522 . -1) (undo-tree-id16523 . -1) (undo-tree-id16524 . -1) (undo-tree-id16525 . -1) (undo-tree-id16526 . -1) (undo-tree-id16527 . -1) (undo-tree-id16528 . -1) (undo-tree-id16529 . -1) (undo-tree-id16530 . -1) (undo-tree-id16531 . -1) (undo-tree-id16532 . -1) (undo-tree-id16533 . -1) (undo-tree-id16534 . -1) (undo-tree-id16535 . -1) (undo-tree-id16536 . -1) (undo-tree-id16537 . -1) (undo-tree-id16538 . -1) (undo-tree-id16539 . -1) (undo-tree-id16540 . -1) (undo-tree-id16541 . -1) (undo-tree-id16542 . -1) (undo-tree-id16543 . -1) (undo-tree-id16544 . -1) (#(" " 0 1 (fontified t)) . -4588) (undo-tree-id16545 . -1) (undo-tree-id16546 . -1) (undo-tree-id16547 . -1) (undo-tree-id16548 . -1) (undo-tree-id16549 . -1) (undo-tree-id16550 . -1) (undo-tree-id16551 . -1) (undo-tree-id16552 . -1) (undo-tree-id16553 . -1) (undo-tree-id16554 . -1) (undo-tree-id16555 . -1) (undo-tree-id16556 . -1) (undo-tree-id16557 . -1) (undo-tree-id16558 . -1) (undo-tree-id16559 . -1) (undo-tree-id16560 . -1) (undo-tree-id16561 . -1) (undo-tree-id16562 . -1) (undo-tree-id16563 . -1) (undo-tree-id16564 . -1) (undo-tree-id16565 . -1) (undo-tree-id16566 . -1) (undo-tree-id16567 . -1) (undo-tree-id16568 . -1) (undo-tree-id16569 . -1) (undo-tree-id16570 . -1) (undo-tree-id16571 . -1) (undo-tree-id16572 . -1) (undo-tree-id16573 . -1) (undo-tree-id16574 . -1) (undo-tree-id16575 . -1) (undo-tree-id16576 . -1) (undo-tree-id16577 . -1) (undo-tree-id16578 . -1) (undo-tree-id16579 . -1) (undo-tree-id16580 . -1) (undo-tree-id16581 . -1) (undo-tree-id16582 . -1) (undo-tree-id16583 . -1) (undo-tree-id16584 . -1) (undo-tree-id16585 . -1) (undo-tree-id16586 . -1) (undo-tree-id16587 . -1) (undo-tree-id16588 . -1) (undo-tree-id16589 . -1) (undo-tree-id16590 . -1) (undo-tree-id16591 . -1) (undo-tree-id16592 . -1) (undo-tree-id16593 . -1) (undo-tree-id16594 . -1) (undo-tree-id16595 . -1) (undo-tree-id16596 . -1) (undo-tree-id16597 . -1) (undo-tree-id16598 . -1) (undo-tree-id16599 . -1) (undo-tree-id16600 . -1) (undo-tree-id16601 . -1) (undo-tree-id16602 . -1) (undo-tree-id16603 . -1) (undo-tree-id16604 . -1) (undo-tree-id16605 . -1) (undo-tree-id16606 . -1) (undo-tree-id16607 . -1) (undo-tree-id16608 . -1) (undo-tree-id16609 . -1) (undo-tree-id16610 . -1) (undo-tree-id16611 . -1) (undo-tree-id16612 . -1) (undo-tree-id16613 . -1) (undo-tree-id16614 . -1) (undo-tree-id16615 . -1) (undo-tree-id16616 . -1) (undo-tree-id16617 . -1) (undo-tree-id16618 . -1) (undo-tree-id16619 . -1) (undo-tree-id16620 . -1) (undo-tree-id16621 . -1) (undo-tree-id16622 . -1) (undo-tree-id16623 . -1) (undo-tree-id16624 . -1) (undo-tree-id16625 . -1) (undo-tree-id16626 . -1) (undo-tree-id16627 . -1) (undo-tree-id16628 . -1) (undo-tree-id16629 . -1) (undo-tree-id16630 . -1) (undo-tree-id16631 . -1) (undo-tree-id16632 . -1) (undo-tree-id16633 . -1) (undo-tree-id16634 . -1) (undo-tree-id16635 . -1) (undo-tree-id16636 . -1) (undo-tree-id16637 . -1) (undo-tree-id16638 . -1) (undo-tree-id16639 . -1) (undo-tree-id16640 . -1) (undo-tree-id16641 . -1) (undo-tree-id16642 . -1) (undo-tree-id16643 . -1) (undo-tree-id16644 . -1) (undo-tree-id16645 . -1) (#("N" 0 1 (fontified t)) . -4589) (undo-tree-id16646 . -1) (undo-tree-id16647 . -1) (undo-tree-id16648 . -1) (undo-tree-id16649 . -1) (undo-tree-id16650 . -1) (undo-tree-id16651 . -1) (undo-tree-id16652 . -1) (undo-tree-id16653 . -1) (undo-tree-id16654 . -1) (undo-tree-id16655 . -1) (undo-tree-id16656 . -1) (undo-tree-id16657 . -1) (undo-tree-id16658 . -1) (undo-tree-id16659 . -1) (undo-tree-id16660 . -1) (undo-tree-id16661 . -1) (undo-tree-id16662 . -1) (undo-tree-id16663 . -1) (undo-tree-id16664 . -1) (undo-tree-id16665 . -1) (undo-tree-id16666 . -1) (undo-tree-id16667 . -1) (undo-tree-id16668 . -1) (undo-tree-id16669 . -1) (undo-tree-id16670 . -1) (undo-tree-id16671 . -1) (undo-tree-id16672 . -1) (undo-tree-id16673 . -1) (undo-tree-id16674 . -1) (undo-tree-id16675 . -1) (undo-tree-id16676 . -1) (undo-tree-id16677 . -1) (undo-tree-id16678 . -1) (undo-tree-id16679 . -1) (undo-tree-id16680 . -1) (undo-tree-id16681 . -1) (undo-tree-id16682 . -1) (undo-tree-id16683 . -1) (undo-tree-id16684 . -1) (undo-tree-id16685 . -1) (undo-tree-id16686 . -1) (undo-tree-id16687 . -1) (undo-tree-id16688 . -1) (undo-tree-id16689 . -1) (undo-tree-id16690 . -1) (undo-tree-id16691 . -1) (undo-tree-id16692 . -1) (undo-tree-id16693 . -1) (undo-tree-id16694 . -1) (undo-tree-id16695 . -1) (undo-tree-id16696 . -1) (undo-tree-id16697 . -1) (undo-tree-id16698 . -1) (undo-tree-id16699 . -1) (undo-tree-id16700 . -1) (undo-tree-id16701 . -1) (undo-tree-id16702 . -1) (undo-tree-id16703 . -1) (undo-tree-id16704 . -1) (undo-tree-id16705 . -1) (undo-tree-id16706 . -1) (undo-tree-id16707 . -1) (undo-tree-id16708 . -1) (undo-tree-id16709 . -1) (undo-tree-id16710 . -1) (undo-tree-id16711 . -1) (undo-tree-id16712 . -1) (undo-tree-id16713 . -1) (undo-tree-id16714 . -1) (undo-tree-id16715 . -1) (undo-tree-id16716 . -1) (undo-tree-id16717 . -1) (undo-tree-id16718 . -1) (undo-tree-id16719 . -1) (undo-tree-id16720 . -1) (undo-tree-id16721 . -1) (undo-tree-id16722 . -1) (undo-tree-id16723 . -1) (undo-tree-id16724 . -1) (undo-tree-id16725 . -1) (undo-tree-id16726 . -1) (undo-tree-id16727 . -1) (undo-tree-id16728 . -1) (undo-tree-id16729 . -1) (#("b" 0 1 (fontified t)) . -4590) (undo-tree-id16730 . -1) (undo-tree-id16731 . -1) (undo-tree-id16732 . -1) (undo-tree-id16733 . -1) (undo-tree-id16734 . -1) (undo-tree-id16735 . -1) (undo-tree-id16736 . -1) (undo-tree-id16737 . -1) (undo-tree-id16738 . -1) (undo-tree-id16739 . -1) (undo-tree-id16740 . -1) (undo-tree-id16741 . -1) (undo-tree-id16742 . -1) (undo-tree-id16743 . -1) (undo-tree-id16744 . -1) (undo-tree-id16745 . -1) (undo-tree-id16746 . -1) (undo-tree-id16747 . -1) (undo-tree-id16748 . -1) (undo-tree-id16749 . -1) (undo-tree-id16750 . -1) (undo-tree-id16751 . -1) (undo-tree-id16752 . -1) (undo-tree-id16753 . -1) (undo-tree-id16754 . -1) (undo-tree-id16755 . -1) (undo-tree-id16756 . -1) (undo-tree-id16757 . -1) (undo-tree-id16758 . -1) (undo-tree-id16759 . -1) (undo-tree-id16760 . -1) (undo-tree-id16761 . -1) (undo-tree-id16762 . -1) (undo-tree-id16763 . -1) (undo-tree-id16764 . -1) (undo-tree-id16765 . -1) (undo-tree-id16766 . -1) (undo-tree-id16767 . -1) (undo-tree-id16768 . -1) 4591 (t 25891 54240 162052 151000)) nil (25891 54463 63598 980000) 0 nil])
([nil nil ((4587 . 4588) (t 25891 54463 97678 616000)) nil (25891 54511 236315 499000) 0 nil])
([nil nil ((#("§" 0 1 (fontified t)) . -4587) (undo-tree-id16852 . -1) (undo-tree-id16853 . -1) (undo-tree-id16854 . -1) (undo-tree-id16855 . -1) (undo-tree-id16856 . -1) (undo-tree-id16857 . -1) (undo-tree-id16858 . -1) (undo-tree-id16859 . -1) (undo-tree-id16860 . -1) (undo-tree-id16861 . -1) (undo-tree-id16862 . -1) (undo-tree-id16863 . -1) (undo-tree-id16864 . -1) (undo-tree-id16865 . -1) (undo-tree-id16866 . -1) (undo-tree-id16867 . -1) (undo-tree-id16868 . -1) (undo-tree-id16869 . -1) (undo-tree-id16870 . -1) 4588) nil (25891 54511 236314 150000) 0 nil])
([nil nil ((4587 . 4591)) nil (25891 54511 236216 160000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t)) . -4589) (undo-tree-id16769 . -1) (undo-tree-id16770 . -1) (undo-tree-id16771 . -1) (undo-tree-id16772 . -1) (undo-tree-id16773 . -1) (undo-tree-id16774 . -1) (undo-tree-id16775 . -1) (undo-tree-id16776 . -1) (undo-tree-id16777 . -1) (undo-tree-id16778 . -1) (undo-tree-id16779 . -1) (undo-tree-id16780 . -1) (undo-tree-id16781 . -1) (undo-tree-id16782 . -1) (undo-tree-id16783 . -1) (undo-tree-id16784 . -1) (undo-tree-id16785 . -1) (undo-tree-id16786 . -1) (undo-tree-id16787 . -1) (undo-tree-id16788 . -1) (undo-tree-id16789 . -1) (undo-tree-id16790 . -1) (undo-tree-id16791 . -1) (undo-tree-id16792 . -1) (undo-tree-id16793 . -1) (undo-tree-id16794 . -1) (undo-tree-id16795 . -1) (undo-tree-id16796 . -1) (undo-tree-id16797 . -1) (undo-tree-id16798 . -1) (undo-tree-id16799 . -1) (undo-tree-id16800 . -1) (undo-tree-id16801 . -1) (undo-tree-id16802 . -1) (undo-tree-id16803 . -1) (undo-tree-id16804 . -1) (undo-tree-id16805 . -1) (undo-tree-id16806 . -1) (undo-tree-id16807 . -1) (undo-tree-id16808 . -1) (undo-tree-id16809 . -1) (undo-tree-id16810 . -1) (undo-tree-id16811 . -1) (undo-tree-id16812 . -1) (undo-tree-id16813 . -1) (undo-tree-id16814 . -1) (undo-tree-id16815 . -1) (undo-tree-id16816 . -1) (undo-tree-id16817 . -1) (undo-tree-id16818 . -1) (undo-tree-id16819 . -1) (undo-tree-id16820 . -1) (undo-tree-id16821 . -1) (undo-tree-id16822 . -1) (undo-tree-id16823 . -1) (undo-tree-id16824 . -1) (undo-tree-id16825 . -1) (#("b" 0 1 (fontified t)) . -4590) (undo-tree-id16826 . -1) (undo-tree-id16827 . -1) (undo-tree-id16828 . -1) (undo-tree-id16829 . -1) (undo-tree-id16830 . -1) (undo-tree-id16831 . -1) (undo-tree-id16832 . -1) (undo-tree-id16833 . -1) (undo-tree-id16834 . -1) (undo-tree-id16835 . -1) (undo-tree-id16836 . -1) (undo-tree-id16837 . -1) (undo-tree-id16838 . -1) (undo-tree-id16839 . -1) (undo-tree-id16840 . -1) (undo-tree-id16841 . -1) (undo-tree-id16842 . -1) (undo-tree-id16843 . -1) (undo-tree-id16844 . -1) (undo-tree-id16845 . -1) (undo-tree-id16846 . -1) (undo-tree-id16847 . -1) (undo-tree-id16848 . -1) (undo-tree-id16849 . -1) (undo-tree-id16850 . -1) (undo-tree-id16851 . -1) 4591) nil (25891 54511 236213 231000) 0 nil])
([nil nil ((4589 . 4591)) nil (25891 54511 236141 849000) 0 nil])
([nil nil ((#("*" 0 1 (face font-lock-operator-face fontified t)) . 170) (#(" " 0 1 (fontified nil)) . 170) (#("0" 0 1 (fontified t)) . 170) (#("." 0 1 (fontified t)) . 170) (t 25891 54511 274534 205000)) nil (25891 54538 991476 598000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -168) (undo-tree-id16871 . -1) (undo-tree-id16872 . -1) (undo-tree-id16873 . -1) (undo-tree-id16874 . -1) (undo-tree-id16875 . -1) (undo-tree-id16876 . -1) (undo-tree-id16877 . -1) (undo-tree-id16878 . -1) (undo-tree-id16879 . -1) (undo-tree-id16880 . -1) (undo-tree-id16881 . -1) (undo-tree-id16882 . -1) (undo-tree-id16883 . -1) (undo-tree-id16884 . -1) (undo-tree-id16885 . -1) (undo-tree-id16886 . -1) (undo-tree-id16887 . -1) (undo-tree-id16888 . -1) (undo-tree-id16889 . -1) (undo-tree-id16890 . -1) (undo-tree-id16891 . -1) (undo-tree-id16892 . -1) (undo-tree-id16893 . -1) (undo-tree-id16894 . -1) (undo-tree-id16895 . -1) (undo-tree-id16896 . -1) (undo-tree-id16897 . -1) (undo-tree-id16898 . -1) (undo-tree-id16899 . -1) (undo-tree-id16900 . -1) (undo-tree-id16901 . -1) (undo-tree-id16902 . -1) (undo-tree-id16903 . -1) (undo-tree-id16904 . -1) (undo-tree-id16905 . -1) (undo-tree-id16906 . -1) (undo-tree-id16907 . -1) (undo-tree-id16908 . -1) (undo-tree-id16909 . -1) (undo-tree-id16910 . -1) (undo-tree-id16911 . -1) (undo-tree-id16912 . -1) (undo-tree-id16913 . -1) (undo-tree-id16914 . -1) (undo-tree-id16915 . -1) (undo-tree-id16916 . -1) (undo-tree-id16917 . -1) (undo-tree-id16918 . -1) (undo-tree-id16919 . -1) (undo-tree-id16920 . -1) (undo-tree-id16921 . -1) (undo-tree-id16922 . -1) (undo-tree-id16923 . -1) (undo-tree-id16924 . -1) (undo-tree-id16925 . -1) (undo-tree-id16926 . -1) (undo-tree-id16927 . -1) (undo-tree-id16928 . -1) (undo-tree-id16929 . -1) (undo-tree-id16930 . -1) (undo-tree-id16931 . -1) (undo-tree-id16932 . -1) (undo-tree-id16933 . -1) (undo-tree-id16934 . -1) (undo-tree-id16935 . -1) (undo-tree-id16936 . -1) (undo-tree-id16937 . -1) (undo-tree-id16938 . -1) (undo-tree-id16939 . -1) (undo-tree-id16940 . -1) (undo-tree-id16941 . -1) (undo-tree-id16942 . -1) (undo-tree-id16943 . -1) (undo-tree-id16944 . -1) (undo-tree-id16945 . -1) (undo-tree-id16946 . -1) (undo-tree-id16947 . -1) (undo-tree-id16948 . -1) (undo-tree-id16949 . -1) (undo-tree-id16950 . -1) (undo-tree-id16951 . -1) (undo-tree-id16952 . -1) (undo-tree-id16953 . -1) (undo-tree-id16954 . -1) (undo-tree-id16955 . -1) (undo-tree-id16956 . -1) (undo-tree-id16957 . -1) (undo-tree-id16958 . -1) (undo-tree-id16959 . -1) (undo-tree-id16960 . -1) (undo-tree-id16961 . -1) (undo-tree-id16962 . -1) (undo-tree-id16963 . -1) (undo-tree-id16964 . -1) (undo-tree-id16965 . -1) (undo-tree-id16966 . -1) (undo-tree-id16967 . -1) (undo-tree-id16968 . -1) (undo-tree-id16969 . -1) (undo-tree-id16970 . -1) (undo-tree-id16971 . -1) (undo-tree-id16972 . -1) (undo-tree-id16973 . -1) (undo-tree-id16974 . -1) (undo-tree-id16975 . -1) (undo-tree-id16976 . -1) (undo-tree-id16977 . -1) (undo-tree-id16978 . -1) (undo-tree-id16979 . -1) (undo-tree-id16980 . -1) (undo-tree-id16981 . -1) (undo-tree-id16982 . -1) (undo-tree-id16983 . -1) (undo-tree-id16984 . -1) (undo-tree-id16985 . -1) (undo-tree-id16986 . -1) (undo-tree-id16987 . -1) (undo-tree-id16988 . -1) (undo-tree-id16989 . -1) (undo-tree-id16990 . -1) (#("5" 0 1 (fontified t)) . -169) (undo-tree-id16991 . -1) (undo-tree-id16992 . -1) (undo-tree-id16993 . -1) (undo-tree-id16994 . -1) (undo-tree-id16995 . -1) (undo-tree-id16996 . -1) (undo-tree-id16997 . -1) (undo-tree-id16998 . -1) (undo-tree-id16999 . -1) (undo-tree-id17000 . -1) (undo-tree-id17001 . -1) (undo-tree-id17002 . -1) (undo-tree-id17003 . -1) (undo-tree-id17004 . -1) (undo-tree-id17005 . -1) (undo-tree-id17006 . -1) (undo-tree-id17007 . -1) (undo-tree-id17008 . -1) (undo-tree-id17009 . -1) (undo-tree-id17010 . -1) (undo-tree-id17011 . -1) (undo-tree-id17012 . -1) (undo-tree-id17013 . -1) (undo-tree-id17014 . -1) (undo-tree-id17015 . -1) (undo-tree-id17016 . -1) (undo-tree-id17017 . -1) (undo-tree-id17018 . -1) (undo-tree-id17019 . -1) (undo-tree-id17020 . -1) (undo-tree-id17021 . -1) (undo-tree-id17022 . -1) (undo-tree-id17023 . -1) (undo-tree-id17024 . -1) (undo-tree-id17025 . -1) (undo-tree-id17026 . -1) (undo-tree-id17027 . -1) (undo-tree-id17028 . -1) (undo-tree-id17029 . -1) (undo-tree-id17030 . -1) (undo-tree-id17031 . -1) (undo-tree-id17032 . -1) (undo-tree-id17033 . -1) (undo-tree-id17034 . -1) (undo-tree-id17035 . -1) (undo-tree-id17036 . -1) (undo-tree-id17037 . -1) (undo-tree-id17038 . -1) (undo-tree-id17039 . -1) (undo-tree-id17040 . -1) (undo-tree-id17041 . -1) (undo-tree-id17042 . -1) (undo-tree-id17043 . -1) (undo-tree-id17044 . -1) (undo-tree-id17045 . -1) (undo-tree-id17046 . -1) (undo-tree-id17047 . -1) (undo-tree-id17048 . -1) (undo-tree-id17049 . -1) (undo-tree-id17050 . -1) (undo-tree-id17051 . -1) (undo-tree-id17052 . -1) (undo-tree-id17053 . -1) (undo-tree-id17054 . -1) (undo-tree-id17055 . -1) (undo-tree-id17056 . -1) (undo-tree-id17057 . -1) (undo-tree-id17058 . -1) (undo-tree-id17059 . -1) (undo-tree-id17060 . -1) (undo-tree-id17061 . -1) (undo-tree-id17062 . -1) (undo-tree-id17063 . -1) (undo-tree-id17064 . -1) (undo-tree-id17065 . -1) (undo-tree-id17066 . -1) (undo-tree-id17067 . -1) (undo-tree-id17068 . -1) (undo-tree-id17069 . -1) (undo-tree-id17070 . -1) (undo-tree-id17071 . -1) (undo-tree-id17072 . -1) (undo-tree-id17073 . -1) (undo-tree-id17074 . -1) (undo-tree-id17075 . -1) (undo-tree-id17076 . -1) (undo-tree-id17077 . -1) (undo-tree-id17078 . -1) (undo-tree-id17079 . -1) (undo-tree-id17080 . -1) (undo-tree-id17081 . -1) (undo-tree-id17082 . -1) (undo-tree-id17083 . -1) (undo-tree-id17084 . -1) (undo-tree-id17085 . -1) (undo-tree-id17086 . -1) 170) nil (25891 54538 991467 959000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 168)) nil (25891 54538 991166 243000) 0 nil])
([nil nil ((nil fontified nil 1699 . 1700) (nil fontified nil 1698 . 1699) (nil fontified nil 1689 . 1698) (nil fontified nil 1688 . 1689) (nil fontified nil 1687 . 1688) (nil fontified nil 1686 . 1687) (nil fontified nil 1676 . 1686) (nil fontified nil 1675 . 1676) (nil fontified nil 1674 . 1675) (nil fontified nil 1673 . 1674) (nil fontified nil 1672 . 1673) (nil fontified nil 1671 . 1672) (nil fontified nil 1670 . 1671) (nil fontified nil 1663 . 1670) (nil fontified nil 1659 . 1663) (nil fontified nil 1658 . 1659) (nil fontified nil 1657 . 1658) (nil fontified nil 1656 . 1657) (nil fontified nil 1651 . 1656) (nil fontified nil 1650 . 1651) (nil fontified nil 1649 . 1650) (nil fontified nil 1648 . 1649) (nil fontified nil 1643 . 1648) (nil fontified nil 1635 . 1643) (1635 . 1700) (t 25891 54539 39036 765000)) nil (25891 54610 437229 443000) 0 nil])
([nil nil ((apply -2 1570 1702 undo--wrap-and-run-primitive-undo 1570 1702 ((1578 . 1580) 1635))) nil (25891 54610 437226 841000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -1678) (undo-tree-id17092 . -1) (#("c" 0 1 (fontified t)) . -1679) (undo-tree-id17093 . -1) (#("t" 0 1 (fontified t)) . -1680) (undo-tree-id17094 . -1) (#("i" 0 1 (fontified t)) . -1681) (undo-tree-id17095 . -1) (#("v" 0 1 (fontified t)) . -1682) (undo-tree-id17096 . -1) (#("a" 0 1 (fontified t)) . -1683) (undo-tree-id17097 . -1) (#("t" 0 1 (fontified t)) . -1684) (undo-tree-id17098 . -1) (#("i" 0 1 (fontified t)) . -1685) (undo-tree-id17099 . -1) (#("o" 0 1 (fontified t)) . -1686) (undo-tree-id17100 . -1) (#("n" 0 1 (fontified t)) . -1687) (undo-tree-id17101 . -1) 1688) nil (25891 54610 437223 930000) 0 nil])
([nil nil ((1678 . 1683)) nil (25891 54610 437215 111000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . -1682) (undo-tree-id17091 . -1) 1683) nil (25891 54610 437214 158000) 0 nil])
([nil nil ((1682 . 1684)) nil (25891 54610 437212 696000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -1683) (undo-tree-id17090 . -1) 1684) nil (25891 54610 437211 787000) 0 nil])
([nil nil ((1683 . 1685)) nil (25891 54610 437210 41000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t)) . -1684) (undo-tree-id17089 . -1) 1685) nil (25891 54610 437209 194000) 0 nil])
([nil nil ((1684 . 1686)) nil (25891 54610 437207 167000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t)) . -1684) (undo-tree-id17087 . -1) (#("I" 0 1 (fontified t)) . -1685) (undo-tree-id17088 . -1) 1686) nil (25891 54610 437205 319000) 0 nil])
([nil nil ((1684 . 1685)) nil (25891 54610 437190 781000) 0 nil])
([nil nil ((apply -6 1527 1714 undo--wrap-and-run-primitive-undo 1527 1714 ((1649 . 1651) (1580 . 1582) (1535 . 1537) 1699))) nil (25891 54659 315873 175000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1460) (undo-tree-id17112 . -1) (undo-tree-id17113 . -1) (undo-tree-id17114 . -1) (undo-tree-id17115 . -1) (undo-tree-id17116 . -1) (undo-tree-id17117 . -1) (undo-tree-id17118 . -1) (undo-tree-id17119 . -1) 1461) nil (25891 54659 315872 318000) 0 nil])
([nil nil ((apply -2 1469 1528 undo--wrap-and-run-primitive-undo 1469 1528 ((1477 . 1479) 1517))) nil (25891 54659 315866 11000) 0 nil])
([nil nil ((apply 12 1715 2309 undo--wrap-and-run-primitive-undo 1715 2309 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2109) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1968) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1928) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1807) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1763) (#("# " 0 1 (face font-lock-comment-delimiter-face fontified t) 1 2 (face font-lock-comment-delimiter-face fontified t)) . -1723) 2321))) nil (25891 54659 315865 457000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t)) . -2240) (undo-tree-id17102 . -1) (#("c" 0 1 (fontified t)) . -2241) (undo-tree-id17103 . -1) (#("t" 0 1 (fontified t)) . -2242) (undo-tree-id17104 . -1) (#("i" 0 1 (fontified t)) . -2243) (undo-tree-id17105 . -1) (#("v" 0 1 (fontified t)) . -2244) (undo-tree-id17106 . -1) (#("a" 0 1 (fontified t)) . -2245) (undo-tree-id17107 . -1) (#("t" 0 1 (fontified t)) . -2246) (undo-tree-id17108 . -1) (#("i" 0 1 (fontified t)) . -2247) (undo-tree-id17109 . -1) (#("o" 0 1 (fontified t)) . -2248) (undo-tree-id17110 . -1) (#("n" 0 1 (fontified t)) . -2249) (undo-tree-id17111 . -1) 2250) nil (25891 54659 315862 337000) 0 nil])
([nil nil ((2240 . 2244)) nil (25891 54659 315840 596000) 0 nil])
([nil nil ((apply 18 554 1064 undo--wrap-and-run-primitive-undo 554 1064 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1004) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -964) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -902) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -837) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -752) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -708) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -668) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -593) (#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -562) 1082))) nil (25891 54670 302714 452000) 0 nil])
([nil nil ((apply -6 1073 1270 undo--wrap-and-run-primitive-undo 1073 1270 ((1221 . 1223) (1165 . 1167) (1081 . 1083) 1255))) nil (25891 54670 302710 53000) 0 nil])
([nil nil ((827 . 836) (t 25891 54670 337495 697000)) nil (25891 54683 89567 150000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -835) (undo-tree-id17123 . -1) 836) nil (25891 54683 89565 994000) 0 nil])
([nil nil ((835 . 841)) nil (25891 54683 89564 16000) 0 nil])
([nil nil ((#("<" 0 1 (face font-lock-operator-face fontified t)) . -839) (undo-tree-id17121 . -1) (#(";" 0 1 (fontified t)) . -840) (undo-tree-id17122 . -1) 841) nil (25891 54683 89562 522000) 0 nil])
([nil nil ((839 . 840)) nil (25891 54683 89558 411000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-operator-face fontified t)) . -839) (undo-tree-id17120 . -1) 840) nil (25891 54683 89556 541000) 0 nil])
([nil nil ((839 . 845)) nil (25891 54683 89538 457000) 0 nil])
([nil nil ((3779 . 3787) (t 25891 54683 141741 990000)) nil (25891 54869 867371 110000) 0 nil])
([nil nil ((3787 . 3800)) nil (25891 54869 867370 516000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3799) (undo-tree-id17126 . -1) (undo-tree-id17127 . -1) (undo-tree-id17128 . -1) (undo-tree-id17129 . -1) (undo-tree-id17130 . -1) (undo-tree-id17131 . -1) (undo-tree-id17132 . -1) (undo-tree-id17133 . -1) (undo-tree-id17134 . -1) (undo-tree-id17135 . -1) 3800) nil (25891 54869 867369 536000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified nil)) . 3801) (3800 . 3801) (3799 . 3801) (#("[" 0 1 (fontified nil)) . -3799) (undo-tree-id17124 . -1) (undo-tree-id17125 . -1) (3799 . 3800)) nil (25891 54869 867359 773000) 0 nil])
([nil nil ((3800 . 3805)) nil (25891 54869 867351 794000) 0 nil])
([nil nil ((3806 . 3815)) nil (25891 54869 867347 328000) 0 nil])
([nil nil ((apply -2 554 653 undo--wrap-and-run-primitive-undo 554 653 ((562 . 564) 585))) nil (25891 54882 534808 714000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . -1468) (undo-tree-id17138 . -1) (#(" " 0 1 (fontified nil)) . -1469) (undo-tree-id17139 . -1) (#(" " 0 1 (fontified nil)) . -1470) (undo-tree-id17140 . -1) (#(" " 0 1 (fontified nil)) . -1471) (undo-tree-id17141 . -1) (#(" " 0 1 (fontified nil)) . -1472) (undo-tree-id17142 . -1) (#(" " 0 1 (fontified nil)) . -1473) (undo-tree-id17143 . -1) (#(" " 0 1 (fontified t)) . -1474) (undo-tree-id17144 . -1) (#(" " 0 1 (fontified t)) . -1475) (undo-tree-id17145 . -1) 1476 (t 25891 54882 569697 490000)) nil (25891 54974 940611 698000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1866 . 1867) (nil fontified nil 1866 . 1867) (nil fontified nil 1864 . 1866) (nil fontified nil 1863 . 1864) (nil fontified nil 1857 . 1863) (nil fontified nil 1856 . 1857) (nil fontified nil 1849 . 1856) (nil fontified nil 1845 . 1849) (nil fontified nil 1844 . 1845) (nil fontified nil 1842 . 1844) (nil fontified nil 1841 . 1842) (nil fontified nil 1836 . 1841) (nil fontified nil 1835 . 1836) (nil fontified nil 1829 . 1835) (nil fontified nil 1828 . 1829) (nil fontified nil 1824 . 1828) (1824 . 1867)) nil (25891 54974 940602 666000) 0 nil])
([nil nil ((1867 . 1868)) nil (25891 54974 940599 113000) 0 nil])
([nil nil ((1824 . 1826) (#("[" 0 1 (fontified nil)) . -1824) (undo-tree-id17136 . -1) (undo-tree-id17137 . -1) (1824 . 1825)) nil (25891 54974 940596 309000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1825)) nil (25891 54974 940575 837000) 0 nil])
([nil nil ((2285 . 2288) (t 25891 54974 983593 35000)) nil (25891 54990 656813 574000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t)) . -2287) (undo-tree-id17165 . -1) (undo-tree-id17166 . -1) (undo-tree-id17167 . -1) (undo-tree-id17168 . -1) (undo-tree-id17169 . -1) (undo-tree-id17170 . -1) (undo-tree-id17171 . -1) (undo-tree-id17172 . -1) (undo-tree-id17173 . -1) (undo-tree-id17174 . -1) (undo-tree-id17175 . -1) (undo-tree-id17176 . -1) 2288 (t 25891 54990 695918 524000)) nil (25891 54992 398382 575000) 0 nil])
([nil nil ((2287 . 2288)) nil (25891 54992 398373 315000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -2287) (undo-tree-id17146 . -1) (undo-tree-id17147 . -1) (undo-tree-id17148 . -1) (undo-tree-id17149 . -1) (undo-tree-id17150 . -1) (undo-tree-id17151 . -1) (undo-tree-id17152 . -1) (undo-tree-id17153 . -1) (undo-tree-id17154 . -1) (undo-tree-id17155 . -1) (undo-tree-id17156 . -1) (undo-tree-id17157 . -1) (undo-tree-id17158 . -1) (undo-tree-id17159 . -1) (undo-tree-id17160 . -1) (undo-tree-id17161 . -1) (undo-tree-id17162 . -1) (undo-tree-id17163 . -1) (undo-tree-id17164 . -1) 2288) nil (25891 54992 398371 572000) 0 nil])
([nil current ((2287 . 2288)) nil (25891 54992 398345 142000) 0 nil])
nil

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  import subprocess

  def gpu_memory_usage_percentage():
      total_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.total", "--format=csv,nounits,noheader"])
      used_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.used", "--format=csv,nounits,noheader"])
      
      total_mem_list = map(float, total_mem_str.decode('utf-8').strip().split('\n'))
      used_mem_list = map(float, used_mem_str.decode('utf-8').strip().split('\n'))

      mem_percentage_list = [(used_mem / total_mem) * 100.0 for total_mem, used_mem in zip(total_mem_list, used_mem_list)]

      return np.array(mem_percentage_list)

  memory_percentages = gpu_memory_usage_percentage()

  # The memory usage for each GPU is indexed from 0
  for index, percentage in enumerate(memory_percentages):
      print(f'GPU {index} Memory Usage: {percentage:.2f}%')

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mFileNotFoundError[0m                         Traceback (most recent call last)
  Cell [0;32mIn[7], line 14[0m
  [1;32m     10[0m     mem_percentage_list [38;5;241m=[39m [(used_mem [38;5;241m/[39m total_mem) [38;5;241m*[39m [38;5;241m100.0[39m [38;5;28;01mfor[39;00m total_mem, used_mem [38;5;129;01min[39;00m [38;5;28mzip[39m(total_mem_list, used_mem_list)]
  [1;32m     12[0m     [38;5;28;01mreturn[39;00m np[38;5;241m.[39marray(mem_percentage_list)
  [0;32m---> 14[0m memory_percentages [38;5;241m=[39m [43mgpu_memory_usage_percentage[49m[43m([49m[43m)[49m
  [1;32m     16[0m [38;5;66;03m# The memory usage for each GPU is indexed from 0[39;00m
  [1;32m     17[0m [38;5;28;01mfor[39;00m index, percentage [38;5;129;01min[39;00m [38;5;28menumerate[39m(memory_percentages):

  Cell [0;32mIn[7], line 4[0m, in [0;36mgpu_memory_usage_percentage[0;34m()[0m
  [1;32m      3[0m [38;5;28;01mdef[39;00m [38;5;21mgpu_memory_usage_percentage[39m():
  [0;32m----> 4[0m     total_mem_str [38;5;241m=[39m [43msubprocess[49m[38;5;241;43m.[39;49m[43mcheck_output[49m[43m([49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mnvidia-smi[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43m--query-gpu=memory.total[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43m--format=csv,nounits,noheader[39;49m[38;5;124;43m"[39;49m[43m][49m[43m)[49m
  [1;32m      5[0m     used_mem_str [38;5;241m=[39m subprocess[38;5;241m.[39mcheck_output([[38;5;124m"[39m[38;5;124mnvidia-smi[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m--query-gpu=memory.used[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m--format=csv,nounits,noheader[39m[38;5;124m"[39m])
  [1;32m      7[0m     total_mem_list [38;5;241m=[39m [38;5;28mmap[39m([38;5;28mfloat[39m, total_mem_str[38;5;241m.[39mdecode([38;5;124m'[39m[38;5;124mutf-8[39m[38;5;124m'[39m)[38;5;241m.[39mstrip()[38;5;241m.[39msplit([38;5;124m'[39m[38;5;130;01m\n[39;00m[38;5;124m'[39m))

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:421[0m, in [0;36mcheck_output[0;34m(timeout, *popenargs, **kwargs)[0m
  [1;32m    418[0m         empty [38;5;241m=[39m [38;5;124mb[39m[38;5;124m'[39m[38;5;124m'[39m
  [1;32m    419[0m     kwargs[[38;5;124m'[39m[38;5;124minput[39m[38;5;124m'[39m] [38;5;241m=[39m empty
  [0;32m--> 421[0m [38;5;28;01mreturn[39;00m [43mrun[49m[43m([49m[38;5;241;43m*[39;49m[43mpopenargs[49m[43m,[49m[43m [49m[43mstdout[49m[38;5;241;43m=[39;49m[43mPIPE[49m[43m,[49m[43m [49m[43mtimeout[49m[38;5;241;43m=[39;49m[43mtimeout[49m[43m,[49m[43m [49m[43mcheck[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
  [1;32m    422[0m [43m           [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m[38;5;241m.[39mstdout

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:503[0m, in [0;36mrun[0;34m(input, capture_output, timeout, check, *popenargs, **kwargs)[0m
  [1;32m    500[0m     kwargs[[38;5;124m'[39m[38;5;124mstdout[39m[38;5;124m'[39m] [38;5;241m=[39m PIPE
  [1;32m    501[0m     kwargs[[38;5;124m'[39m[38;5;124mstderr[39m[38;5;124m'[39m] [38;5;241m=[39m PIPE
  [0;32m--> 503[0m [38;5;28;01mwith[39;00m [43mPopen[49m[43m([49m[38;5;241;43m*[39;49m[43mpopenargs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m [38;5;28;01mas[39;00m process:
  [1;32m    504[0m     [38;5;28;01mtry[39;00m:
  [1;32m    505[0m         stdout, stderr [38;5;241m=[39m process[38;5;241m.[39mcommunicate([38;5;28minput[39m, timeout[38;5;241m=[39mtimeout)

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:971[0m, in [0;36mPopen.__init__[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask, pipesize)[0m
  [1;32m    967[0m         [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mtext_mode:
  [1;32m    968[0m             [38;5;28mself[39m[38;5;241m.[39mstderr [38;5;241m=[39m io[38;5;241m.[39mTextIOWrapper([38;5;28mself[39m[38;5;241m.[39mstderr,
  [1;32m    969[0m                     encoding[38;5;241m=[39mencoding, errors[38;5;241m=[39merrors)
  [0;32m--> 971[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_execute_child[49m[43m([49m[43margs[49m[43m,[49m[43m [49m[43mexecutable[49m[43m,[49m[43m [49m[43mpreexec_fn[49m[43m,[49m[43m [49m[43mclose_fds[49m[43m,[49m
  [1;32m    972[0m [43m                        [49m[43mpass_fds[49m[43m,[49m[43m [49m[43mcwd[49m[43m,[49m[43m [49m[43menv[49m[43m,[49m
  [1;32m    973[0m [43m                        [49m[43mstartupinfo[49m[43m,[49m[43m [49m[43mcreationflags[49m[43m,[49m[43m [49m[43mshell[49m[43m,[49m
  [1;32m    974[0m [43m                        [49m[43mp2cread[49m[43m,[49m[43m [49m[43mp2cwrite[49m[43m,[49m
  [1;32m    975[0m [43m                        [49m[43mc2pread[49m[43m,[49m[43m [49m[43mc2pwrite[49m[43m,[49m
  [1;32m    976[0m [43m                        [49m[43merrread[49m[43m,[49m[43m [49m[43merrwrite[49m[43m,[49m
  [1;32m    977[0m [43m                        [49m[43mrestore_signals[49m[43m,[49m
  [1;32m    978[0m [43m                        [49m[43mgid[49m[43m,[49m[43m [49m[43mgids[49m[43m,[49m[43m [49m[43muid[49m[43m,[49m[43m [49m[43mumask[49m[43m,[49m
  [1;32m    979[0m [43m                        [49m[43mstart_new_session[49m[43m)[49m
  [1;32m    980[0m [38;5;28;01mexcept[39;00m:
  [1;32m    981[0m     [38;5;66;03m# Cleanup if the child failed starting.[39;00m
  [1;32m    982[0m     [38;5;28;01mfor[39;00m f [38;5;129;01min[39;00m [38;5;28mfilter[39m([38;5;28;01mNone[39;00m, ([38;5;28mself[39m[38;5;241m.[39mstdin, [38;5;28mself[39m[38;5;241m.[39mstdout, [38;5;28mself[39m[38;5;241m.[39mstderr)):

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:1863[0m, in [0;36mPopen._execute_child[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, gid, gids, uid, umask, start_new_session)[0m
  [1;32m   1861[0m     [38;5;28;01mif[39;00m errno_num [38;5;241m!=[39m [38;5;241m0[39m:
  [1;32m   1862[0m         err_msg [38;5;241m=[39m os[38;5;241m.[39mstrerror(errno_num)
  [0;32m-> 1863[0m     [38;5;28;01mraise[39;00m child_exception_type(errno_num, err_msg, err_filename)
  [1;32m   1864[0m [38;5;28;01mraise[39;00m child_exception_type(err_msg)

  [0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'nvidia-smi'
#+end_example
:END:

#+begin_src ipython
  from time import sleep

  def check_gpu(device):
      memory_percentages = gpu_memory_usage_percentage()
      if device == 'cuda:0':
          if memory_percentages[0] > 75:
              while memory_percentages[1] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:1'
      else:
          if memory_percentages[1] > 75:
              while memory_percentages[0] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:0'
                  
      return device
#+end_src

#+RESULTS:

#+begin_src ipython
  device = check_gpu('cuda:0')
  print(device)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mFileNotFoundError[0m                         Traceback (most recent call last)
  Cell [0;32mIn[9], line 1[0m
  [0;32m----> 1[0m device [38;5;241m=[39m [43mcheck_gpu[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mcuda:0[39;49m[38;5;124;43m'[39;49m[43m)[49m
  [1;32m      2[0m [38;5;28mprint[39m(device)

  Cell [0;32mIn[8], line 4[0m, in [0;36mcheck_gpu[0;34m(device)[0m
  [1;32m      3[0m [38;5;28;01mdef[39;00m [38;5;21mcheck_gpu[39m(device):
  [0;32m----> 4[0m     memory_percentages [38;5;241m=[39m [43mgpu_memory_usage_percentage[49m[43m([49m[43m)[49m
  [1;32m      5[0m     [38;5;28;01mif[39;00m device [38;5;241m==[39m [38;5;124m'[39m[38;5;124mcuda:0[39m[38;5;124m'[39m:
  [1;32m      6[0m         [38;5;28;01mif[39;00m memory_percentages[[38;5;241m0[39m] [38;5;241m>[39m [38;5;241m75[39m:

  Cell [0;32mIn[7], line 4[0m, in [0;36mgpu_memory_usage_percentage[0;34m()[0m
  [1;32m      3[0m [38;5;28;01mdef[39;00m [38;5;21mgpu_memory_usage_percentage[39m():
  [0;32m----> 4[0m     total_mem_str [38;5;241m=[39m [43msubprocess[49m[38;5;241;43m.[39;49m[43mcheck_output[49m[43m([49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mnvidia-smi[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43m--query-gpu=memory.total[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43m--format=csv,nounits,noheader[39;49m[38;5;124;43m"[39;49m[43m][49m[43m)[49m
  [1;32m      5[0m     used_mem_str [38;5;241m=[39m subprocess[38;5;241m.[39mcheck_output([[38;5;124m"[39m[38;5;124mnvidia-smi[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m--query-gpu=memory.used[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124m--format=csv,nounits,noheader[39m[38;5;124m"[39m])
  [1;32m      7[0m     total_mem_list [38;5;241m=[39m [38;5;28mmap[39m([38;5;28mfloat[39m, total_mem_str[38;5;241m.[39mdecode([38;5;124m'[39m[38;5;124mutf-8[39m[38;5;124m'[39m)[38;5;241m.[39mstrip()[38;5;241m.[39msplit([38;5;124m'[39m[38;5;130;01m\n[39;00m[38;5;124m'[39m))

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:421[0m, in [0;36mcheck_output[0;34m(timeout, *popenargs, **kwargs)[0m
  [1;32m    418[0m         empty [38;5;241m=[39m [38;5;124mb[39m[38;5;124m'[39m[38;5;124m'[39m
  [1;32m    419[0m     kwargs[[38;5;124m'[39m[38;5;124minput[39m[38;5;124m'[39m] [38;5;241m=[39m empty
  [0;32m--> 421[0m [38;5;28;01mreturn[39;00m [43mrun[49m[43m([49m[38;5;241;43m*[39;49m[43mpopenargs[49m[43m,[49m[43m [49m[43mstdout[49m[38;5;241;43m=[39;49m[43mPIPE[49m[43m,[49m[43m [49m[43mtimeout[49m[38;5;241;43m=[39;49m[43mtimeout[49m[43m,[49m[43m [49m[43mcheck[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m
  [1;32m    422[0m [43m           [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m[38;5;241m.[39mstdout

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:503[0m, in [0;36mrun[0;34m(input, capture_output, timeout, check, *popenargs, **kwargs)[0m
  [1;32m    500[0m     kwargs[[38;5;124m'[39m[38;5;124mstdout[39m[38;5;124m'[39m] [38;5;241m=[39m PIPE
  [1;32m    501[0m     kwargs[[38;5;124m'[39m[38;5;124mstderr[39m[38;5;124m'[39m] [38;5;241m=[39m PIPE
  [0;32m--> 503[0m [38;5;28;01mwith[39;00m [43mPopen[49m[43m([49m[38;5;241;43m*[39;49m[43mpopenargs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m [38;5;28;01mas[39;00m process:
  [1;32m    504[0m     [38;5;28;01mtry[39;00m:
  [1;32m    505[0m         stdout, stderr [38;5;241m=[39m process[38;5;241m.[39mcommunicate([38;5;28minput[39m, timeout[38;5;241m=[39mtimeout)

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:971[0m, in [0;36mPopen.__init__[0;34m(self, args, bufsize, executable, stdin, stdout, stderr, preexec_fn, close_fds, shell, cwd, env, universal_newlines, startupinfo, creationflags, restore_signals, start_new_session, pass_fds, user, group, extra_groups, encoding, errors, text, umask, pipesize)[0m
  [1;32m    967[0m         [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mtext_mode:
  [1;32m    968[0m             [38;5;28mself[39m[38;5;241m.[39mstderr [38;5;241m=[39m io[38;5;241m.[39mTextIOWrapper([38;5;28mself[39m[38;5;241m.[39mstderr,
  [1;32m    969[0m                     encoding[38;5;241m=[39mencoding, errors[38;5;241m=[39merrors)
  [0;32m--> 971[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_execute_child[49m[43m([49m[43margs[49m[43m,[49m[43m [49m[43mexecutable[49m[43m,[49m[43m [49m[43mpreexec_fn[49m[43m,[49m[43m [49m[43mclose_fds[49m[43m,[49m
  [1;32m    972[0m [43m                        [49m[43mpass_fds[49m[43m,[49m[43m [49m[43mcwd[49m[43m,[49m[43m [49m[43menv[49m[43m,[49m
  [1;32m    973[0m [43m                        [49m[43mstartupinfo[49m[43m,[49m[43m [49m[43mcreationflags[49m[43m,[49m[43m [49m[43mshell[49m[43m,[49m
  [1;32m    974[0m [43m                        [49m[43mp2cread[49m[43m,[49m[43m [49m[43mp2cwrite[49m[43m,[49m
  [1;32m    975[0m [43m                        [49m[43mc2pread[49m[43m,[49m[43m [49m[43mc2pwrite[49m[43m,[49m
  [1;32m    976[0m [43m                        [49m[43merrread[49m[43m,[49m[43m [49m[43merrwrite[49m[43m,[49m
  [1;32m    977[0m [43m                        [49m[43mrestore_signals[49m[43m,[49m
  [1;32m    978[0m [43m                        [49m[43mgid[49m[43m,[49m[43m [49m[43mgids[49m[43m,[49m[43m [49m[43muid[49m[43m,[49m[43m [49m[43mumask[49m[43m,[49m
  [1;32m    979[0m [43m                        [49m[43mstart_new_session[49m[43m)[49m
  [1;32m    980[0m [38;5;28;01mexcept[39;00m:
  [1;32m    981[0m     [38;5;66;03m# Cleanup if the child failed starting.[39;00m
  [1;32m    982[0m     [38;5;28;01mfor[39;00m f [38;5;129;01min[39;00m [38;5;28mfilter[39m([38;5;28;01mNone[39;00m, ([38;5;28mself[39m[38;5;241m.[39mstdin, [38;5;28mself[39m[38;5;241m.[39mstdout, [38;5;28mself[39m[38;5;241m.[39mstderr)):

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/subprocess.py:1863[0m, in [0;36mPopen._execute_child[0;34m(self, args, executable, preexec_fn, close_fds, pass_fds, cwd, env, startupinfo, creationflags, shell, p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite, restore_signals, gid, gids, uid, umask, start_new_session)[0m
  [1;32m   1861[0m     [38;5;28;01mif[39;00m errno_num [38;5;241m!=[39m [38;5;241m0[39m:
  [1;32m   1862[0m         err_msg [38;5;241m=[39m os[38;5;241m.[39mstrerror(errno_num)
  [0;32m-> 1863[0m     [38;5;28;01mraise[39;00m child_exception_type(errno_num, err_msg, err_filename)
  [1;32m   1864[0m [38;5;28;01mraise[39;00m child_exception_type(err_msg)

  [0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'nvidia-smi'
#+end_example
:END:

#+begin_src ipython
  # import multiprocessing
  # if multiprocessing.get_start_method(allow_none=True) != 'spawn':
  #   multiprocessing.set_start_method('spawn', force=True)
  # from multiprocessing import Process

  def run_ini_phi(conf, name, ini_list, phi_list):
      LOAD_MAT = 0
      SAVE_MAT = 1

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')

              model = Network('%s.yml' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, LOAD_MAT=LOAD_MAT, SAVE_MAT=SAVE_MAT, PHI0=phi)
              
              model.run()
              # process = Process(target=model.run)
              # process.start()
              # process.join()
              # device = check_gpu(device)

              LOAD_MAT = 1
              SAVE_MAT = 0
#+end_src

#+RESULTS:


* RNN with torch

** Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:

** Single Trial
*** Model
#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_EI.yml', 'bump', REPO_ROOT, VERBOSE=1, DEVICE='cpu', PHI0=180)
#+end_src

#+RESULTS:
#+begin_example
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Na tensor([16000,  4000], dtype=torch.int32) Ka tensor([400., 100.], dtype=torch.float64) csumNa tensor([    0, 16000, 20000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=20000, out_features=20000, bias=True)
  ksi torch.Size([2, 16000])
  ksi . ksi1 tensor([[9.8886e-01, 4.5820e-04],
          [4.5820e-04, 9.8921e-01]], dtype=torch.float64)
  Pij torch.Size([16000, 16000])
  Sparse random connectivity 
  with weak low rank structure, KAPPA 4.50
  torch.Size([16000, 16000])
  Sparse random connectivity 
  torch.Size([4000, 16000])
  Sparse random connectivity 
  torch.Size([16000, 4000])
  Sparse random connectivity 
  torch.Size([4000, 4000])
#+end_example
*** Simulation
#+begin_src ipython
  rates = model.run()
#+end_src

#+RESULTS:
#+begin_example
  times (s) 0.25 rates (Hz) [0.0, 1.88]
  times (s) 0.5 rates (Hz) [0.0, 1.88]
  times (s) 0.75 rates (Hz) [0.0, 1.88]
  STIM ON
  times (s) 1.0 rates (Hz) [0.96, 1.88]
  times (s) 1.25 rates (Hz) [56.97, 113.5]
  times (s) 1.5 rates (Hz) [58.37, 116.53]
  times (s) 1.75 rates (Hz) [58.45, 116.63]
  STIM OFF
  times (s) 2.0 rates (Hz) [58.11, 116.71]
  times (s) 2.25 rates (Hz) [8.13, 18.26]
  times (s) 2.5 rates (Hz) [4.98, 11.55]
  times (s) 2.75 rates (Hz) [4.66, 10.91]
  times (s) 3.0 rates (Hz) [4.52, 10.65]
  times (s) 3.25 rates (Hz) [4.5, 10.6]
  times (s) 3.5 rates (Hz) [4.53, 10.66]
  times (s) 3.75 rates (Hz) [4.55, 10.7]
  times (s) 4.0 rates (Hz) [4.57, 10.73]
  times (s) 4.25 rates (Hz) [4.6, 10.79]
  times (s) 4.5 rates (Hz) [4.64, 10.88]
  times (s) 4.75 rates (Hz) [4.68, 10.96]
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 90.38873914722353s
#+end_example
*** Analysis

#+begin_src ipython
  plt.imshow(rates.T, aspect='auto', cmap='jet', vmin=0, vmax=10, origin='lower')  
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f305fb469a272618dfda5a3d604709bf9095c11d.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates[:, :16000], axis=-1)  
#+end_src

#+RESULTS:

#+begin_src ipython
plt.plot(phi * 180 / np.pi)
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/154cffdc715593ed02893c7ef13855644db446fc.png]]

#+begin_src ipython
  plt.hist(rates[1], bins=20)
  plt.hist(rates[3], bins=20)
  plt.hist(rates[4], bins=50)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e8ea2835e97eda278a8be03d54a49be7ce174beb.png]]


#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      if GM:          
          b = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)
      else:
          u=a
          v=b

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def normalize(v):
      return v / np.linalg.norm(v)

  def project(x, u):
      return x * u
  # return np.dot(x, u) * u

  def sort_by_angle(x, u, v):
      u_hat = normalize(u)
      v_hat = normalize(v)

      x_proj_u = project(x, u_hat)
      x_proj_v = project(x, v_hat)
      # x_proj = x_proj_u + x_proj_v
      theta = np.arctan2(x_proj_v, x_proj_u) + np.pi

      # cos_theta = np.dot(x_proj, u_hat) / np.linalg.norm(x_proj) * u_hat
      # sin_theta = np.dot(x_proj, v_hat) / np.linalg.norm(x_proj) * v_hat
      # theta = np.arctan2(sin_theta, cos_theta)

      # Pair up each element of x with the corresponding angle
      # x_angle_pairs = list(zip(x, theta))

      # Sort based on the angle
      # x_angle_pairs.sort(key=lambda pair: pair[1])

      # Extract the sorted elements
      # sorted_x = [pair[0] for pair in x_angle_pairs]

      return theta
#+end_src

#+RESULTS:


#+begin_src ipython
  ksi = model.ksi.cpu().detach().numpy()
  idx = np.arange(0, len(ksi[0]))
  # theta = sort_by_angle(idx, ksi[1], ksi[0])
  # print(theta.shape)
  theta = get_theta(ksi[1], ksi[0], GM=0, IF_NORM=0)
  # theta = np.arctan2(ksi[1], ksi[0])
  index_order = theta.argsort()
  # print(index_order)
  rates_ordered = rates[:, index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.imshow(rates_ordered.T, aspect='auto', cmap='jet', vmin=0, vmax=20)
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Time (au)')
  plt.yticks(np.linspace(0, 16000, 5), np.linspace(-180, 180, 5).astype(int))
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7cbdb90ac07e8b4409ae4f0de3a9fe4f1b01b7c3.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.plot(phi * 180 / np.pi)
  plt.yticks(np.linspace(-180, 180, 5).astype(int))
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/84707d73350a2a8b06e6f89295be324a17ef018f.png]]

*** Connectivity
#+begin_src ipython
  print(model.Wab)
#+end_src

#+RESULTS:
: Linear(in_features=20000, out_features=20000, bias=True)

#+begin_src ipython
  Cij = model.Wab.weight.data.cpu().detach().numpy()
  plot_con(Cij[:16000, :16000])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4a497d868dba2cc068225137969f333bcbe893fa.png]]

#+begin_src ipython
  
#+end_src

#+RESULTS:

** Multiple Trials
*** Parameters
#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  ini_list = np.arange(0, 20)
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [0]
#+end_src

#+RESULTS:

*** Simulation
#+begin_src ipython
  name = 'lowR_ortho'
  run_ini_phi('config_EI', name, ini_list, phi_list)
#+end_src

#+RESULTS:
#+begin_example
  ##########################################
  trial 0 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_0_phi_0.npy
  Elapsed (with compilation) = 19.554916421882808s
  ##########################################
  trial 1 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_1_phi_0.npy
  Elapsed (with compilation) = 19.33161362214014s
  ##########################################
  trial 2 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_2_phi_0.npy
  Elapsed (with compilation) = 19.331288628745824s
  ##########################################
  trial 3 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_3_phi_0.npy
  Elapsed (with compilation) = 19.331920369993895s
  ##########################################
  trial 4 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_4_phi_0.npy
  Elapsed (with compilation) = 19.32075172290206s
  ##########################################
  trial 5 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_5_phi_0.npy
  Elapsed (with compilation) = 19.314856789074838s
  ##########################################
  trial 6 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_6_phi_0.npy
  Elapsed (with compilation) = 19.30576076777652s
  ##########################################
  trial 7 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_7_phi_0.npy
  Elapsed (with compilation) = 19.289179610088468s
  ##########################################
  trial 8 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_8_phi_0.npy
  Elapsed (with compilation) = 19.287535114213824s
  ##########################################
  trial 9 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_9_phi_0.npy
  Elapsed (with compilation) = 19.315332156140357s
  ##########################################
  trial 10 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_10_phi_0.npy
  Elapsed (with compilation) = 19.290314499288797s
  ##########################################
  trial 11 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_11_phi_0.npy
  Elapsed (with compilation) = 19.29187808278948s
  ##########################################
  trial 12 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_12_phi_0.npy
  Elapsed (with compilation) = 19.276108092162758s
  ##########################################
  trial 13 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_13_phi_0.npy
  Elapsed (with compilation) = 19.29118576971814s
  ##########################################
  trial 14 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_14_phi_0.npy
  Elapsed (with compilation) = 19.27143691619858s
  ##########################################
  trial 15 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_15_phi_0.npy
  Elapsed (with compilation) = 19.31479110941291s
  ##########################################
  trial 16 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_16_phi_0.npy
  Elapsed (with compilation) = 19.291186106856912s
  ##########################################
  trial 17 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_17_phi_0.npy
  Elapsed (with compilation) = 19.297878061886877s
  ##########################################
  trial 18 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_18_phi_0.npy
  Elapsed (with compilation) = 19.308698538225144s
  ##########################################
  trial 19 phi 0
  ##########################################
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Linear(in_features=20000, out_features=20000, bias=True)
  result (19, 20000)
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/lowR_ortho_ini_19_phi_0.npy
  Elapsed (with compilation) = 19.305965260136873s
#+end_example

*** Load data

#+begin_src ipython
  df = load_data_ini_phi(name, ini_list, phi_list)
  print(df.head())
#+end_src

#+RESULTS:
: (20, 1, 19, 20000)
:    trial  phi  neuron  time     rates
: 0      0    0       0     0  0.000128
: 1      0    0       1     0  0.000101
: 2      0    0       2     0  0.000074
: 3      0    0       3     0  0.000091
: 4      0    0       4     0  0.000112

#+begin_src ipython
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
:      trial  phi        m0        m1     phase
: 360      0    0  5.870297  2.464359  0.637472
: 361      1    0  6.323816  2.441068  0.629299
: 362      2    0  6.005316  2.301633  0.615203
: 363      3    0  6.466118  2.353156  0.654197
: 364      4    0  5.854158  2.435225  0.572983

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(df_code, x='time', y=df_code['phase']*180/np.pi-90, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (°)')
  
  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, kde=False, bins='auto', stat='density', color='b', ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (°)')

  # sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins=10, stat='density', color='b')
  # print(end_point.head())
  theta = [np.cos(end_point['phase']-np.pi/2), np.sin(end_point['phase']-np.pi/2)]
  ax[2].plot(theta[0], theta[1], 'o')
  ax[2].set_xlim([-1.5, 1.5])
  ax[2].set_ylim([-1.5, 1.5])

  ax[2].set_xlabel('$ \\xi_S$')
  ax[2].set_ylabel('$ \\xi_D$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/292714bdd18d8a4b91d61f8c19ad8d17140046e6.png]]

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
 
  print(end_point.head())
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mNameError[0m                                 Traceback (most recent call last)
  Cell [0;32mIn[17], line 2[0m
  [1;32m      1[0m end_point[[38;5;124m'[39m[38;5;124maccuracy[39m[38;5;124m'[39m] [38;5;241m=[39m (end_point[38;5;241m.[39mphase [38;5;241m-[39m end_point[[38;5;124m'[39m[38;5;124mphi[39m[38;5;124m'[39m] [38;5;241m*[39m np[38;5;241m.[39mpi [38;5;241m/[39m [38;5;241m180[39m) [38;5;241m%[39m ([38;5;241m2[39m [38;5;241m*[39m np[38;5;241m.[39mpi)
  [0;32m----> 2[0m end_point[[38;5;124m'[39m[38;5;124mprecision[39m[38;5;124m'[39m] [38;5;241m=[39m [43mend_point[49m[38;5;241;43m.[39;49m[43mgroupby[49m[43m([49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mphi[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43mgroup_keys[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mphase[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m[43mget_precision[49m[43m)[49m
  [1;32m      4[0m [38;5;28mprint[39m(end_point[38;5;241m.[39mhead())

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/groupby/generic.py:228[0m, in [0;36mSeriesGroupBy.apply[0;34m(self, func, *args, **kwargs)[0m
  [1;32m    222[0m [38;5;129m@Appender[39m(
  [1;32m    223[0m     _apply_docs[[38;5;124m"[39m[38;5;124mtemplate[39m[38;5;124m"[39m][38;5;241m.[39mformat(
  [1;32m    224[0m         [38;5;28minput[39m[38;5;241m=[39m[38;5;124m"[39m[38;5;124mseries[39m[38;5;124m"[39m, examples[38;5;241m=[39m_apply_docs[[38;5;124m"[39m[38;5;124mseries_examples[39m[38;5;124m"[39m]
  [1;32m    225[0m     )
  [1;32m    226[0m )
  [1;32m    227[0m [38;5;28;01mdef[39;00m [38;5;21mapply[39m([38;5;28mself[39m, func, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs) [38;5;241m-[39m[38;5;241m>[39m Series:
  [0;32m--> 228[0m     [38;5;28;01mreturn[39;00m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m[43mfunc[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/groupby/groupby.py:1766[0m, in [0;36mGroupBy.apply[0;34m(self, func, *args, **kwargs)[0m
  [1;32m   1764[0m [38;5;28;01mwith[39;00m option_context([38;5;124m"[39m[38;5;124mmode.chained_assignment[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m):
  [1;32m   1765[0m     [38;5;28;01mtry[39;00m:
  [0;32m-> 1766[0m         result [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_python_apply_general[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_selected_obj[49m[43m)[49m
  [1;32m   1767[0m     [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
  [1;32m   1768[0m         [38;5;66;03m# gh-20949[39;00m
  [1;32m   1769[0m         [38;5;66;03m# try again, with .apply acting as a filtering[39;00m
  [0;32m   (...)[0m
  [1;32m   1773[0m         [38;5;66;03m# fails on *some* columns, e.g. a numeric operation[39;00m
  [1;32m   1774[0m         [38;5;66;03m# on a string grouper column[39;00m
  [1;32m   1776[0m         [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_python_apply_general(f, [38;5;28mself[39m[38;5;241m.[39m_obj_with_exclusions)

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/groupby/groupby.py:1815[0m, in [0;36mGroupBy._python_apply_general[0;34m(self, f, data, not_indexed_same, is_transform, is_agg)[0m
  [1;32m   1780[0m [38;5;129m@final[39m
  [1;32m   1781[0m [38;5;28;01mdef[39;00m [38;5;21m_python_apply_general[39m(
  [1;32m   1782[0m     [38;5;28mself[39m,
  [0;32m   (...)[0m
  [1;32m   1787[0m     is_agg: [38;5;28mbool[39m [38;5;241m=[39m [38;5;28;01mFalse[39;00m,
  [1;32m   1788[0m ) [38;5;241m-[39m[38;5;241m>[39m NDFrameT:
  [1;32m   1789[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
  [1;32m   1790[0m [38;5;124;03m    Apply function f in python space[39;00m
  [1;32m   1791[0m 
  [0;32m   (...)[0m
  [1;32m   1813[0m [38;5;124;03m        data after applying f[39;00m
  [1;32m   1814[0m [38;5;124;03m    """[39;00m
  [0;32m-> 1815[0m     values, mutated [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mgrouper[49m[38;5;241;43m.[39;49m[43mapply_groupwise[49m[43m([49m[43mf[49m[43m,[49m[43m [49m[43mdata[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43maxis[49m[43m)[49m
  [1;32m   1816[0m     [38;5;28;01mif[39;00m not_indexed_same [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
  [1;32m   1817[0m         not_indexed_same [38;5;241m=[39m mutated

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/groupby/ops.py:905[0m, in [0;36mBaseGrouper.apply_groupwise[0;34m(self, f, data, axis)[0m
  [1;32m    903[0m [38;5;66;03m# group might be modified[39;00m
  [1;32m    904[0m group_axes [38;5;241m=[39m group[38;5;241m.[39maxes
  [0;32m--> 905[0m res [38;5;241m=[39m [43mf[49m[43m([49m[43mgroup[49m[43m)[49m
  [1;32m    906[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m mutated [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m _is_indexed_like(res, group_axes, axis):
  [1;32m    907[0m     mutated [38;5;241m=[39m [38;5;28;01mTrue[39;00m

  Cell [0;32mIn[6], line 2[0m, in [0;36mget_precision[0;34m(x)[0m
  [1;32m      1[0m [38;5;28;01mdef[39;00m [38;5;21mget_precision[39m(x):
  [0;32m----> 2[0m     [38;5;28;01mreturn[39;00m x [38;5;241m-[39m [43mcircmean[49m(x)

  [0;31mNameError[0m: name 'circmean' is not defined
#+end_example
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[18], line 3[0m
: [1;32m      1[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;241m1[39m, [38;5;241m3[39m, figsize[38;5;241m=[39m[[38;5;241m2[39m[38;5;241m*[39mwidth, height])
: [0;32m----> 3[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39m[43mpoint[49m, x[38;5;241m=[39mpoint[[38;5;124m'[39m[38;5;124mphase[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mb[39m[38;5;124m'[39m)
: [1;32m      4[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mpoint_on, x[38;5;241m=[39mpoint_on[[38;5;124m'[39m[38;5;124mphase[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mr[39m[38;5;124m'[39m)
: [1;32m      5[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xlabel([38;5;124m'[39m[38;5;124m$[39m[38;5;124m\[39m[38;5;124mphi$(°)[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'point' is not defined
[[file:./.ob-jupyter/fde8e71fc7cff5d9422d637875108577c4b61b67.png]]
:END:

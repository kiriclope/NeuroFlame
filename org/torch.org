#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import torch
  import gc
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
  from src.utils import clear_cache
#+end_src

#+RESULTS:
* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/lr_utils.py
  import numpy as np
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:
          v = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/lr_utils.py
  def get_idx(model):
      ksi = model.PHI0.cpu().detach().numpy()
      print(ksi.shape)

      theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)
      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ../src/lr_utils.py
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]

#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  conf_name = "config_EI.yml"
#+end_src

#+RESULTS:

* RNN with torch
** Single Trial
*** Model

#+begin_src ipython
  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=1, DEVICE='cuda', LIVE_FF_UPDATE=1, TASK='dual_rand', seed=0)
  rates = model(RET_FF=1).cpu().numpy()
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  print('rates', rates.shape)
#+end_src

#+RESULTS:
#+begin_example
  Na tensor([2000,  500], device='cuda:0', dtype=torch.int32) Ka tensor([250., 250.], device='cuda:0') csumNa tensor([   0, 2000, 2500], device='cuda:0')
  Jab [1.0, -1.5, 1, -1]
  Ja0 [1.3, 1.0]
  Generating ff input
  times (s) 0.0 rates (Hz) [0.08, 2.03]
  times (s) 0.07 rates (Hz) [0.08, 2.57]
  times (s) 0.13 rates (Hz) [0.1, 1.95]
  times (s) 0.2 rates (Hz) [0.09, 2.54]
  times (s) 0.26 rates (Hz) [0.08, 2.59]
  times (s) 0.33 rates (Hz) [0.07, 1.82]
  times (s) 0.4 rates (Hz) [0.12, 2.76]
  times (s) 0.46 rates (Hz) [0.1, 1.95]
  times (s) 0.53 rates (Hz) [0.07, 1.82]
  times (s) 0.6 rates (Hz) [0.13, 2.78]
  times (s) 0.66 rates (Hz) [1.61, 2.38]
  times (s) 0.73 rates (Hz) [1.1, 3.23]
  times (s) 0.79 rates (Hz) [1.12, 3.44]
  times (s) 0.86 rates (Hz) [1.22, 3.73]
  times (s) 0.93 rates (Hz) [1.55, 4.38]
  times (s) 0.99 rates (Hz) [2.4, 5.58]
  times (s) 1.06 rates (Hz) [3.6, 7.3]
  times (s) 1.13 rates (Hz) [3.96, 8.34]
  times (s) 1.19 rates (Hz) [3.79, 8.61]
  times (s) 1.26 rates (Hz) [3.85, 8.99]
  times (s) 1.32 rates (Hz) [3.54, 9.29]
  times (s) 1.39 rates (Hz) [1.15, 6.04]
  times (s) 1.46 rates (Hz) [2.53, 7.0]
  times (s) 1.52 rates (Hz) [2.71, 7.42]
  times (s) 1.59 rates (Hz) [2.37, 6.98]
  times (s) 1.66 rates (Hz) [2.69, 7.31]
  times (s) 1.72 rates (Hz) [2.63, 7.28]
  times (s) 1.79 rates (Hz) [2.65, 7.32]
  times (s) 1.85 rates (Hz) [2.68, 7.37]
  times (s) 1.92 rates (Hz) [2.69, 7.4]
  times (s) 1.99 rates (Hz) [2.7, 7.43]
  times (s) 2.05 rates (Hz) [2.7, 7.45]
  times (s) 2.12 rates (Hz) [2.69, 7.45]
  times (s) 2.19 rates (Hz) [2.63, 7.41]
  times (s) 2.25 rates (Hz) [2.61, 7.38]
  times (s) 2.32 rates (Hz) [2.61, 7.39]
  times (s) 2.38 rates (Hz) [2.6, 7.38]
  times (s) 2.45 rates (Hz) [2.61, 7.38]
  times (s) 2.52 rates (Hz) [2.6, 7.37]
  times (s) 2.58 rates (Hz) [2.58, 7.35]
  times (s) 2.65 rates (Hz) [2.59, 7.35]
  times (s) 2.72 rates (Hz) [2.58, 7.34]
  times (s) 2.78 rates (Hz) [2.57, 7.33]
  times (s) 2.85 rates (Hz) [2.57, 7.33]
  times (s) 2.91 rates (Hz) [2.56, 7.32]
  times (s) 2.98 rates (Hz) [2.55, 7.31]
  times (s) 3.05 rates (Hz) [2.56, 7.32]
  times (s) 3.11 rates (Hz) [2.57, 7.34]
  times (s) 3.18 rates (Hz) [2.58, 7.35]
  times (s) 3.25 rates (Hz) [2.59, 7.37]
  times (s) 3.31 rates (Hz) [2.59, 7.37]
  times (s) 3.38 rates (Hz) [2.59, 7.37]
  times (s) 3.44 rates (Hz) [2.58, 7.37]
  times (s) 3.51 rates (Hz) [2.58, 7.36]
  times (s) 3.58 rates (Hz) [2.58, 7.36]
  times (s) 3.64 rates (Hz) [2.57, 7.35]
  times (s) 3.71 rates (Hz) [2.56, 7.34]
  times (s) 3.77 rates (Hz) [2.55, 7.33]
  times (s) 3.84 rates (Hz) [2.52, 7.3]
  times (s) 3.91 rates (Hz) [2.52, 7.29]
  times (s) 3.97 rates (Hz) [2.53, 7.3]
  times (s) 4.04 rates (Hz) [2.53, 7.3]
  times (s) 4.11 rates (Hz) [2.51, 7.28]
  times (s) 4.17 rates (Hz) [2.49, 7.25]
  times (s) 4.24 rates (Hz) [2.46, 7.21]
  times (s) 4.3 rates (Hz) [2.44, 7.18]
  times (s) 4.37 rates (Hz) [2.43, 7.15]
  times (s) 4.44 rates (Hz) [2.41, 7.13]
  times (s) 4.5 rates (Hz) [2.39, 7.09]
  times (s) 4.57 rates (Hz) [2.37, 7.06]
  times (s) 4.64 rates (Hz) [2.37, 7.04]
  times (s) 4.7 rates (Hz) [2.36, 7.03]
  times (s) 4.77 rates (Hz) [2.36, 7.02]
  times (s) 4.83 rates (Hz) [2.36, 7.01]
  times (s) 4.9 rates (Hz) [2.34, 6.99]
  times (s) 4.97 rates (Hz) [2.31, 6.95]
  times (s) 5.03 rates (Hz) [2.27, 6.89]
  times (s) 5.1 rates (Hz) [2.27, 6.86]
  times (s) 5.17 rates (Hz) [2.27, 6.84]
  times (s) 5.23 rates (Hz) [2.25, 6.81]
  times (s) 5.3 rates (Hz) [2.24, 6.79]
  times (s) 5.36 rates (Hz) [2.24, 6.78]
  times (s) 5.43 rates (Hz) [2.24, 6.77]
  times (s) 5.5 rates (Hz) [2.26, 6.79]
  times (s) 5.56 rates (Hz) [2.27, 6.8]
  times (s) 5.63 rates (Hz) [2.26, 6.8]
  times (s) 5.7 rates (Hz) [2.23, 6.77]
  times (s) 5.76 rates (Hz) [2.19, 6.73]
  times (s) 5.83 rates (Hz) [2.15, 6.67]
  times (s) 5.89 rates (Hz) [2.13, 6.63]
  times (s) 5.96 rates (Hz) [2.09, 6.57]
  times (s) 6.03 rates (Hz) [2.08, 6.54]
  times (s) 6.09 rates (Hz) [2.1, 6.53]
  times (s) 6.16 rates (Hz) [2.11, 6.54]
  times (s) 6.23 rates (Hz) [2.13, 6.55]
  times (s) 6.29 rates (Hz) [2.15, 6.57]
  times (s) 6.36 rates (Hz) [2.17, 6.59]
  times (s) 6.42 rates (Hz) [2.17, 6.6]
  times (s) 6.49 rates (Hz) [2.16, 6.59]
  times (s) 6.56 rates (Hz) [2.17, 6.59]
  times (s) 6.62 rates (Hz) [2.16, 6.59]
  Elapsed (with compilation) = 0h 0m 5s
  rates (1, 101, 2000)
#+end_example


#+begin_src ipython
  overlap = get_overlap(model, rates)
  print(overlap.shape)

  idx = get_idx(model)
  rates_ordered = rates[..., idx]

  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (1, 101, 4)
: (4, 2000)
: (1, 101)

#+begin_src ipython
  print(torch.cuda.memory_allocated()/100000)
  # del model
  clear_cache()
  print(torch.cuda.memory_allocated()/100000)
#+end_src

#+RESULTS:
: 927.28832
: 927.28832

*** Dynamics

#+begin_src ipython
  ff_input = model.ff_input.cpu().detach().numpy()
  print(ff_input.shape)

  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].plot(ff_input[0, :, -5:])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1, 101, 2000)
[[file:./.ob-jupyter/37e5f88acf53830b67f64e57c822bef1b69b5777.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  r_max = 15

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(rates_ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')
  ax[1].set_yticks(np.linspace(0, Ne, 5), np.linspace(0, 360, 5).astype(int))
  # ax[0][1].colorbar()

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e5df0dcb01cec1bb7971e1b8b8b508e5b7ea1fef.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  ax[0].plot((m1.T/m0.T))
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_1$')

  ax[1].plot((phi.T * 180 / np.pi))
  ax[1].set_yticks(np.linspace(0, 360, 5).astype(int), np.linspace(0, 360, 5).astype(int))
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Phase (°)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/9d3b66aaf2085b56dda1c5027f8f7b4dc4df8e9c.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Multiple initializations
*** Parameters

#+begin_src ipython
  seed = np.random.randint(100)
  print(seed)
#+end_src

#+RESULTS:
: 53

*** Simulation

#+begin_src ipython
  LR_COV = [[1.0, 1.0, 0.0, 0.0],
            [0.8, 1.0, 0., 0.0],
            [0.0, 0., 1.0, 0.8],
            [0.0, 0.0, 0.8, 1.0]]

  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE='cuda',
                  N_BATCH=100, SEED=seed, LR_COV=LR_COV,
                  TASK='dual_rand', LIVE_FF_UPDATE=1, DURATION=10)

  rates = model(RET_FF=1).detach().cpu().numpy()
  end = perf_counter()

  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 6s
: rates (100, 101, 2000)

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy())
  plt.show()
#+end_src

#+RESULTS:

*** Results

#+begin_src ipython
  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  ff_input = model.ff_input.cpu().detach().numpy()
  print(ff_input.shape)

  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].plot(ff_input[1, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[1].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])
  plt.show()
#+end_src

#+RESULTS:
: (100, 101, 2000)

#+begin_src ipython
  print(rates.mean(-1).shape)
  plt.plot(rates.mean(-1).T)
  plt.xlabel('Step')
  plt.ylabel('Rates (Hz)')
  plt.show()
#+end_src

#+RESULTS:
: (100, 101)

#+begin_src ipython
  idx = get_idx(model)
  rates_ordered = rates[..., idx]
  print(rates_ordered.shape)
#+end_src

#+RESULTS:
: (4, 2000)
: (100, 101, 2000)

#+begin_src ipython
  overlap = get_overlap(model, rates)
  print(overlap.T.shape)
#+end_src

#+RESULTS:
: (4, 101, 100)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(overlap.T[0])
  ax[0].set_ylabel('Overlap on $\\xi_1$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(overlap.T[1])
  ax[1].set_ylabel('Overlap on $\\xi_2$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(overlap.T[2])
  ax[2].set_ylabel('Overlap on $\\xi_3$ (Hz)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (100, 101)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2.2*width, height])

  ax[0].plot(m0.T)
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1.T)
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi.T * 180 / np.pi, alpha=.2)
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  print(rates_ordered.shape)

  plt.imshow(rates_ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=10)
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Time (au)')
  plt.yticks(np.linspace(0, rates_ordered.shape[-1], 5), np.linspace(0, 360, 5).astype(int))
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
: (100, 101, 2000)

#+begin_src ipython
  print(m0.shape)
  x = m1[:, -1]/ m0[:, -1] * np.cos(phi[:, -1])
  y = m1[:, -1] / m0[:, -1] * np.sin(phi[:, -1])

  fig, ax = plt.subplots(figsize=(height, height))
  ax.plot(x, y, 'o')
  ax.set_xlim([-2, 2])
  ax.set_ylim([-2, 2])
  plt.show()
#+end_src

#+RESULTS:
: (100, 101)

#+begin_src ipython

#+end_src

#+RESULTS:

** Behavior
*** Helpers

#+begin_src ipython
  def run_behavior(conf_name, cov_list, n_ini, seed, device='cuda', **kwargs):
      start = perf_counter()

      rates = []
      ksi = []
      with torch.no_grad():
          for cov in cov_list:

              model = Network(conf_name, REPO_ROOT, DEVICE=device,
                              LR_COV = [[1.0, 0.9, 0.0, 0.0],
                                        [0.9, 1.0, cov, 0.0],
                                        [0.0, cov, 1.0, 0.9],
                                        [0.0, 0.0, 0.9, 1.0]],
                              LIVE_FF_UPDATE=1,
                              VERBOSE=0, SEED=seed, N_BATCH=2*n_ini, **kwargs)

              rates.append(model().cpu().detach().numpy())
              ksi.append(model.PHI0.cpu().detach().numpy())

              model.cpu()
              del model

              gc.collect()
              torch.cuda.empty_cache()

      end = perf_counter()

      print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

      return np.array(rates), np.array(ksi)
#+end_src

#+RESULTS:

*** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  conf_name = "config_EI.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  cov_list = np.linspace(0.1, 0, 5)
  print(cov_list)
  n_ini = 32
  seed = np.random.randint(100)
  # 34, 53
  print(seed)
#+end_src

#+RESULTS:
: [0.1   0.075 0.05  0.025 0.   ]
: 61

#+begin_src ipython
  def ret_overlap(rates, ksi):
      rates_ord = np.zeros(rates.shape)
      overlap = []

      for i in range(len(cov_list)):
          theta = get_theta(ksi[i][0], ksi[i][2], GM=0, IF_NORM=0)

          overlap.append(rates[i] @ ksi[i].T / rates.shape[-1])

          index_order = theta.argsort()
          rates_ord[i] = rates[i][..., index_order]

      return np.array(overlap), rates_ord
  #+end_src

#+RESULTS:

*** Single run

#+begin_src ipython
  I0 = [.1, 0.0, 0.0]
  rates, ksi = run_behavior(conf_name, cov_list, n_ini, seed, device='cuda', I0=I0)
#+end_src

#+RESULTS:
#+begin_example
  Unexpected exception formatting exception. Falling back to standard exception
  Traceback (most recent call last):
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3526, in run_code
      exec(code_obj, self.user_global_ns, self.user_ns)
    File "/home/leon/tmp/ipykernel_1976997/3336055171.py", line 2, in <module>
      rates, ksi = run_behavior(conf_name, cov_list, n_ini, seed, device='cuda', I0=I0)
    File "/home/leon/tmp/ipykernel_1976997/3679561983.py", line 9, in run_behavior
      model = Network(conf_name, REPO_ROOT, DEVICE=device,
    File "/home/leon/models/NeuroTorch/org/../src/network.py", line 36, in __init__
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 39, in __call__
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 34, in forward
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 161, in init_const
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/distribution.py", line 164, in sample
      return self.rsample(sample_shape)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/multivariate_normal.py", line 242, in rsample
      return self.loc + _batch_mv(self._unbroadcasted_scale_tril, eps)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/multivariate_normal.py", line 22, in _batch_mv
      return torch.matmul(bmat, bvec.unsqueeze(-1)).squeeze(-1)
  RuntimeError: expected scalar type Float but found Double

  During handling of the above exception, another exception occurred:

  Traceback (most recent call last):
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 2120, in showtraceback
      stb = self.InteractiveTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1435, in structured_traceback
      return FormattedTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1326, in structured_traceback
      return VerboseTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1173, in structured_traceback
      formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1088, in format_exception_as_a_whole
      frames.append(self.format_record(record))
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 970, in format_record
      frame_info.lines, Colors, self.has_colors, lvals
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 792, in lines
      return self._sd.lines
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 734, in lines
      pieces = self.included_pieces
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 681, in included_pieces
      pos = scope_pieces.index(self.executing_piece)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 660, in executing_piece
      return only(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/executing/executing.py", line 190, in only
      raise NotOneValueFound('Expected one value, found 0')
  executing.executing.NotOneValueFound: Expected one value, found 0
#+end_example

#+begin_src ipython
  print(rates.shape)
  print(ksi.shape)
#+end_src

#+RESULTS:
:RESULTS:
: (100, 101, 2000)
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[41], line 2
:       1 print(rates.shape)
: ----> 2 print(ksi.shape)
:
: NameError: name 'ksi' is not defined
:END:

#+begin_src ipython
  I0 = [.1, .1, 0.0]
  ratesGo, ksiGo = run_behavior(conf_name, cov_list, n_ini, seed, device='cuda', I0=I0)
#+end_src

#+RESULTS:
#+begin_example
  Unexpected exception formatting exception. Falling back to standard exception
  Traceback (most recent call last):
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 3526, in run_code
      exec(code_obj, self.user_global_ns, self.user_ns)
    File "/home/leon/tmp/ipykernel_1976997/3361441905.py", line 2, in <module>
      ratesGo, ksiGo = run_behavior(conf_name, cov_list, n_ini, seed, device='cuda', I0=I0)
    File "/home/leon/tmp/ipykernel_1976997/3679561983.py", line 9, in run_behavior
      model = Network(conf_name, REPO_ROOT, DEVICE=device,
    File "/home/leon/models/NeuroTorch/org/../src/network.py", line 36, in __init__
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 39, in __call__
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 34, in forward
    File "/home/leon/models/NeuroTorch/org/../src/configuration.py", line 161, in init_const
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/distribution.py", line 164, in sample
      return self.rsample(sample_shape)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/multivariate_normal.py", line 242, in rsample
      return self.loc + _batch_mv(self._unbroadcasted_scale_tril, eps)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributions/multivariate_normal.py", line 22, in _batch_mv
      return torch.matmul(bmat, bvec.unsqueeze(-1)).squeeze(-1)
  RuntimeError: expected scalar type Float but found Double

  During handling of the above exception, another exception occurred:

  Traceback (most recent call last):
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/interactiveshell.py", line 2120, in showtraceback
      stb = self.InteractiveTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1435, in structured_traceback
      return FormattedTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1326, in structured_traceback
      return VerboseTB.structured_traceback(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1173, in structured_traceback
      formatted_exception = self.format_exception_as_a_whole(etype, evalue, etb, number_of_lines_of_context,
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 1088, in format_exception_as_a_whole
      frames.append(self.format_record(record))
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 970, in format_record
      frame_info.lines, Colors, self.has_colors, lvals
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/IPython/core/ultratb.py", line 792, in lines
      return self._sd.lines
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 734, in lines
      pieces = self.included_pieces
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 681, in included_pieces
      pos = scope_pieces.index(self.executing_piece)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/utils.py", line 144, in cached_property_wrapper
      value = obj.__dict__[self.func.__name__] = self.func(obj)
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/stack_data/core.py", line 660, in executing_piece
      return only(
    File "/home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/executing/executing.py", line 190, in only
      raise NotOneValueFound('Expected one value, found 0')
  executing.executing.NotOneValueFound: Expected one value, found 0
#+end_example

#+begin_src ipython
  print(ratesGo.shape)
  print(ksiGo.shape)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[43], line 1
: ----> 1 print(ratesGo.shape)
:       2 print(ksiGo.shape)
:
: NameError: name 'ratesGo' is not defined
:END:

#+begin_src ipython
  overlap1, rates1 = ret_overlap(rates, ksi)
  overlap2, rates2 = ret_overlap(ratesGo, ksiGo)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[44], line 1
: ----> 1 overlap1, rates1 = ret_overlap(rates, ksi)
:       2 overlap2, rates2 = ret_overlap(ratesGo, ksiGo)
:
: NameError: name 'ksi' is not defined
:END:

#+begin_src ipython
  print(overlap1.shape)
  print(overlap2.shape)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: NameError                                 Traceback (most recent call last)
: Cell In[45], line 1
: ----> 1 print(overlap1.shape)
:       2 print(overlap2.shape)
:
: NameError: name 'overlap1' is not defined
:END:

#+begin_src ipython
  # n_ini = 16
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  ax[0].plot(overlap1[:, :n_ini, -5:, 0].mean((1,2)), '-rs')
  ax[0].plot(overlap1[:, n_ini:, -5:, 0].mean((1,2)), '-ro')
  ax[0].set_ylabel('Sample Overlap')
  ax[0].set_xlabel('Day')
  ax[0].set_title('DPA')

  ax[1].plot(overlap2[:, :n_ini, -5:, 0].mean((1,2)), '-bs')
  ax[1].plot(overlap2[:, n_ini:, -5:, 0].mean((1,2)), '-bo')
  ax[1].set_ylabel('Sample Overlap')
  ax[1].set_xlabel('Day')
  ax[1].set_title('Dual Go')

  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  readout1A = overlap1[:, :n_ini, -5:, 0]
  readout1B = overlap1[:, n_ini:, -5:, 0]

  readout1 = np.stack((readout1A, readout1B))
  # print(readout1.shape)

  perf1 = (readout1[0]>0).mean((1, 2))
  perf1 += (readout1[1]<0).mean((1, 2))

  readout2A = overlap2[:, :n_ini, -5:, 0]
  readout2B = overlap2[:, n_ini:, -5:, 0]

  readout2 = np.stack((readout2A, readout2B))
  print((readout2[0]>0).shape)

  perf2 = (readout2[0]>0).mean((1, 2))

  perf2 += (readout2[1]<0).mean((1, 2))

  plt.plot(perf1/2, 'r')
  plt.plot(perf2/2, 'b')

  plt.ylabel('Performance')
  plt.xlabel('Day')
  plt.show()
#+end_src
#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

**** Performance from phase

#+begin_src ipython
  def get_perf(rates):
      m0, m1, phi = decode_bump(rates, axis=-1)
      x = m1[..., -1] / m0[..., -1] * np.cos(phi[..., -1])
      performance = (x[: , :n_ini] < 0).mean(1) * 100
      performance += (x[: , n_ini:] > 0).mean(1) * 100

      return performance / 2
#+end_src

#+RESULTS:

#+begin_src ipython
  perf1 = get_perf(rates1)
  print(perf1)
  perf2 = get_perf(rates2)
  print(perf2)

  plt.plot(perf1, 'r')
  plt.plot(perf2, 'b')
  plt.ylabel('Performance')
  plt.xlabel('Day')
  plt.show()
#+end_src

#+RESULTS:

**** Single

#+begin_src ipython
  ini = -1
  overlap = overlap2.copy()
  print(overlap1[ini].shape)
  m0, m1, phi = decode_bump(rates2, axis=-1)
  print(m0[ini].shape)
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(overlap[ini, ..., 0].T, alpha=.2)
  ax[0].set_ylabel('Overlap on $\\xi_1$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(overlap[ini, ..., 1].T, alpha=.2)
  ax[1].set_ylabel('Overlap on $\\xi_2$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(overlap[ini, ..., 2].T, alpha=.2)
  ax[2].set_ylabel('Overlap on $\\xi_3$ (Hz)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[ini].T)
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[ini].T)
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[ini].T * 180 / np.pi)
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  x = m1[ini, ..., -1] / m0[ini, ..., -1] * np.cos(phi[ini, ..., -1])
  y = m1[ini, ..., -1] / m0[ini, ..., -1] * np.sin(phi[ini, ..., -1])

  fig, ax = plt.subplots(figsize=(height, height))
  ax.plot(x.T, y.T, 'o')
  ax.set_xlim([-2, 2])
  ax.set_ylim([-2, 2])
  plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

** Run

#+begin_src ipython
  I0 = [.1, 0.0, 0.0]
  rates_list = []
  ksi_list = []

  for i in range(10):
      rates, ksi = run_behavior(conf_name, cov_list, n_ini, seed=i, device='cuda', I0=I0)
      rates_list.append(rates)
      ksi_list.append(ksi)

  rates_list = np.array(rates_list)
  ksi_list = np.array(ksi_list)
#+end_src

#+RESULTS:

#+begin_src ipython
  overlap_list, rate_list = [], []
  for i in range(rates_list.shape[0]):
      overlap, rates = ret_overlap(rates_list[i], ksi_list[i])
      rate_list.append(rates)
      overlap_list.append(overlap)

  rate_list = np.array(rate_list)
  overlap_list = np.array(overlap_list)
#+end_src

#+RESULTS:

#+begin_src ipython
  print(overlap_list.shape)
#+end_src

#+RESULTS:

#+begin_src ipython
  readoutA = overlap_list[..., :n_ini, -5:, 0]
  readoutB = overlap_list[..., n_ini:, -5:, 0]

  readout = np.stack((readoutA, readoutB))
  print(readout.shape)
#+end_src

#+RESULTS:

#+begin_src ipython
  perf = (readout[0]>0).mean((2, 3))
  perf += (readout[1]<0).mean((2, 3))

  print(perf.shape)

  plt.plot(perf.T/2)
  plt.show()
#+end_src

#+RESULTS:
: 815aeae4-fe7a-47b1-93c0-9a6de7310a75

#+begin_src ipython
  print(rate_list.shape)
#+end_src

#+RESULTS:
: a6346260-0d6e-4bef-bfd6-47170d3974ec

#+begin_src ipython
  m0, m1, phi = decode_bump(rate_list, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: 2d85253c-36ca-4a76-b2e5-1bf66a38af43

#+begin_src ipython
  ini = 0

  x = m1[:, ini, ..., -1] / m0[:, ini, ..., -1] * np.cos(phi[:, ini, ..., -1])
  y = m1[:, ini, ..., -1] / m0[:, ini, ..., -1] * np.sin(phi[:, ini, ..., -1])

  fig, ax = plt.subplots(figsize=(height, height))
  ax.plot(x.T, y.T, 'o')
  ax.set_xlim([-2, 2])
  ax.set_ylim([-2, 2])
  plt.show()
#+end_src

#+RESULTS:
: 6b615300-4a0b-4159-9543-c8765a6c5bf1

** Different Realizations
*** Helpers

#+begin_src ipython
  def run_X(conf_name, real_list, n_ini, device='cuda', **kwargs):
      start = perf_counter()

      rates = []
      ksi = []
      with torch.no_grad():
          for real in real_list:

              model = Network(conf_name,
                              REPO_ROOT, DEVICE=device,  VERBOSE=0, SEED=0,
                              LIVE_FF_UPDATE=1, N_BATCH=n_ini, **kwargs)

              # model.I0[0] = .1
              # sample_A = model.init_ff_input()

              # model.I0[0] = -.1
              # sample_B = model.init_ff_input()

              # ff_input = torch.cat((sample_A, sample_B))
              ff_input = None
              ksi.append(model.PHI0.cpu().detach().numpy())
              rates.append(model(ff_input, REC_LAST_ONLY=1).cpu().detach().numpy())

              del model

      end = perf_counter()

      print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

      return np.array(rates), np.array(ksi)
#+end_src

#+RESULTS:
: db345709-2df5-4cd1-8770-cce14514d3d6

*** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  conf_name = "config_EI.yml"
#+end_src

#+RESULTS:
: 02609ff6-de11-4b61-a772-949cbb513469

#+begin_src ipython
  real_list = np.arange(0, 10)
  n_ini = 32
#+end_src

#+RESULTS:
: b8e62c17-06a9-4e20-a184-c79e0209bc90

*** Run
**** Orthogonal

#+begin_src ipython
    rates, ksi = run_X(conf_name, real_list, n_ini,
                       device='cuda',
                       LR_COV=[[1.0, 0.9, 0.0, 0.0],
                               [0.9, 1.0, 0.0, 0.0],
                               [0.0, 0.0, 1.0, 0.9],
                               [0.0, 0.0, 0.9, 1.0]]
                       )
#+end_src

#+RESULTS:
: 27a45ec4-7bf0-4229-b186-74012b5a2ea9

#+begin_src ipython
  rates_ord = np.zeros(rates.shape)

  for i in real_list:
      idx = np.arange(0, len(ksi[i][0]))
      theta = get_theta(ksi[i][0], ksi[i][2], GM=0, IF_NORM=1)

      index_order = theta.argsort()
      rates_ord[i] = rates[i][ ..., index_order]
  print(rates_ord.shape)

  m0, m1, phi = decode_bump(rates_ord, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: ed8b4613-5aee-480f-b1dc-40f915f8a7ae

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*height, height])

  x = m1 / m0 * np.cos(phi)
  y = m1 / m0 * np.sin(phi)

  ax[0].hist(np.hstack(phi) * 180 / np.pi, density=True, bins='auto')
  ax[0].set_title('$h_S . \\xi_D = 0$')
  ax[0].set_xlim([0, 360])
  ax[0].set_xticks([0, 180, 360])
  ax[0].set_xlabel('Pref. Location (°)')
  ax[0].set_ylabel('Density')

  ax[1].plot(x.T, y.T, 'o')
  ax[1].set_xlim([-2, 2])
  ax[1].set_ylim([-2, 2])
  ax[1].set_title('$h_S . \\xi_D = 0$')
  ax[1].set_xlabel('Sample Axis')
  ax[1].set_ylabel('Distractor Axis')

  plt.show()
#+end_src

#+RESULTS:
: d32309dd-ef31-4809-8c7b-d56697232c3d

#+begin_src ipython

#+end_src

#+RESULTS:
: 7dc8a9ae-9d09-4cca-9fba-118ee52a657b


**** xi_S . xi_D >0

#+begin_src ipython
  rates_cov, ksi_cov = run_X(conf_name, real_list, n_ini,
                             device='cuda',
                             LR_COV=[[1.0, 0.9, 0.0, 0.0],
                                     [0.9, 1.0, 0.1, 0.0],
                                     [0.0, 0.1, 1.0, 0.9],
                                     [0.0, 0.0, 0.9, 1.0]]
                             )
#+end_src

#+RESULTS:
: 1dc79084-ff7a-48fc-8f0e-a3892b09bd69

#+begin_src ipython
  rates_ord_cov = np.zeros(rates_cov.shape)

  for i in real_list:
      idx = np.arange(0, len(ksi_cov[i][0]))
      theta = get_theta(ksi_cov[i][0], ksi_cov[i][2], GM=0, IF_NORM=1)

      index_order = theta.argsort()
      rates_ord_cov[i] = rates_cov[i][..., index_order]

  print(rates_ord_cov.shape)

  m0_cov, m1_cov, phi_cov = decode_bump(rates_ord_cov, axis=-1)
#+end_src

#+RESULTS:
: 7a602c6b-c164-4a12-bc8a-4e8e0790a9d5

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*height, height])

  x = m1_cov / m0_cov * np.cos(phi_cov)
  y = m1_cov / m0_cov * np.sin(phi_cov)

  ax[0].hist(np.hstack(phi_cov) * 180 / np.pi, density=True, bins='auto')
  ax[0].set_title('$\\xi_S . \\xi_D > 0$')
  ax[0].set_xlim([0, 360])
  ax[0].set_xticks([0, 180, 360])
  ax[0].set_xlabel('Pref. Location (°)')
  ax[0].set_ylabel('Density')

  ax[1].plot(x.T, y.T, 'o')
  ax[1].set_xlim([-2, 2])
  ax[1].set_ylim([-2, 2])
  # ax[1].set_title('$\\xi_S . \\xi_D > 0$')
  ax[1].set_xlabel('Sample Axis')
  ax[1].set_ylabel('Distractor Axis')

  plt.show()
#+end_src

#+RESULTS:
: 5dc6c7ea-d5fd-430b-9cf7-041639214f9d

#+begin_src ipython

#+end_src

#+RESULTS:
: b5adde7d-744f-43c3-a331-70e61c5154ef

**** h_S . xi_D >0

#+begin_src ipython
  rates_cov2, ksi_cov2 = run_X(conf_name, real_list, n_ini,
                               device='cuda',
                               LR_COV=[[1.0, 0.9, 0.0, 0.0],
                                       [0.9, 1.0, 0.0, 0.0],
                                       [0.0, 0.0, 0.5, 0.4],
                                       [0.0, 0.0, 0.4, 1.0]]
                               )
#+end_src

#+RESULTS:
: cb9c5699-e296-492a-8fb5-494cede95b99

#+begin_src ipython
  rates_ord_cov2 = np.zeros(rates_cov2.shape)

  for i in real_list:
      idx = np.arange(0, len(ksi_cov2[i][0]))
      theta = get_theta(ksi_cov2[i][0], ksi_cov2[i][2], GM=0, IF_NORM=0)

      index_order = theta.argsort()
      rates_ord_cov2[i] = rates_cov2[i][..., index_order]

  print(rates_ord_cov2.shape)

  m0_cov2, m1_cov2, phi_cov2 = decode_bump(rates_ord_cov2, axis=-1)
#+end_src

#+RESULTS:
: b732e0d1-27a3-40d0-bc23-643b1a34d0e3

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*height, height])

  x = m1_cov2 / m0_cov2 * np.cos(phi_cov2)
  y = m1_cov2 / m0_cov2 * np.sin(phi_cov2)

  ax[0].hist(np.hstack(phi_cov2) * 180 / np.pi, density=True, bins=20)
  ax[0].set_title('$h_S . \\xi_D > 0$')
  ax[0].set_xlim([0, 360])
  ax[0].set_xticks([0, 180, 360])
  ax[0].set_xlabel('Pref. Location (°)')
  ax[0].set_ylabel('Density')

  ax[1].plot(x.T, y.T, 'o')
  ax[1].set_xlim([-2, 2])
  ax[1].set_ylim([-2, 2])
  ax[1].set_title('$h_S . \\xi_D > 0$')
  ax[1].set_xlabel('Sample Axis')
  ax[1].set_ylabel('Distractor Axis')

  plt.show()
#+end_src

#+RESULTS:
: 4bb8fa96-d811-495e-a052-a83e28412448

#+begin_src ipython

#+end_src

#+RESULTS:
: b03f6aab-07c5-4477-9565-81e2150a6cb1

**** h_S . xi_D >0 and xi_S . xi_D>0

#+begin_src ipython
  rates_cov3, ksi_cov3 = run_X(conf_name, real_list, n_ini,
                               device='cuda',
                               LR_COV=[[1.0, 0.8, 0.2, 0.0],
                                       [0.8, 1.0, 0.2, 0.0],
                                       [0.2, 0.2, 1.0, 0.8],
                                       [0.0, 0.0, 0.8, 1.0]]
                               )
#+end_src

#+RESULTS:
: 6705e1a3-15cd-42e3-a8a3-f82853434696

#+begin_src ipython
  rates_ord_cov3 = np.zeros(rates_cov3.shape)

  for i in real_list:
      idx = np.arange(0, len(ksi_cov3[i][0]))
      theta = get_theta(ksi_cov3[i][0], ksi_cov3[i][2], GM=0, IF_NORM=0)

      index_order = theta.argsort()
      rates_ord_cov3[i] = rates_cov3[i][..., index_order]

  print(rates_ord_cov3.shape)

  m0_cov3, m1_cov3, phi_cov3 = decode_bump(rates_ord_cov3, axis=-1)
#+end_src

#+RESULTS:
: d43f555b-0a5e-4e27-8331-01d23476e2e5

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*height, height])

  x = m1_cov3 / m0_cov3 * np.cos(phi_cov3)
  y = m1_cov3 / m0_cov3 * np.sin(phi_cov3)

  # fig.suptitle('$\\xi_S . \\xi_D > 0$, $h_S . \\xi_D > 0$', fontsize=22)

  ax[0].hist(np.hstack(phi_cov3) * 180 / np.pi, density=True, bins='auto')
  ax[0].set_title('$\\xi_S . \\xi_D > 0$ and $h_S . \\xi_D > 0$')
  ax[0].set_xlim([0, 360])
  ax[0].set_xticks([0, 180, 360])
  ax[0].set_xlabel('Pref. Location (°)')
  ax[0].set_ylabel('Density')

  ax[1].plot(x, y, 'o')
  ax[1].set_xlim([-2, 2])
  ax[1].set_ylim([-2, 2])
  # ax[1].set_title('$\\xi_S . \\xi_D > 0$ \n $h_S . \\xi_D > 0$')
  ax[1].set_xlabel('Sample Axis')
  ax[1].set_ylabel('Distractor Axis')

  plt.show()
#+end_src

#+RESULTS:
: 86787637-15a8-4281-83f4-de09a15694e0

#+begin_src ipython

#+end_src

#+RESULTS:
: 38b64e8f-64bd-4150-9f2d-871bdefb7e0a

**** h_S . xi_D >0 and xi_S . xi_D>0

#+begin_src ipython
  rates_cov4, ksi_cov4 = run_X(conf_name, real_list, n_ini,
                               device='cuda',
                               LR_COV=[[1.0, 0.9, 0.0, 0.0],
                                       [0.9, 1.0, 0.0, 0.0],
                                       [0.0, 0.0, 1.0, 0.2],
                                       [0.0, 0.0, 0.2, 1.0]]
                               )
#+end_src

#+RESULTS:
: b2bc8887-f9ad-4fdd-9ded-7edba71fe2ea

#+begin_src ipython
  rates_ord_cov4 = np.zeros(rates_cov4.shape)

  for i in real_list:
      idx = np.arange(0, len(ksi_cov4[i][0]))
      theta = get_theta(ksi_cov4[i][0], ksi_cov4[i][2], GM=0, IF_NORM=0)

      index_order = theta.argsort()
      rates_ord_cov4[i] = rates_cov4[i][..., index_order]

  print(rates_ord_cov4.shape)

  m0_cov4, m1_cov4, phi_cov4 = decode_bump(rates_ord_cov4, axis=-1)
#+end_src

#+RESULTS:
: afc7ac4b-fba7-4a24-892d-ed0a3b430c79

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*height, height])

  x = m1_cov4 / m0_cov4 * np.cos(phi_cov4)
  y = m1_cov4 / m0_cov4 * np.sin(phi_cov4)

  # fig.suptitle('$\\xi_S . \\xi_D > 0$, $h_S . \\xi_D > 0$', fontsize=22)

  ax[0].hist(np.hstack(phi_cov4) * 180 / np.pi, density=True, bins='auto')
  ax[0].set_title('$\\xi_S . \\xi_D > 0$ and $h_S . \\xi_D > 0$')
  ax[0].set_xlim([0, 360])
  ax[0].set_xticks([0, 180, 360])
  ax[0].set_xlabel('Pref. Location (°)')
  ax[0].set_ylabel('Density')

  ax[1].plot(x.T, y.T, 'o')
  ax[1].set_xlim([-2, 2])
  ax[1].set_ylim([-2, 2])
  # ax[1].set_title('$\\xi_S . \\xi_D > 0$ \n $h_S . \\xi_D > 0$')
  ax[1].set_xlabel('Sample Axis')
  ax[1].set_ylabel('Distractor Axis')

  plt.show()
#+end_src

#+RESULTS:
: af6107d8-9e16-47ef-8524-b133585b99f6

#+begin_src ipython

#+end_src

#+RESULTS:
: 68b9b652-95ee-4cb7-9e36-708f22b7d3ca

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  import subprocess

  def gpu_memory_usage_percentage():
      total_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.total", "--format=csv,nounits,noheader"])
      used_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.used", "--format=csv,nounits,noheader"])
      
      total_mem_list = map(float, total_mem_str.decode('utf-8').strip().split('\n'))
      used_mem_list = map(float, used_mem_str.decode('utf-8').strip().split('\n'))

      mem_percentage_list = [(used_mem / total_mem) * 100.0 for total_mem, used_mem in zip(total_mem_list, used_mem_list)]

      return np.array(mem_percentage_list)

  memory_percentages = gpu_memory_usage_percentage()

  # The memory usage for each GPU is indexed from 0
  for index, percentage in enumerate(memory_percentages):
      print(f'GPU {index} Memory Usage: {percentage:.2f}%')

#+end_src

#+RESULTS:
: GPU 0 Memory Usage: 0.07%
: GPU 1 Memory Usage: 0.07%

#+begin_src ipython
  from time import sleep

  def check_gpu(device):
      memory_percentages = gpu_memory_usage_percentage()
      if device == 'cuda:0':
          if memory_percentages[0] > 75:
              while memory_percentages[1] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:1'
      else:
          if memory_percentages[1] > 75:
              while memory_percentages[0] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:0'
                  
      return device
#+end_src

#+RESULTS:

#+begin_src ipython
  device = check_gpu('cuda:0')
  print(device)
#+end_src

#+RESULTS:
: cuda:0

#+begin_src ipython
  # import multiprocessing
  # if multiprocessing.get_start_method(allow_none=True) != 'spawn':
  #   multiprocessing.set_start_method('spawn', force=True)
  # from multiprocessing import Process

  def run_ini_phi(conf, name, ini_list, phi_list):
      LOAD_MAT = 0
      SAVE_MAT = 1

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')

              model = Network('%s.yml' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, LOAD_MAT=LOAD_MAT, SAVE_MAT=SAVE_MAT, PHI0=phi)
              
              model.run()
              # process = Process(target=model.run)
              # process.start()
              # process.join()
              # device = check_gpu(device)

              LOAD_MAT = 1
              SAVE_MAT = 0
#+end_src

#+RESULTS:

* RNN with torch
** Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:
** Balance

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  K_list = [500, 1000, 1500, 2000, 2500]
  rates_list = []
  
  for K in K_list:
      model = Network('config_EI.yml', 'bump', REPO_ROOT, VERBOSE=0, DEVICE='cuda', K=K)
      rates = model.run()
      rates_list.append(rates[-1])

#+end_src

#+RESULTS:
#+begin_example
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributed/distributed_c10d.py:283: UserWarning: torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead
    warnings.warn(
  Elapsed (with compilation) = 41.60812636099581s
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 41.962792610996985s
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 41.16252508999605s
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 22.2915489859879s
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 22.371453304003808s
#+end_example

#+begin_src ipython
  rates = np.array(rates_list)
  rates = rates[:, :16000]
  plt.plot(np.sqrt(K_list), np.mean(rates, axis=1) * np.sqrt(K_list), '-o')
  plt.xlabel('$\sqrt{K}$')
  plt.ylabel('$\sqrt{K}$ Rates')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/239a34be835391b44f5ca4c8dd4461fde6436ef4.png]]

** Single Trial
*** Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_EI.yml', 'bump', REPO_ROOT, VERBOSE=1, DEVICE='cuda', PHI0=180)
  rates = model.run()
#+end_src

#+RESULTS:
#+begin_example
  Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml
  Na tensor([16000,  4000], device='cuda:0', dtype=torch.int32) Ka tensor([500., 500.], device='cuda:0', dtype=torch.float64) csumNa tensor([    0, 16000, 20000], device='cuda:0')
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Sparse random connectivity 
  Sparse random connectivity 
  Sparse random connectivity 
  Sparse random connectivity 
  times (s) 0.25 rates (Hz) [1.28, 2.3]
  times (s) 0.5 rates (Hz) [1.3, 2.32]
  times (s) 0.75 rates (Hz) [1.29, 2.31]
  STIM ON
  times (s) 1.0 rates (Hz) [1.55, 2.31]
  times (s) 1.25 rates (Hz) [6.96, 8.26]
  times (s) 1.5 rates (Hz) [6.91, 8.24]
  times (s) 1.75 rates (Hz) [6.93, 8.24]
  STIM OFF
  times (s) 2.0 rates (Hz) [6.81, 8.23]
  times (s) 2.25 rates (Hz) [1.31, 2.32]
  times (s) 2.5 rates (Hz) [1.31, 2.33]
  times (s) 2.75 rates (Hz) [1.28, 2.31]
  times (s) 3.0 rates (Hz) [1.3, 2.32]
  times (s) 3.25 rates (Hz) [1.3, 2.32]
  times (s) 3.5 rates (Hz) [1.28, 2.31]
  times (s) 3.75 rates (Hz) [1.3, 2.32]
  times (s) 4.0 rates (Hz) [1.3, 2.32]
  times (s) 4.25 rates (Hz) [1.29, 2.31]
  times (s) 4.5 rates (Hz) [1.3, 2.32]
  times (s) 4.75 rates (Hz) [1.3, 2.32]
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/bump.npy
  Elapsed (with compilation) = 20.909746149001876s
#+end_example

*** Analysis
#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: (4999, 20000)

#+begin_src ipython
  r_max = np.max(rates.T[:16000])
  plt.imshow(rates.T[:16000], aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')  
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/aca8420b0864a28aa5fd6e80a4c9e380050bb5e5.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates[:, :16000], axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
plt.plot(phi * 180 / np.pi)
plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0c3db5d3cf02abcf1c83f891a66439c05e2297ed.png]]

#+begin_src ipython  
  plt.hist(rates[-1][:16000], bins=50)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f30f1c9e321e4cb76803b2225466c1053c4d082a.png]]


#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      if GM:          
          b = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)
      else:
          u=a
          v=b

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def normalize(v):
      return v / np.linalg.norm(v)

  def project(x, u):
      return x * u
  # return np.dot(x, u) * u

  def sort_by_angle(x, u, v):
      u_hat = normalize(u)
      v_hat = normalize(v)

      x_proj_u = project(x, u_hat)
      x_proj_v = project(x, v_hat)
      # x_proj = x_proj_u + x_proj_v
      theta = np.arctan2(x_proj_v, x_proj_u) + np.pi

      # cos_theta = np.dot(x_proj, u_hat) / np.linalg.norm(x_proj) * u_hat
      # sin_theta = np.dot(x_proj, v_hat) / np.linalg.norm(x_proj) * v_hat
      # theta = np.arctan2(sin_theta, cos_theta)

      # Pair up each element of x with the corresponding angle
      # x_angle_pairs = list(zip(x, theta))

      # Sort based on the angle
      # x_angle_pairs.sort(key=lambda pair: pair[1])

      # Extract the sorted elements
      # sorted_x = [pair[0] for pair in x_angle_pairs]

      return theta
#+end_src

#+RESULTS:

#+begin_src ipython
  ksi = model.ksi.cpu().detach().numpy()
  idx = np.arange(0, len(ksi[0]))
  # theta = sort_by_angle(idx, ksi[1], ksi[0])
  # print(theta.shape)
  theta = get_theta(ksi[1], ksi[0], GM=0, IF_NORM=0)
  # theta = np.arctan2(ksi[1], ksi[0])
  index_order = theta.argsort()
  # print(index_order)
  rates_ordered = rates[:, index_order]
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mAttributeError[0m                            Traceback (most recent call last)
  Cell [0;32mIn[19], line 1[0m
  [0;32m----> 1[0m ksi [38;5;241m=[39m [43mmodel[49m[38;5;241;43m.[39;49m[43mksi[49m[38;5;241m.[39mcpu()[38;5;241m.[39mdetach()[38;5;241m.[39mnumpy()
  [1;32m      2[0m idx [38;5;241m=[39m np[38;5;241m.[39marange([38;5;241m0[39m, [38;5;28mlen[39m(ksi[[38;5;241m0[39m]))
  [1;32m      3[0m [38;5;66;03m# theta = sort_by_angle(idx, ksi[1], ksi[0])[39;00m
  [1;32m      4[0m [38;5;66;03m# print(theta.shape)[39;00m

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/torch/nn/modules/module.py:1614[0m, in [0;36mModule.__getattr__[0;34m(self, name)[0m
  [1;32m   1612[0m     [38;5;28;01mif[39;00m name [38;5;129;01min[39;00m modules:
  [1;32m   1613[0m         [38;5;28;01mreturn[39;00m modules[name]
  [0;32m-> 1614[0m [38;5;28;01mraise[39;00m [38;5;167;01mAttributeError[39;00m([38;5;124m"[39m[38;5;124m'[39m[38;5;132;01m{}[39;00m[38;5;124m'[39m[38;5;124m object has no attribute [39m[38;5;124m'[39m[38;5;132;01m{}[39;00m[38;5;124m'[39m[38;5;124m"[39m[38;5;241m.[39mformat(
  [1;32m   1615[0m     [38;5;28mtype[39m([38;5;28mself[39m)[38;5;241m.[39m[38;5;18m__name__[39m, name))

  [0;31mAttributeError[0m: 'Network' object has no attribute 'ksi'
#+end_example
:END:

#+begin_src ipython
  plt.imshow(rates_ordered.T, aspect='auto', cmap='jet', vmin=0, vmax=20)
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Time (au)')
  plt.yticks(np.linspace(0, 16000, 5), np.linspace(-180, 180, 5).astype(int))
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[20], line 1[0m
: [0;32m----> 1[0m plt[38;5;241m.[39mimshow([43mrates_ordered[49m[38;5;241m.[39mT, aspect[38;5;241m=[39m[38;5;124m'[39m[38;5;124mauto[39m[38;5;124m'[39m, cmap[38;5;241m=[39m[38;5;124m'[39m[38;5;124mjet[39m[38;5;124m'[39m, vmin[38;5;241m=[39m[38;5;241m0[39m, vmax[38;5;241m=[39m[38;5;241m20[39m)
: [1;32m      2[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124mPref. Location (°)[39m[38;5;124m'[39m)
: [1;32m      3[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mTime (au)[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'rates_ordered' is not defined
:END:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[21], line 1[0m
: [0;32m----> 1[0m m0, m1, phi [38;5;241m=[39m decode_bump([43mrates_ordered[49m, axis[38;5;241m=[39m[38;5;241m-[39m[38;5;241m1[39m)
: 
: [0;31mNameError[0m: name 'rates_ordered' is not defined
:END:

#+begin_src ipython
  plt.plot(phi * 180 / np.pi)
  plt.yticks(np.linspace(-180, 180, 5).astype(int))
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7d903f58a9b0661e76044edb4bd359684ab10d33.png]]

*** Connectivity
#+begin_src ipython
  print(model.Wab)
#+end_src

#+RESULTS:
: Linear(in_features=20000, out_features=20000, bias=True)

#+begin_src ipython
  Cij = model.Wab.weight.data.cpu().detach().numpy()
  plot_con(Cij.T)
#+end_src

#+begin_src ipython
  
#+end_src

#+RESULTS:

** Multiple Trials
*** Parameters
#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  ini_list = np.arange(0, 20)
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [0]
#+end_src

#+RESULTS:

*** Simulation
#+begin_src ipython
  name = 'lowR_ortho'
  run_ini_phi('config_EI', name, ini_list, phi_list)
#+end_src

#+RESULTS:
: ##########################################
: trial 0 phi 0
: ##########################################
: Loading config from /home/leon/models/NeuroTorch/conf/config_EI.yml

*** Load data

#+begin_src ipython
  df = load_data_ini_phi(name, ini_list, phi_list)
  print(df.head())
#+end_src

#+RESULTS:
: b42e3783-fb10-43dc-9143-e8f37331779f

#+begin_src ipython
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
: b4fe7edb-b1f5-46a8-9d0a-6eaf4cd7970c

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(df_code, x='time', y=df_code['phase']*180/np.pi-90, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (°)')
  
  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, kde=False, bins='auto', stat='density', color='b', ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (°)')

  # sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins=10, stat='density', color='b')
  # print(end_point.head())
  theta = [np.cos(end_point['phase']-np.pi/2), np.sin(end_point['phase']-np.pi/2)]
  ax[2].plot(theta[0], theta[1], 'o')
  ax[2].set_xlim([-1.5, 1.5])
  ax[2].set_ylim([-1.5, 1.5])

  ax[2].set_xlabel('$ \\xi_S$')
  ax[2].set_ylabel('$ \\xi_D$')

  plt.show()
#+end_src

#+RESULTS:
: cec12ac0-a33c-4ea2-8510-707cb09444c3

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
 
  print(end_point.head())
#+end_src

#+RESULTS:
: 5c10afb2-c6d0-4443-af15-27077858354f

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

#+RESULTS:
: 27f63b3f-5b19-4b0e-b7df-04ac1a83e666

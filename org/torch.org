#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python
: <Figure size 700x432.624 with 0 Axes>
:END:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import torch
  import pandas as pd
  from time import perf_counter  

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:

* RNN with torch
** Single Trial
*** Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_EI.yml', 'dual', REPO_ROOT, VERBOSE=1, DEVICE='cuda')
  rates = model.forward(REC_LAST_ONLY=0)[:,0]
#+end_src

#+RESULTS:
#+begin_example
  Na tensor([7500, 2500], device='cuda:0', dtype=torch.int32) Ka tensor([1000., 1000.], device='cuda:0') csumNa tensor([    0,  7500, 10000], device='cuda:0')
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  generating ff input
  times (s) 0.0 rates (Hz) [0.0, 2.08]
  times (s) 0.22 rates (Hz) [0.0, 2.03]
  times (s) 0.44 rates (Hz) [0.0, 2.03]
  times (s) 0.67 rates (Hz) [0.0, 2.04]
  times (s) 0.89 rates (Hz) [14.28, 2.0]
  times (s) 1.11 rates (Hz) [0.01, 2.03]
  times (s) 1.33 rates (Hz) [2.05, 3.8]
  times (s) 1.56 rates (Hz) [3.25, 5.26]
  times (s) 1.78 rates (Hz) [2.87, 5.42]
  times (s) 2.0 rates (Hz) [2.84, 4.9]
  times (s) 2.22 rates (Hz) [2.91, 4.83]
  times (s) 2.44 rates (Hz) [2.97, 5.04]
  times (s) 2.67 rates (Hz) [2.97, 5.0]
  times (s) 2.89 rates (Hz) [2.96, 4.97]
  times (s) 3.11 rates (Hz) [3.05, 5.16]
  times (s) 3.33 rates (Hz) [3.1, 5.17]
  times (s) 3.56 rates (Hz) [3.16, 5.09]
  times (s) 3.78 rates (Hz) [3.18, 5.16]
  times (s) 4.0 rates (Hz) [3.23, 5.32]
  times (s) 4.22 rates (Hz) [3.26, 5.3]
  times (s) 4.44 rates (Hz) [3.37, 5.45]
  times (s) 4.67 rates (Hz) [3.38, 5.3]
  times (s) 4.89 rates (Hz) [3.48, 5.47]
  times (s) 5.11 rates (Hz) [3.58, 5.67]
  times (s) 5.33 rates (Hz) [3.57, 5.51]
  Elapsed (with compilation) = 0.3473608111962676s
#+end_example

*** Dynamics

#+begin_src ipython
  ff_input = model.ff_input.cpu().detach().numpy()
  print(ff_input.shape)
  
  fig, ax = plt.subplots(1, 2)

  ax[0].plot(ff_input[0, :, :5])
  ax[0].plot(ff_input[0, :, -5:])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, 10000])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1, 675, 10000)
[[file:./.ob-jupyter/2022c78bd64831369b22610c6c49c3f4c1b0bdec.png]]
:END:

#+begin_src ipython
  print(rates.shape)
  r_max = 15 # 0.5 * np.max(rates[-1])
  
  plt.imshow(rates.T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (25, 7500)
[[file:./.ob-jupyter/60bf74695aa38b936dda31d58969bf038ffa8a82.png]]
:END:

#+RESULTS:

#+begin_src ipython
  ksi = model.PHI0.cpu().detach().numpy()
  print(ksi.shape)

  idx = np.arange(0, len(ksi[0]))
  theta = get_theta(ksi[0], ksi[1], GM=0, IF_NORM=1)
  
  index_order = theta.argsort()
  rates_ordered = rates[:, index_order]
#+end_src

#+RESULTS:
: (2, 7500)

#+begin_src ipython
  plt.imshow(rates_ordered.T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Time (au)')
  plt.yticks(np.linspace(0, 7500, 5), np.linspace(0, 360, 5).astype(int))
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/bfa38c9e4f93c9414d54c31de02ef7da625b41b6.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.plot((phi * 180 / np.pi))
  plt.yticks(np.linspace(0, 360, 5).astype(int), np.linspace(0, 360, 5).astype(int))  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7bc9f04d0838969d31bd3c084e5d068edd84c077.png]]

** Multiple Trials
*** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_EI.yml"
  name = "low_rank_ini"
#+end_src

#+RESULTS:

*** Simulation

#+begin_src ipython  
  start = perf_counter()
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', N_BATCH=10)
  rates = model.forward(REC_LAST_ONLY=0)
  end = perf_counter()

  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates.shape)

#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 0s
: rates (25, 10, 7500)

*** Analysis

#+begin_src ipython
  ksi = model.PHI0.cpu().detach().numpy()

  idx = np.arange(0, len(ksi[0]))
  theta = get_theta(ksi[1], ksi[0], GM=0, IF_NORM=0)

  index_order = theta.argsort()
  rates_ordered = rates[..., index_order]
  print(rates_ordered.shape)
#+end_src

#+RESULTS:
: (25, 10, 7500)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (25, 10)

#+begin_src ipython
  plt.plot(phi * 180 / np.pi)
  # plt.ylim([0, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/edaae9b91c69006adbdd8d313c3024ee8b48dacb.png]]

#+begin_src ipython
  plt.imshow(rates_ordered[:, 3].T, aspect='auto', cmap='jet', vmin=0, vmax=4)
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Time (au)')
  plt.yticks(np.linspace(0, rates_ordered.shape[-1], 5), np.linspace(-180, 180, 5).astype(int))
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f32254b87f9fe4b05ec3445668140cea7e652b01.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

*** Realizations
**** Helpers

#+begin_src ipython
  def run_X(conf_name, name, real_list, n_ini, device='cuda:0', **kwargs):
      start = perf_counter()

      rates = []
      ksi = []
      for real in real_list:

          model = Network(conf_name, '%s_real_%d' % (name, real),
                          REPO_ROOT, DEVICE=device,  VERBOSE=0, SEED=0, N_BATCH=n_ini, **kwargs)
          
          ksi.append(model.PHI0.cpu().detach().numpy())
          rates.append(model.forward().cpu().detach().numpy())

          del model

      end = perf_counter()

      print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))      

      return np.array(rates), np.array(ksi)
#+end_src

#+RESULTS:

**** Parameters

#+begin_src ipython
  real_list = np.arange(0, 100)
  n_ini = 1
#+end_src

#+RESULTS:

**** Run

#+begin_src ipython
  rates, ksi = run_X(conf_name, name, real_list, n_ini, device='cuda')
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 35s

**** Results

#+begin_src ipython
  print(rates.shape, ksi.shape)
#+end_src

#+RESULTS:
: (100, 1, 7500) (100, 2, 7500)

#+begin_src ipython
  rates_ordered = rates
  
  for i in real_list:
      idx = np.arange(0, len(ksi[i][0]))
      theta = get_theta(ksi[i][1], ksi[i][0], GM=0, IF_NORM=0)

      index_order = theta.argsort()
      rates_ordered[i] = rates[i][..., index_order]
  print(rates_ordered.shape)
#+end_src

#+RESULTS:
: (100, 1, 7500)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  print(phi.shape)
  plt.hist(phi[..., 0].T * 180 / np.pi)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (100, 1)
[[file:./.ob-jupyter/65b9078fdc06d167c08fcb11832503ad9c6053b5.png]]
:END:

#+begin_src ipython
  x = m1[..., 0] / m0[..., 0] * np.cos(phi[..., 0])
  y = m1[...,0] / m0[..., 0] * np.sin(phi[..., 0])

  # x = np.cos(phi[..., 0])
  # y = np.sin(phi[..., 0])

  plt.plot(x, y, 'o')
  plt.xlim([-2, 2])
  plt.ylim([-2, 2])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/87b15b1a162f3ebd291be5b86a9d06a32b603801.png]]

#+begin_src ipython
  rates_ortho = rates.copy()
#+end_src

#+RESULTS:

*** Behavior

#+begin_src ipython
  ini_list = np.arange(0, 10)
  phi_list = np.array([-1, 1])

  start = perf_counter()
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda:1')
  rates = model.forward(ini_list=ini_list, phi_list=phi_list)
  end = perf_counter()
  
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 39s
: rates (41, 20, 20000)

#+begin_src ipython
  rates = rates.reshape(rates.shape[0], len(ini_list), len(phi_list), -1)
  print(rates.shape)
#+end_src

#+RESULTS:
: (41, 10, 2, 20000)

#+begin_src ipython
  ksi = model.ksi.cpu().detach().numpy()
  idx = np.arange(0, len(ksi[0]))
  # theta = sort_by_angle(idx, ksi[1], ksi[0])
  # print(theta.shape)
  theta = get_theta(ksi[0], ksi[1], GM=0, IF_NORM=1)
  # theta = np.arctan2(ksi[1], ksi[0])
  index_order = theta.argsort()
  # print(index_order)
  rates_ordered = rates[..., index_order]
  print(rates_ordered.shape)
#+end_src

#+RESULTS:
: (41, 10, 2, 15000)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_ordered, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (41, 10, 2)

#+begin_src ipython
  plt.plot(phi[..., 0] * 180/np.pi)
  plt.plot(phi[..., 1] * 180/np.pi)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f5f9d0940c0e022eb509cf351bb6356892c29235.png]]

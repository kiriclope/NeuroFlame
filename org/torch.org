#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel python3

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])

      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  import subprocess

  def gpu_memory_usage_percentage():
      total_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.total", "--format=csv,nounits,noheader"])
      used_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.used", "--format=csv,nounits,noheader"])
      
      total_mem_list = map(float, total_mem_str.decode('utf-8').strip().split('\n'))
      used_mem_list = map(float, used_mem_str.decode('utf-8').strip().split('\n'))

      mem_percentage_list = [(used_mem / total_mem) * 100.0 for total_mem, used_mem in zip(total_mem_list, used_mem_list)]

      return np.array(mem_percentage_list)

  memory_percentages = gpu_memory_usage_percentage()

  # The memory usage for each GPU is indexed from 0
  for index, percentage in enumerate(memory_percentages):
      print(f'GPU {index} Memory Usage: {percentage:.2f}%')

#+end_src

#+begin_src ipython
  from time import sleep

  def check_gpu(device):
      memory_percentages = gpu_memory_usage_percentage()
      if device == 'cuda:0':
          if memory_percentages[0] > 75:
              while memory_percentages[1] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:1'
      else:
          if memory_percentages[1] > 75:
              while memory_percentages[0] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:0'
                  
      return device
#+end_src

#+begin_src ipython
  device = check_gpu('cuda:0')
  print(device)
#+end_src

#+begin_src ipython
  # import multiprocessing
  # if multiprocessing.get_start_method(allow_none=True) != 'spawn':
  #   multiprocessing.set_start_method('spawn', force=True)
  # from multiprocessing import Process

  def run_ini_phi(conf, name, ini_list, phi_list):
      LOAD_MAT = 0
      SAVE_MAT = 1

      device = 'cpu'

      df_list = []
      for ini in ini_list:
          for phi in phi_list:
              
              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')

              model = Network('%s.yml' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, LOAD_MAT=LOAD_MAT, SAVE_MAT=SAVE_MAT, DEVICE=device, PHI0=phi)

              model.run()
              # process = Process(target=model.run)
              # process.start()
              # process.join()
              # device = check_gpu(device)

              LOAD_MAT = 1
              SAVE_MAT = 0
#+end_src

#+RESULTS:

* RNN with torch
** Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:

** Single Trial
*** Model
#+begin_src ipython
  REPO_ROOT = "/home/leon/Projects/torch/"
  model = Network('config_EI.yml', 'bump', REPO_ROOT, VERBOSE=1, DEVICE='cpu', PHI0=0)
#+end_src

#+RESULTS:
#+begin_example
  Loading config from /home/leon/Projects/torch//conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  ksi . ksi1 tensor(-0.0183, dtype=torch.float64)
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
#+end_example
*** Simulation
#+begin_src ipython
  rates = model.run()
#+end_src

#+RESULTS:
#+begin_example
  times (s) 0.25 rates (Hz) [0.0, 0.51]
  times (s) 0.5 rates (Hz) [0.0, 0.51]
  times (s) 0.75 rates (Hz) [0.0, 0.52]
  STIM ON
  times (s) 1.0 rates (Hz) [0.03, 0.51]
  times (s) 1.25 rates (Hz) [2.45, 1.73]
  times (s) 1.5 rates (Hz) [2.59, 1.82]
  times (s) 1.75 rates (Hz) [2.6, 1.82]
  STIM OFF
  times (s) 2.0 rates (Hz) [2.59, 1.82]
  times (s) 2.25 rates (Hz) [1.79, 1.42]
  times (s) 2.5 rates (Hz) [1.75, 1.39]
  times (s) 2.75 rates (Hz) [1.75, 1.39]
  times (s) 3.0 rates (Hz) [1.76, 1.39]
  times (s) 3.25 rates (Hz) [1.75, 1.39]
  times (s) 3.5 rates (Hz) [1.76, 1.4]
  times (s) 3.75 rates (Hz) [1.76, 1.39]
  times (s) 4.0 rates (Hz) [1.75, 1.4]
  times (s) 4.25 rates (Hz) [1.75, 1.4]
  times (s) 4.5 rates (Hz) [1.75, 1.39]
  times (s) 4.75 rates (Hz) [1.76, 1.4]
  Saving rates to: /home/leon/Projects/torch//data/simul/bump.npy
  Elapsed (with compilation) = 4.41159307199996s
#+end_example
*** Analysis

#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: (19, 1000)

#+begin_src ipython
  plt.imshow(rates.T, aspect='auto', cmap='jet', vmin=0, vmax=2)
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a19be9c83999ec39b9f085e6c001f914dca879cc.png]]


#+begin_src ipython
  plt.hist(rates[1], bins=20)
  plt.hist(rates[3], bins=20)
  plt.hist(rates[4], bins=50)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f7cb5eca35ffdebf0ed737436f48c7ab12b83209.png]]


#+begin_src ipython
  ksi = model.ksi.cpu().detach().numpy()
  theta = np.arctan2(ksi[1], ksi[0])
  index_order = theta.argsort()
  rates_ordered = rates[:, index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.imshow(rates_ordered.T, aspect='auto', cmap='jet', vmin=0, vmax=2)
  plt.colorbar()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7c0ff4f3fce87200aa2f63292369a6e3b1b55e83.png]]

*** Connectivity
#+begin_src ipython
  print(model.Wab)
#+end_src

#+RESULTS:
: Linear(in_features=1000, out_features=1000, bias=True)

#+begin_src ipython
  Cij = model.Wab.weight.data.cpu().detach().numpy()
  plot_con(Cij)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f292bbc44ac774bf04968cd7b00a9d318c1d7ef4.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Multiple Trials
*** Parameters
#+begin_src ipython
  REPO_ROOT = "/home/leon/Projects/torch"
  ini_list = np.arange(0, 10)
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [0, 180]
#+end_src

#+RESULTS:

*** Simulation
#+begin_src ipython
  name = 'lowR_ortho'
  run_ini_phi('config_EI', name, ini_list, phi_list)
#+end_src

#+RESULTS:
#+begin_example
  ##########################################
  trial 0 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.27, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.92]
  times (s) 1.0 rates (Hz) [0.28, 0.92]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.93]
  times (s) 1.75 rates (Hz) [0.29, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.9]
  times (s) 2.25 rates (Hz) [2.29, 1.75]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.41, 1.81]
  times (s) 2.75 rates (Hz) [1.79, 1.52]
  times (s) 3.0 rates (Hz) [1.76, 1.51]
  times (s) 3.25 rates (Hz) [1.74, 1.51]
  times (s) 3.5 rates (Hz) [1.74, 1.52]
  times (s) 3.75 rates (Hz) [1.75, 1.5]
  times (s) 4.0 rates (Hz) [1.74, 1.49]
  times (s) 4.25 rates (Hz) [1.75, 1.5]
  times (s) 4.5 rates (Hz) [1.73, 1.5]
  times (s) 4.75 rates (Hz) [1.74, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_0_phi_0.npy
  Elapsed (with compilation) = 4.579166464000082s
  ##########################################
  trial 0 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.92]
  times (s) 0.75 rates (Hz) [0.29, 0.91]
  times (s) 1.0 rates (Hz) [0.29, 0.9]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.93]
  times (s) 1.75 rates (Hz) [0.28, 0.92]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.9]
  times (s) 2.25 rates (Hz) [2.79, 1.99]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.06, 2.11]
  times (s) 2.75 rates (Hz) [1.96, 1.63]
  times (s) 3.0 rates (Hz) [1.82, 1.53]
  times (s) 3.25 rates (Hz) [1.77, 1.54]
  times (s) 3.5 rates (Hz) [1.74, 1.51]
  times (s) 3.75 rates (Hz) [1.75, 1.51]
  times (s) 4.0 rates (Hz) [1.76, 1.53]
  times (s) 4.25 rates (Hz) [1.75, 1.52]
  times (s) 4.5 rates (Hz) [1.72, 1.5]
  times (s) 4.75 rates (Hz) [1.74, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_0_phi_180.npy
  Elapsed (with compilation) = 4.516423989000032s
  ##########################################
  trial 1 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.94]
  times (s) 0.5 rates (Hz) [0.28, 0.92]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.28, 0.89]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.29, 0.91]
  times (s) 1.75 rates (Hz) [0.28, 0.93]
  STIM ON
  times (s) 2.0 rates (Hz) [0.32, 0.91]
  times (s) 2.25 rates (Hz) [2.3, 1.77]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.42, 1.8]
  times (s) 2.75 rates (Hz) [1.81, 1.56]
  times (s) 3.0 rates (Hz) [1.75, 1.51]
  times (s) 3.25 rates (Hz) [1.76, 1.51]
  times (s) 3.5 rates (Hz) [1.75, 1.52]
  times (s) 3.75 rates (Hz) [1.74, 1.53]
  times (s) 4.0 rates (Hz) [1.75, 1.51]
  times (s) 4.25 rates (Hz) [1.73, 1.5]
  times (s) 4.5 rates (Hz) [1.75, 1.53]
  times (s) 4.75 rates (Hz) [1.74, 1.52]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_1_phi_0.npy
  Elapsed (with compilation) = 4.266009489998396s
  ##########################################
  trial 1 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.93]
  times (s) 0.5 rates (Hz) [0.28, 0.93]
  times (s) 0.75 rates (Hz) [0.29, 0.93]
  times (s) 1.0 rates (Hz) [0.29, 0.92]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.9]
  times (s) 1.75 rates (Hz) [0.29, 0.9]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.81, 1.96]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.07, 2.11]
  times (s) 2.75 rates (Hz) [1.98, 1.63]
  times (s) 3.0 rates (Hz) [1.8, 1.53]
  times (s) 3.25 rates (Hz) [1.77, 1.54]
  times (s) 3.5 rates (Hz) [1.76, 1.5]
  times (s) 3.75 rates (Hz) [1.75, 1.5]
  times (s) 4.0 rates (Hz) [1.77, 1.53]
  times (s) 4.25 rates (Hz) [1.72, 1.51]
  times (s) 4.5 rates (Hz) [1.75, 1.51]
  times (s) 4.75 rates (Hz) [1.73, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_1_phi_180.npy
  Elapsed (with compilation) = 4.148181414000646s
  ##########################################
  trial 2 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.9]
  times (s) 0.75 rates (Hz) [0.28, 0.92]
  times (s) 1.0 rates (Hz) [0.28, 0.91]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.28, 0.9]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.93]
  times (s) 2.25 rates (Hz) [2.29, 1.74]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.41, 1.82]
  times (s) 2.75 rates (Hz) [1.8, 1.53]
  times (s) 3.0 rates (Hz) [1.75, 1.53]
  times (s) 3.25 rates (Hz) [1.76, 1.52]
  times (s) 3.5 rates (Hz) [1.75, 1.5]
  times (s) 3.75 rates (Hz) [1.74, 1.52]
  times (s) 4.0 rates (Hz) [1.75, 1.5]
  times (s) 4.25 rates (Hz) [1.73, 1.53]
  times (s) 4.5 rates (Hz) [1.76, 1.51]
  times (s) 4.75 rates (Hz) [1.73, 1.53]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_2_phi_0.npy
  Elapsed (with compilation) = 4.363845247000427s
  ##########################################
  trial 2 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.29, 0.92]
  times (s) 0.5 rates (Hz) [0.28, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.29, 0.91]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.29, 0.92]
  times (s) 1.75 rates (Hz) [0.28, 0.9]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.79, 1.98]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.1, 2.13]
  times (s) 2.75 rates (Hz) [1.98, 1.61]
  times (s) 3.0 rates (Hz) [1.81, 1.54]
  times (s) 3.25 rates (Hz) [1.78, 1.51]
  times (s) 3.5 rates (Hz) [1.77, 1.53]
  times (s) 3.75 rates (Hz) [1.73, 1.51]
  times (s) 4.0 rates (Hz) [1.75, 1.52]
  times (s) 4.25 rates (Hz) [1.77, 1.52]
  times (s) 4.5 rates (Hz) [1.74, 1.52]
  times (s) 4.75 rates (Hz) [1.74, 1.52]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_2_phi_180.npy
  Elapsed (with compilation) = 4.2539594159989065s
  ##########################################
  trial 3 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.28, 0.92]
  times (s) 0.75 rates (Hz) [0.28, 0.92]
  times (s) 1.0 rates (Hz) [0.29, 0.9]
  times (s) 1.25 rates (Hz) [0.28, 0.93]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.9]
  times (s) 2.25 rates (Hz) [2.28, 1.75]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.4, 1.8]
  times (s) 2.75 rates (Hz) [1.77, 1.53]
  times (s) 3.0 rates (Hz) [1.75, 1.51]
  times (s) 3.25 rates (Hz) [1.74, 1.5]
  times (s) 3.5 rates (Hz) [1.73, 1.51]
  times (s) 3.75 rates (Hz) [1.74, 1.51]
  times (s) 4.0 rates (Hz) [1.74, 1.49]
  times (s) 4.25 rates (Hz) [1.74, 1.51]
  times (s) 4.5 rates (Hz) [1.73, 1.51]
  times (s) 4.75 rates (Hz) [1.73, 1.5]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_3_phi_0.npy
  Elapsed (with compilation) = 4.355674824000744s
  ##########################################
  trial 3 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.29, 0.92]
  times (s) 0.75 rates (Hz) [0.28, 0.93]
  times (s) 1.0 rates (Hz) [0.28, 0.91]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.91]
  times (s) 1.75 rates (Hz) [0.28, 0.92]
  STIM ON
  times (s) 2.0 rates (Hz) [0.32, 0.89]
  times (s) 2.25 rates (Hz) [2.8, 1.98]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.07, 2.13]
  times (s) 2.75 rates (Hz) [1.97, 1.64]
  times (s) 3.0 rates (Hz) [1.8, 1.55]
  times (s) 3.25 rates (Hz) [1.75, 1.54]
  times (s) 3.5 rates (Hz) [1.77, 1.53]
  times (s) 3.75 rates (Hz) [1.75, 1.52]
  times (s) 4.0 rates (Hz) [1.74, 1.52]
  times (s) 4.25 rates (Hz) [1.76, 1.51]
  times (s) 4.5 rates (Hz) [1.74, 1.51]
  times (s) 4.75 rates (Hz) [1.74, 1.49]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_3_phi_180.npy
  Elapsed (with compilation) = 4.206771013999969s
  ##########################################
  trial 4 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.29, 0.91]
  times (s) 0.5 rates (Hz) [0.29, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.28, 0.91]
  times (s) 1.25 rates (Hz) [0.29, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.9]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.92]
  times (s) 2.25 rates (Hz) [2.29, 1.75]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.4, 1.79]
  times (s) 2.75 rates (Hz) [1.8, 1.52]
  times (s) 3.0 rates (Hz) [1.76, 1.52]
  times (s) 3.25 rates (Hz) [1.78, 1.51]
  times (s) 3.5 rates (Hz) [1.75, 1.53]
  times (s) 3.75 rates (Hz) [1.73, 1.53]
  times (s) 4.0 rates (Hz) [1.73, 1.5]
  times (s) 4.25 rates (Hz) [1.73, 1.51]
  times (s) 4.5 rates (Hz) [1.74, 1.52]
  times (s) 4.75 rates (Hz) [1.75, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_4_phi_0.npy
  Elapsed (with compilation) = 4.277040197999668s
  ##########################################
  trial 4 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.93]
  times (s) 0.5 rates (Hz) [0.29, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.29, 0.93]
  times (s) 1.25 rates (Hz) [0.29, 0.93]
  times (s) 1.5 rates (Hz) [0.29, 0.9]
  times (s) 1.75 rates (Hz) [0.28, 0.9]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.93]
  times (s) 2.25 rates (Hz) [2.8, 1.96]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.06, 2.09]
  times (s) 2.75 rates (Hz) [1.96, 1.61]
  times (s) 3.0 rates (Hz) [1.78, 1.53]
  times (s) 3.25 rates (Hz) [1.78, 1.52]
  times (s) 3.5 rates (Hz) [1.75, 1.51]
  times (s) 3.75 rates (Hz) [1.77, 1.52]
  times (s) 4.0 rates (Hz) [1.75, 1.51]
  times (s) 4.25 rates (Hz) [1.75, 1.51]
  times (s) 4.5 rates (Hz) [1.74, 1.52]
  times (s) 4.75 rates (Hz) [1.75, 1.52]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_4_phi_180.npy
  Elapsed (with compilation) = 4.272952740000619s
  ##########################################
  trial 5 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.92]
  times (s) 1.0 rates (Hz) [0.28, 0.9]
  times (s) 1.25 rates (Hz) [0.28, 0.94]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.93]
  times (s) 2.25 rates (Hz) [2.29, 1.75]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.42, 1.83]
  times (s) 2.75 rates (Hz) [1.79, 1.54]
  times (s) 3.0 rates (Hz) [1.77, 1.52]
  times (s) 3.25 rates (Hz) [1.75, 1.52]
  times (s) 3.5 rates (Hz) [1.73, 1.49]
  times (s) 3.75 rates (Hz) [1.74, 1.52]
  times (s) 4.0 rates (Hz) [1.73, 1.49]
  times (s) 4.25 rates (Hz) [1.74, 1.51]
  times (s) 4.5 rates (Hz) [1.73, 1.51]
  times (s) 4.75 rates (Hz) [1.74, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_5_phi_0.npy
  Elapsed (with compilation) = 4.317482585000107s
  ##########################################
  trial 5 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.28, 0.91]
  times (s) 0.75 rates (Hz) [0.28, 0.92]
  times (s) 1.0 rates (Hz) [0.28, 0.92]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.91]
  times (s) 1.75 rates (Hz) [0.28, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.76, 1.94]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.06, 2.14]
  times (s) 2.75 rates (Hz) [1.99, 1.6]
  times (s) 3.0 rates (Hz) [1.83, 1.57]
  times (s) 3.25 rates (Hz) [1.78, 1.51]
  times (s) 3.5 rates (Hz) [1.74, 1.51]
  times (s) 3.75 rates (Hz) [1.74, 1.51]
  times (s) 4.0 rates (Hz) [1.76, 1.51]
  times (s) 4.25 rates (Hz) [1.76, 1.5]
  times (s) 4.5 rates (Hz) [1.75, 1.52]
  times (s) 4.75 rates (Hz) [1.73, 1.53]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_5_phi_180.npy
  Elapsed (with compilation) = 4.298032760998467s
  ##########################################
  trial 6 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.28, 0.91]
  times (s) 0.75 rates (Hz) [0.29, 0.92]
  times (s) 1.0 rates (Hz) [0.28, 0.91]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.92]
  times (s) 2.25 rates (Hz) [2.28, 1.72]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.42, 1.8]
  times (s) 2.75 rates (Hz) [1.77, 1.54]
  times (s) 3.0 rates (Hz) [1.74, 1.51]
  times (s) 3.25 rates (Hz) [1.74, 1.52]
  times (s) 3.5 rates (Hz) [1.76, 1.52]
  times (s) 3.75 rates (Hz) [1.74, 1.51]
  times (s) 4.0 rates (Hz) [1.71, 1.51]
  times (s) 4.25 rates (Hz) [1.74, 1.52]
  times (s) 4.5 rates (Hz) [1.72, 1.51]
  times (s) 4.75 rates (Hz) [1.75, 1.49]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_6_phi_0.npy
  Elapsed (with compilation) = 4.477057362000778s
  ##########################################
  trial 6 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.29, 0.89]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.28, 0.92]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.28, 0.93]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.9]
  times (s) 2.25 rates (Hz) [2.78, 1.99]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.04, 2.1]
  times (s) 2.75 rates (Hz) [1.95, 1.62]
  times (s) 3.0 rates (Hz) [1.8, 1.55]
  times (s) 3.25 rates (Hz) [1.77, 1.51]
  times (s) 3.5 rates (Hz) [1.74, 1.51]
  times (s) 3.75 rates (Hz) [1.75, 1.52]
  times (s) 4.0 rates (Hz) [1.75, 1.51]
  times (s) 4.25 rates (Hz) [1.73, 1.52]
  times (s) 4.5 rates (Hz) [1.75, 1.53]
  times (s) 4.75 rates (Hz) [1.75, 1.48]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_6_phi_180.npy
  Elapsed (with compilation) = 4.193293164998977s
  ##########################################
  trial 7 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.9]
  times (s) 0.5 rates (Hz) [0.29, 0.9]
  times (s) 0.75 rates (Hz) [0.28, 0.9]
  times (s) 1.0 rates (Hz) [0.29, 0.92]
  times (s) 1.25 rates (Hz) [0.29, 0.92]
  times (s) 1.5 rates (Hz) [0.29, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.93]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.28, 1.73]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.41, 1.8]
  times (s) 2.75 rates (Hz) [1.81, 1.52]
  times (s) 3.0 rates (Hz) [1.76, 1.5]
  times (s) 3.25 rates (Hz) [1.74, 1.49]
  times (s) 3.5 rates (Hz) [1.75, 1.5]
  times (s) 3.75 rates (Hz) [1.75, 1.51]
  times (s) 4.0 rates (Hz) [1.74, 1.52]
  times (s) 4.25 rates (Hz) [1.75, 1.52]
  times (s) 4.5 rates (Hz) [1.76, 1.52]
  times (s) 4.75 rates (Hz) [1.75, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_7_phi_0.npy
  Elapsed (with compilation) = 4.17705544599994s
  ##########################################
  trial 7 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.9]
  times (s) 0.75 rates (Hz) [0.29, 0.91]
  times (s) 1.0 rates (Hz) [0.29, 0.91]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.93]
  times (s) 1.75 rates (Hz) [0.28, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.8, 1.97]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.08, 2.12]
  times (s) 2.75 rates (Hz) [1.97, 1.62]
  times (s) 3.0 rates (Hz) [1.8, 1.55]
  times (s) 3.25 rates (Hz) [1.78, 1.53]
  times (s) 3.5 rates (Hz) [1.73, 1.5]
  times (s) 3.75 rates (Hz) [1.74, 1.5]
  times (s) 4.0 rates (Hz) [1.76, 1.51]
  times (s) 4.25 rates (Hz) [1.74, 1.52]
  times (s) 4.5 rates (Hz) [1.74, 1.52]
  times (s) 4.75 rates (Hz) [1.74, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_7_phi_180.npy
  Elapsed (with compilation) = 4.209203377000449s
  ##########################################
  trial 8 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.9]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.28, 0.93]
  times (s) 1.25 rates (Hz) [0.29, 0.89]
  times (s) 1.5 rates (Hz) [0.29, 0.91]
  times (s) 1.75 rates (Hz) [0.28, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.28, 1.76]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.39, 1.8]
  times (s) 2.75 rates (Hz) [1.78, 1.55]
  times (s) 3.0 rates (Hz) [1.75, 1.51]
  times (s) 3.25 rates (Hz) [1.75, 1.51]
  times (s) 3.5 rates (Hz) [1.75, 1.51]
  times (s) 3.75 rates (Hz) [1.76, 1.53]
  times (s) 4.0 rates (Hz) [1.74, 1.51]
  times (s) 4.25 rates (Hz) [1.74, 1.51]
  times (s) 4.5 rates (Hz) [1.73, 1.52]
  times (s) 4.75 rates (Hz) [1.73, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_8_phi_0.npy
  Elapsed (with compilation) = 4.334532975000911s
  ##########################################
  trial 8 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.92]
  times (s) 0.5 rates (Hz) [0.29, 0.91]
  times (s) 0.75 rates (Hz) [0.29, 0.9]
  times (s) 1.0 rates (Hz) [0.28, 0.91]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.9]
  times (s) 1.75 rates (Hz) [0.28, 0.93]
  STIM ON
  times (s) 2.0 rates (Hz) [0.32, 0.91]
  times (s) 2.25 rates (Hz) [2.79, 1.97]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.07, 2.13]
  times (s) 2.75 rates (Hz) [1.98, 1.63]
  times (s) 3.0 rates (Hz) [1.79, 1.55]
  times (s) 3.25 rates (Hz) [1.77, 1.52]
  times (s) 3.5 rates (Hz) [1.76, 1.55]
  times (s) 3.75 rates (Hz) [1.74, 1.52]
  times (s) 4.0 rates (Hz) [1.74, 1.53]
  times (s) 4.25 rates (Hz) [1.73, 1.53]
  times (s) 4.5 rates (Hz) [1.74, 1.53]
  times (s) 4.75 rates (Hz) [1.74, 1.5]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_8_phi_180.npy
  Elapsed (with compilation) = 4.257459103999281s
  ##########################################
  trial 9 phi 0
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.92]
  times (s) 0.75 rates (Hz) [0.28, 0.91]
  times (s) 1.0 rates (Hz) [0.28, 0.92]
  times (s) 1.25 rates (Hz) [0.28, 0.92]
  times (s) 1.5 rates (Hz) [0.28, 0.92]
  times (s) 1.75 rates (Hz) [0.29, 0.91]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.92]
  times (s) 2.25 rates (Hz) [2.29, 1.76]
  STIM OFF
  times (s) 2.5 rates (Hz) [2.42, 1.81]
  times (s) 2.75 rates (Hz) [1.8, 1.54]
  times (s) 3.0 rates (Hz) [1.74, 1.52]
  times (s) 3.25 rates (Hz) [1.75, 1.51]
  times (s) 3.5 rates (Hz) [1.74, 1.52]
  times (s) 3.75 rates (Hz) [1.74, 1.51]
  times (s) 4.0 rates (Hz) [1.75, 1.48]
  times (s) 4.25 rates (Hz) [1.72, 1.51]
  times (s) 4.5 rates (Hz) [1.74, 1.51]
  times (s) 4.75 rates (Hz) [1.75, 1.5]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_9_phi_0.npy
  Elapsed (with compilation) = 4.363776637999763s
  ##########################################
  trial 9 phi 180
  ##########################################
  Loading config from /home/leon/Projects/torch/conf/config_EI.yml
  Na tensor([750, 250], dtype=torch.int32) Ka tensor([1., 1.], dtype=torch.float64) csumNa tensor([   0,  750, 1000])
  DT 0.001 TAU tensor([0.0400, 0.0200], dtype=torch.float64)
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Linear(in_features=1000, out_features=1000, bias=True)
  ksi torch.Size([2, 750])
  Pij torch.Size([750, 750])
  All to all connectivity 
  with weak low rank structure, KAPPA 1.00
  All to all connectivity 
  All to all connectivity 
  All to all connectivity 
  times (s) 0.25 rates (Hz) [0.28, 0.91]
  times (s) 0.5 rates (Hz) [0.28, 0.92]
  times (s) 0.75 rates (Hz) [0.28, 0.9]
  times (s) 1.0 rates (Hz) [0.29, 0.92]
  times (s) 1.25 rates (Hz) [0.29, 0.91]
  times (s) 1.5 rates (Hz) [0.28, 0.9]
  times (s) 1.75 rates (Hz) [0.28, 0.92]
  STIM ON
  times (s) 2.0 rates (Hz) [0.31, 0.91]
  times (s) 2.25 rates (Hz) [2.8, 1.98]
  STIM OFF
  times (s) 2.5 rates (Hz) [3.09, 2.13]
  times (s) 2.75 rates (Hz) [1.96, 1.63]
  times (s) 3.0 rates (Hz) [1.81, 1.54]
  times (s) 3.25 rates (Hz) [1.76, 1.5]
  times (s) 3.5 rates (Hz) [1.74, 1.51]
  times (s) 3.75 rates (Hz) [1.76, 1.51]
  times (s) 4.0 rates (Hz) [1.75, 1.52]
  times (s) 4.25 rates (Hz) [1.74, 1.53]
  times (s) 4.5 rates (Hz) [1.73, 1.52]
  times (s) 4.75 rates (Hz) [1.76, 1.51]
  Saving rates to: /home/leon/Projects/torch/data/simul/lowR_ortho_ini_9_phi_180.npy
  Elapsed (with compilation) = 4.3041092040002695s
#+end_example

*** Load data

#+begin_src ipython
  df = load_data_ini_phi(name, ini_list, phi_list)
  print(df.head())
#+end_src

#+RESULTS:
: (10, 2, 19, 1000)
:    trial  phi  neuron  time     rates
: 0      0    0       0     0  0.311170
: 1      0    0       1     0  0.207215
: 2      0    0       2     0  0.322550
: 3      0    0       3     0  0.372635
: 4      0    0       4     0  0.195681

#+begin_src ipython
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
:      trial  phi        m0        m1     phase
: 360      0    0  1.683194  0.110913  4.034317
: 361      0    1  1.681437  0.107140  3.925726
: 362      1    0  1.686373  0.112069  3.835824
: 363      1    1  1.677679  0.108261  3.981425
: 364      2    0  1.676482  0.094790  3.924725

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(df_code, x='time', y=df_code['phase']*180/np.pi, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (°)')

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins='auto', stat='density', color='b')
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5a53e1393f9e211a79e71b0f3686f3032c4850f0.png]]

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
 
  print(end_point.head())
#+end_src

#+RESULTS:
:         trial  phi        m0        m1     phase  accuracy  precision
: 399800      0    0  5.894755  5.324325  3.081275  3.081275  -0.055621
: 399801      1    0  5.877878  5.347837  3.093784  3.093784  -0.043112
: 399802      2    0  5.893431  5.513807  2.869461  2.869461  -0.267435
: 399803      3    0  5.898397  5.493224  3.104073  3.104073  -0.032823
: 399804      4    0  5.864051  5.438927  3.155159  3.155159   0.018263

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

* Test
#+begin_src ipython
  import torch
  import torch.nn as nn

  class MyModel(nn.Module):
      def __init__(self, hidden_size, noise_stddev, device='cpu'):
          super(MyModel, self).__init__()
          self.hidden_size = hidden_size
          self.noise_stddev = noise_stddev
          self.device = device
          self.fc = nn.Linear(self.hidden_size, self.hidden_size, device=self.device)  # example layer

      def get_noise(self, h):
          noise = torch.randn_like(h, device=self.device) * self.noise_stddev
          return noise

      def update_h(self, h):
          h = self.fc(h + noise)
          return h
      
      def forward(self, h):
          # noise = torch.randn_like(h, device=self.device) * self.noise_stddev
          noise = self.get_noise(h)
          h = self.fc(h + noise)
          return h

      def run(self):
          result = []
          h = torch.zeros(self.hidden_size, device=self.device)

          for t in range(10):
              h = self.forward(h)
              result.append(h.cpu().detach().numpy())
          return result
#+end_src

#+RESULTS:

#+begin_src ipython
  model = MyModel(100, 10)
  result = model.run()
#+end_src

#+RESULTS:

#+begin_src ipython
  result = np.array(result)
  print(result.shape)
  plt.plot(result.T)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (10, 100)
[[file:./.ob-jupyter/fc07f7e7574de285fc088ca7af7cb9f1e00d4365.png]]
:END:


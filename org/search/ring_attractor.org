#+STARTUP: fold
#+TITLE:  Ring Attractor
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session multiring :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../../')

  import torch
  import gc
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
  from src.utils import clear_cache

  REPO_ROOT = '/home/leon/models/NeuroTorch/'
#+end_src

#+RESULTS:
* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  conf_name = 'config_ringEI.yml'
#+end_src

#+RESULTS:

* Single Trial
*** Model

#+begin_src ipython
  start = perf_counter()

  model = Network(conf_name, 'None', REPO_ROOT, TASK='odr_rand',
                  VERBOSE=0, DEVICE='cuda', seed=0, N_BATCH=10)
  
  rates = model(RET_FF=1).cpu().numpy()

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  print('rates', rates.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 500])
: Elapsed (with compilation) = 0h 0m 8s
: rates (10, 21, 500)

#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print('m0', m0.shape)
#+end_src

#+RESULTS:
: m0 (10, 21)

*** Dynamics

#+begin_src ipython
  ff_input = model.ff_input.cpu().detach().numpy()
  print(ff_input.shape)

  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))
  
  ax[0].plot(ff_input[0, :, :5])
  ax[0].plot(ff_input[0, :, -5:])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (10, 11500, 500)
[[file:./.ob-jupyter/2029fee36c133b09e72eef35f87265fc588dfd19.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  r_max = np.max(rates[0])

  ax[0].plot(rates.mean(-1).T)
  ax[0].set_ylabel('Rates')
  ax[0].set_xlabel('Step')

  ax[1].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')
  ax[1].set_yticks(np.linspace(0, Ne, 5), np.linspace(360, 0, 5).astype(int))
  # ax[0][1].colorbar()

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0a7bb8b3f07ca8d109dea3a87326756173c72c43.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))
  
  ax[0].plot((m1.T))
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_1$')

  ax[1].plot((phi.T * 180 / np.pi))
  ax[1].set_yticks(np.linspace(0, 360, 5).astype(int), np.linspace(0, 360, 5).astype(int))
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Phase (°)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/df56c10636732b6a10bf80a35b66243958d7e1ef.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Rates vs Jee

#+begin_src ipython
  model = Network(conf_name, 'None', REPO_ROOT, IF_STP=1, DT=0.001, VERBOSE=0, LIVE_FF_UPDATE=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  N_BATCH = 10
  model.J_STP = torch.linspace(0, 10, N_BATCH, dtype=torch.float32, device='cuda').unsqueeze(-1)
  
  model.N_BATCH = N_BATCH
  rates_Jee = model(RET_STP=1).cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (20, 20, 20)

#+begin_src ipython
  u_list = model.u_list.cpu().numpy()
  x_list = model.x_list.cpu().numpy()
  A_ux = u_list * x_list
  print(u_list.shape, x_list.shape)
#+end_src

#+RESULTS:
: (10, 21, 500) (10, 21, 500)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  
  mean_rates = rates_Jee[:,-1].mean(-1)

  ax[0].plot(model.J_STP.cpu(), mean_rates)
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$<Rates>_i$')

  ax[1].plot(rates_Jee.mean(-1).T)
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_ylabel('Rates')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e11e14a9cc30d749f65bd420ba32d84c775e3a1c.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].plot(model.J_STP.cpu(), m1[:, -1])
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_1$')
  
  ax[1].plot(m1.T)
  ax[1].set_xlabel('$Step$')
  ax[1].set_ylabel('$\mathcal{F}_1$')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  ---------------------------------------------------------------------------
  ValueError                                Traceback (most recent call last)
  Cell In[202], line 3
        1 fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  ----> 3 ax[0].plot(model.J_STP.cpu(), m1[:, -1])
        4 ax[0].set_xlabel('$J_{EE}$')
        5 ax[0].set_ylabel('$\mathcal{F}_1$')

  File ~/mambaforge/envs/torch/lib/python3.10/site-packages/matplotlib/axes/_axes.py:1721, in Axes.plot(self, scalex, scaley, data, *args, **kwargs)
     1478 """
     1479 Plot y versus x as lines and/or markers.
     1480 
     (...)
     1718 (``'green'``) or hex strings (``'#008000'``).
     1719 """
     1720 kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D)
  -> 1721 lines = [*self._get_lines(self, *args, data=data, **kwargs)]
     1722 for line in lines:
     1723     self.add_line(line)

  File ~/mambaforge/envs/torch/lib/python3.10/site-packages/matplotlib/axes/_base.py:303, in _process_plot_var_args.__call__(self, axes, data, *args, **kwargs)
      301     this += args[0],
      302     args = args[1:]
  --> 303 yield from self._plot_args(
      304     axes, this, kwargs, ambiguous_fmt_datakey=ambiguous_fmt_datakey)

  File ~/mambaforge/envs/torch/lib/python3.10/site-packages/matplotlib/axes/_base.py:499, in _process_plot_var_args._plot_args(self, axes, tup, kwargs, return_kwargs, ambiguous_fmt_datakey)
      496     axes.yaxis.update_units(y)
      498 if x.shape[0] != y.shape[0]:
  --> 499     raise ValueError(f"x and y must have same first dimension, but "
      500                      f"have shapes {x.shape} and {y.shape}")
      501 if x.ndim > 2 or y.ndim > 2:
      502     raise ValueError(f"x and y can be no greater than 2D, but have "
      503                      f"shapes {x.shape} and {y.shape}")

  ValueError: x and y must have same first dimension, but have shapes torch.Size([10, 1]) and (20, 20)
#+end_example
[[file:./.ob-jupyter/ed329e5e73b4a2155bc02a9f6c9827cc39687c2e.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  mean_rates = A_ux[:,-1].mean(-1) 

  ax[0].plot(model.J_STP.cpu(), mean_rates)
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$A_{ux}$')

  ax[1].plot(A_ux.mean(-1).T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$A_{ux}$')

  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/badea2e926864357c7b269a7c0508de9c4804215.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Rates vs Jee vs Ie

#+begin_src ipython
  model = Network(conf_name, 'None', REPO_ROOT, IF_STP=1, DT=0.001, VERBOSE=0, LIVE_FF_UPDATE=1, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  N_BATCH = 20

  J_STP = torch.linspace(5, 10, N_BATCH, device='cuda')
  print(J_STP)
  JE0 = torch.linspace(0, 10, N_BATCH, device='cuda')
  print(JE0)
  
  J_STP = J_STP.unsqueeze(0).expand(N_BATCH, N_BATCH) 
  J_STP = J_STP.reshape((-1, 1)) # * model.Jab[0, 0]
  # print(J_STP.shape)

  JE0 = JE0.unsqueeze(1).expand(N_BATCH, N_BATCH)
  JE0 = JE0.reshape((-1, 1)) * model.M0
  print(JE0.shape)

  new_Ja0 = model.Ja0.repeat((N_BATCH * N_BATCH, 1, 1))
  print(new_Ja0.shape)

  new_Ja0[:,0] = JE0
  # print(new_Ja0.shape)
#+end_src

#+RESULTS:
: tensor([ 5.0000,  5.2632,  5.5263,  5.7895,  6.0526,  6.3158,  6.5789,  6.8421,
:          7.1053,  7.3684,  7.6316,  7.8947,  8.1579,  8.4211,  8.6842,  8.9474,
:          9.2105,  9.4737,  9.7368, 10.0000], device='cuda:0')
: tensor([ 0.0000,  0.5263,  1.0526,  1.5789,  2.1053,  2.6316,  3.1579,  3.6842,
:          4.2105,  4.7368,  5.2632,  5.7895,  6.3158,  6.8421,  7.3684,  7.8947,
:          8.4211,  8.9474,  9.4737, 10.0000], device='cuda:0')
: torch.Size([400, 1])
: torch.Size([400, 2, 1])

#+begin_src ipython
  model.N_BATCH = N_BATCH * N_BATCH
  model.Ja0 = new_Ja0
  model.J_STP = J_STP

  start = perf_counter()
  rates = model().cpu().detach().numpy()
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print(rates.shape)
#+end_src
#+RESULTS:
: Elapsed (with compilation) = 0h 0m 11s
: (400, 21, 500)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print(m0.shape)

  m0 = m0.reshape(N_BATCH, N_BATCH,-1)
  m1 = m1.reshape(N_BATCH, N_BATCH,-1)
#+end_src

#+RESULTS:
: (400, 21)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].imshow(m0[..., -1], cmap='jet', origin='lower', vmin=0, aspect='auto')
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$J_{E0}$')

  ax[1].imshow(m1[...,-1]/m0[...,-1], cmap='jet', origin='lower', vmin=0, vmax=3, aspect='auto')
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_ylabel('$J_{E0}$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/69caddf66ad4bae1dd8d5ea4ae7cd131d453c4ca.png]]

#+begin_src ipython
  plt.plot(m1[3].T)
  plt.ylabel('$\mathcal{F}_1$')
  plt.xlabel('step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a0341d89d34bf3c6a257bd204c0d723506a3a93b.png]]

#+begin_src ipython
  rates = rates.reshape(N_BATCH, N_BATCH, rates.shape[1], -1)
  print(rates.shape)

  Ja0 = model.Ja0.reshape(N_BATCH, N_BATCH, 2, 1).unsqueeze(-1).cpu().numpy()
  J_STP = model.J_STP.reshape(N_BATCH, N_BATCH, 1).unsqueeze(-1).cpu().numpy()
#+end_src

 #+RESULTS:
 : (20, 20, 21, 500)

#+begin_src ipython
  print(rates.shape)
#+end_src

 #+RESULTS:
 : (20, 20, 21, 500)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  r_max = 30
  
  ax[0].imshow(rates[3, 4].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')
  ax[0].set_title('$ J_{E0} = %.2f \quad J_{EE}= %.2f$' % (Ja0[-1, 4, 0], J_STP[4, -1]))

  ax[1].imshow(rates[3, -1].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')
  ax[1].set_yticks(np.linspace(0, Ne, 5), np.linspace(360, 0, 5).astype(int))
  ax[1].set_title('$ J_{E0} = %.2f \quad J_{EE}= %.2f$' % (Ja0[3, -1, 0], J_STP[3, -1]))

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/94299df2a455c067c51f452c8bbb3358ef4dcbdf.png]]

#+begin_src ipython
  J_STP = torch.linspace(5, 10, N_BATCH, device='cuda')
  print(J_STP[-1])
  JE0 = torch.linspace(0, 10, N_BATCH, device='cuda')
  print(JE0[3])

#+end_src

#+RESULTS:
: tensor(10., device='cuda:0')
: tensor(1.5789, device='cuda:0')

* Rates vs Tau fac

#+begin_src ipython
  model = Network(conf_name, 'None', REPO_ROOT, IF_STP=1, DT=0.001, VERBOSE=0, LIVE_FF_UPDATE=1, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  N_BATCH = 10
  N_INI = 1

  model.TAU_FAC = torch.linspace(0.6, 1.0, N_BATCH, device='cuda')
  model.TAU_FAC = model.TAU_FAC.unsqueeze(0).expand(N_INI, N_BATCH)
  model.TAU_FAC = model.TAU_FAC.reshape((-1,))
  print(model.TAU_FAC.shape)
  
  model.N_BATCH = N_BATCH * N_INI
  rates_fac = model(RET_STP=1).cpu().detach().numpy()
  print(rates_fac.shape)
#+end_src

#+RESULTS:
: torch.Size([10])
: (10, 21, 500)

#+begin_src ipython
  u_list = model.u_list.cpu().numpy()
  x_list = model.x_list.cpu().numpy()
  Aux = u_list * x_list
  print(u_list.shape, x_list.shape)
#+end_src

#+RESULTS:
: (10, 21, 500) (10, 21, 500)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  mean_rates = rates_fac[:,-1].mean(-1)

  ax[0].plot(model.TAU_FAC.cpu().numpy()*1000, mean_rates, 'k')
  ax[0].plot(model.TAU_FAC.cpu().numpy()*1000, rates_fac[:, -1, :10], alpha=.25)
  ax[0].set_xlabel('$\\tau_{fac}$')
  ax[0].set_ylabel('$<Rates>_i$')
  
  ax[1].plot(rates_fac.mean(-1).T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Rates')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/37d6568e10fce167a9fc388484b863493bd139e9.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  mean_Aux = Aux[:,-1].mean(-1)

  ax[0].plot(model.TAU_FAC.cpu().numpy() * 1000, mean_Aux)
  ax[0].set_xlabel('$\\tau_{fac}$')
  ax[0].set_ylabel('$A_{ux}$')

  ax[1].plot(Aux.mean(-1).T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$A_{ux}$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/bcddd465cf0904ed11cdc2a8cc1494a66fe87232.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_fac, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 21)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].plot(model.TAU_FAC.cpu().numpy()*1000, m1[:, -1], 'ok')
  ax[0].set_xlabel('$\\tau_{fac}$')
  ax[0].set_ylabel('$\mathcal{F}_1$')
  
  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a6add8094215f45e08120478f0fcb0e95e9b4b12.png]]

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

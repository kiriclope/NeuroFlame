#+STARTUP: fold
#+TITLE:  Ring Attractor
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session multiring :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../../')

  import torch
  import gc
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.decode import decode_bump
  from src.utils import clear_cache

  REPO_ROOT = '/home/leon/models/NeuroTorch/'
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Parameters

#+begin_src ipython
  conf_name = 'config_ringEI.yml'
#+end_src

#+RESULTS:

* Single Trial
*** Model

#+begin_src ipython
  start = perf_counter()

  model = Network(conf_name, REPO_ROOT, TASK='odr_rand',
                  VERBOSE=0, DEVICE='cuda', seed=0, N_BATCH=1, LIVE_FF_UPDATE=1)
  
  rates = model(RET_FF=1).cpu().numpy()

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 6s
: rates (1, 11, 500)

#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print('m0', m0.shape)
#+end_src

#+RESULTS:
: m0 (1, 11)

*** Dynamics

#+begin_src ipython
  ff_input = model.ff_input.cpu().numpy()
  print(ff_input.shape)

  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))
  
  ax[0].plot(ff_input[0, :, :5])
  ax[0].plot(ff_input[0, :, -5:])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1, 11, 500)
[[file:./.ob-jupyter/5f7616811b509905540eda090c29fe2d78fb2b85.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  r_max = np.max(rates[0])

  ax[0].plot(rates.mean(-1).T)
  ax[0].set_ylabel('Rates')
  ax[0].set_xlabel('Step')

  ax[1].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')
  ax[1].set_yticks(np.linspace(0, Ne, 5), np.linspace(360, 0, 5).astype(int))
  # ax[0][1].colorbar()

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7e809a695917cfe5ab5eae4003471f6af9d97a1c.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))
  
  ax[0].plot((m1.T))
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_1$')

  ax[1].plot((phi.T * 180 / np.pi))
  ax[1].set_yticks(np.linspace(0, 360, 5).astype(int), np.linspace(0, 360, 5).astype(int))
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Phase (°)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/944067944cda8486a03bb268ea0435b5af40d8a6.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Rates vs Jee

#+begin_src ipython
  model = Network(conf_name, REPO_ROOT, IF_STP=1, DT=0.001, VERBOSE=0, LIVE_FF_UPDATE=1, I0=[1, 0])
#+end_src

#+RESULTS:

#+begin_src ipython
  N_BATCH = 10
  model.J_STP = torch.linspace(0, 10, N_BATCH, dtype=torch.float32, device='cuda').unsqueeze(-1)
  
  model.N_BATCH = N_BATCH
  rates_Jee = model(RET_STP=1).cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_Jee, axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 11)

#+begin_src ipython
  u_list = model.u_list.cpu().numpy()
  x_list = model.x_list.cpu().numpy()
  A_ux = u_list * x_list
  print(u_list.shape, x_list.shape)
#+end_src

#+RESULTS:
: (10, 11, 500) (10, 11, 500)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  
  mean_rates = rates_Jee[:,-1].mean(-1)

  ax[0].plot(model.J_STP.cpu(), mean_rates)
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$<Rates>_i$')

  ax[1].plot(rates_Jee.mean(-1).T)
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_ylabel('Rates')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2a84ef9f57dea3f04138c0b056c34f044aa60f9f.png]]

#+begin_src ipython
  print(model.J_STP.shape, m1.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 1]) (10, 11)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  
  ax[0].plot(model.J_STP.cpu()[:, 0], m1[:, -1])
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_1$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('$Step$')
  ax[1].set_ylabel('$\mathcal{F}_1$')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5acce453525ff5a8ce865dc97848fc48d55a3a61.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  mean_rates = A_ux[:,-1].mean(-1) 

  ax[0].plot(model.J_STP.cpu(), mean_rates)
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$A_{ux}$')

  ax[1].plot(A_ux.mean(-1).T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$A_{ux}$')

  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c82daed91941c51135995dd1713a3eee5cec134e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Rates vs Jee vs Ie

#+begin_src ipython
  model = Network(conf_name, REPO_ROOT, IF_STP=1, DT=0.001, VERBOSE=0, LIVE_FF_UPDATE=1, N_BATCH=1, I0=[1, 0])
#+end_src

#+RESULTS:

#+begin_src ipython
  N_BATCH = 20

  J_STP = torch.linspace(5, 10, N_BATCH, device='cuda')
  JE0 = torch.linspace(0, 10, N_BATCH, device='cuda')

  J_STP = J_STP.unsqueeze(0).expand(N_BATCH, N_BATCH)
  print('J_STP', J_STP[1])
  J_STP = J_STP.reshape((-1, 1)) # * model.Jab[0, 0]
  # print(J_STP.shape)

  JE0 = JE0.unsqueeze(1).expand(N_BATCH, N_BATCH)
  print('JE0', JE0[1])
  JE0 = JE0.reshape((-1, 1)) * model.M0
  print(JE0.shape)

  new_Ja0 = model.Ja0.repeat((N_BATCH * N_BATCH, 1, 1))
  print(new_Ja0.shape)

  new_Ja0[:,0] = JE0
  # print(new_Ja0.shape)
#+end_src

#+RESULTS:
: J_STP tensor([ 5.0000,  5.2632,  5.5263,  5.7895,  6.0526,  6.3158,  6.5789,  6.8421,
:          7.1053,  7.3684,  7.6316,  7.8947,  8.1579,  8.4211,  8.6842,  8.9474,
:          9.2105,  9.4737,  9.7368, 10.0000], device='cuda:0')
: JE0 tensor([0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263,
:         0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263, 0.5263,
:         0.5263, 0.5263], device='cuda:0')
: torch.Size([400, 1])
: torch.Size([400, 2, 1])

#+begin_src ipython
  model.N_BATCH = N_BATCH * N_BATCH
  model.Ja0 = new_Ja0
  model.J_STP = J_STP

  start = perf_counter()
  rates = model().cpu().detach().numpy()
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print(rates.shape)
#+end_src
#+RESULTS:
: Elapsed (with compilation) = 0h 0m 11s
: (400, 21, 500)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print(m0.shape)

  m0 = m0.reshape(N_BATCH, N_BATCH,-1)
  m1 = m1.reshape(N_BATCH, N_BATCH,-1)
#+end_src

#+RESULTS:
: (400, 21)

#+begin_src ipython
  J_STP = np.linspace(5, 10, N_BATCH)
  print('Jee', J_STP)
  JE0 = np.linspace(0, 10, N_BATCH)
  print('Je0', JE0)
#+end_src

#+RESULTS:
: Jee [ 5.          5.26315789  5.52631579  5.78947368  6.05263158  6.31578947
:   6.57894737  6.84210526  7.10526316  7.36842105  7.63157895  7.89473684
:   8.15789474  8.42105263  8.68421053  8.94736842  9.21052632  9.47368421
:   9.73684211 10.        ]
: Je0 [ 0.          0.52631579  1.05263158  1.57894737  2.10526316  2.63157895
:   3.15789474  3.68421053  4.21052632  4.73684211  5.26315789  5.78947368
:   6.31578947  6.84210526  7.36842105  7.89473684  8.42105263  8.94736842
:   9.47368421 10.        ]

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].imshow(m0[..., -1], cmap='jet', origin='lower', vmin=0, aspect='auto', extent=[J_STP[0], J_STP[-1], JE0[0], JE0[-1]])
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$J_{E0}$')

  ax[1].imshow(m1[...,-1]/m0[...,-1], cmap='jet', origin='lower', vmin=0, vmax=3, aspect='auto', extent=[J_STP[0], J_STP[-1], JE0[0], JE0[-1]])
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_ylabel('$J_{E0}$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b99c8aa823532dfaf91c2cd952d6062e76967eb0.png]]

#+begin_src ipython
  print(m1.shape)
#+end_src

#+RESULTS:
: (20, 20, 21)

#+begin_src ipython
  J_STP = torch.linspace(5, 10, N_BATCH, device='cuda')
  print(J_STP)
  JE0 = torch.linspace(0, 10, N_BATCH, device='cuda')
  print(JE0)

  J_STP = J_STP.unsqueeze(0).expand(N_BATCH, N_BATCH)
  JE0 = JE0.unsqueeze(1).expand(N_BATCH, N_BATCH)
  
  print('JE0', JE0[3, -1])
  print('J_STP', J_STP[3, -1])
#+end_src
#+RESULTS:
: tensor([ 5.0000,  5.2632,  5.5263,  5.7895,  6.0526,  6.3158,  6.5789,  6.8421,
:          7.1053,  7.3684,  7.6316,  7.8947,  8.1579,  8.4211,  8.6842,  8.9474,
:          9.2105,  9.4737,  9.7368, 10.0000], device='cuda:0')
: tensor([ 0.0000,  0.5263,  1.0526,  1.5789,  2.1053,  2.6316,  3.1579,  3.6842,
:          4.2105,  4.7368,  5.2632,  5.7895,  6.3158,  6.8421,  7.3684,  7.8947,
:          8.4211,  8.9474,  9.4737, 10.0000], device='cuda:0')
: JE0 tensor(1.5789, device='cuda:0')
: J_STP tensor(10., device='cuda:0')

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].plot(m1[3].T)
  ax[0].set_ylabel('$\mathcal{F}_1$')
  ax[0].set_xlabel('step')
  
  ax[1].plot(m1[:, 3].T)
  ax[1].set_ylabel('$\mathcal{F}_1$')
  ax[1].set_xlabel('step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a4190c457a31e2524082f9eade2e4b4f68683ed0.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Test

#+begin_src ipython
  JE0 = torch.linspace(0, 10, N_BATCH, device='cuda')
  print(JE0[3])
  J_STP = torch.linspace(5, 10, N_BATCH, device='cuda')
  print(J_STP[-1])
#+end_src

#+RESULTS:
: tensor(1.5789, device='cuda:0')
: tensor(10., device='cuda:0')

#+begin_src ipython
  model = Network(conf_name, REPO_ROOT, TASK='odr',
                  VERBOSE=0, DEVICE='cuda', seed=0, N_BATCH=10, LIVE_FF_UPDATE=1)

  model.Ja0[:, 0] = JE0[3] * model.M0
  model.J_STP = J_STP[-1]
#+end_src

#+RESULTS:

#+begin_src ipython
  rates = model().cpu().numpy()
#+end_src
#+RESULTS:

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print('m0', m0.shape)
#+end_src

#+RESULTS:
: m0 (10, 21)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2*width, height))

  r_max = 30

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')
  
  ax[1].plot(m1.T)
  ax[1].set_ylabel('m1')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/572cf118703a32f5b2e3d2a66ba4aab006f74b32.png]]

#+begin_src ipython
  model.PHI0
#+end_src

#+RESULTS:
: tensor([[180.,   0.]], device='cuda:0')

* Serial bias

#+begin_src ipython
  model = Network(conf_name, REPO_ROOT, TASK='odr',
                  VERBOSE=0, DEVICE='cuda', seed=0, N_BATCH=1, LIVE_FF_UPDATE=1)
#+end_src

#+RESULTS:

** Simulations

#+begin_src ipython
  N_PHASE = 1024
  print(model.PHI0.shape)

  PHI0 = model.PHI0.unsqueeze(-1).repeat((N_PHASE, 1, 1))

  print(PHI0.shape)
  PHI0[:, -1] = torch.randint(0, 360, (N_PHASE,), device=model.device).unsqueeze(1)
  PHI0[:, 0] = torch.randint(0, 360, (N_PHASE,), device=model.device).unsqueeze(1)
#+end_src

#+RESULTS:
: torch.Size([1, 2])
: torch.Size([1024, 2, 1])

#+begin_src ipython
  model.PHI0 = PHI0
  model.N_BATCH = N_PHASE
  rates = model().cpu().numpy()
  print(rates.shape)
#+end_src

#+RESULTS:
: (1024, 21, 500)

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=-1)
  print(phi.shape)
#+end_src

#+RESULTS:
: (1024, 21)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = np.max(rates[0]) *2
  
  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max, origin='lower')
  ax[0].set_ylabel('Pref. Location (°)')
  ax[0].set_yticks(np.linspace(0, model.Na[0].cpu(), 5), np.linspace(0, 360, 5).astype(int))
  ax[0].set_xlabel('Step')

  ax[1].plot(phi.T * 180 / np.pi)
  ax[1].set_yticks(np.linspace(0, 360, 5).astype(int), np.linspace(0, 360, 5).astype(int))
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5061ef320f78f4c1bb6feefca54179ac1139bc5b.png]]

#+begin_src ipython
  target_loc = model.PHI0[:, -1].cpu().numpy()
  rel_loc = model.PHI0[:, 0].cpu().numpy() - target_loc
  rel_loc = (rel_loc / 180 * np.pi + np.pi) % (2*np.pi) - np.pi
  errors = phi - target_loc * np.pi / 180.0
  errors = (errors + np.pi) % (2*np.pi) - np.pi
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.hist(rel_loc * 180 / np.pi)
  plt.xlabel('Relative Loc (°)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/66621213916df13b5504292ad57ac26035ef7a45.png]]

#+begin_src ipython
  plt.hist(errors[:, -1] * 180/np.pi, bins='auto')
  plt.xlabel('errors (°)')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4db26d028e80ff878d264ec77794244b39ee9412.png]]

** Systematic biases

#+begin_src ipython
  plt.plot(target_loc[:, 0], errors[:,-1] * 180 / np.pi, 'o')
  plt.xlabel('Target Loc. (°)')
  plt.ylabel('Error (°)')

  from scipy.stats import binned_statistic
  stt = binned_statistic(target_loc[:,0], errors[:,-1] * 180/np.pi, statistic='mean', bins=30, range=[0, 360])
  dstt = np.mean(np.diff(stt.bin_edges))
  plt.plot(stt.bin_edges[:-1]+dstt/2,stt.statistic,'r')
  
  plt.axhline(color='k', linestyle=":")
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a51a4909d2b0a014fc904f4255f18635c34f9c48.png]]

** Serial biases

#+begin_src ipython
  plt.plot(rel_loc[:, 0] * 180 / np.pi, errors[:,-1] * 180 / np.pi, 'o')
  plt.xlabel('Rel. Loc. (°)')
  plt.ylabel('Error (°)')
  #plt.ylim([-60, 60])

  from scipy.stats import binned_statistic
  stt = binned_statistic(rel_loc[:,0]*180/np.pi, errors[:,-1]*180/np.pi, statistic='mean', bins=40, range=[-180, 180])
  dstt = np.mean(np.diff(stt.bin_edges))
  plt.plot(stt.bin_edges[:-1]+dstt/2,stt.statistic,'r')

  plt.axhline(color='k', linestyle=":")
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e60a870147e8e60c5bb44b7324933a1ed298149c.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

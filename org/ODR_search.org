#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr_search :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Imports

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"

  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
  pal = [sns.color_palette("tab10")[0], sns.color_palette("tab10")[1]]
#+end_src

#+RESULTS:

** Data

#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates[-1])

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), 1, rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_rates_X(name, X_list, ini_list, phi_list, X_str='Ie'):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        for X in X_list:
          rates = np.load(REPO_ROOT + '/data/simul/%s_%s_%.2f_ini_%d_phi_%d.npy' % (name, X_str, X, ini, phi))
          rates_list.append(rates[-1].astype('float32'))

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), len(X_list), 1, rates.shape[1])
    print(rates_list.shape)
    return rates_list 

#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_X(rates, X_list, X_str='Ie'):
      n_trials, n_phi, n_X, n_times, n_neurons = rates.shape

      # Create indices
      # trials_ind, phi_ind, X_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_X, n_times, n_neurons))

      trials_ind, phi_ind, X_ind, times_ind, neurons_ind = np.meshgrid(
          np.arange(n_trials),
          np.arange(n_phi),
          np.arange(n_X),
          np.arange(n_times),
          np.arange(n_neurons),
          indexing='ij'
      )

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten() * (X_list[-1] - X_list[0]) / (X_list.shape[0] -1)+ X_list[0],
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_X(name, X_list, ini_list, phi_list, X_str='Ie'):
      rates = get_rates_X(name, X_list, ini_list, phi_list, X_str)
      df = get_df_X(rates, X_list, X_str)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())
      return df_code, end_point
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_X(df, X_str='Ie'):
      # Avoid creating new DataFrame by using .loc 
      end_point_index = df[df.time==df.time.iloc[-1]].index
      
      end_point = df.loc[end_point_index].groupby(['trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      end_point[['m0', 'm1', 'phase']] = pd.DataFrame(end_point['rates'].tolist(), index=end_point.index)

      end_point.drop(columns=['rates'], inplace=True)

      print(end_point.head())
      return end_point

  # def get_code_X(df, X_str='Ie'):
  #     # df_code = df.groupby(['time', 'trial', 'phi', X_str] )['rates'].apply(decode_bump).reset_index()
  #     # df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
  #     # df_code = df_code.drop(columns=['rates'])

  #     df_code = []
  #     end_point = df[df.time==df.time.iloc[-1]]
  #     end_point = end_point.drop(columns=['time'])

  #     df_subset = end_point[['trial', 'phi', X_str, 'rates']]
  #     end_point = df_subset.groupby(['trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
  #     end_point[['m0', 'm1', 'phase']] = pd.DataFrame(end_point['rates'].tolist(), index=end_point.index)
  #     end_point = end_point.drop(columns=['rates'])
  #     print(end_point.head())

  #     return df_code, end_point  

#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi

      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi
      
      return cmean
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  import subprocess

  def gpu_memory_usage_percentage():
      total_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.total", "--format=csv,nounits,noheader"])
      used_mem_str = subprocess.check_output(["nvidia-smi", "--query-gpu=memory.used", "--format=csv,nounits,noheader"])
      
      total_mem_list = map(float, total_mem_str.decode('utf-8').strip().split('\n'))
      used_mem_list = map(float, used_mem_str.decode('utf-8').strip().split('\n'))

      mem_percentage_list = [(used_mem / total_mem) * 100.0 for total_mem, used_mem in zip(total_mem_list, used_mem_list)]

      return np.array(mem_percentage_list)

  memory_percentages = gpu_memory_usage_percentage()

  # The memory usage for each GPU is indexed from 0
  for index, percentage in enumerate(memory_percentages):
      print(f'GPU {index} Memory Usage: {percentage:.2f}%')

#+end_src

#+RESULTS:
: 80b7fce8-4bb9-4589-a960-3c39ba24ac1c

#+begin_src ipython
  from time import sleep

  def check_gpu(device):
      memory_percentages = gpu_memory_usage_percentage()
      if device == 'cuda:0':
          if memory_percentages[0] > 75:
              while memory_percentages[1] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:1'
      else:
          if memory_percentages[1] > 75:
              while memory_percentages[0] > 75:
                  memory_percentages = gpu_memory_usage_percentage()
                  sleep(10)
              else:
                  device='cuda:0'
                  
      return device
#+end_src

#+RESULTS:

#+begin_src ipython
  device = check_gpu('cuda:0')
  print(device)
#+end_src

#+RESULTS:
: cuda:0

#+begin_src ipython
  def run_ini_phi(name, ini_list, phi_list):
      device = 'cuda:0'

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')

              model = Network('config_bump.yml', '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, DEVICE=device, PHI0=phi)

              model.run()
              device = check_gpu(device)
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_X(name, X_list, ini_list, phi_list, X_str='Ie', **kwargs):

      device = 'cuda:0'

      df_list = []
      for ini in ini_list:
          for phi in phi_list:
              for X in X_list:

                  print('##########################################')
                  print("trial", ini, "phi", phi, X_str, X)
                  print('##########################################')

                  if X_str=='Ie':
                      model = Network('config_bump.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                                      REPO_ROOT, DEVICE=device, Ja0=[X], PHI0=phi, **kwargs)
                  if X_str=='sig':
                      model = Network('config_bump.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                                      REPO_ROOT, DEVICE=device, SIGMA=[X], PHI0=phi, **kwargs)                      
                  if X_str=='Jab':
                      model = Network('config_bump.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                                      REPO_ROOT, DEVICE=device, Jab=[-X], PHI0=phi, **kwargs)

                  model.run()
                  device = check_gpu(device)

#+end_src

#+RESULTS:

#+begin_src ipython
  from joblib import Parallel, delayed
  import torch
  import os

  import warnings
  warnings.filterwarnings("ignore")

  def run_simulation(conf, name, ini, phi, X, X_str, device, **kwargs):
      REPO_ROOT = "/home/leon/models/NeuroTorch"
      warnings.filterwarnings("ignore")
      torch.cuda.set_device(device)
      
      if X_str=='Ie':
          model = Network(conf + '.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                          REPO_ROOT, DEVICE=device, Ja0=[X], PHI0=phi, REC_LAST_ONLY=1, **kwargs)
      if X_str=='sigma':
          model = Network(conf + '.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                          REPO_ROOT, DEVICE=device, SIGMA=[X], PHI0=phi, REC_LAST_ONLY=1, **kwargs)                      
      if X_str=='Jab':
          model = Network(conf + '.yml', '%s_%s_%.2f_ini_%d_phi_%d' % (name, X_str, X, ini, phi),
                          REPO_ROOT, DEVICE=device, Jab=[-X], PHI0=phi, REC_LAST_ONLY=1, **kwargs)

      model.run()
      del model

      # Optionally clear this process's GPU memory
      torch.cuda.empty_cache()

  def run_simulation_batch(batch_size, conf, name, ini_list, phi_list, X_list, X_str, device, **kwargs):
      torch.cuda.set_device(device)      
      print('batch size', batch_size)

      # Run the simulations in parallel with optimal n_jobs
      Parallel(n_jobs=batch_size)(
          delayed(run_simulation)(conf, name, ini, phi, X, X_str, device=device, **kwargs)
          for ini in ini_list for phi in phi_list for X in X_list)

      torch.cuda.empty_cache()


      print("Done")
#+end_src

#+RESULTS:

* Ie
*** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  name = 'odr'
  conf_name = 'config_bump'

  Ie_list = np.linspace(10, 30, 21)
  # Ie_list = np.linspace(20, 40, 21)

  print('Ie', Ie_list)
  ini_list = np.arange(0, 10)
  # ini_list = [0]
  print('ini', ini_list)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
  print('phi', phi_list)
#+end_src

#+RESULTS:
: Ie [10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23. 24. 25. 26. 27.
:  28. 29. 30.]
: ini [0 1 2 3 4 5 6 7 8 9]
: phi [180]

#+begin_src ipython 
  n_sim = len(Ie_list) * len(ini_list) * len(phi_list) 
  total_seconds = n_sim * .4
  hours = total_seconds // 3600  # number of hours
  total_seconds %= 3600  # remaining seconds after hours are accounted for

  minutes = total_seconds // 60  # number of minutes
  seconds = total_seconds % 60  # remaining seconds after minutes are accounted for
  print('n_sim', n_sim, 'Expected runtime', f"{hours}h {minutes}m {seconds}s")
#+end_src

#+RESULTS:
: n_sim 210 Expected runtime 0.0h 1.0m 24.0s

*** Simulation

#+begin_src ipython
  # run_X(name, Ie_list, ini_list, phi_list, X_str='Ie')
  n_jobs = 64
  run_simulation_batch(n_jobs, conf_name, name, ini_list, phi_list, Ie_list, X_str='Ie', device='cuda:0')
#+end_src

#+RESULTS:
: batch size 64

*** Analysis
***** Load data

#+begin_src ipython
  df = load_data_X(name, Ie_list, ini_list, phi_list)
  end_point = get_code_X(df, 'Ie')
  df_smooth = df.groupby(['trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) 
  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision)
#+end_src

#+RESULTS:
: (10, 8, 21, 1, 1000)
:    trial  phi    Ie        m0        m1     phase
: 0      0    0  10.0  5.375051  6.484777  6.189426
: 1      0    0  11.0  5.686537  7.017700  0.007026
: 2      0    0  12.0  5.948763  7.564489  6.105820
: 3      0    0  13.0  6.279251  7.893697  6.282744
: 4      0    0  14.0  6.558097  8.255310  6.249405

***** Tuning Profile

#+begin_src ipython
  idx_off = Ie_list[3]
  idx_on = Ie_list[18]
  print('parameters', idx_off, idx_on)
  N_E = 1000
#+end_src

#+RESULTS:
: parameters 13.0 28.0

#+begin_src ipython
  df_point = end_point[end_point.Ie==idx_off]
  df_point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[1])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Ie==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Ie==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[0])
  ax[1].plot(point_on, color=pal[1])
  
  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Activity (Hz)')
  ax[1].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/85e7184978307486d1389d34873bf74a18e599cb.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point.precision**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision']**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision']**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5)

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)
  ax1.set_ylim([0.4, 1])

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-30, 30])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cdf600b7539726af4e339f0657455bb8bd246e4a.png]]

#+begin_src ipython

#+end_src

#+RESULTS:


* Jab
*** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  name = 'odr'

  Jab_list = np.linspace(1, 4, 11)
  print('Jab', Jab_list)
  ini_list = np.arange(0, 30)
  print('ini', ini_list)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
  print('phi', phi_list)
#+end_src

#+RESULTS:
: Jab [1.  1.3 1.6 1.9 2.2 2.5 2.8 3.1 3.4 3.7 4. ]
: ini [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
:  24 25 26 27 28 29]
: phi [  0.  45.  90. 135. 180. 225. 270. 315.]

#+begin_src ipython 
  n_sim = len(Jab_list) * len(ini_list) * len(phi_list) 
  total_seconds = n_sim * 2.4
  hours = total_seconds // 3600  # number of hours
  total_seconds %= 3600  # remaining seconds after hours are accounted for

  minutes = total_seconds // 60  # number of minutes
  seconds = total_seconds % 60  # remaining seconds after minutes are accounted for
  print('n_sim', n_sim, 'Expected runtime', f"{hours}h {minutes}m {seconds}s")
#+end_src

#+RESULTS:
: n_sim 2640 Expected runtime 1.0h 45.0m 36.0s

*** Simulation

#+begin_src ipython
  # run_X(name, Jab_list, ini_list, phi_list, X_str='Jab')
  n_jobs = 32
  run_simulation_batch(n_jobs, conf_name, name, ini_list, phi_list, Jab_list, X_str='Jab', device='cuda:0')
#+end_src

#+RESULTS:
: batch size 32

** Analysis
***** Load data

#+begin_src ipython
  df = load_data_X(name, Jab_list, ini_list, phi_list, X_str='Jab')
  end_point = get_code_X(df, 'Jab')
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) 
  end_point['precision'] = end_point.groupby(['phi', 'Jab'], group_keys=False)['phase'].apply(get_precision)
  df_smooth = df.groupby(['trial', 'phi', 'Jab'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:
: (30, 8, 11, 1, 1000)
:    trial  phi  Jab         m0        m1     phase
: 0      0    0  1.0  10.912824  0.037865  2.500863
: 1      0    0  1.3   9.482150  0.120766 -1.582832
: 2      0    0  1.6   8.413241  0.166866 -1.047532
: 3      0    0  1.9   7.481388  0.143830  2.605445
: 4      0    0  2.2   6.744735  0.092075 -1.208422

***** Tuning Profile

#+begin_src ipython
  idx_off = Jab_list[5]
  idx_on = Jab_list[-1]
  print('parameters', idx_off, idx_on)
  N_E = 1000

  point = end_point[end_point.Jab==idx_off]
  point_on = end_point[end_point.Jab==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Jab', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=point['m1']/ point['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[1]) 
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[0])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('Synaptic Strength')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Jab==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[4])
  point = np.roll(point.rates[4], int(( phase / 2.0 / np.pi - 0.5) * point.rates[4].shape[0]))

  point_on = df_smooth[df_smooth.Jab==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[4])
  point_on = np.roll(point_on.rates[4], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[4].shape[0]))

  ax[1].plot(point, color=pal[1])
  ax[1].plot(point_on, color=pal[0])

  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Firing Rate (Hz)')
  ax[1].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning_Jab.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: parameters 2.5 4.0
[[file:./.ob-jupyter/651cd67a8bd68bcce0d114e9beab9d43ad889f19.png]]
:END:

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Jab==idx_off]
  point_on = end_point[end_point.Jab==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Jab', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])

  ax[0].set_xlabel('Synaptic Strength')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Jab', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5)

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)
  # ax1.set_ylim([0.4, 1])

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[1])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[0])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xlim([-30, 30])

  plt.savefig(name + '_diffusion_Jab.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/72342febf0aa42ca2574f48d627638271bcb3938.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

#+STARTUP: fold
#+TITLE: Learning Continuous Manifolds
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session manifold :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import torch
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:

* Helpers
** Connectivity

#+begin_src ipython
  def plot_eigen(W):
      # Compute eigenvalues
      eigenvalues = torch.linalg.eigvals(W).cpu().numpy()

      # Extract real and imaginary parts
      real_parts = eigenvalues.real
      imag_parts = eigenvalues.imag

      # Plotting
      plt.scatter(real_parts, imag_parts)
      plt.xlabel('Real Part')
      plt.ylabel('Imaginary Part')
      plt.axhline(y=0, color='k', linestyle='--')
      plt.axvline(x=0, color='k', linestyle='--')
      
      # plt.grid(True, which='both')
      plt.show()
#+end_src

#+RESULTS:

** Random

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      if GM:
          b = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)
      else:
          u=a
          v=b

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def normalize(v):
      return v / np.linalg.norm(v)

  def project(x, u):
      return x * u
  # return np.dot(x, u) * u

  def sort_by_angle(x, u, v):
      u_hat = normalize(u)
      v_hat = normalize(v)

      x_proj_u = project(x, u_hat)
      x_proj_v = project(x, v_hat)
      # x_proj = x_proj_u + x_proj_v
      theta = np.arctan2(x_proj_v, x_proj_u) + np.pi

      # cos_theta = np.dot(x_proj, u_hat) / np.linalg.norm(x_proj) * u_hat
      # sin_theta = np.dot(x_proj, v_hat) / np.linalg.norm(x_proj) * v_hat
      # theta = np.arctan2(sin_theta, cos_theta)

      # Pair up each element of x with the corresponding angle
      # x_angle_pairs = list(zip(x, theta))

      # Sort based on the angle
      # x_angle_pairs.sort(key=lambda pair: pair[1])

      # Extract the sorted elements
      # sorted_x = [pair[0] for pair in x_angle_pairs]

      return theta
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model):
      ksi = model.PHI0.cpu().detach().numpy()
      print(ksi.shape)

      idx = np.arange(0, len(ksi[0]))
      theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]

#+end_src

#+RESULTS:

* Manifolds
** 1 population

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_1pop.yml', REPO_ROOT, VERBOSE=1, DEVICE='cuda:1', LIVE_FF_UPDATE=0, GAIN=2)
#+end_src

#+RESULTS:
: Na tensor([1000], device='cuda:1', dtype=torch.int32) Ka tensor([1.], device='cuda:1') csumNa tensor([   0, 1000], device='cuda:1')
: Jab [1.0]
: Ja0 [1.0]

*** Training

#+begin_src ipython
  theta_list = torch.linspace(0, 2.0 * torch.pi, model.Na[0] + 1)[:-1]

  Wfb = torch.stack((torch.cos(theta_list), torch.sin(theta_list)))
  Wfb = Wfb.to('cuda:1')
  print('Wfb:', Wfb.shape)

  N_TRAIN = 40
  A_psi = 1.2 # / torch.sqrt(model.Ka[0])
  psi_list = torch.linspace(0, 2.0 * torch.pi, N_TRAIN + 1)[:-1]
  
  z = torch.stack((torch.cos(psi_list), torch.sin(psi_list))).T
  z = A_psi * z.to('cuda:1')

  print('z:', z.shape)

  ff_input = model.Ja0[0] + z @ Wfb
  print('input:', ff_input.shape)

  # need to make the input a sequence
  ff_input = ff_input.unsqueeze(1).expand(ff_input.shape[0], model.N_STEPS, ff_input.shape[-1])
  print('reshaped input:', ff_input.shape)
#+end_src

#+RESULTS:
: Wfb: torch.Size([2, 1000])
: z: torch.Size([40, 2])
: input: torch.Size([40, 1000])
: reshaped input: torch.Size([40, 4440, 1000])

#+begin_src ipython
  rates = model(ff_input, REC_LAST_ONLY=0)
#+end_src

#+RESULTS:
#+begin_example
  times (s) 0.0 rates (Hz) [0.39]
  times (s) 0.09 rates (Hz) [0.39]
  times (s) 0.18 rates (Hz) [0.39]
  times (s) 0.27 rates (Hz) [0.39]
  times (s) 0.36 rates (Hz) [0.39]
  times (s) 0.45 rates (Hz) [0.39]
  times (s) 0.54 rates (Hz) [0.39]
  times (s) 0.63 rates (Hz) [0.39]
  times (s) 0.72 rates (Hz) [0.39]
  times (s) 0.81 rates (Hz) [0.39]
  times (s) 0.9 rates (Hz) [0.39]
  times (s) 0.99 rates (Hz) [0.39]
  times (s) 1.08 rates (Hz) [0.39]
  times (s) 1.17 rates (Hz) [0.39]
  times (s) 1.26 rates (Hz) [0.39]
  times (s) 1.35 rates (Hz) [0.39]
  times (s) 1.44 rates (Hz) [0.39]
  times (s) 1.53 rates (Hz) [0.39]
  times (s) 1.62 rates (Hz) [0.39]
  times (s) 1.71 rates (Hz) [0.39]
  times (s) 1.8 rates (Hz) [0.39]
  times (s) 1.89 rates (Hz) [0.39]
  times (s) 1.98 rates (Hz) [0.39]
  times (s) 2.07 rates (Hz) [0.39]
  times (s) 2.16 rates (Hz) [0.39]
  times (s) 2.25 rates (Hz) [0.39]
  times (s) 2.34 rates (Hz) [0.39]
  times (s) 2.43 rates (Hz) [0.39]
  times (s) 2.52 rates (Hz) [0.39]
  times (s) 2.61 rates (Hz) [0.39]
  times (s) 2.7 rates (Hz) [0.39]
  times (s) 2.79 rates (Hz) [0.39]
  times (s) 2.88 rates (Hz) [0.39]
  times (s) 2.97 rates (Hz) [0.39]
  times (s) 3.06 rates (Hz) [0.39]
  times (s) 3.15 rates (Hz) [0.39]
  times (s) 3.24 rates (Hz) [0.39]
  times (s) 3.33 rates (Hz) [0.39]
  times (s) 3.42 rates (Hz) [0.39]
  times (s) 3.51 rates (Hz) [0.39]
  times (s) 3.6 rates (Hz) [0.39]
  times (s) 3.69 rates (Hz) [0.39]
  times (s) 3.78 rates (Hz) [0.39]
  times (s) 3.87 rates (Hz) [0.39]
  times (s) 3.96 rates (Hz) [0.39]
  times (s) 4.05 rates (Hz) [0.39]
  times (s) 4.14 rates (Hz) [0.39]
  times (s) 4.23 rates (Hz) [0.39]
  times (s) 4.32 rates (Hz) [0.39]
  times (s) 4.41 rates (Hz) [0.39]
  times (s) 4.5 rates (Hz) [0.39]
  times (s) 4.59 rates (Hz) [0.39]
  times (s) 4.68 rates (Hz) [0.39]
  times (s) 4.77 rates (Hz) [0.39]
  times (s) 4.86 rates (Hz) [0.39]
  times (s) 4.95 rates (Hz) [0.39]
  times (s) 5.05 rates (Hz) [0.39]
  times (s) 5.14 rates (Hz) [0.39]
  times (s) 5.23 rates (Hz) [0.39]
  times (s) 5.32 rates (Hz) [0.39]
  times (s) 5.41 rates (Hz) [0.39]
  times (s) 5.5 rates (Hz) [0.39]
  times (s) 5.59 rates (Hz) [0.39]
  times (s) 5.68 rates (Hz) [0.39]
  times (s) 5.77 rates (Hz) [0.39]
  times (s) 5.86 rates (Hz) [0.39]
  times (s) 5.95 rates (Hz) [0.39]
  times (s) 6.04 rates (Hz) [0.39]
  times (s) 6.13 rates (Hz) [0.39]
  times (s) 6.22 rates (Hz) [0.39]
  times (s) 6.31 rates (Hz) [0.39]
  times (s) 6.4 rates (Hz) [0.39]
  times (s) 6.49 rates (Hz) [0.39]
  times (s) 6.58 rates (Hz) [0.39]
  times (s) 6.67 rates (Hz) [0.39]
  times (s) 6.76 rates (Hz) [0.39]
  times (s) 6.85 rates (Hz) [0.39]
  times (s) 6.94 rates (Hz) [0.39]
  times (s) 7.03 rates (Hz) [0.39]
  times (s) 7.12 rates (Hz) [0.39]
  times (s) 7.21 rates (Hz) [0.39]
  times (s) 7.3 rates (Hz) [0.39]
  times (s) 7.39 rates (Hz) [0.39]
  times (s) 7.48 rates (Hz) [0.39]
  times (s) 7.57 rates (Hz) [0.39]
  times (s) 7.66 rates (Hz) [0.39]
  times (s) 7.75 rates (Hz) [0.39]
  times (s) 7.84 rates (Hz) [0.39]
  times (s) 7.93 rates (Hz) [0.39]
  times (s) 8.02 rates (Hz) [0.39]
  times (s) 8.11 rates (Hz) [0.39]
  times (s) 8.2 rates (Hz) [0.39]
  times (s) 8.29 rates (Hz) [0.39]
  times (s) 8.38 rates (Hz) [0.39]
  times (s) 8.47 rates (Hz) [0.39]
  times (s) 8.56 rates (Hz) [0.39]
  times (s) 8.65 rates (Hz) [0.39]
  times (s) 8.74 rates (Hz) [0.39]
  times (s) 8.83 rates (Hz) [0.39]
  times (s) 8.92 rates (Hz) [0.39]
  times (s) 9.01 rates (Hz) [0.39]
  Elapsed (with compilation) = 0.6002884609624743s
#+end_example

#+begin_src ipython
  plt.imshow(rates[-3].cpu().numpy().T, aspect='auto', origin='lower',vmin=0, vmax=2, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ebbee1b366bd49863fa15d66c70b978e85151abd.png]]

#+begin_src ipython
  plt.plot(rates[0,:,:3].cpu().numpy())
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e2effea8a3cea958d8665eab68958ff9c628b429.png]]

#+begin_src ipython
  print(z.shape)
  theta = get_theta(z.T[0].cpu().numpy(), z.T[1].cpu().numpy(), GM=0, IF_NORM=0)
  idx = theta.argsort()
  print(theta.shape)
  rates_ord = rates[..., idx]
  print(rates_ord.shape)
#+end_src

#+RESULTS:
: torch.Size([40, 2])
: (40,)
: torch.Size([40, 101, 40])

#+begin_src ipython
  plt.imshow(rates_ord[0].cpu().numpy().T, aspect='auto', origin='lower', vmax=2, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/06d448cbbdd003898d0acf4497373f5b5cb75975.png]]

#+begin_src ipython
  print('rates:', rates.shape)
#+end_src

#+RESULTS:
: rates: torch.Size([40, 101, 1000])

#+begin_src ipython
  # Wout = Phi @ Cinv @ zbar
  # where Phi are the steady state rates phi(theta_i, psi_m) (N x M)
  # Cinv is the correlations btw rates PhiT @ Phi (MxM)

  Phi = rates[:,-1].T
  Corr = torch.inverse(Phi.T @ Phi)
  print('Phi', Phi.shape, 'Corr', Corr.shape, 'z', z.shape)

  Wout = Phi @ Corr @ z
  print('Wout', Wout.shape)
  
  Wstruct = Wfb.T @ Wout.T
  print('W', Wstruct.shape)
#+end_src

#+RESULTS:
: Phi torch.Size([1000, 40]) Corr torch.Size([40, 40]) z torch.Size([40, 2])
: Wout torch.Size([1000, 2])
: W torch.Size([1000, 1000])

 #+begin_src ipython
  # Cij = model.Wab_T.cpu().detach().numpy()
  Cij = Wstruct.cpu().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.figure(figsize=(12, 5))  # Set the figure size (width, height) in inches

  ax1 = plt.subplot2grid((2, 3), (0, 0), rowspan=2)
  im = ax1.imshow(Cij, cmap='jet', aspect=1)
  ax1.set_xlabel("Presynaptic")
  ax1.set_ylabel("Postsynaptic")

  # Second column, first row
  ax2 = plt.subplot2grid((2, 3), (0, 1))
  Kj = np.sum(Cij, axis=0)  # sum over pres
  ax2.plot(Kj)
  # ax2.set_xticklabels([])
  ax2.set_ylabel("$K_j$")

  # # Second column, second row
  ax3 = plt.subplot2grid((2, 3), (1, 1))
  Ki = np.sum(Cij, axis=1)  # sum over pres
  ax3.plot(Kj)
  ax3.set_ylabel("$K_i$")

  ax4 = plt.subplot2grid((2, 3), (0, 2), rowspan=2)
  diags = []
  for i in range(int(Cij.shape[0] / 2)):
      diags.append(np.trace(Cij, offset=i) / Cij.shape[0])
      diags = np.array(diags)
      ax4.plot(diags)
      ax4.set_xlabel("Neuron #")
      ax4.set_ylabel("$P_{ij}$")

  plt.tight_layout()
  plt.show()

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: ---------------------------------------------------------------------------
: AttributeError                            Traceback (most recent call last)
: Cell In[99], line 24
:      22 diags = []
:      23 for i in range(int(Cij.shape[0] / 2)):
: ---> 24     diags.append(np.trace(Cij, offset=i) / Cij.shape[0])
:      25     diags = np.array(diags)
:      26     ax4.plot(diags)
: 
: AttributeError: 'numpy.ndarray' object has no attribute 'append'
[[file:./.ob-jupyter/b46709e74b8bd2cf4758baf58216aed0e6146683.png]]
:END:

*** Testing

#+begin_src ipython
  model.Wab_T[model.slices[0],model.slices[0]].add_(Wstruct.T);
#+end_src

#+RESULTS:

#+begin_src ipython
  model.TASK = 'None'
  rates = model()
#+end_src

#+RESULTS:
#+begin_example
  Generating ff input
  times (s) 0.0 rates (Hz) [0.12]
  times (s) 0.09 rates (Hz) [0.12]
  times (s) 0.18 rates (Hz) [0.12]
  times (s) 0.27 rates (Hz) [0.12]
  times (s) 0.36 rates (Hz) [0.12]
  times (s) 0.45 rates (Hz) [0.12]
  times (s) 0.54 rates (Hz) [0.12]
  times (s) 0.63 rates (Hz) [0.12]
  times (s) 0.72 rates (Hz) [0.12]
  times (s) 0.81 rates (Hz) [0.12]
  times (s) 0.9 rates (Hz) [0.12]
  times (s) 0.99 rates (Hz) [0.12]
  times (s) 1.08 rates (Hz) [0.12]
  times (s) 1.17 rates (Hz) [0.12]
  times (s) 1.26 rates (Hz) [0.12]
  times (s) 1.35 rates (Hz) [0.12]
  times (s) 1.44 rates (Hz) [0.12]
  times (s) 1.53 rates (Hz) [0.12]
  times (s) 1.62 rates (Hz) [0.12]
  times (s) 1.71 rates (Hz) [0.12]
  times (s) 1.8 rates (Hz) [0.12]
  times (s) 1.89 rates (Hz) [0.12]
  times (s) 1.98 rates (Hz) [0.12]
  times (s) 2.07 rates (Hz) [0.12]
  times (s) 2.16 rates (Hz) [0.12]
  times (s) 2.25 rates (Hz) [0.12]
  times (s) 2.34 rates (Hz) [0.12]
  times (s) 2.43 rates (Hz) [0.12]
  times (s) 2.52 rates (Hz) [0.12]
  times (s) 2.61 rates (Hz) [0.12]
  times (s) 2.7 rates (Hz) [0.12]
  times (s) 2.79 rates (Hz) [0.12]
  times (s) 2.88 rates (Hz) [0.12]
  times (s) 2.97 rates (Hz) [0.12]
  times (s) 3.06 rates (Hz) [0.12]
  times (s) 3.15 rates (Hz) [0.12]
  times (s) 3.24 rates (Hz) [0.12]
  times (s) 3.33 rates (Hz) [0.12]
  times (s) 3.42 rates (Hz) [0.12]
  times (s) 3.51 rates (Hz) [0.12]
  times (s) 3.6 rates (Hz) [0.12]
  times (s) 3.69 rates (Hz) [0.12]
  times (s) 3.78 rates (Hz) [0.12]
  times (s) 3.87 rates (Hz) [0.12]
  times (s) 3.96 rates (Hz) [0.12]
  times (s) 4.05 rates (Hz) [0.12]
  times (s) 4.14 rates (Hz) [0.12]
  times (s) 4.23 rates (Hz) [0.12]
  times (s) 4.32 rates (Hz) [0.12]
  times (s) 4.41 rates (Hz) [0.12]
  times (s) 4.5 rates (Hz) [0.12]
  times (s) 4.59 rates (Hz) [0.12]
  times (s) 4.68 rates (Hz) [0.12]
  times (s) 4.77 rates (Hz) [0.12]
  times (s) 4.86 rates (Hz) [0.12]
  times (s) 4.95 rates (Hz) [0.12]
  times (s) 5.05 rates (Hz) [0.12]
  times (s) 5.14 rates (Hz) [0.12]
  times (s) 5.23 rates (Hz) [0.12]
  times (s) 5.32 rates (Hz) [0.12]
  times (s) 5.41 rates (Hz) [0.12]
  times (s) 5.5 rates (Hz) [0.12]
  times (s) 5.59 rates (Hz) [0.12]
  times (s) 5.68 rates (Hz) [0.12]
  times (s) 5.77 rates (Hz) [0.12]
  times (s) 5.86 rates (Hz) [0.12]
  times (s) 5.95 rates (Hz) [0.12]
  times (s) 6.04 rates (Hz) [0.12]
  times (s) 6.13 rates (Hz) [0.12]
  times (s) 6.22 rates (Hz) [0.12]
  times (s) 6.31 rates (Hz) [0.12]
  times (s) 6.4 rates (Hz) [0.12]
  times (s) 6.49 rates (Hz) [0.12]
  times (s) 6.58 rates (Hz) [0.12]
  times (s) 6.67 rates (Hz) [0.12]
  times (s) 6.76 rates (Hz) [0.12]
  times (s) 6.85 rates (Hz) [0.12]
  times (s) 6.94 rates (Hz) [0.12]
  times (s) 7.03 rates (Hz) [0.12]
  times (s) 7.12 rates (Hz) [0.12]
  times (s) 7.21 rates (Hz) [0.12]
  times (s) 7.3 rates (Hz) [0.12]
  times (s) 7.39 rates (Hz) [0.12]
  times (s) 7.48 rates (Hz) [0.12]
  times (s) 7.57 rates (Hz) [0.12]
  times (s) 7.66 rates (Hz) [0.12]
  times (s) 7.75 rates (Hz) [0.12]
  times (s) 7.84 rates (Hz) [0.12]
  times (s) 7.93 rates (Hz) [0.12]
  times (s) 8.02 rates (Hz) [0.12]
  times (s) 8.11 rates (Hz) [0.12]
  times (s) 8.2 rates (Hz) [0.12]
  times (s) 8.29 rates (Hz) [0.12]
  times (s) 8.38 rates (Hz) [0.12]
  times (s) 8.47 rates (Hz) [0.12]
  times (s) 8.56 rates (Hz) [0.12]
  times (s) 8.65 rates (Hz) [0.12]
  times (s) 8.74 rates (Hz) [0.12]
  times (s) 8.83 rates (Hz) [0.12]
  times (s) 8.92 rates (Hz) [0.12]
  times (s) 9.01 rates (Hz) [0.12]
  Elapsed (with compilation) = 0.5985003653913736s
#+end_example

#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([40, 101, 1000])

#+begin_src ipython
  plt.imshow(rates[0].cpu().numpy().T, aspect='auto', origin='lower', vmax=1, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6008e7b8f9a8901b44f4edd83569c2f7412e52ae.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates.cpu().numpy(), axis=-1)
  print(m0.shape)
#+end_src

#+RESULTS:
: (40, 101)

#+begin_src ipython
  plt.plot(phi.T * 180 / np.pi)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e34c2b1dd67b2b44d0e57286914a3c019cb1de8a.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** 2 populations
*** Training

#+begin_src ipython
  theta_list = torch.linspace(0, 2.0 * torch.pi, model.Na[0] + 1)[:-1]

  Wfb = torch.stack((torch.cos(theta_list), torch.sin(theta_list)))
  Wfb = Wfb.to('cuda:1')
  print('Wfb:', Wfb.shape)

  N_TRAIN = 10
  A_psi = 1.0 # / torch.sqrt(model.Ka[0])
  psi_list = torch.linspace(0, 2.0 * torch.pi, N_TRAIN + 1)[:-1]

  z = torch.stack((torch.cos(psi_list), torch.sin(psi_list))).T
  z = A_psi * z.to('cuda:1')
  
  print('z:', z.shape)

  input_E = model.Ja0[0] * torch.sqrt(model.Ka[0]) * model.M0 + z @ Wfb
  print('input:', input_E.shape)

  # need to make the input a sequence
  input_E = input_E.unsqueeze(1).expand(input_E.shape[0], model.N_STEPS, input_E.shape[-1])
  print('reshaped input:', input_E.shape)

  # need to add inhibitory inputs
  N_I = model.N_NEURON - model.Na[0]
  input_I = torch.ones(input_E.size(0), input_E.size(1), N_I, device='cuda:1') * model.Ja0[1] * torch.sqrt(model.Ka[0]) * model.M0
  print(input_I.shape)

  ff_input = torch.cat((input_E, input_I), dim=-1)
  print('reshaped input:', ff_input.shape)
#+end_src

#+RESULTS:
:RESULTS:
: Wfb: torch.Size([2, 1000])
: z: torch.Size([10, 2])
: input: torch.Size([10, 1000])
: reshaped input: torch.Size([10, 4440, 1000])
# [goto error]
: ---------------------------------------------------------------------------
: IndexError                                Traceback (most recent call last)
: Cell In[24], line 25
:      23 # need to add inhibitory inputs
:      24 N_I = model.N_NEURON - model.Na[0]
: ---> 25 input_I = torch.ones(input_E.size(0), input_E.size(1), N_I, device='cuda:1') * model.Ja0[1] * torch.sqrt(model.Ka[0]) * model.M0
:      26 print(input_I.shape)
:      28 ff_input = torch.cat((input_E, input_I), dim=-1)
: 
: IndexError: index 1 is out of bounds for dimension 0 with size 1
:END:

#+begin_src ipython
  rates = model(ff_input, REC_LAST_ONLY=0)
#+end_src

#+RESULTS:
#+begin_example
  times (s) 0.0 rates (Hz) [-0.0]
  times (s) 0.09 rates (Hz) [0.0]
  times (s) 0.18 rates (Hz) [-0.0]
  times (s) 0.27 rates (Hz) [-0.0]
  times (s) 0.36 rates (Hz) [0.0]
  times (s) 0.45 rates (Hz) [-0.0]
  times (s) 0.54 rates (Hz) [0.0]
  times (s) 0.63 rates (Hz) [0.0]
  times (s) 0.72 rates (Hz) [0.0]
  times (s) 0.81 rates (Hz) [0.0]
  times (s) 0.9 rates (Hz) [0.0]
  times (s) 0.99 rates (Hz) [0.0]
  times (s) 1.08 rates (Hz) [0.0]
  times (s) 1.17 rates (Hz) [0.0]
  times (s) 1.26 rates (Hz) [0.0]
  times (s) 1.35 rates (Hz) [0.0]
  times (s) 1.44 rates (Hz) [0.0]
  times (s) 1.53 rates (Hz) [0.0]
  times (s) 1.62 rates (Hz) [0.0]
  times (s) 1.71 rates (Hz) [0.0]
  times (s) 1.8 rates (Hz) [0.0]
  times (s) 1.89 rates (Hz) [0.0]
  times (s) 1.98 rates (Hz) [0.0]
  times (s) 2.07 rates (Hz) [0.0]
  times (s) 2.16 rates (Hz) [0.0]
  times (s) 2.25 rates (Hz) [0.0]
  times (s) 2.34 rates (Hz) [0.0]
  times (s) 2.43 rates (Hz) [0.0]
  times (s) 2.52 rates (Hz) [0.0]
  times (s) 2.61 rates (Hz) [0.0]
  times (s) 2.7 rates (Hz) [0.0]
  times (s) 2.79 rates (Hz) [0.0]
  times (s) 2.88 rates (Hz) [0.0]
  times (s) 2.97 rates (Hz) [0.0]
  times (s) 3.06 rates (Hz) [0.0]
  times (s) 3.15 rates (Hz) [0.0]
  times (s) 3.24 rates (Hz) [0.0]
  times (s) 3.33 rates (Hz) [0.0]
  times (s) 3.42 rates (Hz) [0.0]
  times (s) 3.51 rates (Hz) [0.0]
  times (s) 3.6 rates (Hz) [0.0]
  times (s) 3.69 rates (Hz) [0.0]
  times (s) 3.78 rates (Hz) [0.0]
  times (s) 3.87 rates (Hz) [0.0]
  times (s) 3.96 rates (Hz) [0.0]
  times (s) 4.05 rates (Hz) [0.0]
  times (s) 4.14 rates (Hz) [0.0]
  times (s) 4.23 rates (Hz) [0.0]
  times (s) 4.32 rates (Hz) [0.0]
  times (s) 4.41 rates (Hz) [0.0]
  times (s) 4.5 rates (Hz) [0.0]
  times (s) 4.59 rates (Hz) [0.0]
  times (s) 4.68 rates (Hz) [0.0]
  times (s) 4.77 rates (Hz) [0.0]
  times (s) 4.86 rates (Hz) [0.0]
  times (s) 4.95 rates (Hz) [0.0]
  times (s) 5.05 rates (Hz) [0.0]
  times (s) 5.14 rates (Hz) [0.0]
  times (s) 5.23 rates (Hz) [0.0]
  times (s) 5.32 rates (Hz) [0.0]
  times (s) 5.41 rates (Hz) [0.0]
  times (s) 5.5 rates (Hz) [0.0]
  times (s) 5.59 rates (Hz) [0.0]
  times (s) 5.68 rates (Hz) [0.0]
  times (s) 5.77 rates (Hz) [0.0]
  times (s) 5.86 rates (Hz) [0.0]
  times (s) 5.95 rates (Hz) [0.0]
  times (s) 6.04 rates (Hz) [0.0]
  times (s) 6.13 rates (Hz) [0.0]
  times (s) 6.22 rates (Hz) [0.0]
  times (s) 6.31 rates (Hz) [0.0]
  times (s) 6.4 rates (Hz) [0.0]
  times (s) 6.49 rates (Hz) [0.0]
  times (s) 6.58 rates (Hz) [0.0]
  times (s) 6.67 rates (Hz) [0.0]
  times (s) 6.76 rates (Hz) [0.0]
  times (s) 6.85 rates (Hz) [0.0]
  times (s) 6.94 rates (Hz) [0.0]
  times (s) 7.03 rates (Hz) [0.0]
  times (s) 7.12 rates (Hz) [0.0]
  times (s) 7.21 rates (Hz) [0.0]
  times (s) 7.3 rates (Hz) [0.0]
  times (s) 7.39 rates (Hz) [0.0]
  times (s) 7.48 rates (Hz) [0.0]
  times (s) 7.57 rates (Hz) [0.0]
  times (s) 7.66 rates (Hz) [0.0]
  times (s) 7.75 rates (Hz) [0.0]
  times (s) 7.84 rates (Hz) [0.0]
  times (s) 7.93 rates (Hz) [0.0]
  times (s) 8.02 rates (Hz) [0.0]
  times (s) 8.11 rates (Hz) [0.0]
  times (s) 8.2 rates (Hz) [0.0]
  times (s) 8.29 rates (Hz) [0.0]
  times (s) 8.38 rates (Hz) [0.0]
  times (s) 8.47 rates (Hz) [0.0]
  times (s) 8.56 rates (Hz) [0.0]
  times (s) 8.65 rates (Hz) [0.0]
  times (s) 8.74 rates (Hz) [0.0]
  times (s) 8.83 rates (Hz) [0.0]
  times (s) 8.92 rates (Hz) [0.0]
  times (s) 9.01 rates (Hz) [0.0]
  Elapsed (with compilation) = 0.5993012236431241s
#+end_example

#+begin_src ipython
  plt.imshow(rates[-3].cpu().numpy().T, aspect='auto', origin='lower', vmax=10, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0ab8997c8cd2bfc71c612687f1da7c77678eaa47.png]]

#+begin_src ipython
  print(z.shape)
  theta = get_theta(z.T[0].cpu().numpy(), z.T[1].cpu().numpy(), GM=0, IF_NORM=0)
  idx = theta.argsort()
  print(theta.shape)
  rates_ord = rates[..., idx]
  print(rates_ord.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 2])
: (10,)
: torch.Size([40, 101, 10])

#+begin_src ipython
  plt.imshow(rates_ord[0].cpu().numpy().T, aspect='auto', origin='lower', vmax=10, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/bb5df41a9c3097b7404d79b3d903ba1af3cecf47.png]]

#+begin_src ipython
  print('rates:', rates.shape)
#+end_src

#+RESULTS:
: rates: torch.Size([40, 101, 1000])

#+begin_src ipython
  # Wout = Phi @ Cinv @ zbar
  # where Phi are the steady state rates phi(theta_i, psi_m) (N x M)
  # Cinv is the correlations btw rates PhiT @ Phi (MxM)

  Phi = rates[:,-1].T
  Corr = Phi.T @ Phi
  print('Phi', Phi.shape, 'Corr', Corr.shape, 'z', z.shape)

  Wout = Phi @ Corr @ z
  print('Wout', Wout.shape)
  
  Wstruct = Wfb.T @ Wout.T
  print('W', Wstruct.shape)
#+end_src

#+RESULTS:
:RESULTS:
: Phi torch.Size([1000, 40]) Corr torch.Size([40, 40]) z torch.Size([10, 2])
# [goto error]
: ---------------------------------------------------------------------------
: RuntimeError                              Traceback (most recent call last)
: Cell In[30], line 9
:       6 Corr = Phi.T @ Phi
:       7 print('Phi', Phi.shape, 'Corr', Corr.shape, 'z', z.shape)
: ----> 9 Wout = Phi @ Corr @ z
:      10 print('Wout', Wout.shape)
:      12 Wstruct = Wfb.T @ Wout.T
: 
: RuntimeError: mat1 and mat2 shapes cannot be multiplied (1000x40 and 10x2)
:END:

#+begin_src ipython
  Cij = Wstruct.cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython
  plt.figure(figsize=(12, 5))  # Set the figure size (width, height) in inches

  ax1 = plt.subplot2grid((2, 3), (0, 0), rowspan=2)
  im = ax1.imshow(Cij, cmap='jet', aspect=1)
  ax1.set_xlabel("Presynaptic")
  ax1.set_ylabel("Postsynaptic")

  # Second column, first row
  ax2 = plt.subplot2grid((2, 3), (0, 1))
  Kj = np.sum(Cij, axis=0)  # sum over pres
  ax2.plot(Kj)
  # ax2.set_xticklabels([])
  ax2.set_ylabel("$K_j$")

  # # Second column, second row
  ax3 = plt.subplot2grid((2, 3), (1, 1))
  Ki = np.sum(Cij, axis=1)  # sum over pres
  ax3.plot(Kj)
  ax3.set_ylabel("$K_i$")

  ax4 = plt.subplot2grid((2, 3), (0, 2), rowspan=2)
  diags = []
  for i in range(int(Cij.shape[0] / 2)):
      diags.append(np.trace(Cij, offset=i) / Cij.shape[0])
  diags = np.array(diags)
  ax4.plot(diags)
  ax4.set_xlabel("Neuron #")
  ax4.set_ylabel("$P_{ij}$")

  plt.tight_layout()
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/98a5dac5c29bd0547a2805c490bf19985d55ff77.png]]

*** Testing

#+begin_src ipython
  model.Wab_T[model.slices[0],model.slices[0]].add_(Wstruct.T);
#+end_src

#+RESULTS:

#+begin_src ipython
  rates = model()
#+end_src

#+RESULTS:
#+begin_example
  Generating ff input
  times (s) 0.0 rates (Hz) [0.0]
  times (s) 0.09 rates (Hz) [0.0]
  times (s) 0.18 rates (Hz) [0.0]
  times (s) 0.27 rates (Hz) [0.0]
  times (s) 0.36 rates (Hz) [0.0]
  times (s) 0.45 rates (Hz) [0.0]
  times (s) 0.54 rates (Hz) [0.0]
  times (s) 0.63 rates (Hz) [0.0]
  times (s) 0.72 rates (Hz) [0.0]
  times (s) 0.81 rates (Hz) [0.0]
  times (s) 0.9 rates (Hz) [0.0]
  times (s) 0.99 rates (Hz) [0.0]
  times (s) 1.08 rates (Hz) [0.0]
  times (s) 1.17 rates (Hz) [0.0]
  times (s) 1.26 rates (Hz) [0.0]
  times (s) 1.35 rates (Hz) [0.0]
  times (s) 1.44 rates (Hz) [0.0]
  times (s) 1.53 rates (Hz) [0.0]
  times (s) 1.62 rates (Hz) [0.0]
  times (s) 1.71 rates (Hz) [0.0]
  times (s) 1.8 rates (Hz) [0.0]
  times (s) 1.89 rates (Hz) [0.0]
  times (s) 1.98 rates (Hz) [0.0]
  times (s) 2.07 rates (Hz) [0.0]
  times (s) 2.16 rates (Hz) [0.0]
  times (s) 2.25 rates (Hz) [0.0]
  times (s) 2.34 rates (Hz) [0.0]
  times (s) 2.43 rates (Hz) [0.0]
  times (s) 2.52 rates (Hz) [0.0]
  times (s) 2.61 rates (Hz) [0.0]
  times (s) 2.7 rates (Hz) [0.0]
  times (s) 2.79 rates (Hz) [0.0]
  times (s) 2.88 rates (Hz) [0.0]
  times (s) 2.97 rates (Hz) [0.0]
  times (s) 3.06 rates (Hz) [0.0]
  times (s) 3.15 rates (Hz) [0.0]
  times (s) 3.24 rates (Hz) [0.0]
  times (s) 3.33 rates (Hz) [0.0]
  times (s) 3.42 rates (Hz) [0.0]
  times (s) 3.51 rates (Hz) [0.0]
  times (s) 3.6 rates (Hz) [0.0]
  times (s) 3.69 rates (Hz) [0.0]
  times (s) 3.78 rates (Hz) [0.0]
  times (s) 3.87 rates (Hz) [0.0]
  times (s) 3.96 rates (Hz) [0.0]
  times (s) 4.05 rates (Hz) [0.0]
  times (s) 4.14 rates (Hz) [0.0]
  times (s) 4.23 rates (Hz) [0.0]
  times (s) 4.32 rates (Hz) [0.0]
  times (s) 4.41 rates (Hz) [0.0]
  times (s) 4.5 rates (Hz) [0.0]
  times (s) 4.59 rates (Hz) [0.0]
  times (s) 4.68 rates (Hz) [0.0]
  times (s) 4.77 rates (Hz) [0.0]
  times (s) 4.86 rates (Hz) [0.0]
  times (s) 4.95 rates (Hz) [0.0]
  times (s) 5.05 rates (Hz) [0.0]
  times (s) 5.14 rates (Hz) [0.0]
  times (s) 5.23 rates (Hz) [0.0]
  times (s) 5.32 rates (Hz) [0.0]
  times (s) 5.41 rates (Hz) [0.0]
  times (s) 5.5 rates (Hz) [0.0]
  times (s) 5.59 rates (Hz) [0.0]
  times (s) 5.68 rates (Hz) [0.0]
  times (s) 5.77 rates (Hz) [0.0]
  times (s) 5.86 rates (Hz) [0.0]
  times (s) 5.95 rates (Hz) [0.0]
  times (s) 6.04 rates (Hz) [0.0]
  times (s) 6.13 rates (Hz) [0.0]
  times (s) 6.22 rates (Hz) [0.0]
  times (s) 6.31 rates (Hz) [0.0]
  times (s) 6.4 rates (Hz) [0.0]
  times (s) 6.49 rates (Hz) [0.0]
  times (s) 6.58 rates (Hz) [0.0]
  times (s) 6.67 rates (Hz) [0.0]
  times (s) 6.76 rates (Hz) [0.0]
  times (s) 6.85 rates (Hz) [0.0]
  times (s) 6.94 rates (Hz) [0.0]
  times (s) 7.03 rates (Hz) [0.0]
  times (s) 7.12 rates (Hz) [0.0]
  times (s) 7.21 rates (Hz) [0.0]
  times (s) 7.3 rates (Hz) [0.0]
  times (s) 7.39 rates (Hz) [0.0]
  times (s) 7.48 rates (Hz) [0.0]
  times (s) 7.57 rates (Hz) [0.0]
  times (s) 7.66 rates (Hz) [0.0]
  times (s) 7.75 rates (Hz) [0.0]
  times (s) 7.84 rates (Hz) [0.0]
  times (s) 7.93 rates (Hz) [0.0]
  times (s) 8.02 rates (Hz) [0.0]
  times (s) 8.11 rates (Hz) [0.0]
  times (s) 8.2 rates (Hz) [0.0]
  times (s) 8.29 rates (Hz) [0.0]
  times (s) 8.38 rates (Hz) [0.0]
  times (s) 8.47 rates (Hz) [0.0]
  times (s) 8.56 rates (Hz) [0.0]
  times (s) 8.65 rates (Hz) [0.0]
  times (s) 8.74 rates (Hz) [0.0]
  times (s) 8.83 rates (Hz) [0.0]
  times (s) 8.92 rates (Hz) [0.0]
  times (s) 9.01 rates (Hz) [0.0]
  Elapsed (with compilation) = 0.605661160312593s
#+end_example

#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([40, 101, 1000])

#+begin_src ipython
  plt.imshow(rates[0].cpu().numpy().T, aspect='auto', origin='lower', vmax=10, cmap='jet')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/82f8f8003c17b61881c2af6a63c551a369046d3e.png]]

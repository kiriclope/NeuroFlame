#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr_single :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
#+begin_src ipython
def convert_seconds(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_X(rates, X_list, X_str='Ie'):
      n_times, n_trials, n_phi, n_X, n_neurons = rates.shape

      time_ind, trials_ind, phi_ind, X_ind, neurons_ind = np.meshgrid(
          np.arange(n_times),
          np.arange(n_trials),
          np.arange(n_phi),
          np.arange(n_X),
          np.arange(n_neurons),
          indexing='ij'
      )

      # Construct DataFrame
      df = pd.DataFrame({
          'time': time_ind.flatten(),
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten() * np.round((X_list[-1] - X_list[0]) / (X_list.shape[0] -1), 5) + X_list[0],
          'neuron': neurons_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_X(df, X_str='Ie'):

      df_code = df.groupby(['time', 'trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code.drop(columns=['rates'], inplace=True)
      
      return df_code
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_accuracy(x):
      x[x > np.pi] -= 2*np.pi
      return x.abs()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) 
      cmean[cmean > np.pi] -= 2*np.pi
      cmean[cmean < -np.pi] += 2*np.pi
      cmean[cmean>np.pi/6] = np.nan
      cmean[cmean<-np.pi/6] = np.nan
      return cmean
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Continuous ODR
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
  name = "odr"
#+end_src

#+RESULTS:

** Single

#+begin_src ipython
  start = perf_counter()
  name = "odr_single"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', PHI0=180, KAPPA=[0.45], Ja0=[10], REC_LAST_ONLY=0)

  ini_list = np.arange(0, 10)
  rates = model.run(ini_list=ini_list)

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates_off.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 1.3473523049615324s
: rates (20, 10, 1000)

#+begin_src ipython
  rates = rates[..., np.newaxis, np.newaxis]
  print(rates.shape)
#+end_src

#+RESULTS:
: (20, 10, 1000, 1, 1)

#+begin_src ipython 
  df = get_df_X(rates, np.array([0,1]), X_str='Ie')
  print(df.head())
  # df_smooth = df.groupby(['trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:
:    time  trial  phi   Ie  neuron         rates
: 0     0      0    0  0.0       0  2.313770e-08
: 1     0      0    1  0.0       0  2.992987e-03
: 2     0      0    2  0.0       0  1.167576e-03
: 3     0      0    3  0.0       0  1.333970e-03
: 4     0      0    4  0.0       0  3.000000e-03

#+begin_src ipython  
  df_code = get_code_X(df, 'Ie')
  print(df_code.head())
  df_code.phase *= 180/np.pi
#+end_src

#+RESULTS:
:    time  trial  phi   Ie            m0            m1  phase
: 0     0      0    0  0.0  2.313770e-08  4.627540e-08    0.0
: 1     0      0    1  0.0  2.992987e-03  5.985974e-03    0.0
: 2     0      0    2  0.0  1.167576e-03  2.335151e-03    0.0
: 3     0      0    3  0.0  1.333970e-03  2.667940e-03    0.0
: 4     0      0    4  0.0  3.000000e-03  6.000000e-03    0.0

#+begin_src ipython
  sns.lineplot(df_code, x='time', y='phase', hue='trial', legend=False, alpha=0.25)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/951afe83514befc03a5f22e3dc5cfac803d7a7f1.png]]

** FF Inputs
*** Simulation

#+begin_src ipython
  start = perf_counter()  

  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', KAPPA=[0.4], REC_LAST_ONLY=1)

  ini_list = np.arange(0, 125)
  Ja0_list = np.linspace(10, 30, 21)
  phi_list = np.linspace(0, 315, 8)

  rates = model.run(ini_list, phi_list, Ja0_list)
  del model 
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  print('rates', rates.shape)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[448], line 12[0m
: [1;32m     10[0m [38;5;28;01mdel[39;00m model 
: [1;32m     11[0m end [38;5;241m=[39m perf_counter()
: [0;32m---> 12[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;124mElapsed (with compilation) = [39m[38;5;132;01m{}[39;00m[38;5;124ms[39m[38;5;124m"[39m, [38;5;28;43mself[39;49m[38;5;241m.[39mformat((end [38;5;241m-[39m start)))
: [1;32m     14[0m [38;5;28mprint[39m([38;5;124m'[39m[38;5;124mrates[39m[38;5;124m'[39m, rates[38;5;241m.[39mshape)
: 
: [0;31mNameError[0m: name 'self' is not defined
:END:

#+begin_src ipython
  rates = rates.reshape(rates.shape[0], len(ini_list), len(phi_list), len(Ja0_list), -1)
  print(rates.shape)
#+end_src

#+RESULTS:
: (1, 125, 8, 21, 1000)

*** Analysis
**** Load data

#+begin_src ipython
  df = get_df_X(rates, Ja0_list, X_str='Ie')
  print(df.head())
#+end_src

#+RESULTS:
:    time  trial  phi    Ie  neuron      rates
: 0     0      0    0  10.0       0   9.067467
: 1     0      0    0  10.0       1  10.098180
: 2     0      0    0  10.0       2  10.349462
: 3     0      0    0  10.0       3   7.906910
: 4     0      0    0  10.0       4   7.308694

#+begin_src ipython
  end_point = get_code_X(df, 'Ie')
  print(df_code.head())
#+end_src

#+RESULTS:
:    time  trial  phi    Ie        m0        m1     phase
: 0     0      0    0  10.0  4.745538  3.379152 -0.226161
: 1     0      0    0  11.0  5.059214  4.026405  0.004523
: 2     0      0    0  12.0  5.332169  4.750391  0.008700
: 3     0      0    0  13.0  5.617003  5.087596 -0.344964
: 4     0      0    0  14.0  5.893910  5.436195 -0.334664

#+begin_src ipython
  sns.histplot(df_code, x=df_code.phase[df_code.Ie==20]*180/np.pi, bins=100)
  plt.xticks([-180, -90, 0, 90, 180])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0bf33f32e33311eed1224020af6ae307cd0042cd.png]]

#+begin_src ipython 
  # df = get_df_X(rates, Ja0_list, X_str='Ie')

  df_smooth = df.groupby(['trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()

  # end_point = get_code_X(df, 'Ie')

  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision) * 180 / np.pi

  end_point['phase'] *= 180 / np.pi
#+end_src

#+RESULTS:

**** Tuning Profile

#+begin_src ipython
  idx_off = Ja0_list[6]
  idx_on = Ja0_list[-7]
  print('parameters', idx_off, idx_on)
  N_E = 1000
#+end_src

#+RESULTS:
: parameters 16.0 24.0

#+begin_src ipython
  df_point = end_point[end_point.Ie==idx_off]
  df_point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[1])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Ie==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Ie==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[0])
  ax[1].plot(point_on, color=pal[1])

  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Activity (Hz)')
  ax[1].set_xlabel('Pref. Location (Â°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/9fcc2a00f5ebf27a2eb9c34edb00f7291d86999b.png]]

**** Diffusion

#+begin_src ipython
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point.precision**2 / 3.5, legend=False, ax=ax[0], lw=5)

  sns.lineplot(x=idx_off, y=point['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (deg$^2$/s)')
  ax[0].set_ylim([10, 60])

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, color='k', alpha=0.5, lw=5)

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[1])

  ax1.set_ylabel('Amplitude, $\mathcal{F}_1 / \mathcal{F}_0$')
  # ax1.set_ylabel('Bump Amplitude')

  ax1.spines['right'].set_visible(True)
  ax1.set_ylim([0.4, 1])

  bins = 'auto'
  sns.histplot(data=point, x=point['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Corrected Endpoint (Â°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xlim([-30, 30])
  ax[1].set_ylim([0, 0.06])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/9f3e001f6d662aefd627b819784c24bb627bdc25.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Distracted ODR
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
  name = "dist_odr"
#+end_src

#+RESULTS:

** Single

#+begin_src ipython
  I1 = [0.0, 0.0]
  PHI1 = 180+90
  SIGMA1 = 0.25
#+end_src

#+RESULTS:

#+begin_src ipython
  start = perf_counter()
  name = "odr_off"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', KAPPA=[0.4], Ja0=[10], REC_LAST_ONLY=0, N_BATCH=1, VAR_FF=[30000])
  rates_off = model.run()[:,0]
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates_off.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 1.345799749949947s
: rates (20, 1000)

#+begin_src ipython
  start = perf_counter()
  name = "odr_on"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', KAPPA=[0.4], Ja0=[30], REC_LAST_ONLY=0, N_BATCH=1, VAR_FF=[30000])
  rates_on = model.run()[:,0]
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  print('rates', rates_on.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 1.3264346839860082s
: rates (20, 1000)

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])

  times = np.linspace(0, 5, rates_off.shape[0])  
  # times = np.arange(0, 5, .1)

  N_E = 1000
  r_min = 0
  r_max = 1.5 * np.max((np.mean(rates_off), np.mean(rates_on)))
  r_max=15

  im = ax[0].imshow(rates_off.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_ylabel('Prefered Location (Â°)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[0].set_title('Control')
  ax[0].set_xlim([0, 5])

  ax[0].axvline(1, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(1.5, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(2.5, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(3, 0, 1000, ls='--', color='w', lw=2)

  im = ax[1].imshow(rates_on.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  ax[1].set_xlim([0, 5])

  ax[1].axvline(1, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(1.5, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(2.5, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(3, 0, 1000, ls='--', color='w', lw=2)

  # ax[1].set_ylabel('Prefered Location (Â°)')
  # ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_yticks([])
  ax[1].set_title('NB Stimulation')

  cbar = plt.colorbar(im, ax=ax[1])
  cbar.set_label("Activity (Hz)")
  cbar.set_ticks([0, 5, 10, 15])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/285f39185fcf71f900471a22b99ab0e2052119fd.png]]

** Batch

#+begin_src ipython
  I1 = [0.5, 0.0] # mean, variance this truncated gaussian>0
  SIGMA1 = 1.0 # tuning of the distractor
#+end_src

#+RESULTS:

#+begin_src ipython
  start = perf_counter()  
  
  ini_list = np.arange(0, 1000) # list of initializations
  phi_list = np.array([-45, -90, -180, 45, 90, 180]) # list of distractors
  # phi_list = np.array([45, 90, 180])
  Ja0_list = np.array([10, 30]) # list of FF input strength

  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', PHI0=0, KAPPA=[0.4], I1=I1, SIGMA1=SIGMA1)
  rates_dist = model.run(ini_list, phi_list, Ja0_list, IF_DIST=1)

  del model 
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  print('rates', rates_dist.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 22s
: rates (1, 12000, 1000)

#+begin_src ipython
  rates_dist = rates_dist.reshape(1, len(ini_list), len(phi_list), len(Ja0_list), -1)
  print(rates_dist.shape)
#+end_src

#+RESULTS:
: (1, 1000, 6, 2, 1000)

#+begin_src ipython
  df = get_df_X(rates_dist, Ja0_list, X_str='Ie')

  end_point = get_code_X(df, 'Ie')

  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision) * 180 / np.pi

  # end_point[end_point.phase.abs()> 30 * np.pi /180] = np.nan

  end_point['accuracy'] = end_point.phase * 180 / np.pi
  end_point['phase'] *= 180 / np.pi

  end_point.accuracy[end_point.phi==3] *= -1
  end_point.accuracy[end_point.phi==4] *= -1
  end_point.accuracy[end_point.phi==5] *= -1
  # end_point.phi[end_point.phi==6] = 3

  end_point.phi[end_point.phi==3] = 0
  end_point.phi[end_point.phi==4] = 1
  end_point.phi[end_point.phi==5] = 2
  # end_point.phi[end_point.phi==6] = 3

  # end_point[end_point.accuracy.abs()>30] = np.nan
  # end_point[end_point.precision.abs()>30] = np.nan
#+end_src

#+RESULTS:

#+begin_src ipython
  idx_off = Ja0_list[0]
  idx_on = Ja0_list[1]

  point = end_point[end_point.Ie==idx_off]
  point = point[point.phi==0]

  point_on = end_point[end_point.Ie==idx_off]
  point_on = point_on[point_on.phi==1]

  fig, ax = plt.subplots(1, 3, figsize=(2.5 * width, height))
  
  sns.histplot(x=point['phase'], bins=100, ax=ax[0])
  sns.histplot(x=point_on['phase'], bins=100, ax=ax[0])

  sns.histplot(x=point['accuracy'], bins=100, ax=ax[1])
  sns.histplot(x=point_on['accuracy'], bins=100, ax=ax[1])

  sns.histplot(x=point['precision'], bins=100, ax=ax[2])
  sns.histplot(x=point_on['precision'], bins=100, ax=ax[2])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e2390313bf133b9d02066a89779560b06bd68a93.png]]

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=(2 * width, height))
  
  sns.lineplot(end_point, x='phi', y=end_point['accuracy'], marker='o', ax=ax[0], err_style='bars', hue='Ie', legend=False, palette=pal, ms=12)

  ax[0].set_xticks([0, 1, 2], [45, 90, 180,])
  ax[0].set_xlabel('Distance S1/S2 (Â°)')
  ax[0].set_ylabel('Response Bias (Â°)')

  sns.lineplot(end_point, x='phi', y=end_point['precision'].abs(), marker='o', ax=ax[1], err_style='bars', hue='Ie', palette=pal, ms=12)
  ax[1].set_xticks([0, 1, 2], [45, 90, 180])
  ax[1].set_xlabel('Distance S1/S2 (Â°)')
  ax[1].set_ylabel('Response STD (Â°)')
  ax[1].legend(fontsize='small', frameon=False, labels=['NB off', 'NB on'])

  plt.savefig('distance.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d3d931dd3c5f7b6530d975baeaa8bd0f61e030d3.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Quenched ODR
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
  name = "quenched_odr"
#+end_src

#+RESULTS:

** Time

#+begin_src ipython
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  print(phi_list)
#+end_src

#+RESULTS:
: [  0.  45.  90. 135. 180. 225. 270. 315.]

#+begin_src ipython
  start = perf_counter()  

  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, KAPPA=[0.4], SIGMA=[0.0], Ja0=[10], REC_LAST_ONLY=0)
  rates = model.run(ini_list=ini_list, phi_list=phi_list)

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 1s
: rates (20, 80, 1000)

#+begin_src ipython
  start = perf_counter()  

  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, KAPPA=[0.4], SIGMA=[0.25], Ja0=[10], REC_LAST_ONLY=0, SEED=0)
  rates_dist = model.run(ini_list=ini_list, phi_list=phi_list)

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  print('rates', rates_dist.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 1s
: rates (20, 80, 1000)

#+begin_src ipython
  rates = rates.reshape(rates.shape[0], len(ini_list), len(phi_list), -1)
  print(rates.shape)

  rates_dist = rates_dist.reshape(rates_dist.shape[0], len(ini_list), len(phi_list), -1)
  print(rates_dist.shape)
#+end_src

#+RESULTS:
: (20, 10, 8, 1000)
: (20, 10, 8, 1000)

#+begin_src ipython
  m0, m1, phase = decode_bump(rates)
  m0, m1, phase2 = decode_bump(rates_dist)
  print(phase.shape)
#+end_src

#+RESULTS:
: (20, 10, 8)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height]) 
  times = np.linspace(0, 5, phase.shape[0])  
  for i in range(8):
      ax[0].plot(times, phase[:,  i, :] * 180 / np.pi + 180, alpha=.1, color=sns.color_palette("tab10")[2])

  ax[0].set_xlabel("Time (s)")
  ax[0].set_ylabel("Bump Center (Â°)")
  ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_xlim([1, 5])

  for i in range(8):
      ax[1].plot(times, phase2[:, i, :] * 180 / np.pi + 180, alpha=.1, color=sns.color_palette("tab10")[3])
  ax[1].set_xlabel("Time (s)")
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  ax[1].set_xlim([1, 5])
  ax[1].set_ylabel("Bump Center (Â°)")
  ax[1].set_yticks([0, 90, 180, 270, 360])

  plt.savefig('phase_heter.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/931b17dab72027db84fac1494dc420be20f2fe99.png]]

** Heterogeneity strength
*** helpers

#+begin_src ipython
  def run_X(conf_name, name, X_list, ini_list, phi_list, X_str='Jab', device = 'cuda:0', **kwargs):
      start = perf_counter()

      rates_sigma = []
      for X in X_list:
          rates = []
          for real in real_list:
              model = Network(conf_name, '%s_%s_%.2f' % (name, X_str, X),
                              REPO_ROOT, DEVICE=device, SIGMA=[X], SEED=0, **kwargs)

              rates.append(model.run(ini_list=ini_list, phi_list=phi_list))
              del model
          rates_sigma.append(rates)

      end = perf_counter()

      print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))      

      return np.array(rates_sigma)
#+end_src

#+RESULTS:
*** parameters

#+begin_src ipython
  sigma_list = np.linspace(0, 1, 11)
  real_list = np.arange(0, 25)
  
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)

  print(sigma_list)
 #+end_src

#+RESULTS:
: [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]

*** simulation

#+begin_src ipython
  rates = run_X(conf_name, name, sigma_list, ini_list, phi_list, X_str='sigma', device='cuda')
  print(rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 6m 28s
: (11, 25, 1, 80, 1000)

#+begin_src ipython
  rates = np.moveaxis(rates, 0, -2)
  rates = rates[:,0]
  print(rates.shape)
#+end_src

#+RESULTS:
: (100, 21, 1, 1000)

#+begin_src ipython  
  rates = rates.reshape(rates.shape[0], len(ini_list), len(phi_list), len(sigma_list), -1)
  print(rates.shape)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mValueError[0m                                Traceback (most recent call last)
: Cell [0;32mIn[746], line 1[0m
: [0;32m----> 1[0m rates [38;5;241m=[39m [43mrates[49m[38;5;241;43m.[39;49m[43mreshape[49m[43m([49m[43mrates[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43m [49m[38;5;28;43mlen[39;49m[43m([49m[43mini_list[49m[43m)[49m[43m,[49m[43m [49m[38;5;28;43mlen[39;49m[43m([49m[43mphi_list[49m[43m)[49m[43m,[49m[43m [49m[38;5;28;43mlen[39;49m[43m([49m[43msigma_list[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m)[49m
: [1;32m      2[0m [38;5;28mprint[39m(rates[38;5;241m.[39mshape)
: 
: [0;31mValueError[0m: cannot reshape array of size 2100000 into shape (100,100,8,11,newaxis)
:END:

*** Analysis
***** Load data

#+begin_src ipython
  df = get_df_X(rates, sigma_list, X_str='sigma')
  end_point = get_code_X(df, 'sigma')
  df_smooth = df.groupby(['time', 'trial', 'phi', 'sigma'])['rates'].apply(circcvl).reset_index()
  
  end_point['precision'] = end_point.groupby(['time', 'phi', 'sigma'], group_keys=False)['phase'].apply(get_precision) * 180 / np.pi
#+end_src

#+RESULTS:

***** Tuning Profile

#+begin_src ipython
    idx_off = sigma_list[1]
    idx_on = sigma_list[5]
    print('parameters', idx_off, idx_on)
    N_E = 1000
#+end_src

#+RESULTS:
: parameters 0.1 0.5

#+begin_src ipython
  df_point = end_point[end_point.sigma==idx_off]
  df_point_on = end_point[end_point.sigma==idx_on]
  print(df_point_on.head())
#+end_src

#+RESULTS:
:     time  trial  phi  sigma        m0        m1     phase  precision
: 5      0      0    0    0.5  5.823681  3.369071  1.956437   2.293273
: 16     0      0    1    0.5  5.824378  3.160698  1.816514  -0.249574
: 27     0      0    2    0.5  5.840415  3.123927  1.691448 -11.021806
: 38     0      0    3    0.5  5.866175  3.077265  1.844028  -1.311344
: 49     0      0    4    0.5  5.880684  3.336417  1.883580   0.517090

#+begin_src ipython
  df_point = end_point[end_point.sigma==idx_off]
  df_point_on = end_point[end_point.sigma==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='sigma', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[2]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[3])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('Heterogeneity Strength')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.sigma==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.sigma==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[2])
  ax[1].plot(point_on, color=pal[3])

  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Activity (Hz)')
  ax[1].set_xlabel('Pref. Location (Â°)')

  plt.savefig(name + '_tuning_sigma.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/eb51611ae52f5d5e50be90b42fb22a0a830326fa.png]]

***** Diffusion

#+begin_src ipython
    point = end_point[end_point.sigma==idx_off]
    point_on = end_point[end_point.sigma==idx_on]

    fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

    sns.lineplot(end_point, x='sigma', y=end_point.precision**2 / 3.5, legend=False, ax=ax[0])

    sns.lineplot(x=idx_off, y=point['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[2])
    sns.lineplot(x=idx_on, y=point_on['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[3])

    ax[0].set_xlabel('Heterogeneity Strength')
    ax[0].set_ylabel('Diffusivity (deg$^2$/s)')
    ax[0].set_ylim([0, 60])
    #  ax1 = ax[0].twinx()
    # sns.lineplot(end_point, x='sigma', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, color='k', alpha=0.25)

    # sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[0])
    # sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[1])

    # ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
    # ax1.spines['right'].set_visible(True)
    # ax1.set_ylim([0.4, 1])

    # point = df_smooth[df_smooth.sigma==idx_off].reset_index()
    # m0, m1, phase = decode_bump(point.rates[4])
    # point = np.roll(point.rates[4], int(( phase / 2.0 / np.pi - 0.5) * point.rates[4].shape[0]))

    # point_on = df_smooth[df_smooth.sigma==idx_on].reset_index()  
    # m0, m1, phase = decode_bump(point_on.rates[4])
    # point_on = np.roll(point_on.rates[4], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[4].shape[0]))

    # ax[1].plot(point, color=pal[0])
    # ax[1].plot(point_on, color=pal[1])

    # ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
    # ax[1].set_ylabel('Firing Rate (Hz)')
    # ax[1].set_xlabel('Pref. Location (Â°)')

    # point = end_point[end_point.sigma==idx_off]
    # point_on = end_point[end_point.sigma==idx_on]

    bins = 'auto'
    sns.histplot(data=point, x=point['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0, color = pal[2])
    sns.histplot(data=point_on, x=point_on['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[3])
    ax[1].set_xlabel('Endpoint Deviation (Â°)')
    ax[1].set_ylabel('Density')
    # ax[1].set_xlim([-30, 30])

    plt.savefig(name + '_diffusion_sigma.svg', dpi=300)
    plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a4698e6e9c2739670aea1e72229f282219a30ddd.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** FF Inputs
*** Parameters

#+begin_src ipython
  ini_list = np.arange(0, 100)
  Ja0_list = np.linspace(10, 30, 21)
  phi_list = np.linspace(0, 315, 8)
#+end_src

#+RESULTS:

*** Simulations

#+begin_src ipython
  start = perf_counter()  

  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', KAPPA=[0.4], SIGMA=[0.25], SEED=0)
  rates = model.run(ini_list, phi_list, Ja0_list)

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 45s
: rates (1, 16800, 1000)

#+begin_src ipython
  rates = rates.reshape(1, len(ini_list), len(phi_list), len(Ja0_list), -1)
  print(rates.shape)
#+end_src

#+RESULTS:
: (1, 100, 8, 21, 1000)

*** Analysis
**** Load data

#+begin_src ipython 
  df = get_df_X(rates, Ja0_list, X_str='Ie')
  end_point = get_code_X(df, 'Ie')
  df_smooth = df.groupby(['trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) 
  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision) * 180 / np.pi
#+end_src

#+RESULTS:

**** Tuning Profile

#+begin_src ipython
  idx_off = Ja0_list[0]
  idx_on = Ja0_list[-1]
  print('parameters', idx_off, idx_on)
  N_E = 1000
#+end_src

#+RESULTS:
: parameters 10.0 30.0

#+begin_src ipython
  df_point = end_point[end_point.Ie==idx_off]
  df_point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[0], legend=False, marker='o', ms=12, color=pal[1])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Ie==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Ie==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[0])
  ax[1].plot(point_on, color=pal[1])
  
  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Activity (Hz)')
  ax[1].set_xlabel('Pref. Location (Â°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1517c3f215dcba21da098dac7713ce166f3e15e9.png]]

**** Diffusion

#+begin_src ipython
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point.precision**2 / 3.5, legend=False, marker='o', ax=ax[0], lw=5)

  sns.lineplot(x=idx_off, y=point['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision']**2 / 3.5, legend=False, marker='o', ax=ax[0], ms=12, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (deg$^2$/s)')
  # ax[0].set_ylim([0, 10])

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, color='k', alpha=0.5, lw=5)

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=12, color=pal[1])

  ax1.set_ylabel('Amplitude, $\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)
  # ax1.set_ylim([0.4, 1])

  bins = 'auto'
  sns.histplot(data=point, x=point['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision'], legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Endpoint Deviation (Â°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-30, 30])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c0e6502a1773b57fae847c3da90b2cda798c063e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:


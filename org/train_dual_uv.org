#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :var B0="1.0" :results both :exports both :async yes :session dual2 :kernel torch :tangle ./train_dual.py

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

#+begin_src ipython
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data Split

#+begin_src ipython
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit

def split_data(X, Y, train_perc=0.8, batch_size=32):

    if Y.ndim==3:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0, 0].cpu().numpy(),
                                                          shuffle=True)
    else:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0].cpu().numpy(),
                                                          shuffle=True)

    print(X_train.shape, X_test.shape)
    print(Y_train.shape, Y_test.shape)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
def torch_angle_AB(U, V):
      # Calculate the dot product
      dot_product = torch.dot(U, V)

      # Calculate the magnitudes of U and V
      magnitude_U = torch.linalg.norm(U)
      magnitude_V = torch.linalg.norm(V)

      # Compute the cosine of the angle
      cos_theta = dot_product / (magnitude_U * magnitude_V + .00001)

      # Calculate the angle in radians, then convert to degrees
      angle_radians = torch.acos(cos_theta)
      return torch.round(torch.rad2deg(angle_radians))
#+end_src

#+RESULTS:

#+begin_src ipython
def training_step(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1, clip_grad=0, zero_grad=None):

      model.train()
      for batch, (X, y) in enumerate(dataloader):
          X, y = X.to(model.device), y.to(model.device)

          rates = model(X)
          loss = loss_fn(model.readout, y)

          loss.backward()

          if zero_grad is not None:
              try:
                   if zero_grad == -1:
                         model.low_rank.U.grad[:,:] = 0
                         model.low_rank.V.grad[:, :] = 0
                   else:
                         model.low_rank.U.grad[:, zero_grad] = 0
                         model.low_rank.V.grad[:, zero_grad] = 0
              except:
                  pass

          if clip_grad:
              torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=10.0)
              #torch.nn.utils.clip_grad_value_(model.parameters(), clip_value=1.0)

          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
def validation_step(dataloader, model, loss_fn):
      num_batches = len(dataloader)
      model.eval()

      val_loss = 0.0
      with torch.no_grad():
          for X, y in dataloader:
              X, y = X.to(model.device), y.to(model.device)

              rates = model(X)
              loss = loss_fn(model.readout, y)
              val_loss += loss.item()

          val_loss /= num_batches

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
def optimization(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1, thresh=.005, zero_grad=None):
      scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      # scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device(DEVICE if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []
      angle_list = []

      for epoch in range(num_epochs):
          loss = training_step(train_loader, model, loss_fn, optimizer, penalty, lbd, zero_grad=zero_grad)
          val_loss = validation_step(val_loader, model, loss_fn)

          scheduler.step(val_loss)
          loss_list.append(loss.item())
          val_loss_list.append(val_loss)

          memory = model.low_rank.U[model.slices[0], 0]
          readout = model.low_rank.V[model.slices[0], 1]

          angle = torch_angle_AB(memory, readout).item()
          angle_list.append(angle)

          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}, Angle(U, W) : {angle} Â°')

          if val_loss < thresh and loss < thresh:
              print(f'Stopping training as loss has fallen below the threshold: {loss}, {val_loss}')
              break

          if val_loss > 300:
              print(f'Stopping training as loss is too high: {val_loss}')
              break

          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
def imbalance_func(target, imbalance):
    output = torch.zeros_like(target)

    output[target == 0] = imbalance
    output[target == 1] = 1

    return output
#+end_src

#+RESULTS:

#+begin_src ipython
import torch
import torch.nn as nn
import torch.nn.functional as F

class SignBCELoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=2.0, imbalance=0):
            super(SignBCELoss, self).__init__()
            self.alpha = alpha
            self.thresh = thresh

            self.imbalance = imbalance
            self.bce_with_logits = nn.BCEWithLogitsLoss()

      def forward(self, readout, targets):
            if self.alpha != 1.0:
                  bce_loss = self.bce_with_logits(readout, targets)
            else:
                  bce_loss = 0.0

            # average readout over bins
            mean_readout = readout.mean(dim=1).unsqueeze(-1)

            # only penalizing not licking when pair
            if self.imbalance == -1:
                  sign_overlap = torch.abs(torch.sign(2 * targets - 1)) * mean_readout
                  # sign_overlap = torch.sign(targets) * mean_readout
                  self.imbalance = 0
            else:
                  sign_overlap = torch.sign(2 * targets - 1) * mean_readout

            if self.imbalance > 1.0:
                  sign_loss = F.relu(torch.sign(targets) * self.thresh - imbalance_func(targets, self.imbalance) * sign_overlap)
            elif self.imbalance == 0:
                  sign_loss = F.relu(imbalance_func(targets, self.imbalance) * self.thresh - sign_overlap)
            else:
                  sign_loss = F.relu(self.thresh - sign_overlap)

            combined_loss = (1-self.alpha) * bce_loss + self.alpha * sign_loss

            return combined_loss.mean()

#+end_src

#+RESULTS:

#+begin_src ipython
class DualLoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=2.0, cue_idx=[], rwd_idx=-1, zero_idx=[], read_idx=[-1], imbalance=0):
            super(DualLoss, self).__init__()
            self.alpha = alpha
            self.thresh = thresh

            self.imbalance = imbalance

            # BL idx
            self.zero_idx = zero_idx
            # rwd idx for DRT
            self.cue_idx = torch.tensor(cue_idx, dtype=torch.int, device=DEVICE)
            # rwd idx for DPA
            self.rwd_idx = torch.tensor(rwd_idx, dtype=torch.int, device=DEVICE)

            # readout idx
            self.read_idx = read_idx

            self.loss = SignBCELoss(self.alpha, self.thresh, self.imbalance)
            self.l1loss = nn.SmoothL1Loss()
            # self.l1loss = nn.MSELoss()

      def forward(self, readout, targets):

            zeros = torch.zeros_like(readout[:, self.zero_idx, 0])
            BL_loss = self.l1loss(readout[:, :9, 0], zeros[:, :9])

            if self.read_idx[0] == 1:
                  BL_loss += self.l1loss(readout[:, self.zero_idx, 1], zeros)
            elif self.read_idx[-1] !=0:
                        BL_loss += self.l1loss(readout[:, :9, 1], zeros[:, :9])
            try:
                  if (self.read_idx[0] == 2) or (self.read_idx[0] == -1):
                        BL_loss += self.l1loss(readout[:, self.zero_idx, 2], zeros)
            except:
                  pass

            is_empty = (self.cue_idx.numel() == 0)

            if is_empty:
                  DPA_loss = self.loss(readout[:,  self.rwd_idx, self.read_idx[0]], targets)
                  return DPA_loss + BL_loss
            else:
                  self.loss.imbalance = self.imbalance[0]
                  DPA_loss = self.loss(readout[:,  self.rwd_idx, self.read_idx[0]], targets[:, 0, :self.rwd_idx.shape[0]])

                  self.loss.imbalance = self.imbalance[1]
                  DRT_loss = self.loss(readout[:, self.cue_idx, self.read_idx[1]], targets[:, 1, :self.cue_idx.shape[0]])

                  return DPA_loss + DRT_loss + BL_loss
#+end_src

#+RESULTS:

** Other

#+begin_src ipython
def angle_AB(A, B):
      A_norm = A / (np.linalg.norm(A) + 1e-5)
      B_norm = B / (np.linalg.norm(B) + 1e-5)

      return int(np.arccos(A_norm @ B_norm) * 180 / np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:
          v = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u) % (2.0 * np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_idx(model, rank=2):
      ksi = torch.hstack((model.low_rank.U, model.low_rank.V)).T
      ksi = ksi[:, :model.Na[0]]

      try:
            readout = model.low_rank.linear.weight.data
            ksi = torch.vstack((ksi, readout))
      except:
            pass

      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      theta = get_theta(ksi[0], ksi[rank])

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
def get_overlap(model, rates):
      ksi = model.odors.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
#+end_src

#+RESULTS:

#+begin_src ipython
import scipy.stats as stats

def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)
      ci = smooth.std(axis=0, ddof=1) * 1.96

      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

** plots
#+begin_src ipython :tangle ../src/torch/utils.py
import pickle as pkl
import os
def pkl_save(obj, name, path="."):
    os.makedirs(path, exist_ok=True)
    destination = path + "/" + name + ".pkl"
    print("saving to", destination)
    pkl.dump(obj, open(destination, "wb"))


def pkl_load(name, path="."):
    source = path + "/" + name + '.pkl'
    print('loading from', source)
    return pkl.load(open( source, "rb"))

#+end_src

#+RESULTS:


#+begin_src ipython
def add_vlines(ax=None, mouse=""):
    t_BL = [0, 1]
    t_STIM = [1 , 2]
    t_ED = [2, 3]
    t_DIST = [3 , 4]
    t_MD = [4 , 5]
    t_CUE = [5 , 5.5]
    t_RWD = [5.5, 6.0]
    t_LD = [6.0 , 7.0]
    t_TEST = [7.0, 8.0]
    t_RWD2 = [11 , 12]

    time_periods = [t_STIM, t_DIST, t_TEST, t_CUE]
    colors = ["b", "b", "b", "g"]

    if ax is None:
        for period, color in zip(time_periods, colors):
            plt.axvspan(period[0], period[1], alpha=0.1, color=color)
    else:
        for period, color in zip(time_periods, colors):
            ax.axvspan(period[0], period[1], alpha=0.1, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def plot_rates_selec(rates, idx, thresh=0.5, figname='fig.svg'):
        ordered = rates[..., idx]
        fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
        r_max = thresh * np.max(rates[0])

        ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[0].set_ylabel('Neuron #')
        ax[0].set_xlabel('Step')

        ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
        ax[1].set_ylabel('Pref. Location (Â°)')
        ax[1].set_xlabel('Step')
        plt.savefig(figname, dpi=300)
        plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlap(readout, labels=['pair', 'unpair'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

      time = np.linspace(0, 8, readout.shape[1])
      size = readout.shape[0] // 2
      print(readout.shape[0], size)

      for i in range(readout.shape[-1]):
            ax[i].plot(time, readout[:size, :, i].T, ls='-', label=labels[0])
            if i==0:
                  ax[i].plot(time, -readout[size:, :, i].T, ls='--', label=labels[1])
            else:
                  ax[i].plot(time, readout[size:, :, i].T, ls='--', label='')

            add_vlines(ax[i])
            ax[i].set_xlabel('Time (s)')

      ax[0].set_ylabel('Sample Overlap (Hz)')
      ax[1].set_ylabel('Go/NoGo Overlap (Hz)')
      # ax[2].set_ylabel('Readout (Hz)')

      ax[1].legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_avg_overlap(readout, n_batch, labels=['A', 'B'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

      time = np.linspace(0, 8, readout.shape[1])
      size = readout.shape[0] // 2
      print(readout.shape[0], size)

      readout = readout.reshape((3, )

      for i in range(readout.shape[-1]):
            if i==0:
                  ax[i].plot(time, (readout[:size, :, i].T - readout[size:,:,i].T), ls='-', label=labels[0])
            else:
                  ax[i].plot(time, readout[size:, :, i].T, ls='--', label='Go')

            add_vlines(ax[i])
            ax[i].set_xlabel('Time (s)')

      ax[0].set_ylabel('Sample Overlap (Hz)')
      ax[1].set_ylabel('Go/NoGo Overlap (Hz)')
      # ax[2].set_ylabel('Readout (Hz)')

      # plt.legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
:   Cell In[23], line 9
:     readout = readout.reshape((3, )
:                              ^
: SyntaxError: '(' was never closed
:END:

#+begin_src ipython
def plot_m0_m1_phi(rates, idx, figname='fig.svg'):

      m0, m1, phi = decode_bump(rates[..., idx], axis=-1)
      fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

      time = np.linspace(0, 8, m0.T.shape[0])

      ax[0].plot(time, m0[:2].T)
      ax[0].plot(time, m0[2:].T, '--')
      #ax[0].set_ylim([0, 360])
      #ax[0].set_yticks([0, 90, 180, 270, 360])
      ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
      ax[0].set_ylabel('Activity (Hz)')
      ax[0].set_xlabel('Time (s)')
      add_vlines(ax[0])

      ax[1].plot(time, m1[:2].T)
      ax[1].plot(time, m1[2:].T, '--')
      # ax[1].set_ylim([0, 360])
      # ax[1].set_yticks([0, 90, 180, 270, 360])
      ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
      ax[1].set_ylabel('Bump Amplitude (Hz)')
      ax[1].set_xlabel('Time (s)')
      add_vlines(ax[1])

      ax[2].plot(time, phi[:2].T * 180 / np.pi)
      ax[2].plot(time, phi[2:].T * 180 / np.pi, '--')
      ax[2].set_ylim([0, 360])
      ax[2].set_yticks([0, 90, 180, 270, 360])
      ax[2].set_ylabel('Bump Center (Â°)')
      ax[2].set_xlabel('Time (s)')
      add_vlines(ax[2])

      plt.savefig(figname, dpi=300)
      plt.show()
    #+end_src

#+RESULTS:


#+begin_src ipython
from matplotlib.patches import Circle

def plot_fix_points(rates, ax, title=''):
    m0, m1, phi = decode_bump(rates[:, -1], axis=-1)

    x = np.cos(phi)
    y = np.sin(phi)

    xNoGo = np.cos(3*np.pi /2.)
    yNoGo = np.sin(3*np.pi /2)

    xGo = np.cos(np.pi /2.)
    yGo = np.sin(np.pi /2)

    # rad = np.max(np.sqrt(x**2+y**2))

    ax.plot(x, y, 'o', ms=15)
    ax.plot(xGo, yGo, 'o', ms=15, color='w', markeredgecolor='k')
    ax.plot(xNoGo, yNoGo, 'o', ms=15, color='w', markeredgecolor='k')
    circle = Circle((0., 0.), 1, fill=False, edgecolor='k')
    ax.add_patch(circle)

    # Set the aspect of the plot to equal to make the circle circular
    ax.set_aspect('equal')
    ax.set_title(title)
    ax.axis('off')
    # plt.savefig('fp_dpa.svg', dpi=300)
    # plt.show()
#+end_src

#+RESULTS:

* Model

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:1'

seed = np.random.randint(0, 1e6)
# seed = 820829
# seed = 801613
# seed = 712979
# seed = 961603
# seed = 954736
print(seed)
# seed=62401
# seed = 500816

A0 = 1.0 # sample/dist
B0 = 1.0 # cue
C0 = 0.0 # DRT rwd
#+end_src

#+RESULTS:
: 896771

#+begin_src ipython
model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

* Sample Classification
** Training
*** Parameters

#+begin_src ipython
model.J_STP.requires_grad = True
model.low_rank.lr_kappa.requires_grad = False

if model.LR_READOUT:
    for param in model.low_rank.linear.parameters():
        param.requires_grad = False
    model.low_rank.linear.bias.requires_grad = False
  #+end_src

  #+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
    if param.requires_grad:
        print(name, param.shape)
#+end_src

#+RESULTS:
: J_STP torch.Size([])
: low_rank.U torch.Size([750, 2])
: low_rank.V torch.Size([750, 2])

Testing the network on steps from sample odor offset to test odor onset

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

mask = (steps >= (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
rwd_idx = np.where(mask)[0]
print('rwd', rwd_idx)

model.lr_eval_win = rwd_idx.shape[0]

stim_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY))

zero_idx = np.where(~mask & ~stim_mask )[0]
print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
:  44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
:  68 69 70 71 72 73 74 75 76 77 78 79 80]
: zero [0 1 2 3 4 5 6 7 8 9]

*** Inputs and Labels

#+begin_src ipython
model.N_BATCH = 512

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

A = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([1024, 505, 1000])

#+begin_src ipython
labels_A = torch.ones((model.N_BATCH, rwd_idx.shape[0]))
labels_B = torch.zeros((model.N_BATCH, rwd_idx.shape[0]))
labels = torch.cat((labels_A, labels_B))

print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([1024, 61])

*** Run

#+begin_src ipython
batch_size = 32
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([819, 505, 1000]) torch.Size([205, 505, 1000])
: torch.Size([819, 61]) torch.Size([205, 61])

#+begin_src ipython
criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=1, read_idx=[0])
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('Sample Classification')
num_epochs = 15
start = perf_counter()
loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=1)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
Sample Classification
Epoch 1/15, Training Loss: 1.9912, Validation Loss: 1.9423, Angle(U, W) : 89.0 Â°
Epoch 2/15, Training Loss: 1.8214, Validation Loss: 1.8190, Angle(U, W) : 89.0 Â°
Epoch 3/15, Training Loss: 0.0059, Validation Loss: 0.0060, Angle(U, W) : 89.0 Â°
Epoch 4/15, Training Loss: 0.0187, Validation Loss: 0.0208, Angle(U, W) : 88.0 Â°
Epoch 5/15, Training Loss: 0.0110, Validation Loss: 0.0075, Angle(U, W) : 88.0 Â°
Epoch 6/15, Training Loss: 0.0062, Validation Loss: 0.0061, Angle(U, W) : 88.0 Â°
Epoch 7/15, Training Loss: 0.0082, Validation Loss: 0.0054, Angle(U, W) : 88.0 Â°
Epoch 8/15, Training Loss: 0.0103, Validation Loss: 0.0051, Angle(U, W) : 88.0 Â°
Epoch 9/15, Training Loss: 0.0045, Validation Loss: 0.0046, Angle(U, W) : 88.0 Â°
Stopping training as loss has fallen below the threshold: 0.004468983504921198, 0.00455143119740699
Elapsed (with compilation) = 0h 3m 41s
#+end_example


 #+begin_src ipython
torch.save(model.state_dict(), 'models/dual/dpa_naive_%d.pth' % seed)
#+end_src

#+RESULTS:

** Testing
:PROPERTIES:
:tangle no
:END:


          #+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights()
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 10

model.I0[0] = 2
model.I0[1] = 0
model.I0[2] = 0

A = model.init_ff_input()

model.I0[0] = -2
model.I0[1] = 0
model.I0[2] = 0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([20, 505, 1000])

#+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print('rates', rates.shape)
#+end_src

#+RESULTS:
: rates (20, 81, 750)

#+begin_src ipython
readout = model.readout.cpu().detach().numpy()
print('readout', readout.shape)
plot_overlap(readout, labels=['A', 'B'])
#+end_src

#+RESULTS:
:RESULTS:
: readout (20, 81, 2)
: 20 10
[[./.ob-jupyter/f386f3cc84c4bcdd29485da45f727d3c62d2801e.png]]
:END:

#+begin_src ipython
idx = get_idx(model, 1)
plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([4, 750])
[[./.ob-jupyter/9860d293f92a2043723fbca44e131d683ec6e39c.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[./.ob-jupyter/6ea3070591f69d82f10ec932cfd038ebde0e257a.png]]

* DPA

#+begin_src ipython
model_state_dict = torch.load('models/dual/dpa_naive_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: <All keys matched successfully>

#+begin_src ipython
print(model.J_STP)
#+end_src

#+RESULTS:
: Parameter containing:
: tensor(18.8521, device='cuda:1', requires_grad=True)

** Training
*** Parameters

#+begin_src ipython
model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = False
#+end_src

#+RESULTS:

Here we only evaluate performance from test onset to test offset

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
mask = (steps >= (model.N_STIM_ON[4].cpu().numpy() - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
rwd_idx = np.where(mask)[0]
print('rwd', rwd_idx)

# mask for Go/NoGo memory from dist to cue
cue_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_ON[-1].cpu().numpy() - model.N_STEADY))
cue_idx = np.where(cue_mask)[0]
cue_idx = []
print('cue', cue_idx)

if len(cue_idx) !=0:
    model.lr_eval_win = np.max((rwd_idx.shape[0], cue_idx.shape[0]))
else:
    model.lr_eval_win = rwd_idx.shape[0]

stim_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY))

mask_zero = ~mask  & ~stim_mask
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)

#+end_src

#+RESULTS:
: rwd [70 71 72 73 74 75 76 77 78 79 80]
: cue []
: zero [ 0  1  2  3  4  5  6  7  8  9 20 21 22 23 24 25 26 27 28 29 30 31 32 33
:  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
:  58 59 60 61 62 63 64 65 66 67 68 69]

*** Inputs and Labels

#+begin_src ipython
model.N_BATCH = 256

model.I0[0] = A0 # sample
model.I0[1] = 0 # distractor
model.I0[2] = 0 # cue
model.I0[3] = 0 # drt rwd
model.I0[4] = A0 # test

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([1024, 505, 1000])

 #+begin_src ipython
labels_pair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
labels_unpair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))

labels = torch.cat((labels_pair, labels_unpair))

if len(cue_idx)!=0:
    labels =  labels.repeat((2, 1, 1))
    labels = torch.transpose(labels, 0, 1)
print('labels', labels.shape)

print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([1024, 11])
: labels torch.Size([1024, 11])

*** Run

#+begin_src ipython
batch_size = 32
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([819, 505, 1000]) torch.Size([205, 505, 1000])
: torch.Size([819, 11]) torch.Size([205, 11])

  #+begin_src ipython
# set imbalance to -1 to penalize only pair trials: Loss->0 if overlap>0 during pair trial
if len(cue_idx) == 0:
    criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=-1, read_idx=[-1])
else:
    criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, cue_idx=cue_idx, imbalance=[0.0, 1.0], read_idx=[-1, 0])

learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('training DPA')
num_epochs = 30
start = perf_counter()
loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=0)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
torch.save(model.state_dict(), 'models/dual/dpa_%d.pth' % seed)
#+end_src

#+RESULTS:
#+begin_example
training DPA
Epoch 1/30, Training Loss: 0.1092, Validation Loss: 0.0340, Angle(U, W) : 86.0 Â°
Epoch 2/30, Training Loss: 0.0057, Validation Loss: 0.0066, Angle(U, W) : 85.0 Â°
Epoch 3/30, Training Loss: 0.0073, Validation Loss: 0.0059, Angle(U, W) : 86.0 Â°
Epoch 4/30, Training Loss: 0.0050, Validation Loss: 0.0059, Angle(U, W) : 86.0 Â°
Epoch 5/30, Training Loss: 0.0062, Validation Loss: 0.0058, Angle(U, W) : 86.0 Â°
Epoch 6/30, Training Loss: 0.0063, Validation Loss: 0.0058, Angle(U, W) : 86.0 Â°
Epoch 7/30, Training Loss: 0.0052, Validation Loss: 0.0057, Angle(U, W) : 86.0 Â°
Epoch 8/30, Training Loss: 0.0056, Validation Loss: 0.0057, Angle(U, W) : 87.0 Â°
Epoch 9/30, Training Loss: 0.0055, Validation Loss: 0.0056, Angle(U, W) : 87.0 Â°
Epoch 10/30, Training Loss: 0.0068, Validation Loss: 0.0056, Angle(U, W) : 87.0 Â°
Epoch 11/30, Training Loss: 0.0046, Validation Loss: 0.0055, Angle(U, W) : 87.0 Â°
Epoch 12/30, Training Loss: 0.0049, Validation Loss: 0.0054, Angle(U, W) : 88.0 Â°
Epoch 13/30, Training Loss: 0.0053, Validation Loss: 0.0054, Angle(U, W) : 88.0 Â°
Epoch 14/30, Training Loss: 0.0053, Validation Loss: 0.0053, Angle(U, W) : 88.0 Â°
Epoch 15/30, Training Loss: 0.0044, Validation Loss: 0.0053, Angle(U, W) : 88.0 Â°
Epoch 16/30, Training Loss: 0.0059, Validation Loss: 0.0052, Angle(U, W) : 88.0 Â°
Epoch 17/30, Training Loss: 0.0049, Validation Loss: 0.0051, Angle(U, W) : 88.0 Â°
Epoch 18/30, Training Loss: 0.0052, Validation Loss: 0.0051, Angle(U, W) : 88.0 Â°
Epoch 19/30, Training Loss: 0.0043, Validation Loss: 0.0049, Angle(U, W) : 89.0 Â°
Stopping training as loss has fallen below the threshold: 0.00427404185757041, 0.004853918649522322
Elapsed (with compilation) = 0h 8m 25s
#+end_example

#+begin_src ipython
odors = model.odors.cpu().numpy()
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]
W=U

print('   U  V  W  S  D')
print('U ', angle_AB(U, U), angle_AB(U, V), angle_AB(U, W), angle_AB(U, odors[0]), angle_AB(U, odors[1]))
print('V ', 'XXX', angle_AB(V, V), angle_AB(V, W), angle_AB(V, odors[0]), angle_AB(V, odors[1]))
print('W ', 'XXX', 'XXX', angle_AB(W, W), angle_AB(W, odors[0]), angle_AB(W, odors[1]))
print('S ', 'XXX', 'XXX', 'XXX', angle_AB(odors[0], odors[0]), angle_AB(odors[0], odors[1]))
print('D ', 'XXX', 'XXX', 'XXX', 'XXX', angle_AB(odors[1], odors[1]))

#+end_src

#+RESULTS:
:    U  V  W  S  D
: U  0 36 0 59 88
: V  XXX 0 36 67 91
: W  XXX XXX 0 59 88
: S  XXX XXX XXX 0 90
: D  XXX XXX XXX XXX 0

** Testing
:PROPERTIES:
:tangle no
:END:

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights()
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 505, 1000])

 #+begin_src ipython
labels_pair = torch.ones((2 * model.N_BATCH, 2))
labels_unpair = torch.zeros((2 * model.N_BATCH, 2))

labels = torch.cat((labels_pair, labels_unpair))
print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach().cpu().numpy()
rates_dpa = rates
print(rates.shape)
#+end_src

#+RESULTS:
: (4, 81, 750)

#+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['pair', 'unpair'], figname='./figures/dual/dpa_overlap.svg')
#+end_src

#+RESULTS:
:RESULTS:
: 4 2
[[./.ob-jupyter/6cf78603a9e9a1caa20ee02f1144fe37a92f144a.png]]
:END:

#+begin_src ipython
def plot_overlap(readout, labels=['pair', 'unpair'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

      time = np.linspace(0, 8, readout.shape[1])
      size = readout.shape[0] // 2

      for i in range(readout.shape[-1]):
            ax[i].plot(time, readout[:size, :, i].T, ls='-', label=labels[0])
            if i==0:
                  ax[i].plot(time, -readout[size:, :, i].T, ls='--', label=labels[1])
            else:
                  ax[i].plot(time, readout[size:, :, i].T, ls='--', label=labels[1])

            add_vlines(ax[i])
            ax[i].set_xlabel('Time (s)')

      ax[0].set_ylabel('Sample Overlap (Hz)')
      ax[1].set_ylabel('Go/NoGo Overlap (Hz)')

      ax[1].legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx, figname='dpa_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([4, 750])
[[./.ob-jupyter/95458d1f495d56920d17c9d279164ef675364ee1.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx, figname='dpa_fourier.svg')
#+end_src

#+RESULTS:
[[./.ob-jupyter/06f1c7a83f02585d9676c43540454e4806bbe058.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Go/NoGo

#+begin_src ipython
model_state_dict = torch.load('models/dual/dpa_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: <All keys matched successfully>

** Training

#+begin_src ipython
model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = False
#+end_src

#+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
      if param.requires_grad:
            print(name, param.shape)
#+end_src

#+RESULTS:
: low_rank.U torch.Size([750, 2])
: low_rank.V torch.Size([750, 2])

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

# mask for lick/nolick  from cue to test
rwd_mask = (steps >= (model.N_STIM_ON[2].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_ON[4].cpu().numpy() - model.N_STEADY))
rwd_idx = np.where(rwd_mask)[0]
print('rwd', rwd_idx)

# mask for Go/NoGo memory from dist to cue
cue_mask = (steps >= (model.N_STIM_ON[1].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_ON[2].cpu().numpy() - model.N_STEADY))
cue_idx = np.where(cue_mask)[0]
# cue_idx = []
print('cue', cue_idx)

mask_zero = (steps < (model.N_STIM_ON[1].cpu().numpy() - model.N_STEADY))
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)

if len(cue_idx)!=0:
    model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))
else:
    model.lr_eval_win = rwd_idx.shape[0]
#+end_src

#+RESULTS:
: rwd [50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69]
: cue [30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]
: zero [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
:  24 25 26 27 28 29]

#+begin_src ipython
model.N_BATCH = 512

model.I0[0] = 0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = 0
model.I0[4] = 0

Go = model.init_ff_input()

model.I0[0] = 0
model.I0[1] = -A0
model.I0[2] = float(B0)
model.I0[3] = 0
model.I0[4] = 0

NoGo = model.init_ff_input()

ff_input = torch.cat((Go, NoGo))
print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([1024, 505, 1000])

#+begin_src ipython
labels_Go = torch.ones((model.N_BATCH, model.lr_eval_win))
labels_NoGo = torch.zeros((model.N_BATCH, model.lr_eval_win))
labels = torch.cat((labels_Go, labels_NoGo))
print(labels.shape)
# print(labels)
if len(cue_idx)!=0:
    labels =  labels.repeat((2, 1, 1))
    labels = torch.transpose(labels, 0, 1)
print('labels', labels.shape)
#+end_src

#+RESULTS:
: torch.Size([1024, 20])
: labels torch.Size([1024, 2, 20])

*** Run

#+begin_src ipython
batch_size = 32
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([819, 505, 1000]) torch.Size([205, 505, 1000])
: torch.Size([819, 2, 20]) torch.Size([205, 2, 20])

#+begin_src ipython
criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, cue_idx=cue_idx, imbalance=[0.0, 1.0], read_idx=[1, 1])
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('training DRT')
num_epochs = 15
start = perf_counter()
loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=0)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
training DRT
Epoch 1/15, Training Loss: 1.5823, Validation Loss: 1.1607, Angle(U, W) : 89.0 Â°
Epoch 2/15, Training Loss: 0.0314, Validation Loss: 0.0318, Angle(U, W) : 89.0 Â°
Epoch 3/15, Training Loss: 0.0129, Validation Loss: 0.0132, Angle(U, W) : 88.0 Â°
Epoch 4/15, Training Loss: 0.0092, Validation Loss: 0.0108, Angle(U, W) : 88.0 Â°
Epoch 5/15, Training Loss: 0.0110, Validation Loss: 0.0100, Angle(U, W) : 88.0 Â°
Epoch 6/15, Training Loss: 0.0089, Validation Loss: 0.0093, Angle(U, W) : 88.0 Â°
Epoch 7/15, Training Loss: 0.0081, Validation Loss: 0.0087, Angle(U, W) : 88.0 Â°
Epoch 8/15, Training Loss: 0.0068, Validation Loss: 0.0082, Angle(U, W) : 88.0 Â°
Epoch 9/15, Training Loss: 0.0070, Validation Loss: 0.0080, Angle(U, W) : 88.0 Â°
#+end_example

 #+begin_src ipython
torch.save(model.state_dict(), 'models/dual/dual_naive_%d.pth' % seed)
#+end_src

#+RESULTS:
: 5dbf5bca-9c54-4a88-860a-f8fbfbab9216

** Test
:PROPERTIES:
:tangle no
:END:

  #+begin_src ipython
model.eval()
  #+end_src

  #+RESULTS:
  : be5da996-1ba3-4c50-bd52-b703ba475878

   #+begin_src ipython
model.N_BATCH = 1

model.I0[0] = 0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = 0.0
model.I0[4] = 0.0

A = model.init_ff_input()

model.I0[0] = 0 # NoGo
model.I0[1] = -A0 # cue
model.I0[2] = float(B0) # rwd
model.I0[3] = 0.0
model.I0[4] = 0.0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print('ff_input', ff_input.shape)
  #+end_src

  #+RESULTS:
  : dba60fcb-9ad9-417f-8f42-0eef99ab1be4

  #+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print(rates.shape)
  #+end_src

#+RESULTS:
: 44f21a6d-20ef-4894-8c41-12ec06ca3d31

  #+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['Go', 'NoGo'], figname='./figures/dual/GoNoGo_overlaps.svg')
  #+end_src

#+RESULTS:
: 314b9bca-14ae-4342-8cc6-6285b0cf07f6

  #+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx)
  #+end_src

#+RESULTS:
: f364aa64-1a24-4e5c-af36-2ca8702032dd

#+begin_src ipython
plot_m0_m1_phi(ff_input.cpu().numpy(), idx)
#+end_src

#+RESULTS:
: 4972917e-5254-4e4e-956a-59b332bc631b

* Dual Naive
** Testing
:PROPERTIES:
:tangle no
:END:

#+begin_src ipython
model_state_dict = torch.load('models/dual/dual_naive_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: 82d43197-f854-49f3-b4cd-cab81dfead88

#+begin_src ipython
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]

odors = model.odors.cpu().numpy()

m = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
n = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 1]

vectors = [U, m, odors[0], odors[1]]
labels = ['$m_S$', '$m_D$', '$h_S$', '$h_D$']

import numpy as np
import matplotlib.pyplot as plt

# Calculate the covariance matrix
num_vectors = len(vectors)
cov_matrix = np.zeros((num_vectors, num_vectors))

for i in range(num_vectors):
    for j in range(num_vectors):
        cov_matrix[i][j] = angle_AB(vectors[i], vectors[j])

# Mask the upper triangle
mask = np.triu(np.ones_like(cov_matrix, dtype=bool))
masked_cov_matrix = np.ma.masked_array(cov_matrix, mask=mask)

plt.figure(figsize=(8, 6))

# Plot the masked covariance matrix
img = plt.imshow(masked_cov_matrix, cmap='coolwarm', interpolation='nearest', vmin=45, vmax=90)
cbar = plt.colorbar(label='Angle (Â°)')
cbar.set_ticks([45, 90])

# Set axis labels on top and left
# plt.gca().xaxis.tick_top()
plt.xticks(ticks=np.arange(num_vectors), labels=labels)
plt.yticks(ticks=np.arange(num_vectors), labels=labels)

for i in range(num_vectors):
    for j in range(i + 1):
        plt.text(j , i , f'{cov_matrix[i, j]:.0f}', ha='center', va='center', color='black')

plt.savefig('./figures/dual/cov_naive_%d.svg' % seed, dpi=300)
plt.show()
#+end_src

#+RESULTS:
: 561c6c70-f977-4a69-9166-90ca051c3739

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: 4596af88-6d94-45bd-ba63-164ca238deca

#+begin_src ipython
model.N_BATCH = 16

ff_input = []
l=0
for j in [0, 1, -1]:
    for i in [-1, 1]:
        for k in [-1, 1]:

            model.I0[0] = i # sample
            model.I0[1] = j # distractor
            model.I0[4] = k # test

            if j==1: # Go
                model.I0[2] = float(B0) # cue
                model.I0[3] = float(C0) * model.IF_RL # rwd
            elif j==-1: # NoGo
                model.I0[2] = float(B0) # cue
                model.I0[3] = 0.0 # rwd
            else: # DPA
                model.I0[2] = 0 # cue
                model.I0[3] = 0 # rwd

            l+=1

            ff_input.append(model.init_ff_input())

ff_input = torch.vstack(ff_input)
#+end_src

#+RESULTS:
: df3ebc7e-b66e-4c91-93ec-067d266a800c

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach()
rates = rates.cpu().detach().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: 0d8d21fe-e1ff-4c1f-8041-d7fabec1d085

#+begin_src ipython
readout = model.readout.cpu().detach().numpy().reshape(3, -1, 81, 2) / 2
print(readout.shape)

N_BATCH=32

time = np.linspace(0, 8, readout.shape[-2])
fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

color = ['r', 'b', 'g']
label = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    sample = (-readout[i, :N_BATCH, :, 0].T  + readout[i, N_BATCH:, :, 0].T)
    dist = (readout[i, :N_BATCH, :, 1].T  + readout[i, N_BATCH:, :, 1].T)

    ax[0].plot(time, sample.mean(1), color=color[i])
    ax[1].plot(time, dist.mean(1), color=color[i], label=label[i])

add_vlines(ax[0])
add_vlines(ax[1])
ax[0].set_ylabel('Sample Overlap (Hz)')
ax[1].set_ylabel('Go/NoGo Overlap (Hz)')
ax[1].legend(frameon=False, fontsize=10)
ax[0].set_xlabel('Time (s)')
ax[1].set_xlabel('Time (s)')

plt.savefig('./figures/dual/dual_naive_%d_over.svg' % seed, dpi=300)
plt.show()
#+end_src

#+RESULTS:
: b1204f0f-8658-4bb2-b1df-51419b1d69c3

#+begin_src ipython

#+end_src

#+RESULTS:
: 948a6ee8-2e59-4d2e-84b3-0d83cf8c3f57

** Training

#+begin_src ipython
model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = False
  #+end_src

  #+RESULTS:
  : 2d6955db-0073-48b9-a981-5dc345ddedc3

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

mask_rwd = (steps >= (model.N_STIM_ON[-1].cpu().numpy() - model.N_STEADY))
rwd_idx = np.where(mask_rwd)[0]
print('rwd', rwd_idx)

mask_cue = (steps >= (model.N_STIM_ON[2].cpu().numpy() - model.N_STEADY)) & (steps <= (model.N_STIM_ON[-1].cpu().numpy() - model.N_STEADY))

cue_idx = np.where(mask_cue)[0]
print('cue', cue_idx)

stim_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY))

mask_zero = ~mask_rwd & ~mask_cue & ~stim_mask
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)
#+end_src

#+RESULTS:
: 378713b7-86e8-4ff9-8709-a5409c2f7416

#+begin_src ipython
model.N_BATCH = 86

model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))
# model.lr_eval_win = np.max( (rwd_idx.shape[0], dist_idx.shape[0], cue_idx.shape[0]))

ff_input = []
labels = np.zeros((2, 12, model.N_BATCH, model.lr_eval_win))
# labels = np.zeros((3, 12, model.N_BATCH, model.lr_eval_win))

# if model.IF_RL==0:
#     B0 = 0

print(float(B0), float(C0))

l=0
for i in [-1, 1]:
    for j in [-1, 0, 1]:
        for k in [-1, 1]:

            model.I0[0] = i # sample
            model.I0[1] = j # distractor
            model.I0[4] = k # test

            if i==k: # Pair Trials
                labels[0, l] = np.ones((model.N_BATCH, model.lr_eval_win))

            if j==1: # Go
                model.I0[2] = float(B0) # cue
                model.I0[3] = float(C0) * model.IF_RL # rwd

                labels[1, l] = np.ones((model.N_BATCH, model.lr_eval_win))
            elif j==-1: # NoGo
                model.I0[2] = float(B0) # cue
                model.I0[3] = 0.0 # rwd
            else: # DPA
                model.I0[2] = 0 # cue
                model.I0[3] = 0 # rwd

            l+=1

            ff_input.append(model.init_ff_input())

labels = torch.tensor(labels, dtype=torch.float, device=DEVICE).reshape(2, -1, model.lr_eval_win).transpose(0, 1)
# labels = torch.tensor(labels, dtype=torch.float, device=DEVICE).reshape(3, -1, model.lr_eval_win).transpose(0, 1)
ff_input = torch.vstack(ff_input)
print('ff_input', ff_input.shape, 'labels', labels.shape)
#+end_src

#+RESULTS:
: cf9c9a8b-b5bd-4e9f-a672-ed2bd50a96cd

#+begin_src ipython
batch_size = 32
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: 4553e40c-731d-4aba-ad29-f0fc767a0e00

#+begin_src ipython
criterion = DualLoss(alpha=1.0, thresh=2.0, cue_idx=cue_idx, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=[0.0, 0.0], read_idx=[1, 1])
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:
: 828c6a17-7c6f-4fbc-b3f8-8793046620f7

#+begin_src ipython
print('training Dual')
num_epochs = 15
start = perf_counter()

loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=0)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
: 49242e18-f853-4884-97e3-1fcd6ee78702

#+begin_src ipython
torch.save(model.state_dict(), 'models/dual/dual_train_%d.pth' % seed)
#+end_src

#+RESULTS:
: d29d4040-dd5d-4bfd-abb2-9f02555a5c87

#+begin_src ipython

#+end_src

#+RESULTS:
: 7807838f-cfee-4de4-ace9-dc257c910967

** Re-Testing
:PROPERTIES:
:tangle no
:END:

#+begin_src ipython
model_state_dict = torch.load('models/dual/dual_train_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: 959237b9-8aa5-444f-aadc-26e1f82b2bee

#+begin_src ipython
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]

odors = model.odors.cpu().numpy()

m = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
n = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 1]

vectors = [U, V, m, n, odors[0], odors[1]]
labels = ['$m_S$', '$n_S$', '$m_D$', '$n_D$', '$h_S$', '$h_D$']
#+end_src

#+RESULTS:
: 68d0d9a1-148b-46c8-9d8c-f5447761cf19

#+begin_src ipython
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]

odors = model.odors.cpu().numpy()

m = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
n = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 1]


vectors = [U, m, odors[0], odors[1]]
labels = ['$m_S$', '$m_D$', '$h_S$', '$h_D$']

import numpy as np
import matplotlib.pyplot as plt

# Calculate the covariance matrix
num_vectors = len(vectors)
cov_matrix = np.zeros((num_vectors, num_vectors))

for i in range(num_vectors):
    for j in range(num_vectors):
        cov_matrix[i][j] = angle_AB(vectors[i], vectors[j])

# Mask the upper triangle
mask = np.triu(np.ones_like(cov_matrix, dtype=bool))
masked_cov_matrix = np.ma.masked_array(cov_matrix, mask=mask)

plt.figure(figsize=(8, 6))

# Plot the masked covariance matrix
img = plt.imshow(masked_cov_matrix, cmap='coolwarm', interpolation='nearest', vmin=45, vmax=90)
cbar = plt.colorbar(label='Angle (Â°)')
cbar.set_ticks([45, 90])

# Set axis labels on top and left
# plt.gca().xaxis.tick_top()
plt.xticks(ticks=np.arange(num_vectors), labels=labels)
plt.yticks(ticks=np.arange(num_vectors), labels=labels)

for i in range(num_vectors):
    for j in range(i + 1):
        plt.text(j , i , f'{cov_matrix[i, j]:.0f}', ha='center', va='center', color='black')
plt.savefig('./figures/dual/cov_train_%d.svg' % seed, dpi=300)
plt.show()
#+end_src

#+RESULTS:
: 2c1c15a3-fc05-42f3-8738-29223742966b

    #+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: e4a85e48-1aa8-445b-82ef-dfeb16cf9b38

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = A0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: 0c3ab511-459e-4ce6-9b16-fd33652d6529

#+begin_src ipython
model.N_BATCH = 16

ff_input = []
l=0
for j in [0, 1, -1]:
    for i in [-1, 1]:
        for k in [-1, 1]:

            model.I0[0] = i # sample
            model.I0[1] = j # distractor
            model.I0[4] = k # test

            if j==1: # Go
                model.I0[2] = float(B0) # cue
                model.I0[3] = float(C0) * model.IF_RL # rwd
            elif j==-1: # NoGo
                model.I0[2] = float(B0) # cue
                model.I0[3] = 0.0 # rwd
            else: # DPA
                model.I0[2] = 0 # cue
                model.I0[3] = 0 # rwd

            l+=1

            ff_input.append(model.init_ff_input())

ff_input = torch.vstack(ff_input)
print('ff_input', ff_input.shape, 'labels')
#+end_src

#+RESULTS:
: ff94b0cf-eefe-41b7-8c99-88fd6a5669dc

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach()
rates = rates.cpu().detach().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: cb0cd2a3-c7c4-438f-8c82-174936ddcff7

#+begin_src ipython
readout = model.readout.cpu().detach().numpy().reshape(3, -1, 81, 2) / 2
print(readout.shape)

N_BATCH=32

time = np.linspace(0, 8, readout.shape[-2])
fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

color = ['r', 'b', 'g']
label = ['DPA', 'DualGo', 'DualNoGo']

for i in range(3):
    sample = (-readout[i, :N_BATCH, :, 0].T  + readout[i, N_BATCH:, :, 0].T)
    dist = (readout[i, :N_BATCH, :, 1].T  + readout[i, N_BATCH:, :, 1].T)

    ax[0].plot(time, sample.mean(1), color=color[i])
    ax[1].plot(time, dist.mean(1), color=color[i], label=label[i])

add_vlines(ax[0])
add_vlines(ax[1])
ax[0].set_ylabel('Sample Overlap (Hz)')
ax[1].set_ylabel('Go/NoGo Overlap (Hz)')
ax[1].legend(frameon=False, fontsize=10)
ax[0].set_xlabel('Time (s)')
ax[1].set_xlabel('Time (s)')
plt.savefig('./figures/dual/dual_train_%d_over.svg' % seed, dpi=300)
plt.show()
#+end_src

#+RESULTS:
: 4b084dba-5b08-4126-b016-d8c70e9f51e9

#+begin_src ipython

#+end_src

#+RESULTS:
: cb621f83-5125-429b-87bf-32b985b72987

** Fix

#+begin_src ipython
def get_fix_points(model, task, seed):
    model_state_dict = torch.load('models/dual/%s_%d.pth' % (task, seed))
    model.load_state_dict(model_state_dict)
    ff_input = get_input(model)
    rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
    idx = get_idx(model, rank=1)
    return rates[..., idx]
#+end_src

#+RESULTS:
: c4dcd826-52a4-4372-a574-e5f0edb2b8c5

#+begin_src ipython
def get_input(model):
    model.N_BATCH = 10

    model.I0[0] = 1
    model.I0[1] = 0
    model.I0[2] = 0
    model.I0[3] = 0
    model.I0[4] = 0

    A_pair = model.init_ff_input()

    model.I0[0] = -1
    model.I0[1] = 0
    model.I0[2] = 0
    model.I0[3] = 0
    model.I0[4] = 0

    B_pair = model.init_ff_input()

    ff_input = torch.cat((A_pair, B_pair))

    return ff_input
#+end_src

#+RESULTS:
: 6e12dc24-48ae-4a90-8d3e-b25b3707c58d

#+begin_src ipython
dpa = get_fix_points(model, 'dpa', seed)
dual_naive = get_fix_points(model, 'dual_naive', seed)
dual_train = get_fix_points(model, 'dual_train', seed)
#+end_src

#+RESULTS:
: 3e8e37d5-1773-4579-8623-6625a2628890

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=[3*height, height])
plot_fix_points(dpa, ax[0], 'DPA')
plot_fix_points(dual_naive, ax[1], 'Dual Naive')
plot_fix_points(dual_train, ax[-1], 'Dual Expert')
plt.savefig('./figures/dual/fixed_points_%d.svg' % seed, dpi=300)
#+end_src

#+RESULTS:
: 1a6a6598-5fab-42d7-8a33-ff7b92562439

#+begin_src ipython
rates = np.stack((dpa, dual_naive, dual_train))
pkl_save(rates, './models/dual/rates_%d' % seed)
#+end_src

#+RESULTS:
: 0567bdca-f48d-47d1-ad44-d513d5867235

#+begin_src ipython
model.DURATION = 8
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 9c70853f-6c71-4183-8157-de5ef2c7dbe9

#+RESULTS:

#+begin_src ipython
import re
seeds = [int(re.search(r'_(\d+)\.pkl$', name).group(1)) for name in dpa_files]
print(seeds)
#+end_src

#+RESULTS:
: b6b03aa9-5869-4512-a860-7e7791ce46cf

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=[3*height, height])
for seed in seeds:
    rates = pkl_load('./models/dual/rates_%d' % seed)
    plot_fix_points(rates[0], ax[0], 'DPA')
    plot_fix_points(rates[1], ax[1], 'Dual Naive')
    plot_fix_points(rates[2], ax[-1], 'Dual Expert')
plt.savefig('./figures/dual/fixed_points_%d.svg' % seed, dpi=300)
#+end_src

#+RESULTS:
: e4f480ce-719b-4ad9-8757-aa12bd5bf171

#+begin_src ipython

#+end_src

#+RESULTS:
: 740a7d37-48a6-4881-818c-94746289f2db

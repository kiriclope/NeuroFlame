#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr_single :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_df_X(rates, X_list, X_str='Ie'):
      n_X, n_trials, n_neurons = rates.shape
      
      # Create indices
      # trials_ind, phi_ind, X_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_X, n_times, n_neurons))

      X_ind, trials_ind, neurons_ind = np.meshgrid(
          np.arange(n_X),
          np.arange(n_trials),
          np.arange(n_neurons),
          indexing='ij'
      )

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          X_str : X_ind.flatten() * (X_list[-1] - X_list[0]) / (X_list.shape[0] -1)+ X_list[0],
          'neuron': neurons_ind.flatten(),          
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_X(df, X_str='Ie'):
      # Avoid creating new DataFrame by using .loc 
      # end_point_index = df[df.time==df.time.iloc[-1]].index

      end_point = df.groupby(['trial', X_str])['rates'].apply(decode_bump).reset_index()
      end_point[['m0', 'm1', 'phase']] = pd.DataFrame(end_point['rates'].tolist(), index=end_point.index)

      end_point.drop(columns=['rates'], inplace=True)

      print(end_point.head())
      return end_point

  # def get_code_X(df, X_str='Ie'):
  #     # df_code = df.groupby(['time', 'trial', 'phi', X_str] )['rates'].apply(decode_bump).reset_index()
  #     # df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
  #     # df_code = df_code.drop(columns=['rates'])

  #     df_code = []
  #     end_point = df[df.time==df.time.iloc[-1]]
  #     end_point = end_point.drop(columns=['time'])

  #     df_subset = end_point[['trial', 'phi', X_str, 'rates']]
  #     end_point = df_subset.groupby(['trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
  #     end_point[['m0', 'm1', 'phase']] = pd.DataFrame(end_point['rates'].tolist(), index=end_point.index)
  #     end_point = end_point.drop(columns=['rates'])
  #     print(end_point.head())

  #     return df_code, end_point  

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_X(name, X_list, ini_list, phi_list, X_str='Ie'):
      rates = get_rates_X(name, X_list, ini_list, phi_list, X_str)
      df = get_df_X(rates, X_list, X_str)
      return df
#+end_src


#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)
        
    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, neurons_ind = np.indices((n_trials, n_phi, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'rates': rates.flatten()
      })
      
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list, rates=None):
      if rates is None:
          rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      if x.ndim>1:
          cmean =  (x - circmean(x, axis=-1, low=-np.pi, high=np.pi)[:, np.newaxis]) % (2* np.pi) - np.pi
      else:
          cmean =  (x - circmean(x, axis=-1, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi

      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi

      return cmean
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  import torch.nn as nn
  def run_ini_phi(conf, name, ini_list, phi_list, **kwargs):
      start = perf_counter()

      for ini in ini_list:
          for phi in phi_list:
              model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, PHI0=phi, **kwargs)

              model = nn.DataParallel(model)
              model.module.run()

      end = perf_counter()
      print("Elapsed (with compilation) = {}s".format((end - start)))
#+end_src

#+RESULTS:

#+begin_src ipython
  from joblib import Parallel, delayed
  import torch
  import os
  import warnings
  warnings.filterwarnings("ignore")

  def run_simulation(conf, name, ini, phi, device, **kwargs):
      warnings.filterwarnings("ignore")

      # torch.cuda.set_device(device)

      # REPO_ROOT = "/home/leon/models/NeuroTorch"
      model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                      REPO_ROOT, PHI0=phi, DEVICE=device, **kwargs)

      model.run()
      # del model
      # Optionally clear this process's GPU memory
      # torch.cuda.empty_cache()
      
  def run_ini_phi_parallel(batch_size, conf, name, ini_list, phi_list, available_gpu_memory=0, device='cuda:0', **kwargs):

      print('batch size', batch_size)
      start = perf_counter()

      # Run the simulations in parallel with optimal n_jobs
      Parallel(n_jobs=batch_size)(
          delayed(run_simulation)(conf, name, ini, phi, device=device, **kwargs)
          for ini, phi in [(ini, phi) for ini in ini_list for phi in phi_list]
      )

      torch.cuda.empty_cache()
      end = perf_counter()
      print("Elapsed (with compilation) = {}s".format((end - start)))

      print("Done")
#+end_src

#+RESULTS:

#+begin_src python
  import torch.multiprocessing as mp
  from time import perf_counter
  import torch

  # Assuming Network is defined somewhere
  # from your_project import Network
  mp.set_start_method('spawn')

  def run_simulation(conf, name, ini, phi, device, gpu_queue, **kwargs):
      # Get the device ID from the queue for this process
      device_id = gpu_queue.get()
      device = 'cuda:{}'.format(device_id)

      torch.cuda.set_device(device)

      # Initialize the model with the given configuration
      model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                      PHI0=phi, DEVICE=device, **kwargs)

      model.run()

      # Clear the process's GPU memory
      torch.cuda.empty_cache()

      # Put the device ID back into the queue for other processes to reuse
      gpu_queue.put(device_id)

  def run_ini_phi_parallel(batch_size, conf, name, ini_list, phi_list, **kwargs):
      start = perf_counter()

      # Set start method to spawn to create new CUDA contexts for each process
      mp.set_start_method('spawn', force=True)

      # Create a queue with device IDs
      gpu_queue = mp.Queue()
      for i in range(torch.cuda.device_count()):
          gpu_queue.put(i)

      # Create all combinations of ini and phi
      combinations = [(ini, phi) for ini in ini_list for phi in phi_list]

      # Create a pool of workers equal to the number of available GPUs
      pool = mp.Pool(processes=batch_size)
      
      # Start the processes
      jobs = []     
      for ini, phi in combinations:
          job = pool.apply_async(run_simulation, (conf, name, ini, phi, 'cuda', gpu_queue), kwargs)
          jobs.append(job)

      # Wait for all jobs to complete
      for job in jobs:
          job.get()

      pool.close()
      pool.join()

      end = perf_counter()
      print("Elapsed (with compilation) = {}s".format((end - start)))
      print("Done")

  # Usage example with hypothetical values:
  # run_ini_phi_parallel(batch_size=4, conf='config1', name='experiment', ini_list=[1, 2, 3], phi_list=[0.1, 0.2, 0.3])
#+end_src

#+RESULTS:
: None

#+begin_src ipython
  torch.cuda.empty_cache()
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Single Trial
** Model

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  fig, ax = plt.subplots(figsize=(0.65 *  width, 0.75 * height))
  ax.plot(x, Activation()(torch.tensor(x), func_name='relu'), 'k', lw=5)
  ax.xaxis.set_visible(False)
  ax.yaxis.set_visible(False)
  ax.set_title('Non Saturating I/O')
  for spine in ax.spines.values():
      spine.set_visible(False)
  plt.savefig('relu.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/12943d2f9aed37c9c3c04099ee8a8a005d5bc52a.png]]

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  fig, ax = plt.subplots(figsize=(0.65 *  width, 0.75 * height))
  ax.plot(x, Activation()(x, func_name='erfc'), 'k', lw='5')
  ax.xaxis.set_visible(False)
  ax.yaxis.set_visible(False)
  ax.set_title('Saturating I/O')
  for spine in ax.spines.values():
      spine.set_visible(False)
  plt.savefig('saturating.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/97b8c8274098c2be0ce2c144fc7f9651122154bb.png]]

** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  start = perf_counter()
  name = "odr_off"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', PHI0=180)
  # model = nn.DataParallel(model)
  # model.to('cuda')
  
  ini_list = np.arange(0, 1000)
  Ja0_list = np.linspace(10, 30, 21)
  # Ja0_list = [14, 24]
  rates_off = model.run(Ja0_list, ini_list)
  end = perf_counter()
  print("Elapsed (with compilation) = {}s".format((end - start)))
  print('rates', rates_off.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 40.663972028996795s
: rates (1, 21000, 1000)

#+begin_src ipython
  rates_off = rates_off.reshape(1, len(Ja0_list), len(ini_list), -1)[0]
  print(rates_off.shape)
  m0, m1, phi = decode_bump(rates_off, axis=-1)
  cmean = get_precision(phi)
  # print(np.mean(rates_off, -1))
#+end_src

*** Analysis
***** Load data

#+begin_src ipython 
  df = get_df_X(rates_off, Ja0_list, X_str='Ie')
  end_point = get_code_X(df, 'Ie')
  df_smooth = df.groupby(['trial', 'Ie'])['rates'].apply(circcvl).reset_index()
  # end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) 
  end_point['precision'] = end_point.groupby(['Ie'], group_keys=False)['phase'].apply(get_precision)
#+end_src

#+RESULTS:
:    trial    Ie        m0        m1     phase
: 0      0  10.0  4.744102  3.349092  3.666775
: 1      0  11.0  4.753168  3.441985  3.139058
: 2      0  12.0  4.765643  3.347222  3.146033
: 3      0  13.0  4.741322  3.265057  2.938715
: 4      0  14.0  4.766413  3.393163  2.749576

***** Tuning Profile

#+begin_src ipython
  idx_off = Ja0_list[3]
  idx_on = Ja0_list[18]
  print('parameters', idx_off, idx_on)
  N_E = 1000
#+end_src

#+RESULTS:
: parameters 13.0 28.0

#+begin_src ipython
  df_point = end_point[end_point.Ie==idx_off]
  df_point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[0], legend=False, color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[0], legend=False, marker='o', ms=10, color=pal[1])

  ax[0].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[0].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Ie==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Ie==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[0])
  ax[1].plot(point_on, color=pal[1])
  
  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Activity (Hz)')
  ax[1].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[125], line 7[0m
: [1;32m      4[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;241m1[39m, [38;5;241m2[39m, figsize[38;5;241m=[39m[[38;5;241m2[39m[38;5;241m*[39mwidth, height])
: [1;32m      6[0m sns[38;5;241m.[39mlineplot(end_point, x[38;5;241m=[39m[38;5;124m'[39m[38;5;124mIe[39m[38;5;124m'[39m, y[38;5;241m=[39mend_point[[38;5;124m'[39m[38;5;124mm1[39m[38;5;124m'[39m][38;5;241m/[39mend_point[[38;5;124m'[39m[38;5;124mm0[39m[38;5;124m'[39m], ax[38;5;241m=[39max[[38;5;241m0[39m], legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mk[39m[38;5;124m'[39m)
: [0;32m----> 7[0m sns[38;5;241m.[39mlineplot(end_point, x[38;5;241m=[39midx_off, y[38;5;241m=[39mdf_point[[38;5;124m'[39m[38;5;124mm1[39m[38;5;124m'[39m][38;5;241m/[39m df_point[[38;5;124m'[39m[38;5;124mm0[39m[38;5;124m'[39m], ax[38;5;241m=[39max[[38;5;241m0[39m], legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124mo[39m[38;5;124m'[39m, ms[38;5;241m=[39m[38;5;241m10[39m, color[38;5;241m=[39m[43mpal[49m[[38;5;241m0[39m]) 
: [1;32m      8[0m sns[38;5;241m.[39mlineplot(end_point, x[38;5;241m=[39midx_on, y[38;5;241m=[39mdf_point_on[[38;5;124m'[39m[38;5;124mm1[39m[38;5;124m'[39m] [38;5;241m/[39m df_point_on[[38;5;124m'[39m[38;5;124mm0[39m[38;5;124m'[39m], ax[38;5;241m=[39max[[38;5;241m0[39m], legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124mo[39m[38;5;124m'[39m, ms[38;5;241m=[39m[38;5;241m10[39m, color[38;5;241m=[39mpal[[38;5;241m1[39m])
: [1;32m     10[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_ylabel([38;5;124m'[39m[38;5;124m$[39m[38;5;124m\[39m[38;5;124mmathcal[39m[38;5;132;01m{F}[39;00m[38;5;124m_1 / [39m[38;5;124m\[39m[38;5;124mmathcal[39m[38;5;132;01m{F}[39;00m[38;5;124m_0$[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'pal' is not defined
[[file:./.ob-jupyter/56fd38dc1a9fb9def6651ea5117c4532bacb4c8d.png]]
:END:

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point.precision**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision']**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision']**2 * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5)

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)
  ax1.set_ylim([0.4, 1])

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-30, 30])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[126], line 8[0m
: [1;32m      4[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;241m1[39m, [38;5;241m2[39m, figsize[38;5;241m=[39m[[38;5;241m2[39m[38;5;241m*[39mwidth, height])
: [1;32m      6[0m sns[38;5;241m.[39mlineplot(end_point, x[38;5;241m=[39m[38;5;124m'[39m[38;5;124mIe[39m[38;5;124m'[39m, y[38;5;241m=[39mend_point[38;5;241m.[39mprecision[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m [38;5;241m*[39m [38;5;241m180[39m [38;5;241m/[39m np[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124mo[39m[38;5;124m'[39m, ax[38;5;241m=[39max[[38;5;241m0[39m])
: [0;32m----> 8[0m sns[38;5;241m.[39mlineplot(x[38;5;241m=[39midx_off, y[38;5;241m=[39mpoint[[38;5;124m'[39m[38;5;124mprecision[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m [38;5;241m*[39m [38;5;241m180[39m [38;5;241m/[39m np[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124mo[39m[38;5;124m'[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], ms[38;5;241m=[39m[38;5;241m10[39m, color[38;5;241m=[39m[43mpal[49m[[38;5;241m0[39m])
: [1;32m      9[0m sns[38;5;241m.[39mlineplot(x[38;5;241m=[39midx_on, y[38;5;241m=[39mpoint_on[[38;5;124m'[39m[38;5;124mprecision[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m [38;5;241m*[39m [38;5;241m180[39m [38;5;241m/[39m np[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124mo[39m[38;5;124m'[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], ms[38;5;241m=[39m[38;5;241m10[39m, color[38;5;241m=[39mpal[[38;5;241m1[39m])
: [1;32m     11[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xlabel([38;5;124m'[39m[38;5;124mFF Input (Hz)[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'pal' is not defined
[[file:./.ob-jupyter/ef45ac30b6924d4c5471bf1ef3adaabd7e672c4a.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:


#+begin_src ipython
  df = get_df_X(rates, X_list, X_str='Ie')

#+end_src
#+RESULTS:
: (21, 1000, 1000)

#+begin_src ipython
print(cmean.shape)
#+end_src

#+RESULTS:
: (21, 1000)

#+begin_src ipython
  mean = np.mean(cmean, -1)
  # print(mean)
  plt.plot(Ja0_list, np.mean((cmean * 180 / np.pi)**2 , -1) / 2)
  

#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7efc84020250> |
[[file:./.ob-jupyter/d428261c3734dee553638d033ea17199128a0ed8.png]]
:END:

#+begin_src ipython
  plt.hist(cmean[2] * 180 / np.pi)
  plt.hist(cmean[5] * 180 / np.pi)
#+end_src
#+RESULTS:
:RESULTS:
| array | ((4 20 78 170 282 260 121 55 6 4)) | array | ((-27.64452898 -21.9088451 -16.17316122 -10.43747734 -4.70179347 1.03389041 6.76957429 12.50525817 18.24094205 23.97662593 29.71230981)) | <BarContainer | object | of | 10 | artists> |
[[file:./.ob-jupyter/90c3204d4e2abd3b872653508bde4cd5129a36f8.png]]
:END:

#+begin_src ipython
  plt.hist(np.mean(rates_off[0], -1), bins='auto')
  plt.show()
  #+end_src

#+RESULTS:
[[file:./.ob-jupyter/78f74b5ddd02be8eea9b034bc1dbd38260cfbeb6.png]]


#+begin_src ipython
  name = "odr_on"
  start = perf_counter()
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda:0', Ja0=[24], PHI0=180)
  rates_on = model.run()
  end = perf_counter()
  print("Elapsed (with compilation) = {}s".format((end - start)))
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 1.9264750480651855s

** Analysis

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])

  times = np.linspace(0, 5, rates_off.shape[0])  
  # times = np.arange(0, 5, .1)

  N_E = 1000
  r_min = 0
  r_max = 1.5 * np.max((np.mean(rates_off), np.mean(rates_on)))
  r_max=15

  im = ax[0].imshow(rates_off.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_ylabel('Prefered Location (°)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[0].set_title('Control')
  ax[0].set_xlim([0, 5])

  ax[0].axvline(1, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(1.5, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(2.5, 0, 1000, ls='--', color='w', lw=2)
  ax[0].axvline(3, 0, 1000, ls='--', color='w', lw=2)

  im = ax[1].imshow(rates_on.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  ax[1].set_xlim([0, 5])

  ax[1].axvline(1, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(1.5, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(2.5, 0, 1000, ls='--', color='w', lw=2)
  ax[1].axvline(3, 0, 1000, ls='--', color='w', lw=2)

  # ax[1].set_ylabel('Prefered Location (°)')
  # ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_yticks([])
  ax[1].set_title('NB Stimulation')

  cbar = plt.colorbar(im, ax=ax[1])
  cbar.set_label("Activity (Hz)")
  cbar.set_ticks([0, 5, 10, 15])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/87825fb69ccd07ab338abd5741152533b0de0d09.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_off[:, :N_E], axis=-1)  
  m0_on, m1_on, phi_on = decode_bump(rates_on[:, :N_E], axis=-1) 
#+end_src

#+RESULTS:

#+begin_src ipython
  30 / (30 * 2 * 0.001 / 0.02) 
#+end_src

#+RESULTS:
: 10.0

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))

  times = np.linspace(0, 5, m0.shape[0])

  ax[0].plot(times, m0)
  ax[0].plot(times, m0_on)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].plot(times, m1_on / m0_on)

  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].plot(times, phi_on * 180 / np.pi)

  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([-180, -90, 0, 90, 180], [0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 1, 2, 3, 4, 5])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2a8c880698ff7df62e21c8a9846757b26ff2e96c.png]]

#+begin_src ipython
  smooth_off = circcvl(rates_off[-1, :N_E], windowSize=10, axis=-1)
  smooth_on = circcvl(rates_on[-1, :N_E], windowSize=10, axis=-1)

  theta = np.linspace(0, 360, rates_off.shape[-1])

  plt.plot(theta, smooth_off , 'b', label='off')
  plt.plot(theta, smooth_on, 'r', label='on')

  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  plt.legend(frameon=0, fontsize=12)
  # plt.yticks([5, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ff510bf909d13d8652d7dac0d70e2b15acd6cceb.png]]

* Multiple Trials
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"

  ini_list = np.arange(0, 20)
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [180]
#+end_src

#+RESULTS:

** Simulation

#+begin_src ipython
  name = 'odr_off'
  run_ini_phi(conf_name, name, ini_list, phi_list)
  # n_jobs = 1
  # run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:1', REC_LAST_ONLY=1)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 38.801885939901695s

#+begin_src ipython
  n_jobs = 10
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:1', REC_LAST_ONLY=0)
#+end_src

#+RESULTS:
: batch size 10
: Elapsed (with compilation) = 62.229770260863006s
: Done

#+begin_src ipython 
  name = 'odr_on'
  n_jobs = 32
  # run_ini_phi(conf_name, name, ini_list, phi_list, Ja0=[24])
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:1', Ja0=[24], Jab=[-2.5], REC_LAST_ONLY=1)
#+end_src

#+RESULTS:
: batch size 32
: Done

** Load data

#+begin_src ipython
  name = 'odr_off'
  df = load_data_ini_phi(name, ini_list, phi_list)
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
: (40, 8, 1, 1000)
:    trial  phi        m0        m1     phase
: 0      0    0  5.898682  5.414098  0.151582
: 1      0    1  5.898918  5.329563 -0.764372
: 2      0    2  5.876810  5.355007 -1.728505
: 3      0    3  5.898257  5.471752 -2.309134
: 4      0    4  5.912850  5.516602  3.018613

#+begin_src ipython
  name = 'odr_on'
  df_on = load_data_ini_phi(name, ini_list, phi_list)
  df_code_on, end_point_on = get_code_ini_phi(df_on)
#+end_src

#+RESULTS:
: (40, 8, 1, 1000)
:    trial  phi        m0        m1     phase
: 0      0    0  9.056557  4.124823  0.057107
: 1      0    1  9.036468  4.217732 -1.042520
: 2      0    2  9.069246  4.382596 -1.614233
: 3      0    3  9.063930  4.311031 -2.261653
: 4      0    4  9.057012  4.266793 -3.095974

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2.5*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  for phi in df_code.phi.unique():
      sns.lineplot(df_code, x='time', y=df_code[df_code.phi==phi]['phase']*180/np.pi, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (°)')

  for phi in df_code.phi.unique():
      sns.histplot(data=end_point, x=end_point[end_point.phi==phi]['phase']*180/np.pi, kde=False, bins='auto', stat='density', ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (°)')

  # sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins=10, stat='density', color='b')
  # print(end_point.head())
  theta = [np.cos(end_point['phase']-np.pi/2), np.sin(end_point['phase']-np.pi/2)]
  ax[2].plot(theta[0], theta[1], 'o')
  ax[2].set_xlim([-1.5, 1.5])
  ax[2].set_ylim([-1.5, 1.5])

  ax[2].set_xlabel('$ \\xi_S$')
  ax[2].set_ylabel('$ \\xi_D$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dbd0cacefb9025fc62c77c548466ee0487622966.png]]

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] * np.pi / 180) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
  
  print(end_point.head())
#+end_src

#+RESULTS:
:    trial  phi        m0        m1     phase  accuracy  precision
: 0      0    0  5.898682  5.414098  0.151582  0.151582   0.144388
: 1      0    1  5.898918  5.329563 -0.764372  5.501360  -0.031763
: 2      0    2  5.876810  5.355007 -1.728505  4.519773  -0.170998
: 3      0    3  5.898257  5.471752 -2.309134  3.921692   0.037029
: 4      0    4  5.912850  5.516602  3.018613  2.948800  -0.070538

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  bins = 160
  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=bins, stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=bins, stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([-180, -90 ,0, 90, 180], [0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=bins, stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=bins, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  bins = 8
  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-30, 30])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/56bde2144d435b4dbd988a112d99dba946cbbd36.png]]

#+begin_src ipython

#+end_src

#+RESULTS:


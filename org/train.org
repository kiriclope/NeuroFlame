#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroFlame"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
  from src.lr_utils import masked_normalize
#+end_src

#+RESULTS:

* Helpers
** Data Split

#+begin_src ipython
  from sklearn.model_selection import train_test_split, StratifiedShuffleSplit

  def split_data(X, Y, train_perc=0.8, batch_size=32):

    if Y.ndim==3:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0, 0].cpu().numpy(),
                                                          shuffle=True)
    else:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0].cpu().numpy(),
                                                          shuffle=True)
    print(X_train.shape, X_test.shape)
    print(Y_train.shape, Y_test.shape)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1):
      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):
          X, y = X.to(device), y.to(device)
          # Compute prediction error
          y_pred = model(X)

          # if y.ndim==y_pred.ndim:
          loss = loss_fn(y_pred, y)

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()
          # Clip gradients (norm)
          # torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)

          # Or clip gradients (value)
          #torch.nn.utils.clip_grad_value_(model.parameters(), clip_value=1.0)

          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
      
      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              data, targets = data.to(device), targets.to(device)

              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
              
          val_loss /= size

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1, thresh=.005):
      scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      # scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []

      # Training loop.
      for epoch in range(num_epochs):
          loss = train(train_loader, model, loss_fn, optimizer, penalty, lbd)
          val_loss = test(val_loader, model, loss_fn)
          scheduler.step(val_loss)

          loss_list.append(loss.item())
          val_loss_list.append(val_loss)

          # if epoch % int(num_epochs  / 10) == 0:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')

          if val_loss < thresh:
              print(f'Stopping training as loss has fallen below the threshold: {val_loss}')
              break

          if val_loss > 300:
              print(f'Stopping training as loss is too high: {val_loss}')
              break

          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def accuracy(y_pred, labels):
    # Assuming 'outputs' are logits from your model (raw scores before sigmoid)
    predicted = (y_pred > 0).float()  # Convert to 0 or 1 based on comparison with 0
    # 'labels' should be your ground truth labels for the binary classification, also in 0 or 1
    correct = (predicted == labels).sum().item()
    accuracy = correct / labels.size(0)
    return accuracy
#+end_src

#+RESULTS:

#+begin_src  ipython
  import torch.nn as nn

  class BalancedBCELoss(nn.Module):
      def __init__(self, alpha=0.1):
          super(BalancedBCELoss, self).__init__()
          self.alpha = alpha
          self.bce_with_logits = nn.BCEWithLogitsLoss()

      def forward(self, logits, targets):
          # Compute standard BCE Loss
          bce_loss = self.bce_with_logits(logits, targets)

          # Compute positive and negative mean activations
          # print(logits.shape, targets.shape)
          pos_activation = logits[targets == 1].mean()
          neg_activation = logits[targets == 0].mean()
          # print(pos_activation.shape , neg_activation.shape)
          # Compute the loss that promotes mean activity of 0 when averaged across both classes using MSE
          balance_loss = (pos_activation - neg_activation)**2

          # Combine the BCE loss with the balance loss
          combined_loss = bce_loss + self.alpha * balance_loss

          return combined_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.nn.functional as F

  class SignBCELoss(nn.Module):
      def __init__(self, alpha=0.1, thresh=1.0, N=1000):
          super(SignBCELoss, self).__init__()
          self.alpha = alpha
          self.thresh = thresh
          self.N = N

          self.bce_with_logits = nn.BCEWithLogitsLoss()

      def forward(self, readout, targets):
          bce_loss = self.bce_with_logits(readout, targets)

          # sign_overlap = torch.sign(2 * targets - 1) * readout / (1.0 * self.N)

          mean_activation = readout.mean(dim=1).unsqueeze(-1)
          sign_overlap = torch.sign(2 * targets - 1) * mean_activation / (1.0 * self.N)

          sign_loss = F.relu(self.thresh -sign_overlap).mean()

          combined_loss = (1-self.alpha) * bce_loss + self.alpha * sign_loss
          return combined_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class CosineLoss(nn.Module):
      def __init__(self, readout):
          super(CosineLoss, self).__init__()
          self.cosine_similarity = nn.CosineSimilarity(dim=-1)
          self.readout = readout

      def forward(self, rates, target):
          # Calculate cosine similarity
          cosine_sim = self.cosine_similarity(torch.sign(target) * rates, readout)
          # Calculate the loss as 1 - cosine_similarity
          loss = 1 - cosine_sim
          # Return the mean loss over the batch
          return loss.mean()
#+end_src

#+RESULTS:

#+begin_src ipython
  class DualLoss(nn.Module):
      def __init__(self, alpha=0.1, thresh=1.0, N=1000, cue_idx=[], rwd_idx=-1):
          super(DualLoss, self).__init__()
          self.alpha = alpha
          self.thresh = thresh
          self.N = N

          self.cue_idx = torch.tensor(cue_idx, dtype=torch.int, device='cuda')
          self.rwd_idx = torch.tensor(rwd_idx, dtype=torch.int, device='cuda')

          self.loss = SignBCELoss(self.alpha, self.thresh, self.N)

      def forward(self, readout, targets):

          is_empty = self.cue_idx.numel() == 0
          if is_empty:
              self.DPA_loss = self.loss(readout[:, self.rwd_idx], targets)
              return self.DPA_loss
          else:
              self.DPA_loss = self.loss(readout[:, self.rwd_idx], targets[:, 0, :self.rwd_idx.shape[0]])
              self.DRT_loss = self.loss(readout[:, self.cue_idx], targets[:, 1, :self.cue_idx.shape[0]])
              return (self.DPA_loss + self.DRT_loss) / 2.0
#+end_src

#+RESULTS:

** Other

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:          
          v = b - np.dot(b, a) / np.dot(a, a) * a
          
      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model, rank=2):
      ksi = torch.hstack((model.U, model.V)).T
      ksi = ksi[:, :model.Na[0]]

      readout = model.linear.weight.data
      ksi = torch.vstack((ksi, readout))

      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      theta = get_theta(ksi[0], ksi[rank])

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.odors.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
  
#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)  
      ci = smooth.std(axis=0, ddof=1) * 1.96
      
      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:
** plots

#+begin_src ipython
  def plot_rates_selec(rates, idx):
        ordered = rates[..., idx]
        fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
        r_max = 0.2 * np.max(rates[0])

        ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        # ax[0].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
        # ax[0].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
        ax[0].set_ylabel('Neuron #')
        ax[0].set_xlabel('Step')

        ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
        # ax[1].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
        # ax[1].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
        ax[1].set_ylabel('Pref. Location (°)')
        ax[1].set_xlabel('Step')

        plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  def plot_overlap(rates, readout, labels=['A', 'B']):
      overlap =(rates @ readout) / rates.shape[-1]
      print(overlap.shape)

      plt.plot(overlap.T[..., :2], label=labels[0])
      plt.plot(overlap.T[..., 2:], '--', label=labels[1])

      plt.legend(fontsize=10)
      plt.xlabel('Step')
      plt.ylabel('Overlap')

      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  def plot_m0_m1_phi(rates, idx):

      m0, m1, phi = decode_bump(rates[..., idx], axis=-1)
      fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

      ax[0].plot(m0[:2].T)
      ax[0].plot(m0[2:].T, '--')
      #ax[0].set_ylim([0, 360])
      #ax[0].set_yticks([0, 90, 180, 270, 360])
      ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
      ax[0].set_xlabel('Step')

      ax[1].plot(m1[:2].T)
      ax[1].plot(m1[2:].T, '--')
      # ax[1].set_ylim([0, 360])
      # ax[1].set_yticks([0, 90, 180, 270, 360])
      ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
      ax[1].set_xlabel('Step')

      ax[2].plot(phi[:2].T * 180 / np.pi)
      ax[2].plot(phi[2:].T * 180 / np.pi, '--')
      ax[2].set_ylim([0, 360])
      ax[2].set_yticks([0, 90, 180, 270, 360])
      ax[2].set_ylabel('Phase (°)')
      ax[2].set_xlabel('Step')

      plt.show()
    #+end_src

#+RESULTS:

* Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  conf_name = "config_train.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', SEED=0)
#+end_src

#+RESULTS:

#+begin_src ipython
  # print()
  # for name, param in model.named_parameters():
  #     if param.requires_grad:
  #         print(name, param.shape)
#+end_src

#+RESULTS:

* Sample Classification
** Training
*** Parameters

#+begin_src ipython
  model.LR_TRAIN = 1

  model.LR_EVAL_WIN = 4
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT)

  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

Testing the network on steps from sample odor offset to test odor onset

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  mask = (steps >= (model.N_STIM_OFF[0] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[2] - model.N_STEADY))
  rwd_idx = np.where(mask)[0]
  print(rwd_idx.shape)
#+end_src

#+RESULTS:
: (31,)

*** Inputs and Labels

#+begin_src ipython
  model.N_BATCH = 64

  model.I0[0] = 1.0
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -1.0
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([128, 1420, 2000])

#+begin_src ipython
  labels_A = torch.ones((model.N_BATCH, rwd_idx.shape[0]))
  labels_B = torch.zeros((model.N_BATCH, rwd_idx.shape[0]))
  labels = torch.cat((labels_A, labels_B))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 31])

*** Run

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([102, 1420, 2000]) torch.Size([26, 1420, 2000])
: torch.Size([102, 31]) torch.Size([26, 31])

#+begin_src ipython
  # criterion = nn.BCEWithLogitsLoss()
  criterion = DualLoss(alpha=0.5, thresh=2.0, N=model.Na[0], rwd_idx=rwd_idx)

  # SGD, Adam, AdamW
  learning_rate = 0.1
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)

  num_epochs = 30
  loss, val_loss = 0, 0
#+end_src

#+RESULTS:

#+begin_src ipython
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+end_src

#+RESULTS:
: Epoch 1/30, Training Loss: 0.8601, Validation Loss: 0.8555
: Epoch 2/30, Training Loss: 0.7265, Validation Loss: 0.7418
: Epoch 3/30, Training Loss: 0.6524, Validation Loss: 0.5942
: Epoch 4/30, Training Loss: 0.3420, Validation Loss: 0.2743
: Epoch 5/30, Training Loss: 0.0150, Validation Loss: 0.0000
: Stopping training as loss has fallen below the threshold: 0.0

** Testing

#+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()

  lr = model.lr_kappa * model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])
  lr = lr.clamp(min=-model.Wab_T[0, 0])

  model.Wab_T = (Wij +lr.T)
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([2, 1420, 2000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij.clone()

  print('rates', rates.shape)
  idx = get_idx(model, 2)
#+end_src

#+RESULTS:
: rates (2, 61, 1600)
: ksi torch.Size([5, 1600])

#+begin_src ipython
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/aa8172d387124017f5a2207f87bdcf6f5d043cca.png]]

#+begin_src ipython
    readout = model.linear.weight.data.cpu().detach().numpy()[0]
    plot_overlap(rates, readout, labels=['A', 'B'])
#+end_src

#+RESULTS:
:RESULTS:
: (2, 61)
[[file:./.ob-jupyter/9618733c436d1d4acf2cfe4bb9535f21724e1848.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/440754d5d7aca5c535fd43c1db69f6225c354d3a.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* DPA
** Training
*** Parameters

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_EVAL_WIN = model.T_STIM_OFF[2] - model.T_STIM_ON[2]
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)
  print(model.lr_eval_win)

  model.DURATION = 6.0
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 10

Here we only evaluate performance from test onset to test offset

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  mask = (steps >= (model.N_STIM_ON[2] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[2] - model.N_STEADY))
  rwd_idx = np.where(mask)[0]
#+end_src

#+RESULTS:

*** Inputs and Labels

#+begin_src ipython
  model.N_BATCH = 64

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([256, 1420, 2000])


 #+begin_src ipython
  labels_pair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([256, 10])

#+RESULTS:

*** Run

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([204, 1420, 2000]) torch.Size([52, 1420, 2000])
: torch.Size([204, 10]) torch.Size([52, 10])

#+begin_src ipython
  # Loss
  # criterion = nn.BCEWithLogitsLoss()
  criterion = DualLoss(alpha=0.5, thresh=2.0, N=model.Na[0], rwd_idx=rwd_idx)

  # Optimizer: SGD, Adam, AdamW
  learning_rate = 0.1
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 30
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
#+begin_example
  Epoch 1/30, Training Loss: 1.0906, Validation Loss: 2.6009
  Epoch 2/30, Training Loss: 1.8745, Validation Loss: 1.6120
  Epoch 3/30, Training Loss: 0.9192, Validation Loss: 1.0817
  Epoch 4/30, Training Loss: 0.8926, Validation Loss: 0.9081
  Epoch 5/30, Training Loss: 0.8946, Validation Loss: 0.9034
  Epoch 6/30, Training Loss: 0.9068, Validation Loss: 0.9004
  Epoch 7/30, Training Loss: 0.9099, Validation Loss: 0.8900
  Epoch 8/30, Training Loss: 0.8777, Validation Loss: 0.8842
  Epoch 9/30, Training Loss: 0.8639, Validation Loss: 0.8748
  Epoch 10/30, Training Loss: 0.8565, Validation Loss: 0.8719
  Epoch 11/30, Training Loss: 0.8539, Validation Loss: 0.8629
  Epoch 12/30, Training Loss: 0.8534, Validation Loss: 0.8448
  Epoch 13/30, Training Loss: 1.0759, Validation Loss: 0.8496
  Epoch 14/30, Training Loss: 0.8571, Validation Loss: 0.8606
#+end_example

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
: 70ad7693-b493-4b86-8927-809950350437

** Testing

#+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:
: 01456013-0c9e-4a39-8c94-7b6d7cef1bc1

#+begin_src ipython
  model.eval()
  if model.LR_NORM:
      lr = model.lr_kappa * model.lr_mask * (masked_normalize(model.U) @ masked_normalize(model.V).T) / (1.0 * model.Na[0])
  else:
      lr = model.lr_kappa * model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])

  lr = lr.clamp(min=-model.Wab_T[0, 0])

  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:
: b2f950d8-b7d2-4d3b-946c-bbf7f1b56ba9

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: ec12b04a-6957-46c9-a3e9-adb6b65b5147

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: eed3fcce-f732-467c-8085-b6c907786c1d

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: 2adbefb2-107a-4ee7-b571-272976836968

#+begin_src ipython
  idx = get_idx(model, 3)
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
: 6ba8ccc4-9fb8-49dd-9dde-d3c179ed0550

#+begin_src ipython
    readout = model.linear.weight.data.cpu().detach().numpy()[0]
    plot_overlap(rates, readout, labels=['pair', 'unpair'])
#+end_src

#+RESULTS:
: 53bb00c0-04af-4f97-ae03-40eedb4f9513

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
: b0dabd88-3d44-445c-8b87-9e08535a5afd

#+begin_src ipython

#+end_src

#+RESULTS:
: bbccce34-c66a-47de-9047-01332053ecf9

* Go/NoGo
** Training

#+begin_src ipython
  model.LR_TRAIN=1
  model.LR_EVAL_WIN = 1
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW+1)
  print(model.lr_eval_win)

  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 11

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  mask = (steps >= (model.N_STIM_OFF[1] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[2] - model.N_STEADY))

  rwd_idx = np.where(mask)[0]
  model.lr_eval_win = rwd_idx.shape[0]
#+end_src

#+RESULTS:

#+begin_src ipython
  for param in model.linear.parameters():
      param.requires_grad = False
#+end_src

#+RESULTS:

#+begin_src ipython
  for name, param in model.named_parameters():
      if param.requires_grad:
          print(name, param.shape)
#+end_src

#+RESULTS:
: U torch.Size([2000, 2])
: V torch.Size([2000, 2])

#+begin_src ipython
  # switching sample and distractor odors
  odors = model.odors.clone()
  model.odors[0] = odors[1]

  model.N_BATCH = 64

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  Go = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  NoGo = model.init_ff_input()

  ff_input = torch.cat((Go, NoGo))
  print(ff_input.shape)
  model.odors[0] = odors[0]
#+end_src

#+RESULTS:
: torch.Size([128, 1420, 2000])

#+begin_src ipython
  labels_Go = torch.ones((model.N_BATCH, model.lr_eval_win))
  labels_NoGo = torch.zeros((model.N_BATCH, model.lr_eval_win))
  labels = torch.cat((labels_Go, labels_NoGo))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 11])

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([102, 1420, 2000]) torch.Size([26, 1420, 2000])
: torch.Size([102, 11]) torch.Size([26, 11])

#+begin_src ipython
  # criterion = nn.BCEWithLogitsLoss()
  criterion = DualLoss(alpha=0.5, thresh=2.0, N=model.Na[0], rwd_idx=rwd_idx)

  # SGD, Adam, AdamW
  learning_rate = 0.1
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 30
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
  # switching back sample and distractor odors
  model.odors[0] = odors[0]
#+end_src
#+RESULTS:
#+begin_example
  Epoch 1/30, Training Loss: 0.8137, Validation Loss: 0.7895
  Epoch 2/30, Training Loss: 0.7869, Validation Loss: 0.7876
  Epoch 3/30, Training Loss: 0.7573, Validation Loss: 0.7835
  Epoch 4/30, Training Loss: 0.7729, Validation Loss: 0.7709
  Epoch 5/30, Training Loss: 0.7071, Validation Loss: 0.7490
  Epoch 6/30, Training Loss: 0.7787, Validation Loss: 0.7288
  Epoch 7/30, Training Loss: 0.7110, Validation Loss: 0.7087
  Epoch 8/30, Training Loss: 0.6649, Validation Loss: 0.6893
  Epoch 9/30, Training Loss: 0.7065, Validation Loss: 0.6750
  Epoch 10/30, Training Loss: 0.6326, Validation Loss: 0.6614
  Epoch 11/30, Training Loss: 0.6517, Validation Loss: 0.6492
  Epoch 12/30, Training Loss: 0.6042, Validation Loss: 0.6356
  Epoch 13/30, Training Loss: 0.6238, Validation Loss: 0.6209
  Epoch 14/30, Training Loss: 0.5761, Validation Loss: 0.6070
  Epoch 15/30, Training Loss: 0.5245, Validation Loss: 0.5922
  Epoch 16/30, Training Loss: 0.5763, Validation Loss: 0.5749
  Epoch 17/30, Training Loss: 0.5215, Validation Loss: 0.5550
  Epoch 18/30, Training Loss: 0.5378, Validation Loss: 0.5346
  Epoch 19/30, Training Loss: 0.5496, Validation Loss: 0.5121
  Epoch 20/30, Training Loss: 0.4537, Validation Loss: 0.4873
  Epoch 21/30, Training Loss: 0.3910, Validation Loss: 0.4656
  Epoch 22/30, Training Loss: 0.4071, Validation Loss: 0.4407
  Epoch 23/30, Training Loss: 0.4209, Validation Loss: 0.4161
  Epoch 24/30, Training Loss: 0.4405, Validation Loss: 0.3901
  Epoch 25/30, Training Loss: 0.2604, Validation Loss: 0.3536
  Epoch 26/30, Training Loss: 0.2553, Validation Loss: 0.3053
  Epoch 27/30, Training Loss: 0.1102, Validation Loss: 0.2443
  Epoch 28/30, Training Loss: 0.2202, Validation Loss: 0.2166
  Epoch 29/30, Training Loss: 0.2605, Validation Loss: 0.1907
  Epoch 30/30, Training Loss: 0.0571, Validation Loss: 0.1676
#+end_example

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b76926b59e176d4186c33c6c58eac7abc476f818.png]]

** Testing

 #+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  if model.LR_NORM:
      lr = model.lr_kappa * model.lr_mask * (masked_normalize(model.U) @ masked_normalize(model.V).T) / (1.0 * model.Na[0])
  else:
      lr = model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])

  lr = lr.clamp(min=-model.Wab_T[0, 0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 3
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  odors = model.odors.clone()
  model.odors[0] = odors[1]
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print('ff_input', ff_input.shape)
  model.odors[0] = odors[0]
#+end_src

#+RESULTS:
: ff_input torch.Size([2, 820, 2000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (2, 31, 1600)

#+begin_src ipython
  idx = get_idx(model, 2)
#+end_src

#+RESULTS:
: ksi torch.Size([5, 1600])

#+begin_src ipython
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4b54406adbfea93d4b8fd676a6b9856db16672f3.png]]

#+begin_src ipython
    readout = model.linear.weight.data.cpu().detach().numpy()[0]
    plot_overlap(rates, readout, labels=['Go', 'NoGo'])
#+end_src

#+RESULTS:
:RESULTS:
: (2, 31)
[[file:./.ob-jupyter/1aeaeb8651ad156985f3cc6e5d8f8a148ccbad7d.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cf699f9f404faa08187ced6e0cced745860ffdd1.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Dual
** Testing

 #+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  if model.LR_NORM:
      lr = model.lr_kappa * model.lr_mask * (masked_normalize(model.U) @ masked_normalize(model.V).T) / (1.0 * model.Na[0])
  else:
      lr = model.lr_kappa * model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])

  lr = lr.clamp(min=-model.Wab_T[0, 0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 1420, 2000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 61, 1600)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: ksi torch.Size([5, 1600])

#+begin_src ipython
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e4caaab4bea919900ace6494650a14ffdaddc96b.png]]

#+begin_src ipython
    readout = model.linear.weight.data.cpu().detach().numpy()[0]
    plot_overlap(rates, readout, labels=['pair', 'unpair'])
#+end_src

#+RESULTS:
:RESULTS:
: (4, 61)
[[file:./.ob-jupyter/cd0beac3e0baa53e9e4550bbb8302e7c753a86b7.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f558d9d5b9efdaedb97767e5b1e4afc0ccd71308.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Training

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_EVAL_WIN = 1
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)
  print(model.lr_eval_win)

  model.DURATION = 6.0
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 10

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  print(steps.shape)

  mask = (steps >= (model.N_STIM_ON[2] - model.N_STEADY)) & (steps <= (model.N_STIM_OFF[2] - model.N_STEADY))
  rwd_idx = np.where(mask)[0]
  print(rwd_idx)

  mask = (steps >= (model.N_STIM_OFF[1] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[2] - model.N_STEADY))
  cue_idx = np.where(mask)[0]
  print(cue_idx)
#+end_src

#+RESULTS:
: (61,)
: [50 51 52 53 54 55 56 57 58 59 60]
: [40 41 42 43 44 45 46 47 48 49 50]

#+begin_src ipython
  for param in model.linear.parameters():
       param.requires_grad = True
#+end_src

#+RESULTS:

#+begin_src ipython
  for name, param in model.named_parameters():
      if param.requires_grad:
          print(name, param.shape)
#+end_src
#+RESULTS:
: U torch.Size([2000, 2])
: V torch.Size([2000, 2])
: linear.weight torch.Size([1, 1600])
: linear.bias torch.Size([1])

#+begin_src ipython
  model.N_BATCH = 64

  model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))

  ff_input = []
  labels = np.zeros((2, 12, model.N_BATCH, model.lr_eval_win))
  l=0
  for i in [-1, 1]:
      for j in [-1, 0, 1]:
          for k in [1, -1]:

              model.I0[0] = i
              model.I0[1] = j
              model.I0[2] = k

              if i==k: # Pair Trials
                  labels[0, l] = np.ones((model.N_BATCH, model.lr_eval_win))
              else: # Unpair Trials
                  labels[0, l] = np.ones((model.N_BATCH, model.lr_eval_win))

              if j==1: # Go
                  labels[1, l] = np.ones((model.N_BATCH, model.lr_eval_win))
              if j==-1: # NoGo
                  labels[1, l] = np.ones((model.N_BATCH, model.lr_eval_win))

              l+=1

              ff_input.append(model.init_ff_input())

  labels = torch.tensor(labels, dtype=torch.float, device='cuda').reshape(2, -1, model.lr_eval_win).transpose(0, 1)
  ff_input = torch.vstack(ff_input)
  print('ff_input', ff_input.shape, 'labels', labels.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([768, 1420, 2000]) labels torch.Size([768, 2, 11])

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([614, 1420, 2000]) torch.Size([154, 1420, 2000])
: torch.Size([614, 2, 11]) torch.Size([154, 2, 11])

#+begin_src ipython
  # criterion = nn.BCEWithLogitsLoss()
  criterion = DualLoss(alpha=0.5, thresh=2.0, N=model.Na[0], cue_idx=cue_idx, rwd_idx=rwd_idx)

  # SGD, Adam, AdamW
  learning_rate = 0.1
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 30
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+end_src
#+RESULTS:
#+begin_example
  Epoch 1/30, Training Loss: 0.5874, Validation Loss: 0.9006
  Epoch 2/30, Training Loss: 0.9546, Validation Loss: 0.5615
  Epoch 3/30, Training Loss: 0.0729, Validation Loss: 0.6976
  Epoch 4/30, Training Loss: 0.5498, Validation Loss: 0.7903
  Epoch 5/30, Training Loss: 0.5739, Validation Loss: 0.6309
  Epoch 6/30, Training Loss: 0.0679, Validation Loss: 0.4250
  Epoch 7/30, Training Loss: 3.0350, Validation Loss: 0.5301
  Epoch 8/30, Training Loss: 0.1622, Validation Loss: 0.8770
  Epoch 9/30, Training Loss: 0.4851, Validation Loss: 0.5316
  Epoch 10/30, Training Loss: 0.7584, Validation Loss: 0.4907
  Epoch 11/30, Training Loss: 0.4760, Validation Loss: 0.4262
  Epoch 12/30, Training Loss: 0.3980, Validation Loss: 0.2171
  Epoch 13/30, Training Loss: 0.6124, Validation Loss: 0.6247
#+end_example

** Re-Testing

#+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:
: 48b31406-d10e-4696-9b05-985651aaf8a1

#+begin_src ipython
  model.eval()

  if model.LR_NORM:
      lr = model.lr_kappa * model.lr_mask * (masked_normalize(model.U) @ masked_normalize(model.V).T) / (1.0 * model.Na[0])
  else:
      lr = model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])
  lr = lr.clamp(min=-model.Wab_T[0, 0])

  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:
: 783beff4-b2b9-4f99-acc5-64f799207a9b

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 29e8fbc4-c898-46b8-9ad6-3d876bb04571

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: 554cdcde-7fa3-4369-bfc9-b31df2088568

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: 092f9273-adbf-484b-8e3b-31c160c819c6

#+begin_src ipython
  idx = get_idx(model, 2)
#+end_src

#+RESULTS:
: 91fd3493-6663-4ed9-8f31-9c5203c7b967

#+begin_src ipython
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
: fb80c8ea-ba78-471c-9254-f73afccfbdbd

#+begin_src ipython
    readout = model.linear.weight.data[0].cpu().detach().numpy()
    plot_overlap(rates, readout)
#+end_src

#+RESULTS:
: 3c566a00-d714-4b59-bb8d-c1fe7e660dda

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
: f3c2dab7-2d9b-4095-92dc-56df43d503aa

#+begin_src ipython

#+end_src

#+RESULTS:
: 965502f8-6141-4ca7-8b8b-b019381fe52e

#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Training
*** split data

#+begin_src ipython
  from sklearn.model_selection import train_test_split

  def split_data(X, Y, train_perc=0.8, batch_size=32):

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                        train_size=train_perc,
                                                        shuffle=True)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1):
      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):          
          X, y = X.to(device), y.to(device)
          # Compute prediction error
          y_pred = model(X)
          loss = loss_fn(y_pred, y)

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()
          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              data, targets = data.to(device), targets.to(device)
              
              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
          val_loss /= size

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1, thresh=.005):
      scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.95)
      # scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []

      # Training loop.
      for epoch in range(num_epochs):
          loss = train(train_loader, model, loss_fn, optimizer, penalty, lbd)
          val_loss = test(val_loader, model, loss_fn)
          scheduler.step(val_loss)

          loss_list.append(loss.item())
          val_loss_list.append(val_loss)

          # if epoch % int(num_epochs  / 10) == 0:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')

          if val_loss < thresh:
              print(f'Stopping training as loss has fallen below the threshold: {val_loss}')
              break

          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def correlation_loss(output, target):
      # Subtract the mean of each vector
      output_mean = output - torch.mean(output)
      target_mean = target - torch.mean(target)
    
      # Compute the covariance between output and target
      covariance = torch.mean(output_mean * target_mean)
      
      # Compute the standard deviations of the vectors
      output_std = torch.std(output)
      target_std = torch.std(target)
    
      # Calculate the Pearson correlation coefficient
      correlation = covariance / (output_std * target_std)
    
      # Since we want to increase the correlation, we minimize its negative
      loss = -correlation  # Maximizing correlation by minimizing its negative
    
      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
    import torch
    import torch.nn as nn

    def sign_constrained_loss(output, xi, target_sign):
        dot_product = torch.dot(output.flatten(), xi.flatten())
        if target_sign > 0:
            loss = torch.relu(-dot_product)  # Encourages positive dot product
        else:
            loss = torch.relu(dot_product)   # Encourages negative dot product
        return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class CosineLoss(nn.Module):
      def __init__(self):
          super(CosineLoss, self).__init__()
          self.cosine_similarity = nn.CosineSimilarity(dim=-1)
          
      def forward(self, input1, input2):
          # Calculate cosine similarity
          cosine_sim = self.cosine_similarity(input1, input2)
          # Calculate the loss as 1 - cosine_similarity
          loss = 1 - cosine_sim
          # Return the mean loss over the batch
          return loss.mean()
#+end_src

#+RESULTS:


#+RESULTS:

** Other

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:          
          v = b - np.dot(b, a) / np.dot(a, a) * a
          
      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model, rank=2):
      print(model.U.shape)
      ksi = torch.hstack((model.U, model.V)).T
      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      # ksi = model.PHI0.cpu().detach().numpy()

      print(ksi.shape)

      theta = get_theta(ksi[0], ksi[rank], GM=0, IF_NORM=0)
      theta = get_theta(ksi[0][:model.Na[0]], ksi[rank][:model.Na[0]], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
  
#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)  
      ci = smooth.std(axis=0, ddof=1) * 1.96
      
      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_train.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', SEED=0)
#+end_src

#+RESULTS:

#+begin_src ipython
  for name, param in model.named_parameters():
      if param.requires_grad:
          print(name, param.shape)
#+end_src

#+RESULTS:
: U torch.Size([2000, 2])
: V torch.Size([2000, 2])
: lr_kappa torch.Size([1])
: linear.weight torch.Size([1, 1600])
: linear.bias torch.Size([1])

* Sample Classification
** Training
#+begin_src ipython
  model.LR_TRAIN = 1

  model.LR_EVAL_WIN = 2
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)

  model.DURATION = 3
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 96

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([192, 510, 2000])

#+begin_src ipython
  labels_A = torch.zeros((model.N_BATCH, model.lr_eval_win))
  labels_B = torch.ones((model.N_BATCH, model.lr_eval_win))
  labels = torch.cat((labels_A, labels_B))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([192, 20])

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  # criterion = nn.CrossEntropyLoss()
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

  num_epochs = 100
  loss, val_loss = 0, 0
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+end_src

#+RESULTS:
#+begin_example
  Epoch 1/100, Training Loss: 24.7588, Validation Loss: 30.5179
  Epoch 2/100, Training Loss: 1.0854, Validation Loss: 5.6997
  Epoch 3/100, Training Loss: 19.7088, Validation Loss: 5.2973
  Epoch 4/100, Training Loss: 6.0293, Validation Loss: 1.1096
  Epoch 5/100, Training Loss: 15.5156, Validation Loss: 13.1699
  Epoch 6/100, Training Loss: 5.6522, Validation Loss: 6.7724
  Epoch 7/100, Training Loss: 3.5376, Validation Loss: 2.7082
  Epoch 8/100, Training Loss: 1.4399, Validation Loss: 8.9728
  Epoch 9/100, Training Loss: 3.3532, Validation Loss: 4.3192
  Epoch 10/100, Training Loss: 1.9716, Validation Loss: 2.3703
  Epoch 11/100, Training Loss: 1.0114, Validation Loss: 8.8841
  Epoch 12/100, Training Loss: 6.8288, Validation Loss: 6.6248
  Epoch 13/100, Training Loss: 3.5632, Validation Loss: 1.6383
  Epoch 14/100, Training Loss: 3.9160, Validation Loss: 12.1919
  Epoch 15/100, Training Loss: 1.8897, Validation Loss: 5.0433
  Epoch 16/100, Training Loss: 16.0885, Validation Loss: 5.0171
  Epoch 17/100, Training Loss: 2.8134, Validation Loss: 3.1971
  Epoch 18/100, Training Loss: 2.4907, Validation Loss: 0.7437
  Epoch 19/100, Training Loss: 3.2281, Validation Loss: 0.8026
  Epoch 20/100, Training Loss: 2.7200, Validation Loss: 3.6665
  Epoch 21/100, Training Loss: 9.3138, Validation Loss: 9.8631
  Epoch 22/100, Training Loss: 5.8637, Validation Loss: 0.9930
  Epoch 23/100, Training Loss: 0.4084, Validation Loss: 1.9451
  Epoch 24/100, Training Loss: 0.3235, Validation Loss: 0.6155
  Epoch 25/100, Training Loss: 0.3336, Validation Loss: 0.5973
  Epoch 26/100, Training Loss: 0.4487, Validation Loss: 0.3708
  Epoch 27/100, Training Loss: 0.3657, Validation Loss: 0.3816
  Epoch 28/100, Training Loss: 0.3982, Validation Loss: 1.0370
  Epoch 29/100, Training Loss: 2.1378, Validation Loss: 3.9224
  Epoch 30/100, Training Loss: 0.9315, Validation Loss: 2.6079
  Epoch 31/100, Training Loss: 1.6746, Validation Loss: 0.4847
  Epoch 32/100, Training Loss: 0.8052, Validation Loss: 1.3294
  Epoch 33/100, Training Loss: 0.4687, Validation Loss: 0.6328
  Epoch 34/100, Training Loss: 0.3944, Validation Loss: 0.4019
  Epoch 35/100, Training Loss: 0.3240, Validation Loss: 0.4207
  Epoch 36/100, Training Loss: 0.3277, Validation Loss: 0.3779
  Epoch 37/100, Training Loss: 0.3569, Validation Loss: 0.5816
  Epoch 38/100, Training Loss: 0.3346, Validation Loss: 0.7109
  Epoch 39/100, Training Loss: 0.3239, Validation Loss: 0.7830
  Epoch 40/100, Training Loss: 1.1434, Validation Loss: 0.4867
  Epoch 41/100, Training Loss: 0.4352, Validation Loss: 0.3904
  Epoch 42/100, Training Loss: 0.4788, Validation Loss: 1.4936
  Epoch 43/100, Training Loss: 0.3369, Validation Loss: 0.4437
  Epoch 44/100, Training Loss: 0.5609, Validation Loss: 1.3669
  Epoch 45/100, Training Loss: 0.3554, Validation Loss: 0.3862
  Epoch 46/100, Training Loss: 0.3671, Validation Loss: 0.4741
  Epoch 47/100, Training Loss: 0.4182, Validation Loss: 1.0989
  Epoch 48/100, Training Loss: 0.2992, Validation Loss: 0.3763
  Epoch 49/100, Training Loss: 0.4812, Validation Loss: 0.3797
  Epoch 50/100, Training Loss: 0.5129, Validation Loss: 0.4916
  Epoch 51/100, Training Loss: 0.7451, Validation Loss: 0.5468
  Epoch 52/100, Training Loss: 0.3433, Validation Loss: 0.6806
  Epoch 53/100, Training Loss: 1.6448, Validation Loss: 0.6955
  Epoch 54/100, Training Loss: 0.3108, Validation Loss: 0.7835
  Epoch 55/100, Training Loss: 0.7329, Validation Loss: 0.3697
  Epoch 56/100, Training Loss: 0.2681, Validation Loss: 0.6310
  Epoch 57/100, Training Loss: 0.3123, Validation Loss: 0.4371
  Epoch 58/100, Training Loss: 0.6464, Validation Loss: 0.6551
  Epoch 59/100, Training Loss: 0.6696, Validation Loss: 1.0829
  Epoch 60/100, Training Loss: 0.4985, Validation Loss: 0.3758
  Epoch 61/100, Training Loss: 0.4715, Validation Loss: 0.5396
  Epoch 62/100, Training Loss: 0.2912, Validation Loss: 0.4590
  Epoch 63/100, Training Loss: 0.3053, Validation Loss: 0.4033
  Epoch 64/100, Training Loss: 0.2849, Validation Loss: 0.5500
  Epoch 65/100, Training Loss: 0.5055, Validation Loss: 0.4842
  Epoch 66/100, Training Loss: 0.7199, Validation Loss: 0.4712
  Epoch 67/100, Training Loss: 0.4934, Validation Loss: 0.4235
  Epoch 68/100, Training Loss: 0.2502, Validation Loss: 0.4177
  Epoch 69/100, Training Loss: 0.2866, Validation Loss: 0.3532
  Epoch 70/100, Training Loss: 0.3389, Validation Loss: 0.6969
  Epoch 71/100, Training Loss: 0.6075, Validation Loss: 0.3499
  Epoch 72/100, Training Loss: 0.3447, Validation Loss: 0.4192
  Epoch 73/100, Training Loss: 0.3521, Validation Loss: 1.6532
  Epoch 74/100, Training Loss: 1.4762, Validation Loss: 1.8480
  Epoch 75/100, Training Loss: 1.0010, Validation Loss: 2.2296
  Epoch 76/100, Training Loss: 2.5312, Validation Loss: 1.5769
  Epoch 77/100, Training Loss: 0.3160, Validation Loss: 0.5876
  Epoch 78/100, Training Loss: 0.4981, Validation Loss: 0.5955
  Epoch 79/100, Training Loss: 0.6066, Validation Loss: 0.4052
  Epoch 80/100, Training Loss: 0.6800, Validation Loss: 0.3773
  Epoch 81/100, Training Loss: 0.4355, Validation Loss: 0.3915
  Epoch 82/100, Training Loss: 0.5472, Validation Loss: 1.0148
  Epoch 83/100, Training Loss: 0.3548, Validation Loss: 0.3491
  Epoch 84/100, Training Loss: 0.7300, Validation Loss: 1.2513
  Epoch 85/100, Training Loss: 0.2063, Validation Loss: 1.3660
  Epoch 86/100, Training Loss: 0.3099, Validation Loss: 0.7338
  Epoch 87/100, Training Loss: 0.3528, Validation Loss: 0.4237
  Epoch 88/100, Training Loss: 0.5892, Validation Loss: 0.8737
  Epoch 89/100, Training Loss: 0.2464, Validation Loss: 0.4363
  Epoch 90/100, Training Loss: 0.3635, Validation Loss: 0.3980
  Epoch 91/100, Training Loss: 0.4579, Validation Loss: 0.7767
  Epoch 92/100, Training Loss: 0.6844, Validation Loss: 1.4611
  Epoch 93/100, Training Loss: 1.7575, Validation Loss: 0.9232
  Epoch 94/100, Training Loss: 2.1782, Validation Loss: 1.4849
  Epoch 95/100, Training Loss: 0.3179, Validation Loss: 1.1349
  Epoch 96/100, Training Loss: 0.3862, Validation Loss: 0.9660
  Epoch 97/100, Training Loss: 0.3185, Validation Loss: 0.4452
  Epoch 98/100, Training Loss: 0.1505, Validation Loss: 0.6592
  Epoch 99/100, Training Loss: 0.9393, Validation Loss: 0.3502
  Epoch 100/100, Training Loss: 0.4814, Validation Loss: 0.8213
#+end_example

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c947368ab01fe1fb0959ba20c5540eae9642c95e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Testing

#+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  lr = model.lr_mask * (model.U @ model.V.T) / torch.sqrt(model.Ka[0])
  model.Wab_T = Wij +lr.T

  model.N_BATCH = 1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([2, 810, 2000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (2, 61, 1600)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: torch.Size([2000, 2])
: ksi torch.Size([4, 2000])
: (4, 2000)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = np.max(rates[0])

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  # ax[0].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
  # ax[0].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  # ax[1].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[1].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6555268d9d3ba924a03a058c76e7ce477bb26f47.png]]

#+begin_src ipython
  readout = model.linear.weight.data.cpu().detach().numpy()[0]
  overlap = -(rates @ readout) / rates.shape[-1]
  print(overlap.shape)

  plt.plot(overlap.T[..., :2], label='A')
  plt.plot(overlap.T[..., 2:], label='B')
  plt.legend(fontsize=10)
  plt.xlabel('Step')
  plt.ylabel('Overlap')

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (2, 61)
[[file:./.ob-jupyter/0ac779687b15b7b80bbd63b78946aeba7bfac1d4.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[:2].T)
  ax[0].plot(m0[2:].T, '--')
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[:2].T)
  ax[1].plot(m1[2:].T, '--')
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[:2].T * 180 / np.pi)
  ax[2].plot(phi[2:].T * 180 / np.pi, '--')
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ec63b087dd591235c81ce5c00ac6edc73ca85961.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* DPA
** Training
#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_EVAL_WIN = 1
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)

  model.DURATION = 6.0
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 32

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  # ff_input = torch.cat((AC_pair, AD_pair))

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([128, 810, 2000])

#+begin_src ipython
  labels_pair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 10])

#+RESULTS:

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  # criterion = nn.CrossEntropyLoss()
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

  num_epochs = 100
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
: Epoch 1/100, Training Loss: 26.2482, Validation Loss: 1.2955
: Stopping training as loss has fallen below the threshold: 8.2529437130428e-09

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/23d58ec560ca6763e2a787d88469b6118ed43d53.png]]

** Testing

#+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

RESULTS:

#+begin_src ipython
  model.eval()

  lr = model.lr_mask * (model.U @ model.V.T) / torch.sqrt(model.Ka[0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 810, 2000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 61, 1600)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: torch.Size([2000, 2])
: ksi torch.Size([4, 2000])
: (4, 2000)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = 0.1 * np.max(rates[0])

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  # ax[0].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[0].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  # ax[1].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[1].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d477bde1f6e87bbc0a3ebf328dff94cf3c6e1f2a.png]]

#+begin_src ipython
  readout = model.linear.weight.data.cpu().detach().numpy()[0]
  overlap = (rates @ readout) / rates.shape[-1]
  print(overlap.shape)

  plt.plot(overlap.T[..., :2], label='pair')
  plt.plot(overlap.T[..., 2:], '--', label='unpair')
  plt.legend(fontsize=10)
  plt.xlabel('Step')
  plt.ylabel('Overlap')

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (4, 61)
[[file:./.ob-jupyter/709f98022a66e83c9e611561a6cfa107b7274f5e.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[:2].T)
  ax[0].plot(m0[2:].T, '--')
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[:2].T)
  ax[1].plot(m1[2:].T, '--')
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[:2].T * 180 / np.pi)
  ax[2].plot(phi[2:].T * 180 / np.pi, '--')
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3a8e992088f414812227f22e1150e34d66f7d458.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Go/NoGo
** Training
#+begin_src ipython
  model.LR_TRAIN=1
  model.LR_EVAL_WIN = 2
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)

  model.DURATION = 3
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  for param in model.linear.parameters():
       param.requires_grad = False
#+end_src

#+RESULTS:

#+begin_src ipython
  odors = model.odors.clone()
  # switching samples and distractors to run short simulations
  model.odors[0] = odors[1]
  model.N_BATCH = 96

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  Go = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  NoGo = model.init_ff_input()

  ff_input = torch.cat((Go, NoGo))
  print(ff_input.shape)
  model.odors[0] = odors[0]
#+end_src

#+RESULTS:
: torch.Size([192, 510, 1000])

#+begin_src ipython
  labels_Go = torch.zeros((model.N_BATCH, model.lr_eval_win))
  labels_NoGo = torch.ones((model.N_BATCH, model.lr_eval_win))
  labels = torch.cat((labels_Go, labels_NoGo))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([192, 20])

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 32
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  # criterion = nn.CrossEntropyLoss()
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

  num_epochs = 100
  loss, val_loss = 0, 0

  # switching Sample and distractor
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
  model.odors[0] = odors[0]
#+End_src

#+RESULTS:
: Epoch 1/100, Training Loss: 0.0000, Validation Loss: 0.0000
: Stopping training as loss has fallen below the threshold: 0.0

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6b7b4eb4fb40e5ea24f846ae8f867479fb641dc2.png]]

** Testing

 #+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  lr = model.lr_mask * (model.U @ model.V.T) / torch.sqrt(model.Ka[0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 3
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  odors = model.odors.clone()
  model.odors[0] = odors[1]
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print('ff_input', ff_input.shape)
  model.odors[0] = odors[0]
#+end_src

#+RESULTS:
: ff_input torch.Size([2, 510, 1000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (2, 31, 800)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: torch.Size([1000, 2])
: ksi torch.Size([4, 1000])
: (4, 1000)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = .5 * np.max(rates)

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  # ax[0].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
  # ax[0].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, color='w', ls='--')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  # ax[1].axvline((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[1].axvline((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/32f935e3c4e578a396b72a9916a3f92771fd78bb.png]]

#+begin_src ipython
  readout = model.linear.weight.data.cpu().detach().numpy()[0]
  overlap = -(rates @ readout) / rates.shape[-1]
  print(overlap.shape)

  plt.plot(overlap.T[..., :1], label='A')
  plt.plot(overlap.T[..., 1:], label='B')
  plt.legend(fontsize=10)
  plt.xlabel('Step')
  plt.ylabel('Overlap')

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (2, 31)
[[file:./.ob-jupyter/9cfa52d3dd6767c5bf55d3573715fc21e5152f31.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[:2].T)
  ax[0].plot(m0[2:].T, '--')
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[:2].T)
  ax[1].plot(m1[2:].T, '--')
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[:2].T * 180 / np.pi)
  ax[2].plot(phi[2:].T * 180 / np.pi, '--')
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4ac383431bbf992441f9757a8626e06f845cb628.png]]

* Dual
** Testing

 #+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()

  lr = model.lr_mask * (model.U @ model.V.T) / torch.sqrt(model.Ka[0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 810, 1000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 61, 800)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: torch.Size([1000, 2])
: ksi torch.Size([4, 1000])
: (4, 1000)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = .5 * np.max(rates)

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  # ax[0].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[0].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  # ax[1].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[1].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/18890323e479b1a430991e87d4fa7b0f1f0eba10.png]]

#+begin_src ipython
  readout = model.linear.weight.data.cpu().detach().numpy()[0]
  overlap = (rates @ readout) / rates.shape[-1]
  print(overlap.shape)

  plt.plot(overlap.T[..., :2], label='pair')
  plt.plot(overlap.T[..., 2:], '--', label='unpair')
  plt.legend(fontsize=10)
  plt.xlabel('Step')
  plt.ylabel('Overlap')

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (4, 61)
[[file:./.ob-jupyter/be874277aaff5c6f0aabe4618b9d84e14c43dbed.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[:2].T)
  ax[0].plot(m0[2:].T, '--')
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[:2].T)
  ax[1].plot(m1[2:].T, '--')
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[:2].T * 180 / np.pi)
  ax[2].plot(phi[2:].T * 180 / np.pi, '--')
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5e7b71090d7d6b9e6336158515e8dcdaaeb09d4c.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Training

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_EVAL_WIN = 1
  model.lr_eval_win = int(model.LR_EVAL_WIN / model.DT / model.N_WINDOW)

  model.DURATION = 6.0
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 32

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  # ff_input = torch.cat((AC_pair, AD_pair))

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([128, 810, 1000])

#+begin_src ipython
  labels_pair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 10])

#+RESULTS:

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  # criterion = nn.CrossEntropyLoss()
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate)

  num_epochs = 100
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
: Epoch 1/100, Training Loss: 3.9984, Validation Loss: 0.7745
: Stopping training as loss has fallen below the threshold: 0.00016554565305481307

#+begin_src ipython
  plt.plot(loss)
  plt.plot(val_loss)
  plt.xlabel('epochs')
  plt.ylabel('Loss')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/92f65302f9c59b16ee41d5e027ce38254c8029de.png]]

** Re Testing

 #+begin_src ipython
  Wij = model.Wab_T.clone()
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  lr = model.lr_mask * (model.U @ model.V.T) / torch.sqrt(model.Ka[0])
  model.Wab_T = Wij + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 6
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = 1

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = 0
  model.I0[2] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 0
  model.I0[2] = -1

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 810, 1000])

#+begin_src ipython
  model.VERBOSE = 0
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  model.Wab_T = Wij
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 61, 800)

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:
: torch.Size([1000, 2])
: ksi torch.Size([4, 1000])
: (4, 1000)

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
  r_max = .5 * np.max(rates)

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  # ax[0].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[0].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  # ax[1].axvlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  # ax[1].axvlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  ax[1].set_ylabel('Pref. Location (°)')
  ax[1].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fce632f03de1fadb957bceb981f58481df6dbc07.png]]

#+begin_src ipython
  readout = model.linear.weight.data.cpu().detach().numpy()[0]
  overlap = (rates @ readout) / rates.shape[-1]
  print(overlap.shape)

  plt.plot(overlap.T[..., :2], label='pair')
  plt.plot(overlap.T[..., 2:], '--', label='unpair')
  plt.legend(fontsize=10)
  plt.xlabel('Step')
  plt.ylabel('Overlap')

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (4, 61)
[[file:./.ob-jupyter/5756da2f37adce4bb310b87094354c677ad902a5.png]]
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  ax[0].plot(m0[:2].T)
  ax[0].plot(m0[2:].T, '--')
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1[:2].T)
  ax[1].plot(m1[2:].T, '--')
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi[:2].T * 180 / np.pi)
  ax[2].plot(phi[2:].T * 180 / np.pi, '--')
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/72ec94363d80faa2e15da6f2710574e570996625.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

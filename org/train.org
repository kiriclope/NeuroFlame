#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroFlame"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python
: <Figure size 600x370.82 with 0 Axes>
:END:

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  import torchmetrics
  from torch.utils.data import Dataset, TensorDataset, DataLoader

  DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
  from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:

* Helpers
** Data Split

#+begin_src ipython
  from sklearn.model_selection import train_test_split, StratifiedShuffleSplit

  def split_data(X, Y, train_perc=0.8, batch_size=32):

    if Y.ndim==3:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0, 0].cpu().numpy(),
                                                          shuffle=True)
    else:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0].cpu().numpy(),
                                                          shuffle=True)
    print(X_train.shape, X_test.shape)
    print(Y_train.shape, Y_test.shape)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def accuracy_score(y_pred, labels):
    probs = torch.sigmoid(y_pred)
    # Assuming 'outputs' are logits from your model (raw scores before sigmoid)
    predicted = (probs > 0.5).float()  # Convert to 0 or 1 based on comparison with 0
    # 'labels' should be your ground truth labels for the binary classification, also in 0 or 1
    correct = (predicted == labels).sum()
    accuracy = correct / labels.size(0) / labels.size(-1)

    return accuracy
#+end_src

#+RESULTS:

#+begin_src ipython
  def torch_angle_AB(U, V):
      # Calculate the dot product
      dot_product = torch.dot(U, V)

      # Calculate the magnitudes of U and V
      magnitude_U = torch.linalg.norm(U)
      magnitude_V = torch.linalg.norm(V)

      # Compute the cosine of the angle
      cos_theta = dot_product / (magnitude_U * magnitude_V)

      # Calculate the angle in radians, then convert to degrees
      angle_radians = torch.acos(cos_theta)
      return torch.round(torch.rad2deg(angle_radians))
#+end_src

#+RESULTS:

#+begin_src ipython
  def training_step(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1, clip_grad=0, zero_grad=0):
      device = torch.device(DEVICE if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):
          X, y = X.to(device), y.to(device)

          rates = model(X)

          # y_pred = model.low_rank.linear(model.low_rank.dropout(rates)).squeeze(-1)
          y_pred = rates @ model.low_rank.U[model.slices[0], 1]

          overlap = rates @ model.low_rank.U[model.slices[0], 0] / model.Na[0]


          loss = loss_fn(y_pred, y) + F.relu(overlap[..., :9].abs() - 0.1).mean()

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()

          if zero_grad > 0:
              model.low_rank.U.grad[:, zero_grad-1] = 0
              model.low_rank.V.grad[:, zero_grad-1] = 0

          # Clip gradients
          if clip_grad:
              torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=10.0)
              #torch.nn.utils.clip_grad_value_(model.parameters(), clip_value=1.0)

          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def validation_step(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device(DEVICE if torch.cuda.is_available() else "cpu")
      # metric = torchmetrics.classification.Accuracy(task="binary")

      # Validation loop.
      model.eval()
      val_loss = 0.0

      with torch.no_grad():
          for X, y in dataloader:
              X, y = X.to(device), y.to(device)

              rates = model(X)
              # y_pred = model.low_rank.linear(model.low_rank.dropout(rates)).squeeze(-1)

              y_pred = rates @ model.low_rank.U[model.slices[0], 1]
              overlap = rates @ model.low_rank.U[model.slices[0], 0] / model.Na[0]

              loss = loss_fn(y_pred, y) + F.relu(overlap[..., :9].abs() - 1.0).mean()
              # acc = metric(y_pred, y)

              val_loss += loss.item() * X.size(0)

          val_loss /= size
          # acc = metric.compute()
          # print(f"Accuracy: {acc}")
          # metric.reset()
      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def optimization(model, train_loader, val_loader, loss_fn, loss2_fn, optimizer, num_epochs=100, penalty=None, lbd=1, thresh=.005, zero_grad=0):
      scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      # scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device(DEVICE if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []
      accuracies = []
      angle_list = []

      for epoch in range(num_epochs):
          loss = training_step(train_loader, model, loss_fn, optimizer, penalty, lbd, zero_grad=zero_grad)
          val_loss = validation_step(val_loader, model, loss_fn)
          # accuracy_loss = test(val_loader, model, loss2_fn)

          scheduler.step(val_loss)

          loss_list.append(loss.item())
          val_loss_list.append(val_loss)
          # if epoch % int(num_epochs  / 10) == 0:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')
          # print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}, Accuracy: {accuracy_loss:.4f}')

          memory = model.low_rank.U[model.slices[0], 0]
          readout = model.low_rank.linear.weight.data[0]
          angle = torch_angle_AB(memory, readout).item()
          angle_list.append(angle)

          print(f'Angle(U, W) : {angle} °', 'performance')

          if val_loss < thresh:
              print(f'Stopping training as loss has fallen below the threshold: {val_loss}')
              break

          if val_loss > 300:
              print(f'Stopping training as loss is too high: {val_loss}')
              break

          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def performance_score(model, rates, labels):
      print(rates.shape)
      y_pred = model.low_rank.linear(rates[:, -2:]).squeeze(-1)
      accuracy = accuracy_score(y_pred, labels)
      return accuracy
#+end_src

#+RESULTS:

#+begin_src ipython
  def imbalance(target):
    output = torch.zeros_like(target)

    # Update values
    output[target == 1] = 1
    output[target == 0] = 1

    return output
#+end_src

#+RESULTS:


#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.nn.functional as F

  class SignBCELoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=4.0, N=1000):
          super(SignBCELoss, self).__init__()
          self.alpha = alpha
          self.thresh = thresh
          self.N = N

          self.bce_with_logits = nn.BCEWithLogitsLoss()

      def forward(self, readout, targets):
          if self.alpha != 1.0:
              bce_loss = self.bce_with_logits(readout, targets)
          else:
              bce_loss = 0.0
          # sign_overlap = torch.sign(2 * targets² - 1) * readout / (1.0 * self.N)

          mean_activation = readout.mean(dim=1).unsqueeze(-1)
          sign_overlap = torch.sign(2 * targets - 1) * mean_activation / (1.0 * self.N)

          # sign_loss = F.relu(self.thresh - sign_overlap).mean()

          # Let's penalize more the wrong licks
          # sign_loss = F.relu(imbalance(targets) * self.thresh - sign_overlap).mean()
          sign_loss = F.relu(self.thresh - sign_overlap).mean()

          combined_loss = (1-self.alpha) * bce_loss + self.alpha * sign_loss
          return combined_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class DualLoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=4.0, N=1000, cue_idx=[], rwd_idx=-1, zero_idx=[]):
          super(DualLoss, self).__init__()
          self.alpha = alpha
          self.thresh = thresh
          self.N = N

          self.zero_idx = zero_idx
          self.cue_idx = torch.tensor(cue_idx, dtype=torch.int, device=DEVICE)
          self.rwd_idx = torch.tensor(rwd_idx, dtype=torch.int, device=DEVICE)

          self.loss = SignBCELoss(self.alpha, self.thresh, self.N)

      def forward(self, readout, targets):

          # ensuring zero bl overlap
          bl_loss = F.relu((readout[:, self.zero_idx] / self.N).abs() - 1.0).mean()

          is_empty = self.cue_idx.numel() == 0
          if is_empty:
              self.DPA_loss = self.loss(readout[:, self.rwd_idx], targets)
              return (self.DPA_loss + bl_loss)
          else:
              # self.loss.thresh = self.thresh
              self.DPA_loss = self.loss(readout[:, self.rwd_idx], targets[:, 0, :self.rwd_idx.shape[0]])
              # self.loss.thresh = 4.0
              self.DRT_loss = self.loss(readout[:, self.cue_idx], targets[:, 1, :self.cue_idx.shape[0]])
              return (self.DPA_loss + self.DRT_loss) / 2.0 + bl_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class AccuracyLoss(nn.Module):
      def __init__(self, N=1000, cue_idx=[], rwd_idx=-1):
          super(AccuracyLoss, self).__init__()
          self.N = N

          # self.loss = nn.BCEWithLogitsLoss()
          self.cue_idx = torch.tensor(cue_idx, dtype=torch.int, device=DEVICE)
          self.rwd_idx = torch.tensor(rwd_idx, dtype=torch.int, device=DEVICE)

      def forward(self, readout, targets):

          is_empty = self.cue_idx.numel() == 0
          if is_empty:
              self.DPA_loss = accuracy_score(readout[:, self.rwd_idx], targets)
              return self.DPA_loss
          else:
              self.DPA_loss = accuracy_score(readout[:, self.rwd_idx], targets[:, 0, :self.rwd_idx.shape[0]])
              self.DRT_loss = accuracy_score(readout[:, self.cue_idx], targets[:, 1, :self.cue_idx.shape[0]])
              return (self.DPA_loss + self.DRT_loss) / 2.0
#+end_src

#+RESULTS:

** Other

#+begin_src ipython
  def angle_AB(A, B):
      A_norm = A / (np.linalg.norm(A) + 1e-5)
      B_norm = B / (np.linalg.norm(B) + 1e-5)

      return int(np.arccos(A_norm @ B_norm) * 180 / np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:
          v = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u) % (2.0 * np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model, rank=2):
      ksi = torch.hstack((model.low_rank.U, model.low_rank.V)).T
      ksi = ksi[:, :model.Na[0]]

      readout = model.low_rank.linear.weight.data
      ksi = torch.vstack((ksi, readout))

      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      theta = get_theta(ksi[0], ksi[rank])

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.odors.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]

#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)
      ci = smooth.std(axis=0, ddof=1) * 1.96

      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

** plots

#+begin_src ipython
  def plot_rates_selec(rates, idx, thresh=0.5, figname='fig.svg'):
        ordered = rates[..., idx]
        fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
        r_max = thresh * np.max(rates[0])

        ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[0].set_ylabel('Neuron #')
        ax[0].set_xlabel('Step')

        ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
        ax[1].set_ylabel('Pref. Location (°)')
        ax[1].set_xlabel('Step')
        plt.savefig(figname, dpi=300)
        plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  def plot_overlap(rates, memory, readout, labels=['A', 'B'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
      overlap =(rates @ memory) / rates.shape[-1]

      if overlap.shape[0]>2:
          ax[0].plot(overlap.T[..., :2], label=labels[0])
          ax[0].plot(overlap.T[..., 2:], '--', label=labels[1])
      else:
          ax[0].plot(overlap.T[..., 0], label=labels[0])
          ax[0].plot(overlap.T[..., 1], '--', label=labels[1])

      ax[0].set_xlabel('Step')
      ax[0].set_ylabel('Overlap')
      ax[0].set_title('Memory')

      overlap =(rates @ readout) / rates.shape[-1]

      if overlap.shape[0]>2:
          ax[1].plot(overlap.T[..., :2], label=labels[0])
          ax[1].plot(overlap.T[..., 2:], '--', label=labels[1])
      else:
          ax[1].plot(overlap.T[..., 0], label=labels[0])
          ax[1].plot(overlap.T[..., 1], '--', label=labels[1])

      ax[1].set_xlabel('Step')
      ax[1].set_ylabel('Overlap')
      ax[1].set_title('Readout')

      # plt.legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
  def plot_m0_m1_phi(rates, idx, figname='fig.svg'):

      m0, m1, phi = decode_bump(rates[..., idx], axis=-1)
      fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

      ax[0].plot(m0[:2].T)
      ax[0].plot(m0[2:].T, '--')
      #ax[0].set_ylim([0, 360])
      #ax[0].set_yticks([0, 90, 180, 270, 360])
      ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
      ax[0].set_xlabel('Step')

      ax[1].plot(m1[:2].T)
      ax[1].plot(m1[2:].T, '--')
      # ax[1].set_ylim([0, 360])
      # ax[1].set_yticks([0, 90, 180, 270, 360])
      ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
      ax[1].set_xlabel('Step')

      ax[2].plot(phi[:2].T * 180 / np.pi)
      ax[2].plot(phi[2:].T * 180 / np.pi, '--')
      ax[2].set_ylim([0, 360])
      ax[2].set_yticks([0, 90, 180, 270, 360])
      ax[2].set_ylabel('Phase (°)')
      ax[2].set_xlabel('Step')

      plt.savefig(figname, dpi=300)
      plt.show()
    #+end_src

#+RESULTS:

* Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  conf_name = "config_train.yml"
  DEVICE = 'cuda:1'
  seed = np.random.randint(0, 1e6)
  print(seed)
  # seed = 760946
  # seed = 563446
#+end_src

#+RESULTS:
: 49821

#+begin_src ipython
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=16)
#+end_src

#+RESULTS:

* Sample Classification
** Training
*** Parameters

#+begin_src ipython
  for name, param in model.named_parameters():
      if param.requires_grad:
          print(name, param.shape)
#+end_src

#+RESULTS:
: low_rank.U torch.Size([2000, 2])
: low_rank.V torch.Size([2000, 2])
: low_rank.lr_kappa torch.Size([1])

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_READOUT = 1
#+end_src

#+RESULTS:

Testing the network on steps from sample odor offset to test odor onset

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

  mask = (steps >= (model.N_STIM_OFF[0] - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
  rwd_idx = np.where(mask)[0]
  print('rwd', rwd_idx)

  model.lr_eval_win = rwd_idx.shape[0]

  stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0] - model.N_STEADY))

  zero_idx = np.where(~mask & ~stim_mask )[0]
  print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
:  44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
:  68 69 70 71 72 73 74 75 76 77 78 79 80]
: zero [0 1 2 3 4 5 6 7 8 9]

*** Inputs and Labels

#+begin_src ipython
  model.N_BATCH = 64

  model.I0[0] = 2.0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  A = model.init_ff_input()

  model.I0[0] = -2.0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([128, 455, 2000])

#+begin_src ipython
  labels_A = torch.ones((model.N_BATCH, rwd_idx.shape[0]))
  labels_B = torch.zeros((model.N_BATCH, rwd_idx.shape[0]))
  labels = torch.cat((labels_A, labels_B))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 61])

*** Run

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([102, 455, 2000]) torch.Size([26, 455, 2000])
: torch.Size([102, 61]) torch.Size([26, 61])

#+begin_src ipython
  criterion = DualLoss(alpha=1.0, thresh=5.0, N=model.Na[0], rwd_idx=rwd_idx, zero_idx=zero_idx)
  criterion2 = AccuracyLoss(N=model.Na[0], rwd_idx=rwd_idx)

  # SGD, Adam, Adam
  learning_rate = 0.05
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 15
  start = perf_counter()
  loss, val_loss = optimization(model, train_loader, val_loader, criterion, criterion2, optimizer, num_epochs)
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
  Epoch 1/15, Training Loss: 5.0103, Validation Loss: 4.9781
  Angle(U, W) : 89.0 ° performance
  Epoch 2/15, Training Loss: 5.0207, Validation Loss: 4.9655
  Angle(U, W) : 89.0 ° performance
  Epoch 3/15, Training Loss: 4.9513, Validation Loss: 4.9502
  Angle(U, W) : 89.0 ° performance
  Epoch 4/15, Training Loss: 4.9238, Validation Loss: 4.9186
  Angle(U, W) : 89.0 ° performance
  Epoch 5/15, Training Loss: 4.8449, Validation Loss: 4.8241
  Angle(U, W) : 89.0 ° performance
  Epoch 6/15, Training Loss: 4.3395, Validation Loss: 4.1844
  Angle(U, W) : 89.0 ° performance
  Epoch 7/15, Training Loss: 0.0465, Validation Loss: 0.0000
  Angle(U, W) : 90.0 ° performance
  Stopping training as loss has fallen below the threshold: 0.0
  Elapsed (with compilation) = 0h 0m 34s
#+end_example

#+begin_src ipython
    J_STP = model.J_STP.clone()
    Jab = model.Jab.clone()
    VAR_FF = model.VAR_FF
#+end_src

#+RESULTS:

** Testing

#+begin_src ipython
  model.eval()
  model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 10

  model.I0[0] = 2
  model.I0[1] = 0
  model.I0[2] = 0

  A = model.init_ff_input()

  model.I0[0] = -2
  model.I0[1] = 0
  model.I0[2] = 0

  B = model.init_ff_input()

  ff_input = torch.cat((A, B))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([20, 455, 2000])


#+begin_src ipython
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  print('rates', rates.shape)
#+end_src

#+RESULTS:
: rates (20, 81, 1000)


#+begin_src ipython
  # memory = model.odors.cpu().detach().numpy()[0]
  memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
  # readout = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]
  plot_overlap(rates, memory, readout, labels=['A', 'B'])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e1ebe2c31fc03689328582c3558ed06188c634aa.png]]


#+begin_src ipython
  idx = get_idx(model, 1)
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/1db466db900e019f4e1ee6aca9dd43f5fb7f67ca.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/24f9a3178f94c7507692c96e592542bf8f64cf85.png]]


#+begin_src ipython
    model.J_STP = J_STP
    model.Jab = Jab
    model.VAR_FF = VAR_FF
#+end_src

#+RESULTS:

* DPA
** Training
*** Parameters

#+begin_src ipython
  model.low_rank.U.data[:, 1] = torch.randn(model.low_rank.U.T.data[1].shape)
#+end_src

#+RESULTS:

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_READOUT = 1
  model.RWD = 2
#+end_src

#+RESULTS:

Here we only evaluate performance from test onset to test offset

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  # mask = (steps >= (model.N_STIM_OFF[2] - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
  mask = (steps >= (model.N_STIM_ON[3] - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
  rwd_idx = np.where(mask)[0]
  print('rwd', rwd_idx)

  model.lr_eval_win = rwd_idx.shape[0]

  stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0] - model.N_STEADY))
  stim_mask1 = (steps >= (model.N_STIM_ON[3] - model.N_STEADY)) # & (steps < (model.N_STIM_OFF[3] - model.N_STEADY))

  mask_zero = ~mask & ~stim_mask & ~stim_mask1
  zero_idx = np.where(mask_zero)[0]
  print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [70 71 72 73 74 75 76 77 78 79 80]
: zero [ 0  1  2  3  4  5  6  7  8  9 20 21 22 23 24 25 26 27 28 29 30 31 32 33
:  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
:  58 59 60 61 62 63 64 65 66 67 68 69]

*** Inputs and Labels

#+begin_src ipython
  model.N_BATCH = 64

  A0 = 1

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = A0

  AC_pair = model.init_ff_input()

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = -A0

  AD_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = A0

  BC_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = -A0

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([256, 455, 2000])

 #+begin_src ipython
  labels_pair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([256, 11])

#+RESULTS:

*** Run

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([204, 455, 2000]) torch.Size([52, 455, 2000])
: torch.Size([204, 11]) torch.Size([52, 11])

#+begin_src ipython
  # Loss
  criterion = DualLoss(alpha=1.0, thresh=5.0, N=model.Na[0], rwd_idx=rwd_idx, zero_idx=zero_idx)
  criterion2 = AccuracyLoss(N=model.Na[0], rwd_idx=rwd_idx)

  # Optimizer: SGD, Adam, Adam
  learning_rate = 0.05
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 30
  start = perf_counter()
  loss, val_loss = optimization(model, train_loader, val_loader, criterion, criterion2, optimizer, num_epochs, zero_grad=1)
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
  Epoch 1/30, Training Loss: 4.9288, Validation Loss: 4.9841
  Angle(U, W) : 90.0 ° performance
  Epoch 2/30, Training Loss: 4.9421, Validation Loss: 4.9082
  Angle(U, W) : 90.0 ° performance
  Epoch 3/30, Training Loss: 4.4216, Validation Loss: 4.2951
  Angle(U, W) : 90.0 ° performance
  Epoch 4/30, Training Loss: 2.7528, Validation Loss: 3.5761
  Angle(U, W) : 90.0 ° performance
  Epoch 5/30, Training Loss: 1.7504, Validation Loss: 2.2367
  Angle(U, W) : 90.0 ° performance
  Epoch 6/30, Training Loss: 0.2784, Validation Loss: 0.3858
  Angle(U, W) : 90.0 ° performance
  Epoch 7/30, Training Loss: 0.5426, Validation Loss: 0.6067
  Angle(U, W) : 90.0 ° performance
  Epoch 8/30, Training Loss: 0.0298, Validation Loss: 0.0000
  Angle(U, W) : 90.0 ° performance
  Stopping training as loss has fallen below the threshold: 0.0
  Elapsed (with compilation) = 0h 1m 15s
#+end_example


 #+begin_src ipython
    torch.save(model.state_dict(), 'models/dpa_%d.pth' % seed)
#+end_src

#+RESULTS:

#+begin_src ipython
    plt.plot(loss)
    plt.plot(val_loss)
    plt.xlabel('epochs')
    plt.ylabel('Loss')
    plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/eb2dfa5b50c68718dfa6c0d448210d34e34d2ef2.png]]

 #+begin_src ipython
  torch.save(model.state_dict(), 'models/dpa_%d.pth' % seed)
#+end_src

#+RESULTS:

#+begin_src ipython
  odors = model.odors.cpu().numpy()
  U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]
  W = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]

  print('   U  V  W  S  D')
  print('U ', angle_AB(U, U), angle_AB(U, V), angle_AB(U, W), angle_AB(U, odors[0]), angle_AB(U, odors[1]))
  print('V ', 'XXX', angle_AB(V, V), angle_AB(V, W), angle_AB(V, odors[0]), angle_AB(V, odors[1]))
  print('W ', 'XXX', 'XXX', angle_AB(W, W), angle_AB(W, odors[0]), angle_AB(W, odors[1]))
  print('S ', 'XXX', 'XXX', 'XXX', angle_AB(odors[0], odors[0]), angle_AB(odors[0], odors[1]))
  print('D ', 'XXX', 'XXX', 'XXX', 'XXX', angle_AB(odors[1], odors[1]))

#+end_src

#+RESULTS:
:    U  V  W  S  D
: U  0 45 89 108 90
: V  XXX 0 90 131 90
: W  XXX XXX 0 89 87
: S  XXX XXX XXX 0 88
: D  XXX XXX XXX XXX 0

** Testing

#+begin_src ipython
  model.eval()
  model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1
  A0 = 1

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = A0

  AC_pair = model.init_ff_input()

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = -A0

  AD_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = A0

  BC_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = -A0

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 455, 2000])

 #+begin_src ipython
  labels_pair = torch.ones((2 * model.N_BATCH, 2))
  labels_unpair = torch.zeros((2 * model.N_BATCH, 2))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
  rates = model.forward(ff_input=ff_input)
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
  print(rates.shape)
  print(labels.shape)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])
: torch.Size([4, 2])

#+begin_src ipython
  perf = performance_score(model, rates, labels.to('cuda:1'))
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
  print(perf.item())
#+end_src

#+RESULTS:
: 1.0

#+begin_src ipython
  # readout = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]
  memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
  plot_overlap(rates.detach().cpu().numpy(), memory, readout, labels=['pair', 'unpair'], figname='dpa_overlap.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/45844fd6e6e94e3761bd655522b244538a8bb8ba.png]]

#+begin_src ipython
  idx = get_idx(model, 1)
  plot_rates_selec(rates.detach().cpu().numpy(), idx, figname='dpa_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/9b7fa5b91ccfdedee36ff8e45d815a004e6af5f1.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates.detach().cpu().numpy(), idx, figname='dpa_fourier.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/9826630020db20607fde2d814c80c3acd18afcfc.png]]

#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
    from matplotlib.patches import Circle
    m0, m1, phi = decode_bump(rates[..., idx].detach().cpu().numpy(), axis=-1)

    x = m1 / m0 * np.cos(phi)
    y = m1 / m0 * np.sin(phi)

    xA = x
    yA = y

    fig, ax = plt.subplots(1, 1, figsize=[height, height])

    ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
    ax.plot(xA.T, yA.T, '-', alpha=.5)
    ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=10)
    # ax.set_xlim([-.9, .9])
    # ax.set_ylim([-.9, .9])
    circle = Circle((0., 0.), 1, fill=False, edgecolor='k')
    ax.add_patch(circle)

    # Set the aspect of the plot to equal to make the circle circular
    ax.set_aspect('equal')

    plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/a13abe1a80f7bc7d1880288b847818a7294400f3.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Go/NoGo
** Training

#+begin_src ipython
  # for param in model.low_rank.linear.parameters():
  #     param.requires_grad = False

  # model.low_rank.U.requires_grad = False
  # model.low_rank.V.requires_grad = False
      #+end_src

#+RESULTS:

#+begin_src ipython
  model.DURATION = 4
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
  model.RWD = 1
#+end_src

#+RESULTS:

#+begin_src ipython
  model.LR_TRAIN = 1
  model.LR_READOUT = 1
#+end_src

#+RESULTS:

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
  mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) # & (steps <= (model.N_STIM_ON[1] - model.N_STEADY))
  # mask = (steps >= (model.N_STIM_ON[1] - model.N_STEADY)) # & (steps <= (model.N_STIM_ON[1] - model.N_STEADY))

  rwd_idx = np.where(mask)[0]
  print('rwd', rwd_idx)

  stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) # & (steps < (model.N_STIM_OFF[0] - model.N_STEADY))

  mask_zero = ~mask & ~stim_mask
  zero_idx = np.where(mask_zero)[0]
  print('zero', zero_idx)

  model.lr_eval_win = rwd_idx.shape[0]
#+end_src

#+RESULTS:
: rwd [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
:  34 35 36 37 38 39 40]
: zero [0 1 2 3 4 5 6 7 8 9]

#+begin_src ipython
  # switching sample and distractor odors
  odors = model.odors.clone()
  model.odors[0] = odors[1]

  model.N_BATCH = 64

  A0 = 1
  B0 = 1

  model.I0[0] = A0
  model.I0[1] = B0 # reward
  model.I0[2] = 0
  model.I0[3] = 0

  Go = model.init_ff_input()

  model.I0[0] = -A0
  # model.I0[1] = 0
  model.I0[1] = B0 # cue
  model.I0[2] = 0
  model.I0[3] = 0

  NoGo = model.init_ff_input()

  ff_input = torch.cat((Go, NoGo))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([128, 255, 2000])

#+begin_src ipython
  labels_Go = torch.ones((model.N_BATCH, model.lr_eval_win))
  labels_NoGo = torch.zeros((model.N_BATCH, model.lr_eval_win))
  labels = torch.cat((labels_Go, labels_NoGo))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 31])

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([102, 255, 2000]) torch.Size([26, 255, 2000])
: torch.Size([102, 31]) torch.Size([26, 31])

#+begin_src ipython
  criterion = DualLoss(alpha=1.0, thresh=15.0, N=model.Na[0], rwd_idx=rwd_idx, zero_idx=zero_idx)
  criterion2 = AccuracyLoss(N=model.Na[0], rwd_idx=rwd_idx)

  # SGD, Adam, Adam
  learning_rate = 0.05
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 15
  start = perf_counter()
  loss, val_loss = optimization(model, train_loader, val_loader, criterion, criterion2, optimizer, num_epochs, zero_grad=1)
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
  # switching back sample and distractor odors
  model.odors[0] = odors[0]
#+end_src

#+RESULTS:
#+begin_example
  Epoch 1/15, Training Loss: 13.1634, Validation Loss: 12.1880
  Angle(U, W) : 90.0 ° performance
  Epoch 2/15, Training Loss: 6.5843, Validation Loss: 9.6734
  Angle(U, W) : 90.0 ° performance
  Epoch 3/15, Training Loss: 11.5863, Validation Loss: 6.7103
  Angle(U, W) : 90.0 ° performance
  Epoch 4/15, Training Loss: 7.6725, Validation Loss: 4.2542
  Angle(U, W) : 90.0 ° performance
  Epoch 5/15, Training Loss: 1.5284, Validation Loss: 1.7257
  Angle(U, W) : 90.0 ° performance
  Epoch 6/15, Training Loss: 3.0909, Validation Loss: 3.4278
  Angle(U, W) : 90.0 ° performance
  Epoch 7/15, Training Loss: 4.9413, Validation Loss: 2.5248
  Angle(U, W) : 90.0 ° performance
  Epoch 8/15, Training Loss: 2.6028, Validation Loss: 2.5601
  Angle(U, W) : 90.0 ° performance
  Epoch 9/15, Training Loss: 1.6673, Validation Loss: 1.5874
  Angle(U, W) : 90.0 ° performance
  Epoch 10/15, Training Loss: 0.2953, Validation Loss: 0.1422
  Angle(U, W) : 90.0 ° performance
  Epoch 11/15, Training Loss: 0.0013, Validation Loss: 0.0000
  Angle(U, W) : 90.0 ° performance
  Stopping training as loss has fallen below the threshold: 0.0
  Elapsed (with compilation) = 0h 0m 30s
#+end_example

** Test

  #+begin_src ipython
    model.RWD = 1
    model.VERBOSE = 0
    model.eval()
    model.LR_READOUT = 0
  #+end_src

  #+RESULTS:

  #+begin_src ipython
    odors = model.odors.clone()
    model.odors[0] = odors[1]
    model.N_BATCH = 1

    model.I0[0] = A0
    model.I0[1] = B0 # reward
    model.I0[2] = 0

    A = model.init_ff_input()

    model.I0[0] = -A0
    model.I0[1] = B0
    model.I0[2] = 0

    B = model.init_ff_input()

    ff_input = torch.cat((A, B))
    print('ff_input', ff_input.shape)
  #+end_src

#+RESULTS:
: ff_input torch.Size([2, 255, 2000])

  #+begin_src ipython
    rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
    model.odors[0] = odors[0]
    print(rates.shape)
  #+end_src

#+RESULTS:
: (2, 41, 1000)

  #+begin_src ipython
    memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
    readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
    # readout = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]
    plot_overlap(rates, memory, readout, labels=['Go', 'NoGo'])
  #+end_src

#+RESULTS:
[[file:./.ob-jupyter/f1939bf575b83a45f22a57ee5325b8724555204e.png]]

  #+begin_src ipython
    idx = get_idx(model, 1)
    plot_rates_selec(rates, idx)
  #+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/0ad58e78f25d8a5ffc3b0879f9c7b3ffe45e330f.png]]
:END:

#+begin_src ipython
    plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/13e79a7fbb4e8efbd112c0540fc398433e073ba3.png]]

* Dual

#+begin_src ipython
  model.DURATION = 8
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
  model.RWD = 2
#+end_src

#+RESULTS:

** Testing

#+begin_src ipython
  model.eval()
  model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  A0 = 1
  B0 = 1

  model.I0[0] = A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = A0

  AC_pair = model.init_ff_input()

  model.I0[0] = A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = -A0

  AD_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = A0

  BC_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = -A0

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 455, 2000])

#+begin_src ipython
  torch.ones((2 * model.N_BATCH, 2))
  labels_unpair = torch.zeros((2 * model.N_BATCH, 2))

  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src
#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
  rates = model.forward(ff_input=ff_input).detach()
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
  perf = performance_score(model, rates, labels.to('cuda:1'))
  print(perf)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])
: tensor(0.5000, device='cuda:1')

#+begin_src ipython
  rates = rates.cpu().numpy()
  memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
  # readout = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]
  plot_overlap(rates, memory, readout, labels=['pair', 'unpair'], figname='dual_naive_overlap.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b92c0ebbf31e05bdc0d4c3c6d7f0a147ba137dba.png]]


#+begin_src ipython
  idx = get_idx(model, 1)
  plot_rates_selec(rates, idx, figname='dual_naive_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/ab086c020584feec73fc4d215b9f59ae3087ea5c.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx, figname='dual_naive_fourier.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cc1c5627e7575744ff0bf2bde8fc2d603c354335.png]]


#+begin_src ipython
    from matplotlib.patches import Circle
    m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

    x = m1 / m0 * np.cos(phi)
    y = m1 / m0 * np.sin(phi)

    xA = x
    yA = y

    fig, ax = plt.subplots(1, 1, figsize=[height, height])

    ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
    ax.plot(xA.T, yA.T, '-', alpha=.5)
    ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=10)
    # ax.set_xlim([-.9, .9])
    # ax.set_ylim([-.9, .9])
    circle = Circle((0., 0.), 1, fill=False, edgecolor='k')
    ax.add_patch(circle)

    # Set the aspect of the plot to equal to make the circle circular
    ax.set_aspect('equal')

    plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/40a12e48a69eeea4265c28f13549f57e8262380d.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Training
#+begin_src ipython
  for param in model.low_rank.linear.parameters():
      param.requires_grad = True

  model.low_rank.U.requires_grad = True
  model.low_rank.V.requires_grad = True
#+end_src

#+RESULTS:

#+begin_src ipython
  model.DURATION = 8
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
  model.RWD = 2

  model.LR_TRAIN = 1
  model.LR_READOUT = 1
  model.RWD = 2
#+end_src

#+RESULTS:

#+begin_src ipython
  steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

  mask_rwd = (steps >= (model.N_STIM_OFF[3] - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
  rwd_idx = np.where(mask_rwd)[0]
  print('rwd', rwd_idx)

  mask_cue = (steps >= (model.N_STIM_OFF[1] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[3] - model.N_STEADY))
  cue_idx = np.where(mask_cue)[0]
  print('cue', cue_idx)

  # stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0] - model.N_STEADY))
  stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) & (steps < (model.N_STIM_ON[1] - model.N_STEADY))
  stim_mask1 = (steps >= (model.N_STIM_ON[1] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[1] - model.N_STEADY))
  stim_mask2 = (steps >= (model.N_STIM_ON[2] - model.N_STEADY)) & (steps < (model.N_STIM_OFF[2] - model.N_STEADY))
  stim_mask3 = (steps >= (model.N_STIM_ON[-1] - model.N_STEADY)) # & (steps < (model.N_STIM_OFF[-1] - model.N_STEADY))

  mask_zero = ~mask_rwd & ~mask_cue & ~stim_mask & ~stim_mask1 & ~stim_mask2 & ~stim_mask3
  zero_idx = np.where(mask_zero)[0]
  print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [80]
: cue [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
:  64 65 66 67 68 69 70]
: zero [0 1 2 3 4 5 6 7 8 9]

#+begin_src ipython
  model.N_BATCH = 64

  model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))

  ff_input = []
  labels = np.zeros((2, 12, model.N_BATCH, model.lr_eval_win))

  l=0
  for i in [-1, 1]:
      for j in [-1, 0, 1]:
          for k in [1, -1]:

              model.I0[0] = i
              model.I0[1] = j
              model.I0[3] = k


              if i==k: # Pair Trials
                  labels[0, l] = np.ones((model.N_BATCH, model.lr_eval_win))
              # else: # Unpair Trials
              #     labels[0, l] = np.zeros((model.N_BATCH, model.lr_eval_win))

              if j==1: # Go
                  model.I0[2] = B0
                  labels[1, l] = np.ones((model.N_BATCH, model.lr_eval_win))
              elif j==-1: # NoGo
                  model.I0[2] = B0
              else:
                  model.I0[2] = 0

              l+=1

              ff_input.append(model.init_ff_input())

  labels = torch.tensor(labels, dtype=torch.float, device=DEVICE).reshape(2, -1, model.lr_eval_win).transpose(0, 1)
  ff_input = torch.vstack(ff_input)
  print('ff_input', ff_input.shape, 'labels', labels.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([768, 455, 2000]) labels torch.Size([768, 2, 31])

#+begin_src ipython
  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([614, 455, 2000]) torch.Size([154, 455, 2000])
: torch.Size([614, 2, 31]) torch.Size([154, 2, 31])

#+begin_src ipython
  # criterion = nn.BCEWithLogitsLoss()
  criterion = DualLoss(alpha=1.0, thresh=5.0, N=model.Na[0], cue_idx=cue_idx, rwd_idx=rwd_idx, zero_idx=zero_idx)
  criterion2 = AccuracyLoss(N=model.Na[0], rwd_idx=rwd_idx, cue_idx=cue_idx)

  # SGD, Adam, Adam
  learning_rate = 0.05
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
  num_epochs = 1
  start = perf_counter()
  loss, val_loss = optimization(model, train_loader, val_loader, criterion, criterion2, optimizer, num_epochs)
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
: Epoch 1/1, Training Loss: 3.7719, Validation Loss: 3.4639
: Angle(U, W) : 89.0 ° performance
: Elapsed (with compilation) = 0h 0m 27s

#+begin_src ipython
    torch.save(model.state_dict(), 'models/dual_train_%d.pth' % seed)
#+end_src

#+RESULTS:

#+begin_src ipython
  odors = model.odors.cpu().numpy()
  U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]
  W = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]

  print('   U  V  W  S  D')
  print('U ', angle_AB(U, U), angle_AB(U, V), angle_AB(U, W), angle_AB(U, odors[0]), angle_AB(U, odors[1]))
  print('V ', 'XXX', angle_AB(V, V), angle_AB(V, W), angle_AB(V, odors[0]), angle_AB(V, odors[1]))
  print('W ', 'XXX', 'XXX', angle_AB(W, W), angle_AB(W, odors[0]), angle_AB(W, odors[1]))
  print('S ', 'XXX', 'XXX', 'XXX', angle_AB(odors[0], odors[0]), angle_AB(odors[0], odors[1]))
  print('D ', 'XXX', 'XXX', 'XXX', 'XXX', angle_AB(odors[1], odors[1]))

#+end_src

#+RESULTS:
:    U  V  W  S  D
: U  0 62 88 104 89
: V  XXX 0 89 130 89
: W  XXX XXX 0 89 87
: S  XXX XXX XXX 0 88
: D  XXX XXX XXX XXX 0

*** Re-Testing

#+begin_src ipython
  model.DURATION = 8
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = A0

  AC_pair = model.init_ff_input()

  model.I0[0] = A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = -A0

  AD_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = A0

  BC_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = A0
  model.I0[2] = B0
  model.I0[3] = -A0

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 455, 2000])

#+begin_src ipython
  labels_A = torch.ones((2*model.N_BATCH, 2))
  labels_B = torch.zeros((2*model.N_BATCH, 2))
  labels = torch.cat((labels_A, labels_B))

  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
  rates = model.forward(ff_input=ff_input).detach()
  print(rates.shape)
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
  perf = performance_score(model, rates, labels.to(DEVICE))
#+end_src

#+RESULTS:
: torch.Size([4, 81, 1000])

#+begin_src ipython
  print(perf)
#+end_src

#+RESULTS:
: tensor(0.5000, device='cuda:1')

 #+begin_src ipython
   rates = rates.cpu().detach().numpy()
   memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
   readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
   # readout = model.low_rank.linear.weight.data[0].cpu().detach().numpy()
   plot_overlap(rates, memory, readout, labels=['pair', 'unpair'], figname='dual_train_overlap.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fc947ad546da8063aee148ce93b58f6f94c78ec8.png]]

#+begin_src ipython
  idx = get_idx(model, 1)
  plot_rates_selec(rates, idx, figname='dual_train_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/bf764681e6dac4e0c1d41ca66739982aac3d8f25.png]]
:END:

#+begin_src ipython
  plot_m0_m1_phi(rates, idx, figname='dual_train_fourier.svg')
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e441318f925746052ae81d76b03a64a41352af01.png]]

#+begin_src ipython
  from matplotlib.patches import Circle
  m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

  x = m1 / m0 * np.cos(phi)
  y = m1 / m0 * np.sin(phi)

  xA = x
  yA = y

  fig, ax = plt.subplots(1, 1, figsize=[height, height])

  ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
  ax.plot(xA.T, yA.T, '-', alpha=.5)
  ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=10)
  # ax.set_xlim([-.9, .9])
  # ax.set_ylim([-.9, .9])
  circle = Circle((0., 0.), 1, fill=False, edgecolor='k')
  ax.add_patch(circle)

  # Set the aspect of the plot to equal to make the circle circular
  ax.set_aspect('equal')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5ec9786a276de36dbae8f66b0c17e7ad1c1ea74a.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Re-Testing

#+begin_src ipython
  model.DURATION = 10
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
  model.IF_RL = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.eval()
  model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  model.N_BATCH = 1

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  AC_pair = model.init_ff_input()

  model.I0[0] = A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  AD_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  BC_pair = model.init_ff_input()

  model.I0[0] = -A0
  model.I0[1] = 0
  model.I0[2] = 0
  model.I0[3] = 0

  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape, ff_input[0, 0, :4])
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 555, 2000]) tensor([19.8599, 17.6087, 21.5094, 20.9079], device='cuda:1')

#+begin_src ipython
  rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 101, 1000)

#+begin_src ipython
  memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
  readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
  # readout = model.low_rank.linear.weight.data[0].cpu().detach().numpy()
  plot_overlap(rates, memory, readout, labels=['pair', 'unpair'])
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/314db472773fbb1d95ae97e0bc9f27ce92f99135.png]]

#+begin_src ipython
  idx = get_idx(model, 1)
  plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 1000])
[[file:./.ob-jupyter/1e415423405ed999bf963b313a03aab43873f8b6.png]]
:END:

#+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 101, 1000)

#+begin_src ipython
  plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e34673705e6249e6ea8cc354c403c7ef25670db0.png]]

    #+begin_src ipython
  print(rates.shape)
#+end_src

#+RESULTS:
: (4, 101, 1000)

#+begin_src ipython
  plt.plot(rates[:, :,1].T)
  # plt.xlim([0, 10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2946e71292fc676032d1e4bc1685e00020d89766.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

#+begin_src ipython
  from matplotlib.patches import Circle
  m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

  x = m1 / m0 * np.cos(phi)
  y = m1 / m0 * np.sin(phi)

  xA = x
  yA = y

  fig, ax = plt.subplots(1, 1, figsize=[height, height])

  ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
  ax.plot(xA.T, yA.T, '-', alpha=.5)
  ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=10)
  # ax.set_xlim([-.9, .9])
  # ax.set_ylim([-.9, .9])
  circle = Circle((0., 0.), 2, fill=False, edgecolor='k')
  ax.add_patch(circle)

  # Set the aspect of the plot to equal to make the circle circular
  ax.set_aspect('equal')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4ea0024f6cf050c744829efbdeb19ac4020e2551.png]]

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

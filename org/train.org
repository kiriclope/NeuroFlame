#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Training
*** split data

#+begin_src ipython
  def split_data(X, Y, train_perc=0.8, batch_size=32):

    # Split the dataset into training and validation sets
    train_size = int(train_perc * X.shape[0])

    X_train = X[:train_size]
    X_test = X[train_size:]

    Y_train = Y[:train_size]    
    Y_test = Y[train_size:]

    # print('X_train', X_train.shape, 'y_train', Y_train.shape)
    train_dataset = TensorDataset(X_train, Y_train)

    # print('X_test', X_test.shape, 'y_test', Y_test.shape)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)
    
    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1):
      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):          
          X, y = X.to(device), y.to(device)
          # Compute prediction error
          y_pred = model(X)
          loss = loss_fn(y_pred, y)

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()
          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              data, targets = data.to(device), targets.to(device)
              
              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
          val_loss /= size

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1):
      # scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []

      # Training loop.
      for epoch in range(num_epochs):
          loss = train(train_loader, model, loss_fn, optimizer, penalty, lbd)
          val_loss = test(val_loader, model, loss_fn)
          scheduler.step(val_loss)
          
          loss_list.append(loss.item())
          val_loss_list.append(val_loss)
          
          # if epoch % int(num_epochs  / 10) == 0:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')
          
          if loss < .01:
              print(f'Stopping training as loss has fallen below the threshold: {loss}')
              break
          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def correlation_loss(output, target):
      # Subtract the mean of each vector
      output_mean = output - torch.mean(output)
      target_mean = target - torch.mean(target)
    
      # Compute the covariance between output and target
      covariance = torch.mean(output_mean * target_mean)
      
      # Compute the standard deviations of the vectors
      output_std = torch.std(output)
      target_std = torch.std(target)
    
      # Calculate the Pearson correlation coefficient
      correlation = covariance / (output_std * target_std)
    
      # Since we want to increase the correlation, we minimize its negative
      loss = -correlation  # Maximizing correlation by minimizing its negative
    
      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
    import torch
    import torch.nn as nn

    def sign_constrained_loss(output, xi, target_sign):
        dot_product = torch.dot(output.flatten(), xi.flatten())
        if target_sign > 0:
            loss = torch.relu(-dot_product)  # Encourages positive dot product
        else:
            loss = torch.relu(dot_product)   # Encourages negative dot product
        return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class CosineLoss(nn.Module):
      def __init__(self):
          super(CosineLoss, self).__init__()
          self.cosine_similarity = nn.CosineSimilarity(dim=-1)
          
      def forward(self, input1, input2):
          # Calculate cosine similarity
          cosine_sim = self.cosine_similarity(input1, input2)
          # Calculate the loss as 1 - cosine_similarity
          loss = 1 - cosine_sim
          # Return the mean loss over the batch
          return loss.mean()
#+end_src

#+RESULTS:


#+RESULTS:

** Other

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:          
          v = b - np.dot(b, a) / np.dot(a, a) * a
          
      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model, rank=2):
      print(model.U.shape)
      ksi = torch.hstack((model.U, model.V)).T
      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      # ksi = model.PHI0.cpu().detach().numpy()

      print(ksi.shape)

      theta = get_theta(ksi[0], ksi[rank], GM=0, IF_NORM=0)
      theta = get_theta(ksi[0][:model.Na[0]], ksi[rank][:model.Na[0]], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
  
#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)  
      ci = smooth.std(axis=0, ddof=1) * 1.96
      
      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Train RNN
** Parameters

#+Begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_train.yml"
#+end_src

#+RESULTS:

** Model

#+begin_src ipython
  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', SEED=0)
#+end_src

#+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
    if param.requires_grad:
        print(name, param.shape)
#+end_src

#+RESULTS:
: U torch.Size([1000, 2])
: V torch.Size([1000, 2])
: linear.weight torch.Size([1, 800])
: linear.bias torch.Size([1])

** Inputs and labels
*** Samples
#+begin_src ipython
  model.N_BATCH = 32
  
  model.I0[0] = 1
  model.I0[1] = 1 

  AC_pair = model.init_ff_input()
#+end_src

*** Pairs

#+begin_src ipython
  model.N_BATCH = 32

  model.I0[0] = 1
  model.I0[1] = 1 

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = -1

  AD_pair = model.init_ff_input()

  # ff_input = torch.cat((AC_pair, AD_pair))

  model.I0[0] = -1
  model.I0[1] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = -1
  
  BD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([128, 510, 1000])

#+begin_src ipython
  labels_pair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
  
  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 20])

#+RESULTS:

** Train

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 16
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.AdamW(model.parameters(), lr=learning_rate)
  
  num_epochs = 100
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
#+begin_example
  Epoch 1/100, Training Loss: 15.2318, Validation Loss: 45.4557
  Epoch 2/100, Training Loss: 6.7912, Validation Loss: 28.9131
  Epoch 3/100, Training Loss: 2.1193, Validation Loss: 7.1783
  Epoch 4/100, Training Loss: 4.5337, Validation Loss: 0.0364
  Epoch 5/100, Training Loss: 0.7294, Validation Loss: 5.2424
  Epoch 6/100, Training Loss: 0.4307, Validation Loss: 0.8912
  Epoch 7/100, Training Loss: 0.5026, Validation Loss: 4.1791
  Epoch 8/100, Training Loss: 1.0243, Validation Loss: 0.3887
  Epoch 9/100, Training Loss: 6.6631, Validation Loss: 5.0001
  Epoch 10/100, Training Loss: 0.8313, Validation Loss: 9.7576
  Epoch 11/100, Training Loss: 1.1830, Validation Loss: 4.8913
  Epoch 12/100, Training Loss: 0.8621, Validation Loss: 1.1907
  Epoch 13/100, Training Loss: 1.1080, Validation Loss: 0.0412
  Epoch 14/100, Training Loss: 3.6858, Validation Loss: 0.0142
  Epoch 15/100, Training Loss: 6.0338, Validation Loss: 19.1602
  Epoch 16/100, Training Loss: 4.1921, Validation Loss: 9.8638
  Epoch 17/100, Training Loss: 1.4135, Validation Loss: 0.1207
  Epoch 18/100, Training Loss: 1.5546, Validation Loss: 4.7429
  Epoch 19/100, Training Loss: 1.7830, Validation Loss: 7.8849
  Epoch 20/100, Training Loss: 0.3251, Validation Loss: 0.0649
  Epoch 21/100, Training Loss: 2.2405, Validation Loss: 3.1581
  Epoch 22/100, Training Loss: 4.5608, Validation Loss: 6.3631
  Epoch 23/100, Training Loss: 1.4574, Validation Loss: 11.2955
  Epoch 24/100, Training Loss: 0.0028, Validation Loss: 17.4258
  Stopping training as loss has fallen below the threshold: 0.0028254888020455837
#+end_example

#+begin_src ipython
  plt.plot(loss[:10])
  plt.plot(val_loss[:10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2924e984fa192742d56703ea7f45a8a6eeb10676.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Results
** Connectivity

#+begin_src ipython
  # ksi = model.U.T
  ksi = torch.vstack((model.U.T, model.V.T))
  print(ksi.shape)

  # print('kappa', model.lr_kappa.cpu().detach())

  angle = torch.arccos(nn.CosineSimilarity(dim=0)(ksi[0], ksi[1])) * 180 / torch.pi
  print('angle ksi1 vs ksi2', angle.cpu().detach())

  var = torch.var(ksi, axis=-1)
  print('variances', var.cpu().detach())
#+end_src

#+RESULTS:
: torch.Size([4, 1000])
: angle ksi1 vs ksi2 tensor(18.6561)
: variances tensor([1.1366, 0.6584, 0.1114, 0.2723])

#+begin_src ipython
  lr = (1.0 + model.U @ model.V.T)
  weights = model.Wab_T * lr
  weights = weights.cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython  
  plot_con(weights)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1d6922629b054efe717c1fec06ace97a1d653250.png]]

#+begin_src ipython
  readout = model.linear.weight.data[0]
  print(readout.shape)
#+end_src

#+RESULTS:
: torch.Size([800])

#+begin_src ipython
  read0 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],0], readout).cpu().detach().numpy()
  read1 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],1], readout).cpu().detach().numpy()

  print('angle readout vs ksis', np.arccos(read0)*180/np.pi, np.arccos(read1)*180/np.pi)
#+end_src

#+RESULTS:
: angle readout vs ksis 80.77951350233859 72.60353117902321

#+begin_src ipython
  model.eval()

  # lr = (1.0 + model.lr_mask * (model.U @ model.V.T))  
  # model.Wab_T = model.Wab_T * lr.T
  # lr = model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])
  lr = model.U @ model.V.T / (1.0 * model.Na[0])
  model.Wab_T = model.Wab_T + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

** Evaluation

#+begin_src ipython
  model.N_BATCH = 1
  model.DURATION = 5
  model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW

  model.I0[0] = 1
  model.I0[1] = 1 

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = -1

  AD_pair = model.init_ff_input()

  ff_input = torch.cat((AC_pair, AD_pair))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([2, 610, 1000])

#+begin_src ipython
  rates = model.forward(ff_input=ff_input, RET_FF=1).cpu().detach().numpy()
  print(rates.shape)
#+end_src

#+RESULTS:
#+begin_example
  times (s) 0.0 rates (Hz) [0.0, 0.0]
  times (s) 0.08 rates (Hz) [2.03, 1.06]
  times (s) 0.16 rates (Hz) [0.0, 8.12]
  times (s) 0.25 rates (Hz) [0.0, 0.0]
  times (s) 0.33 rates (Hz) [2.04, 1.07]
  times (s) 0.41 rates (Hz) [0.0, 8.04]
  times (s) 0.49 rates (Hz) [0.0, 0.0]
  times (s) 0.57 rates (Hz) [1.97, 1.09]
  times (s) 0.66 rates (Hz) [0.0, 8.32]
  times (s) 0.74 rates (Hz) [0.0, 0.0]
  times (s) 0.82 rates (Hz) [2.04, 1.05]
  times (s) 0.9 rates (Hz) [0.0, 8.14]
  times (s) 0.98 rates (Hz) [0.0, 0.0]
  times (s) 1.07 rates (Hz) [1.96, 1.04]
  times (s) 1.15 rates (Hz) [0.0, 8.22]
  times (s) 1.23 rates (Hz) [0.0, 0.0]
  times (s) 1.31 rates (Hz) [1.99, 1.14]
  times (s) 1.39 rates (Hz) [0.0, 8.22]
  times (s) 1.48 rates (Hz) [0.0, 0.0]
  times (s) 1.56 rates (Hz) [2.02, 1.09]
  times (s) 1.64 rates (Hz) [0.0, 8.14]
  times (s) 1.72 rates (Hz) [0.0, 0.0]
  times (s) 1.8 rates (Hz) [2.0, 1.05]
  times (s) 1.89 rates (Hz) [0.0, 7.99]
  times (s) 1.97 rates (Hz) [0.0, 0.0]
  times (s) 2.05 rates (Hz) [1.99, 1.09]
  times (s) 2.13 rates (Hz) [0.0, 8.1]
  times (s) 2.21 rates (Hz) [0.0, 0.0]
  times (s) 2.3 rates (Hz) [1.97, 1.13]
  times (s) 2.38 rates (Hz) [0.0, 8.08]
  times (s) 2.46 rates (Hz) [0.0, 0.0]
  times (s) 2.54 rates (Hz) [2.04, 1.08]
  times (s) 2.62 rates (Hz) [0.0, 8.13]
  times (s) 2.7 rates (Hz) [0.0, 0.0]
  times (s) 2.79 rates (Hz) [2.06, 1.06]
  times (s) 2.87 rates (Hz) [0.0, 8.28]
  times (s) 2.95 rates (Hz) [0.0, 0.0]
  times (s) 3.03 rates (Hz) [2.03, 1.09]
  times (s) 3.11 rates (Hz) [0.0, 8.04]
  times (s) 3.2 rates (Hz) [0.0, 0.0]
  times (s) 3.28 rates (Hz) [1.99, 1.04]
  times (s) 3.36 rates (Hz) [0.0, 8.07]
  times (s) 3.44 rates (Hz) [0.0, 0.0]
  times (s) 3.52 rates (Hz) [2.02, 1.14]
  times (s) 3.61 rates (Hz) [0.0, 8.01]
  times (s) 3.69 rates (Hz) [0.0, 0.0]
  times (s) 3.77 rates (Hz) [1.98, 1.06]
  times (s) 3.85 rates (Hz) [0.0, 8.23]
  times (s) 3.93 rates (Hz) [0.0, 0.0]
  times (s) 4.02 rates (Hz) [2.02, 1.0]
  times (s) 4.1 rates (Hz) [0.0, 8.24]
  (2, 51, 800)
#+end_example

#+begin_src ipython
  plt.plot(model.ff_input.cpu().detach().numpy()[0,:, :10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/617b9fe7690ccbdc5f3d755cd3af2633ce63f3d0.png]]

#+begin_src ipython
  r_max = 1.25 * np.max(rates)
  plt.imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Neuron #')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3ffbb256e054f2cc6ddea78048b0458282f29f28.png]]

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  print(ordered.shape)
#+end_src

#+RESULTS:
: torch.Size([1000, 2])
: ksi torch.Size([4, 1000])
: (4, 1000)
: (2, 51, 800)

#+begin_src ipython
  plt.imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  plt.yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4a89292f7e7c376df47a0cff7e287ac04965a501.png]]

#+begin_src ipython
  y_pred = model.linear.weight.data.cpu().detach().numpy()[0]
  print(y_pred.shape)

  overlap = (rates @ y_pred) / rates.shape[-1]
  print(overlap.shape)
  plt.plot(overlap.T)
  plt.xlabel('Step')
  plt.ylabel('Overlap')
  
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (800,)
: (2, 51)
[[file:./.ob-jupyter/af9dadb874f496e5ca82bc9e564e82be712ec490.png]]
:END:

#+begin_src ipython
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  ax[0].plot(m0.T)
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1.T)
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi.T * 180 / np.pi)
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/df46f00d93b4117f1626b5db0d0db7fd987d131d.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

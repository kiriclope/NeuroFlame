#+STARTUP: fold
#+TITLE: Training low rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Training
*** split data

#+begin_src ipython
  def split_data(X, Y, train_perc=0.8, batch_size=32):

    # Split the dataset into training and validation sets
    train_size = int(train_perc * X.shape[0])

    X_train = X[:train_size]
    X_test = X[train_size:]

    Y_train = Y[:train_size]    
    Y_test = Y[train_size:]

    # print('X_train', X_train.shape, 'y_train', Y_train.shape)
    train_dataset = TensorDataset(X_train, Y_train)

    # print('X_test', X_test.shape, 'y_test', Y_test.shape)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)
    
    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1):
      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):          
          X, y = X.to(device), y.to(device)
          # Compute prediction error
          y_pred = model(X)
          loss = loss_fn(y_pred, y)

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()
          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              data, targets = data.to(device), targets.to(device)
              
              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
          val_loss /= size

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1):
      
      # scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []

      # Training loop.
      for epoch in range(num_epochs):
          loss = train(train_loader, model, loss_fn, optimizer, penalty, lbd)
          val_loss = test(val_loader, model, loss_fn)
          scheduler.step(val_loss)

          loss_list.append(loss.item())
          val_loss_list.append(val_loss)

          # if epoch % int(num_epochs  / 10) == 0:
          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def correlation_loss(output, target):
      # Subtract the mean of each vector
      output_mean = output - torch.mean(output)
      target_mean = target - torch.mean(target)
    
      # Compute the covariance between output and target
      covariance = torch.mean(output_mean * target_mean)
      
      # Compute the standard deviations of the vectors
      output_std = torch.std(output)
      target_std = torch.std(target)
    
      # Calculate the Pearson correlation coefficient
      correlation = covariance / (output_std * target_std)
    
      # Since we want to increase the correlation, we minimize its negative
      loss = -correlation  # Maximizing correlation by minimizing its negative
    
      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
    import torch
    import torch.nn as nn

    def sign_constrained_loss(output, xi, target_sign):
        dot_product = torch.dot(output.flatten(), xi.flatten())
        if target_sign > 0:
            loss = torch.relu(-dot_product)  # Encourages positive dot product
        else:
            loss = torch.relu(dot_product)   # Encourages negative dot product
        return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class CosineLoss(nn.Module):
      def __init__(self):
          super(CosineLoss, self).__init__()
          self.cosine_similarity = nn.CosineSimilarity(dim=-1)
          
      def forward(self, input1, input2):
          # Calculate cosine similarity
          cosine_sim = self.cosine_similarity(input1, input2)
          # Calculate the loss as 1 - cosine_similarity
          loss = 1 - cosine_sim
          # Return the mean loss over the batch
          return loss.mean()
#+end_src

#+RESULTS:


#+RESULTS:

** Other

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:          
          v = b - np.dot(b, a) / np.dot(a, a) * a
          
      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model, rank=2):
      print(model.U.shape)
      ksi = torch.hstack((model.U, model.V)).T
      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      # ksi = model.PHI0.cpu().detach().numpy()

      print(ksi.shape)

      theta = get_theta(ksi[0], ksi[rank], GM=0, IF_NORM=0)
      theta = get_theta(ksi[0][:model.Na[0]], ksi[rank][:model.Na[0]], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
  
#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)  
      ci = smooth.std(axis=0, ddof=1) * 1.96
      
      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Train RNN
** Parameters

#+Begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_train.yml"
#+end_src

#+RESULTS:

** Model

#+begin_src ipython
  start = perf_counter()
  model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', SEED=0)
#+end_src

#+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
    if param.requires_grad:
        print(name, param.shape)
#+end_src

#+RESULTS:
: U torch.Size([1000, 2])
: V torch.Size([1000, 2])
: linear.weight torch.Size([1, 800])
: linear.bias torch.Size([1])

** Inputs and labels
*** Labelling pairs

#+begin_src ipython
  model.N_BATCH = 64

  model.I0[0] = 1
  model.I0[1] = 1 

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = -1

  AD_pair = model.init_ff_input()
  
  ff_input = torch.cat((AC_pair, AD_pair))

  # model.I0[0] = -1
  # model.I0[1] = 1

  # BC_pair = model.init_ff_input()

  # model.I0[0] = -1
  # model.I0[1] = -1

  # BD_pair = model.init_ff_input()

  # ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([128, 1220, 1000])

#+begin_src ipython
  labels_pair = torch.zeros((model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.ones((model.N_BATCH, model.lr_eval_win))
  
  labels = torch.cat((labels_pair, labels_unpair))
  print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([128, 10])

#+RESULTS:

** Train

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 32
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.001

  # CosineLoss, BCELoss, BCEWithLogitLoss
  criterion = nn.BCEWithLogitsLoss()
  
  # SGD, Adam, AdamW
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)

  num_epochs = 100
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
#+begin_example
  Epoch 1/100, Training Loss: 0.7417, Validation Loss: 0.6108
  Epoch 2/100, Training Loss: 0.6594, Validation Loss: 1.3169
  Epoch 3/100, Training Loss: 0.6534, Validation Loss: 0.8351
  Epoch 4/100, Training Loss: 0.6161, Validation Loss: 1.0705
  Epoch 5/100, Training Loss: 0.8773, Validation Loss: 1.3021
  Epoch 6/100, Training Loss: 0.6773, Validation Loss: 0.6923
  Epoch 7/100, Training Loss: 1.0104, Validation Loss: 0.9792
  Epoch 8/100, Training Loss: 0.7074, Validation Loss: 0.8675
  Epoch 9/100, Training Loss: 0.6466, Validation Loss: 1.4757
  Epoch 10/100, Training Loss: 0.7348, Validation Loss: 0.9210
  Epoch 11/100, Training Loss: 0.6998, Validation Loss: 0.6964
  Epoch 12/100, Training Loss: 0.7268, Validation Loss: 1.0914
  Epoch 13/100, Training Loss: 0.4110, Validation Loss: 1.1120
  Epoch 14/100, Training Loss: 0.5160, Validation Loss: 1.1397
  Epoch 15/100, Training Loss: 0.6377, Validation Loss: 1.1471
  Epoch 16/100, Training Loss: 0.8820, Validation Loss: 1.1189
  Epoch 17/100, Training Loss: 0.6353, Validation Loss: 1.0357
  Epoch 18/100, Training Loss: 0.6442, Validation Loss: 0.9820
  Epoch 19/100, Training Loss: 0.7226, Validation Loss: 0.9503
  Epoch 20/100, Training Loss: 0.6436, Validation Loss: 0.9311
  Epoch 21/100, Training Loss: 0.7148, Validation Loss: 0.9296
  Epoch 22/100, Training Loss: 0.5816, Validation Loss: 0.9257
  Epoch 23/100, Training Loss: 0.5638, Validation Loss: 0.9817
  Epoch 24/100, Training Loss: 0.8101, Validation Loss: 0.9866
  Epoch 25/100, Training Loss: 0.6408, Validation Loss: 0.9865
  Epoch 26/100, Training Loss: 0.7231, Validation Loss: 0.9874
  Epoch 27/100, Training Loss: 0.6477, Validation Loss: 0.9881
  Epoch 28/100, Training Loss: 0.6426, Validation Loss: 0.9883
  Epoch 29/100, Training Loss: 0.6367, Validation Loss: 0.9893
  Epoch 30/100, Training Loss: 0.4685, Validation Loss: 0.9912
  Epoch 31/100, Training Loss: 0.7259, Validation Loss: 0.9965
  Epoch 32/100, Training Loss: 0.6388, Validation Loss: 0.9989
  Epoch 33/100, Training Loss: 0.6308, Validation Loss: 1.0010
  Epoch 34/100, Training Loss: 0.6291, Validation Loss: 1.0020
  Epoch 35/100, Training Loss: 0.6485, Validation Loss: 1.0020
  Epoch 36/100, Training Loss: 0.7333, Validation Loss: 1.0022
  Epoch 37/100, Training Loss: 0.5466, Validation Loss: 1.0020
  Epoch 38/100, Training Loss: 0.6394, Validation Loss: 1.0022
  Epoch 39/100, Training Loss: 0.5414, Validation Loss: 1.0024
  Epoch 40/100, Training Loss: 0.5537, Validation Loss: 1.0028
  Epoch 41/100, Training Loss: 0.7157, Validation Loss: 1.0033
  Epoch 42/100, Training Loss: 0.5421, Validation Loss: 1.0035
  Epoch 43/100, Training Loss: 0.4619, Validation Loss: 1.0039
  Epoch 44/100, Training Loss: 0.6238, Validation Loss: 1.0047
  Epoch 45/100, Training Loss: 0.5379, Validation Loss: 1.0052
  Epoch 46/100, Training Loss: 0.5501, Validation Loss: 1.0053
  Epoch 47/100, Training Loss: 0.6317, Validation Loss: 1.0054
  Epoch 48/100, Training Loss: 0.6423, Validation Loss: 1.0054
  Epoch 49/100, Training Loss: 0.8026, Validation Loss: 1.0054
  Epoch 50/100, Training Loss: 0.6425, Validation Loss: 1.0054
  Epoch 51/100, Training Loss: 0.5411, Validation Loss: 1.0054
  Epoch 52/100, Training Loss: 0.6437, Validation Loss: 1.0054
  Epoch 53/100, Training Loss: 0.8120, Validation Loss: 1.0054
  Epoch 54/100, Training Loss: 0.7311, Validation Loss: 1.0054
  Epoch 55/100, Training Loss: 0.7281, Validation Loss: 1.0053
  Epoch 56/100, Training Loss: 0.6331, Validation Loss: 1.0053
  Epoch 57/100, Training Loss: 0.7321, Validation Loss: 1.0053
  Epoch 58/100, Training Loss: 0.6324, Validation Loss: 1.0053
  Epoch 59/100, Training Loss: 0.7256, Validation Loss: 1.0053
  Epoch 60/100, Training Loss: 0.5574, Validation Loss: 1.0052
  Epoch 61/100, Training Loss: 0.6408, Validation Loss: 1.0052
  Epoch 62/100, Training Loss: 0.7296, Validation Loss: 1.0052
  Epoch 63/100, Training Loss: 0.7278, Validation Loss: 1.0052
  Epoch 64/100, Training Loss: 0.4610, Validation Loss: 1.0052
  Epoch 65/100, Training Loss: 0.6409, Validation Loss: 1.0052
  Epoch 66/100, Training Loss: 0.6336, Validation Loss: 1.0052
  Epoch 67/100, Training Loss: 0.4536, Validation Loss: 1.0053
  Epoch 68/100, Training Loss: 0.7467, Validation Loss: 1.0053
  Epoch 69/100, Training Loss: 0.7266, Validation Loss: 1.0053
  Epoch 70/100, Training Loss: 0.6425, Validation Loss: 1.0053
  Epoch 71/100, Training Loss: 0.5422, Validation Loss: 1.0053
  Epoch 72/100, Training Loss: 0.6399, Validation Loss: 1.0053
  Epoch 73/100, Training Loss: 0.6358, Validation Loss: 1.0053
  Epoch 74/100, Training Loss: 0.6355, Validation Loss: 1.0053
  Epoch 75/100, Training Loss: 0.5532, Validation Loss: 1.0053
  Epoch 76/100, Training Loss: 0.6429, Validation Loss: 1.0053
  Epoch 77/100, Training Loss: 0.7324, Validation Loss: 1.0053
  Epoch 78/100, Training Loss: 0.5339, Validation Loss: 1.0053
  Epoch 79/100, Training Loss: 0.6385, Validation Loss: 1.0053
  Epoch 80/100, Training Loss: 0.6362, Validation Loss: 1.0053
  Epoch 81/100, Training Loss: 0.6587, Validation Loss: 1.0053
  Epoch 82/100, Training Loss: 0.7336, Validation Loss: 1.0053
  Epoch 83/100, Training Loss: 0.6428, Validation Loss: 1.0053
  Epoch 84/100, Training Loss: 0.5470, Validation Loss: 1.0053
  Epoch 85/100, Training Loss: 0.7220, Validation Loss: 1.0053
  Epoch 86/100, Training Loss: 0.4568, Validation Loss: 1.0053
  Epoch 87/100, Training Loss: 0.7255, Validation Loss: 1.0053
  Epoch 88/100, Training Loss: 0.7182, Validation Loss: 1.0053
  Epoch 89/100, Training Loss: 0.7360, Validation Loss: 1.0053
  Epoch 90/100, Training Loss: 0.7161, Validation Loss: 1.0053
  Epoch 91/100, Training Loss: 0.4574, Validation Loss: 1.0053
  Epoch 92/100, Training Loss: 0.4660, Validation Loss: 1.0053
  Epoch 93/100, Training Loss: 0.6357, Validation Loss: 1.0053
  Epoch 94/100, Training Loss: 0.7198, Validation Loss: 1.0053
  Epoch 95/100, Training Loss: 0.4624, Validation Loss: 1.0053
  Epoch 96/100, Training Loss: 0.6419, Validation Loss: 1.0053
  Epoch 97/100, Training Loss: 0.4618, Validation Loss: 1.0053
  Epoch 98/100, Training Loss: 0.6319, Validation Loss: 1.0053
  Epoch 99/100, Training Loss: 0.5536, Validation Loss: 1.0053
  Epoch 100/100, Training Loss: 0.7268, Validation Loss: 1.0053
#+end_example

#+begin_src ipython
  plt.plot(loss[:10])
  plt.plot(val_loss[:10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d71ecff1dd1b82cbab981e57adaac1c18aa74125.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

* Results
** Connectivity

#+begin_src ipython
  # ksi = model.U.T
  ksi = torch.vstack((model.U.T, model.V.T))
  print(ksi.shape)

  # print('kappa', model.lr_kappa.cpu().detach())

  angle = torch.arccos(nn.CosineSimilarity(dim=0)(ksi[0], ksi[1])) * 180 / torch.pi
  print('angle ksi1 vs ksi2', angle.cpu().detach())

  var = torch.var(ksi, axis=-1)
  print('variances', var.cpu().detach())
#+end_src

#+RESULTS:
: torch.Size([4, 1000])
: angle ksi1 vs ksi2 tensor(77.8429)
: variances tensor([2.0695e-04, 1.0870e-04, 9.6975e-05, 9.9575e-05])

#+begin_src ipython
  lr = (1.0 + model.U @ model.V.T)
  weights = model.Wab_T * lr
  weights = weights.cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython  
  plot_con(weights)
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f7e3aef799e155a2057e668b77d2ff16e105311c.png]]

#+begin_src ipython
  readout = model.linear.weight.data[0]
  print(readout.shape)
#+end_src

#+RESULTS:
: torch.Size([800])

#+begin_src ipython
  read0 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],0], readout).cpu().detach().numpy()
  read1 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],1], readout).cpu().detach().numpy()

  print('angle readout vs ksis', np.arccos(read0)*180/np.pi, np.arccos(read1)*180/np.pi)
#+end_src

#+RESULTS:
: angle readout vs ksis 91.57095967395944 93.45771063971625

#+begin_src ipython
  model.eval()

  # lr = (1.0 + model.lr_mask * (model.U @ model.V.T))  
  # model.Wab_T = model.Wab_T * lr.T
  # lr = model.lr_mask * (model.U @ model.V.T) / (1.0 * model.Na[0])
  lr = model.KAPPA[0][0] * model.U @ model.V.T
  model.Wab_T = model.Wab_T + lr.T

  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
#+end_src

#+RESULTS:

** Evaluation

#+begin_src ipython
  rates = model.forward(RET_FF=1).cpu().detach().numpy()
  print(rates.shape)
#+end_src

#+RESULTS:
#+begin_example
  Generating ff input
  times (s) 0.0 rates (Hz) [1.39, 1.41]
  times (s) 0.08 rates (Hz) [1.35, 1.32]
  times (s) 0.16 rates (Hz) [1.32, 1.39]
  times (s) 0.25 rates (Hz) [1.3, 1.33]
  times (s) 0.33 rates (Hz) [1.29, 1.5]
  times (s) 0.41 rates (Hz) [1.28, 1.3]
  times (s) 0.49 rates (Hz) [1.35, 1.32]
  times (s) 0.57 rates (Hz) [1.33, 1.27]
  times (s) 0.66 rates (Hz) [1.38, 1.39]
  times (s) 0.74 rates (Hz) [1.36, 1.33]
  times (s) 0.82 rates (Hz) [1.51, 1.35]
  times (s) 0.9 rates (Hz) [1.42, 1.36]
  times (s) 0.98 rates (Hz) [1.49, 1.45]
  times (s) 1.07 rates (Hz) [1.52, 1.37]
  times (s) 1.15 rates (Hz) [1.41, 1.43]
  times (s) 1.23 rates (Hz) [1.48, 1.42]
  times (s) 1.31 rates (Hz) [1.47, 1.45]
  times (s) 1.39 rates (Hz) [1.48, 1.46]
  times (s) 1.48 rates (Hz) [1.46, 1.36]
  times (s) 1.56 rates (Hz) [1.47, 1.5]
  times (s) 1.64 rates (Hz) [1.3, 1.41]
  times (s) 1.72 rates (Hz) [1.24, 1.26]
  times (s) 1.8 rates (Hz) [1.33, 1.26]
  times (s) 1.89 rates (Hz) [1.33, 1.26]
  times (s) 1.97 rates (Hz) [1.33, 1.26]
  times (s) 2.05 rates (Hz) [1.36, 1.23]
  times (s) 2.13 rates (Hz) [1.37, 1.44]
  times (s) 2.21 rates (Hz) [1.28, 1.3]
  times (s) 2.3 rates (Hz) [1.33, 1.43]
  times (s) 2.38 rates (Hz) [1.27, 1.3]
  times (s) 2.46 rates (Hz) [1.44, 1.28]
  times (s) 2.54 rates (Hz) [1.39, 1.35]
  times (s) 2.62 rates (Hz) [1.4, 1.33]
  times (s) 2.7 rates (Hz) [1.43, 1.48]
  times (s) 2.79 rates (Hz) [1.42, 1.46]
  times (s) 2.87 rates (Hz) [1.37, 1.33]
  times (s) 2.95 rates (Hz) [1.36, 1.38]
  times (s) 3.03 rates (Hz) [1.4, 1.42]
  times (s) 3.11 rates (Hz) [1.37, 1.3]
  times (s) 3.2 rates (Hz) [1.46, 1.42]
  times (s) 3.28 rates (Hz) [1.32, 1.29]
  times (s) 3.36 rates (Hz) [1.34, 1.31]
  times (s) 3.44 rates (Hz) [1.32, 1.32]
  times (s) 3.52 rates (Hz) [1.28, 1.37]
  times (s) 3.61 rates (Hz) [1.35, 1.26]
  times (s) 3.69 rates (Hz) [1.4, 1.39]
  times (s) 3.77 rates (Hz) [1.32, 1.31]
  times (s) 3.85 rates (Hz) [1.34, 1.19]
  times (s) 3.93 rates (Hz) [1.34, 1.29]
  times (s) 4.02 rates (Hz) [1.35, 1.35]
  times (s) 4.1 rates (Hz) [1.3, 1.21]
  (1, 51, 800)
#+end_example

#+begin_src ipython
  plt.plot(model.ff_input.cpu().detach().numpy()[0,:, :10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/9396d6be8302b75d5d91f2134a08f9004bbf8d01.png]]

#+begin_src ipython
  r_max = 1.25 * np.max(rates)
  plt.imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Neuron #')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dadc25432237ba625ad7ec6d9b00b600d15a9a68.png]]

#+begin_src ipython
  idx = get_idx(model, 2)
  ordered = rates[..., idx]
  print(ordered.shape)
#+end_src

#+RESULTS:
: torch.Size([1000, 2])
: ksi torch.Size([4, 1000])
: (4, 1000)
: (1, 51, 800)

#+begin_src ipython
  plt.imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
  plt.yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4e15bc2a3559a8a2ad8175fe8ed84b53d369ac2d.png]]

#+begin_src ipython
  y_pred = model.linear.weight.data.cpu().detach().numpy()[0]
  print(y_pred.shape)

  overlap = (rates @ y_pred) / rates.shape[-1]
  print(overlap.shape)
  plt.plot(overlap.T)
  plt.xlabel('Step')
  plt.ylabel('Overlap')
  
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (800,)
: (1, 51)
[[file:./.ob-jupyter/800d7ed12402a92501b615ae363a3d9c4a55b5f8.png]]
:END:

#+begin_src ipython
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  ax[0].plot(m0.T)
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1.T)
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi.T * 180 / np.pi)
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/418165f99c169843b7fb461bc60648bf033a1d43.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
  pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Training
*** split data

#+begin_src ipython
  def split_data(X, Y, train_perc=0.8, batch_size=32):

    # Split the dataset into training and validation sets
    train_size = int(train_perc * X.shape[0])

    X_train = X[:train_size]
    X_test = X[train_size:]

    # X_train, X_mean, X_std = standard_scaler(X_train, IF_RETURN=1)
    # X_test = (X_test - X_mean) / X_std

    Y_train = Y[:train_size]    
    Y_test = Y[train_size:]

    # Y_train, Y_mean, Y_std = standard_scaler(Y_train, IF_RETURN=1)
    # Y_test = (Y_test - Y_mean) / Y_std

    # Create data sets
    # train_dataset = TensorDataset(X_train_scaled, Y_train_scaled)
    # val_dataset = TensorDataset(X_test_scaled, Y_test_scaled)

    # print('X_train', X_train.shape, 'y_train', Y_train.shape)
    train_dataset = TensorDataset(X_train, Y_train)

    # print('X_test', X_test.shape, 'y_test', Y_test.shape)
    val_dataset = TensorDataset(X_test, Y_test)
    
    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    # sequence_length = 14  # or any other sequence length you want
    # stride = 1  # or any other stride you want

    # sliding_window_dataset = SlidingWindowDataset(X, sequence_length, stride)
    # train_loader = torch.utils.data.DataLoader(sliding_window_dataset, batch_size=5, shuffle=True)
    # val_loader = torch.utils.data.DataLoader(sliding_window_dataset, batch_size=5, shuffle=True)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
  def train(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1):
      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      model.train()
      for batch, (X, y) in enumerate(dataloader):
          optimizer.zero_grad()

          X, y = X.to(device), y.to(device)
          # Compute prediction error
          y_pred = model(X)
          loss = loss_fn(y_pred, y)

          if penalty is not None:
              reg_loss = 0
              for param in model.parameters():
                  if penalty=='l1':
                      reg_loss += torch.sum(torch.abs(param))
                  else:
                      reg_loss += torch.sum(torch.square(param))

                  loss = loss + lbd * reg_loss

          # Backpropagation
          loss.backward()
          optimizer.step()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def test(dataloader, model, loss_fn):
      size = len(dataloader.dataset)
      num_batches = len(dataloader)

      device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

      # Validation loop.
      model.eval()
      val_loss = 0.0
      with torch.no_grad():
          for data, targets in dataloader:
              data, targets = data.to(device), targets.to(device)
              
              outputs = model(data)
              loss = loss_fn(outputs, targets)
              val_loss += loss.item() * data.size(0)
          val_loss /= size

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_optim(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1):

    # scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
    scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
    # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model.to(device)

    loss_list = []
    val_loss_list = []

    # Training loop.
    for epoch in range(num_epochs):
        loss = train(train_loader, model, loss_fn, optimizer, penalty, lbd)
        val_loss = test(val_loader, model, loss_fn)
        scheduler.step(val_loss)

        loss_list.append(loss.item())
        val_loss_list.append(val_loss)

        # if epoch % int(num_epochs  / 10) == 0:
        print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}')

    return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
  def correlation_loss(output, target):
      # Subtract the mean of each vector
      output_mean = output - torch.mean(output)
      target_mean = target - torch.mean(target)
    
      # Compute the covariance between output and target
      covariance = torch.mean(output_mean * target_mean)
      
      # Compute the standard deviations of the vectors
      output_std = torch.std(output)
      target_std = torch.std(target)
    
      # Calculate the Pearson correlation coefficient
      correlation = covariance / (output_std * target_std)
    
      # Since we want to increase the correlation, we minimize its negative
      loss = -correlation  # Maximizing correlation by minimizing its negative
    
      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
    import torch
    import torch.nn as nn

    def sign_constrained_loss(output, xi, target_sign):
        dot_product = torch.dot(output.flatten(), xi.flatten())
        if target_sign > 0:
            loss = torch.relu(-dot_product)  # Encourages positive dot product
        else:
            loss = torch.relu(dot_product)   # Encourages negative dot product
        return loss
#+end_src

#+RESULTS:

#+begin_src ipython
  class CosineLoss(nn.Module):
      def __init__(self):
          super(CosineLoss, self).__init__()
          self.cosine_similarity = nn.CosineSimilarity(dim=-1)
          
      def forward(self, input1, input2):
          # Calculate cosine similarity
          cosine_sim = self.cosine_similarity(input1, input2)
          # Calculate the loss as 1 - cosine_similarity
          loss = 1 - cosine_sim
          # Return the mean loss over the batch
          return loss.mean()
#+end_src

#+RESULTS:


#+RESULTS:

** Other

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:          
          v = b - np.dot(b, a) / np.dot(a, a) * a
          
      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model):
      ksi = model.U.cpu().detach().numpy().T
      # ksi = model.PHI0.cpu().detach().numpy()

      print(ksi.shape)
      
      theta = get_theta(ksi[0], ksi[1], GM=0, IF_NORM=0)
      theta = get_theta(ksi[0][:model.Na[0]], ksi[1][:model.Na[0]], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
  
#+end_src

#+RESULTS:

#+begin_src ipython
  import scipy.stats as stats

  def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)  
      ci = smooth.std(axis=0, ddof=1) * 1.96
      
      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import torch
  import torch.nn as nn
  import torch.optim as optim
  from torch.utils.data import Dataset, TensorDataset, DataLoader
#+end_src

#+RESULTS:

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  import torch.nn as nn
  from time import perf_counter  
  from scipy.stats import circmean

  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Train RNN
** Parameters

#+Begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_EI.yml"
  name = "dual"
#+end_src

#+RESULTS:

** Model

#+begin_src ipython
  start = perf_counter()
  name = "dual_single"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', SEED=2)
#+end_src

#+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
    if param.requires_grad:
        print(name, param.data)
#+end_src

#+RESULTS:
: U tensor([[-0.8317,  0.1172],
:         [-0.9406,  0.5480],
:         [-0.1154,  0.8251],
:         ...,
:         [ 1.4829, -0.5335],
:         [ 1.4766,  1.2941],
:         [-0.0687, -1.4514]], device='cuda:0')
: lr_kappa tensor([3.0735])
: linear.weight tensor([[ 0.0049,  0.0148,  0.0109,  ..., -0.0112, -0.0113,  0.0116]],
:        device='cuda:0')

** Inputs and labels

#+begin_src ipython
  model.N_BATCH = 16

  model.I0[0] = 1
  model.I0[1] = 1 

  AC_pair = model.init_ff_input()

  model.I0[0] = 1
  model.I0[1] = -1

  AD_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = 1

  BC_pair = model.init_ff_input()

  model.I0[0] = -1
  model.I0[1] = -1

  BD_pair = model.init_ff_input()
  
  ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([64, 601, 2000])

#+begin_src ipython
  labels_pair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))
  labels_unpair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
  
  labels = torch.cat((labels_pair, labels_unpair))
  print(ff_input.shape, labels.shape)
#+end_src

#+RESULTS:
: torch.Size([64, 601, 2000]) torch.Size([64, 100])

** Train

#+begin_src ipython
  device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

  batch_size = 32
  train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)

  learning_rate = 0.1

  # CosineLoss, BCELoss, BCEWithLogitLoss
  criterion = nn.BCEWithLogitsLoss()

  # SGD, Adam, AdamW
  optimizer = optim.Adam(model.parameters(), lr=learning_rate)

  num_epochs = 30
  loss, val_loss = run_optim(model, train_loader, val_loader, criterion, optimizer, num_epochs)
#+End_src

#+RESULTS:
#+begin_example
  Epoch 1/30, Training Loss: nan, Validation Loss: nan
  Epoch 2/30, Training Loss: nan, Validation Loss: nan
  Epoch 3/30, Training Loss: nan, Validation Loss: nan
  Epoch 4/30, Training Loss: nan, Validation Loss: nan
  Epoch 5/30, Training Loss: nan, Validation Loss: nan
  Epoch 6/30, Training Loss: nan, Validation Loss: nan
  Epoch 7/30, Training Loss: nan, Validation Loss: nan
  Epoch 8/30, Training Loss: nan, Validation Loss: nan
  Epoch 9/30, Training Loss: nan, Validation Loss: nan
  Epoch 10/30, Training Loss: nan, Validation Loss: nan
  Epoch 00011: reducing learning rate of group 0 to 1.0000e-02.
  Epoch 11/30, Training Loss: nan, Validation Loss: nan
  Epoch 12/30, Training Loss: nan, Validation Loss: nan
  Epoch 13/30, Training Loss: nan, Validation Loss: nan
  Epoch 14/30, Training Loss: nan, Validation Loss: nan
  Epoch 15/30, Training Loss: nan, Validation Loss: nan
  Epoch 16/30, Training Loss: nan, Validation Loss: nan
  Epoch 17/30, Training Loss: nan, Validation Loss: nan
  Epoch 18/30, Training Loss: nan, Validation Loss: nan
  Epoch 19/30, Training Loss: nan, Validation Loss: nan
  Epoch 20/30, Training Loss: nan, Validation Loss: nan
  Epoch 21/30, Training Loss: nan, Validation Loss: nan
  Epoch 00022: reducing learning rate of group 0 to 1.0000e-03.
  Epoch 22/30, Training Loss: nan, Validation Loss: nan
  Epoch 23/30, Training Loss: nan, Validation Loss: nan
  Epoch 24/30, Training Loss: nan, Validation Loss: nan
  Epoch 25/30, Training Loss: nan, Validation Loss: nan
  Epoch 26/30, Training Loss: nan, Validation Loss: nan
  Epoch 27/30, Training Loss: nan, Validation Loss: nan
  Epoch 28/30, Training Loss: nan, Validation Loss: nan
  Epoch 29/30, Training Loss: nan, Validation Loss: nan
  Epoch 30/30, Training Loss: nan, Validation Loss: nan
#+end_example

#+begin_src ipython

#+end_src

#+RESULTS:

#+begin_src ipython
  plt.plot(loss[:10])
  plt.plot(val_loss[:10])
#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fc54c3c4e20> |
[[file:./.ob-jupyter/97f6f832b80cb9eefa094cfe30466e70bfe12f4c.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

* Results

#+begin_src ipython
  ksi = model.U.T
  # ksi = torch.stack((model.U.T[0], model.V.T[0]))
  print(ksi.shape)
  
  print('kappa', model.lr_kappa.cpu().detach())

  angle = torch.arccos(nn.CosineSimilarity(dim=0)(ksi[0], ksi[1])) * 180 / torch.pi
  print('angle ksi1 vs ksi2', angle.cpu().detach())

  var = torch.var(ksi, axis=-1)
  print('variances', var.cpu().detach())
#+end_src

#+RESULTS:
: torch.Size([2, 2000])
: kappa tensor([3.0735])
: angle ksi1 vs ksi2 tensor(nan)
: variances tensor([nan, nan])

#+begin_src ipython
  lr = (1.0 + model.U @ model.U.T / torch.sqrt(model.Ka[0]))
  weights = model.Wab.T * lr
  weights = weights.cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython  
#  plot_con(weights)
#+end_src

#+RESULTS:

#+begin_src ipython
  readout = model.linear.weight.data[0]
  print(readout.shape)
#+end_src

#+RESULTS:
: torch.Size([1600])

#+begin_src ipython
  read0 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],0], readout).cpu().detach().numpy()
  read1 = nn.CosineSimilarity(dim=0)(model.U[:model.Na[0],1], readout).cpu().detach().numpy()

  print('angle readout vs ksis', np.arccos(read0)*180/np.pi, np.arccos(read1)*180/np.pi)
#+end_src

#+RESULTS:
: angle readout vs ksis nan nan

** Eval

#+begin_src ipython
  model.eval()
  model.N_BATCH = 1
  model.VERBOSE=1
  model.LR_TRAIN=0
  print(model.ff_input.shape)
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([1, 601, 2000])
: torch.Size([64, 601, 2000])

#+begin_src ipython
  rates = model.forward(REC_LAST_ONLY=0).cpu().detach().numpy()
#+end_src

#+RESULTS:
#+begin_example
  generating ff input
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.0 rates (Hz) [48.46, 6706.64]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.01 rates (Hz) [29.39, 2467.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.02 rates (Hz) [17.83, 907.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.03 rates (Hz) [10.81, 333.9]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.04 rates (Hz) [6.56, 122.84]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.05 rates (Hz) [3.98, 45.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.05 rates (Hz) [2.41, 16.62]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.06 rates (Hz) [1.46, 6.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.07 rates (Hz) [0.89, 2.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.08 rates (Hz) [70.31, 20.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.09 rates (Hz) [42.65, 12263.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.1 rates (Hz) [25.87, 4511.39]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.11 rates (Hz) [15.69, 1659.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.12 rates (Hz) [9.52, 610.55]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.13 rates (Hz) [5.77, 224.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.14 rates (Hz) [3.5, 82.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.15 rates (Hz) [2.12, 30.4]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.16 rates (Hz) [1.29, 11.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.16 rates (Hz) [0.78, 4.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.17 rates (Hz) [0.47, 1.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.18 rates (Hz) [120.46, 59.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.19 rates (Hz) [73.06, 16493.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.2 rates (Hz) [44.31, 6067.79]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.21 rates (Hz) [26.88, 2232.21]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.22 rates (Hz) [16.3, 821.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.23 rates (Hz) [9.89, 302.1]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.24 rates (Hz) [6.0, 111.14]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.25 rates (Hz) [3.64, 40.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.26 rates (Hz) [2.21, 15.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.27 rates (Hz) [1.34, 5.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.27 rates (Hz) [0.81, 2.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.28 rates (Hz) [85.04, 42.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.29 rates (Hz) [51.58, 11740.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.3 rates (Hz) [31.28, 4318.99]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.31 rates (Hz) [18.97, 1588.87]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.32 rates (Hz) [11.51, 584.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.33 rates (Hz) [6.98, 215.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.34 rates (Hz) [4.23, 79.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.35 rates (Hz) [2.57, 29.1]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.36 rates (Hz) [1.56, 10.71]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.37 rates (Hz) [0.94, 3.94]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.38 rates (Hz) [0.57, 1.45]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.38 rates (Hz) [124.96, 93.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.39 rates (Hz) [75.79, 11477.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.4 rates (Hz) [45.97, 4222.48]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.41 rates (Hz) [27.88, 1553.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.42 rates (Hz) [16.91, 571.45]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.43 rates (Hz) [10.26, 210.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.44 rates (Hz) [6.22, 77.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.45 rates (Hz) [3.77, 28.45]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.46 rates (Hz) [2.29, 10.47]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.47 rates (Hz) [1.39, 3.85]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.48 rates (Hz) [0.84, 1.42]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.49 rates (Hz) [127.32, 159.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.49 rates (Hz) [77.22, 652.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.5 rates (Hz) [46.84, 239.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.51 rates (Hz) [28.41, 88.28]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.52 rates (Hz) [17.23, 32.48]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.53 rates (Hz) [10.45, 11.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.54 rates (Hz) [6.34, 431.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.55 rates (Hz) [3.84, 158.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.56 rates (Hz) [2.33, 58.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.57 rates (Hz) [1.41, 21.46]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.58 rates (Hz) [0.86, 7.9]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.59 rates (Hz) [0.52, 2.9]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.59 rates (Hz) [25.43, 1.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.6 rates (Hz) [165.95, 5729.0]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.61 rates (Hz) [100.65, 2107.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.62 rates (Hz) [61.05, 775.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.63 rates (Hz) [37.03, 285.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.64 rates (Hz) [22.46, 104.93]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.65 rates (Hz) [13.62, 38.6]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.66 rates (Hz) [8.26, 14.2]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.67 rates (Hz) [5.01, 5.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.68 rates (Hz) [3.04, 412.86]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.69 rates (Hz) [1.84, 151.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.7 rates (Hz) [1.12, 55.87]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.7 rates (Hz) [0.68, 20.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.71 rates (Hz) [0.41, 7.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.72 rates (Hz) [0.25, 2.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.73 rates (Hz) [33.67, 1.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.74 rates (Hz) [174.06, 7580.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.75 rates (Hz) [105.57, 2788.71]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.76 rates (Hz) [64.03, 1025.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.77 rates (Hz) [38.84, 377.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.78 rates (Hz) [23.56, 138.84]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.79 rates (Hz) [14.29, 51.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.8 rates (Hz) [8.67, 18.79]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.81 rates (Hz) [5.26, 6.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.81 rates (Hz) [3.19, 166.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.82 rates (Hz) [1.93, 61.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.83 rates (Hz) [1.17, 22.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.84 rates (Hz) [0.71, 8.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.85 rates (Hz) [0.43, 3.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.86 rates (Hz) [15.89, 1.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.87 rates (Hz) [156.74, 3579.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.88 rates (Hz) [95.07, 1316.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.89 rates (Hz) [57.66, 484.46]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.9 rates (Hz) [34.97, 178.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.91 rates (Hz) [21.21, 65.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.92 rates (Hz) [12.87, 24.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.92 rates (Hz) [7.8, 8.87]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.93 rates (Hz) [4.74, 386.66]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.94 rates (Hz) [2.87, 142.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.95 rates (Hz) [1.74, 52.33]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.96 rates (Hz) [1.06, 19.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.97 rates (Hz) [0.64, 7.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.98 rates (Hz) [0.85, 2.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 0.99 rates (Hz) [73.02, 4.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.0 rates (Hz) [59.31, 15743.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.01 rates (Hz) [35.97, 5791.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.02 rates (Hz) [21.82, 2130.72]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.02 rates (Hz) [13.23, 783.85]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.03 rates (Hz) [8.03, 288.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.04 rates (Hz) [4.87, 106.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.05 rates (Hz) [2.95, 39.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.06 rates (Hz) [1.79, 14.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.07 rates (Hz) [1.09, 5.28]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.08 rates (Hz) [7.02, 1.94]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.09 rates (Hz) [110.11, 1446.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.1 rates (Hz) [66.78, 532.14]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.11 rates (Hz) [40.51, 195.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.12 rates (Hz) [24.57, 72.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.13 rates (Hz) [14.9, 26.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.13 rates (Hz) [9.04, 9.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.14 rates (Hz) [5.48, 505.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.15 rates (Hz) [3.32, 186.01]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.16 rates (Hz) [2.02, 68.43]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.17 rates (Hz) [1.22, 25.17]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.18 rates (Hz) [0.74, 9.26]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.19 rates (Hz) [0.45, 3.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.2 rates (Hz) [41.59, 1.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.21 rates (Hz) [170.91, 9305.66]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.22 rates (Hz) [103.66, 3423.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.23 rates (Hz) [62.88, 1259.38]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.24 rates (Hz) [38.14, 463.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.24 rates (Hz) [23.13, 170.44]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.25 rates (Hz) [14.03, 62.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.26 rates (Hz) [8.51, 23.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.27 rates (Hz) [5.16, 8.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.28 rates (Hz) [3.16, 3.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.29 rates (Hz) [49.31, 354.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.3 rates (Hz) [29.91, 130.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.31 rates (Hz) [18.14, 47.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.32 rates (Hz) [11.0, 17.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.33 rates (Hz) [6.67, 6.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.34 rates (Hz) [5.25, 558.67]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.35 rates (Hz) [3.18, 205.52]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.35 rates (Hz) [1.93, 75.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.36 rates (Hz) [1.17, 27.81]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.37 rates (Hz) [0.71, 10.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.38 rates (Hz) [0.43, 3.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.39 rates (Hz) [31.1, 1.38]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.4 rates (Hz) [156.74, 6929.15]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.41 rates (Hz) [95.07, 2549.09]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.42 rates (Hz) [57.66, 937.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.43 rates (Hz) [34.97, 344.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.44 rates (Hz) [21.21, 126.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.45 rates (Hz) [12.87, 46.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.46 rates (Hz) [7.8, 17.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.46 rates (Hz) [4.73, 6.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.47 rates (Hz) [4.43, 154.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.48 rates (Hz) [2.69, 56.86]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.49 rates (Hz) [1.63, 20.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.5 rates (Hz) [0.99, 7.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.51 rates (Hz) [0.78, 2.83]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.52 rates (Hz) [63.13, 1.06]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.53 rates (Hz) [195.72, 14163.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.54 rates (Hz) [118.71, 5210.48]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.55 rates (Hz) [72.0, 1916.83]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.56 rates (Hz) [43.67, 705.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.56 rates (Hz) [26.49, 259.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.57 rates (Hz) [16.07, 95.43]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.58 rates (Hz) [9.74, 35.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.59 rates (Hz) [5.91, 12.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.6 rates (Hz) [3.58, 4.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.61 rates (Hz) [13.79, 177.64]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.62 rates (Hz) [8.36, 65.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.63 rates (Hz) [5.07, 24.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.64 rates (Hz) [3.08, 8.84]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.65 rates (Hz) [1.87, 3.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.66 rates (Hz) [47.59, 62.0]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.67 rates (Hz) [28.86, 205.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.67 rates (Hz) [17.51, 75.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.68 rates (Hz) [10.62, 27.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.69 rates (Hz) [6.44, 10.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.7 rates (Hz) [3.91, 4.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.71 rates (Hz) [12.01, 214.21]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.72 rates (Hz) [7.29, 78.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.73 rates (Hz) [4.42, 28.99]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.74 rates (Hz) [2.68, 10.66]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.75 rates (Hz) [1.63, 3.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.76 rates (Hz) [27.78, 1.44]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.77 rates (Hz) [151.15, 6173.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.78 rates (Hz) [91.68, 2271.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.78 rates (Hz) [55.61, 835.46]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.79 rates (Hz) [33.73, 307.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.8 rates (Hz) [20.46, 113.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.81 rates (Hz) [12.41, 41.6]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.82 rates (Hz) [7.53, 15.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.83 rates (Hz) [4.56, 5.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.84 rates (Hz) [2.77, 240.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.85 rates (Hz) [1.68, 88.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.86 rates (Hz) [1.02, 32.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.87 rates (Hz) [0.62, 11.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.88 rates (Hz) [0.37, 4.4]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.89 rates (Hz) [0.23, 1.62]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.89 rates (Hz) [113.23, 0.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.9 rates (Hz) [250.34, 25468.4]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.91 rates (Hz) [151.84, 9369.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.92 rates (Hz) [92.09, 3446.77]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.93 rates (Hz) [55.86, 1268.0]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.94 rates (Hz) [33.88, 466.47]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.95 rates (Hz) [20.55, 171.6]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.96 rates (Hz) [12.46, 63.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.97 rates (Hz) [7.56, 23.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.98 rates (Hz) [4.59, 8.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 1.99 rates (Hz) [2.78, 3.14]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.0 rates (Hz) [10.44, 284.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.0 rates (Hz) [6.33, 104.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.01 rates (Hz) [3.84, 38.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.02 rates (Hz) [2.33, 14.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.03 rates (Hz) [1.41, 5.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.04 rates (Hz) [0.86, 1.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.05 rates (Hz) [92.96, 72.71]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.06 rates (Hz) [56.38, 8057.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.07 rates (Hz) [34.2, 2964.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.08 rates (Hz) [20.74, 1090.5]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.09 rates (Hz) [12.58, 401.17]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.1 rates (Hz) [7.63, 147.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.1 rates (Hz) [4.63, 54.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.11 rates (Hz) [2.81, 19.97]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.12 rates (Hz) [1.7, 7.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.13 rates (Hz) [1.03, 2.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.14 rates (Hz) [39.61, 1.01]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.15 rates (Hz) [178.95, 8913.15]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.16 rates (Hz) [108.54, 3278.96]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.17 rates (Hz) [65.83, 1206.26]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.18 rates (Hz) [39.93, 443.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.19 rates (Hz) [24.22, 163.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.2 rates (Hz) [14.69, 60.06]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.21 rates (Hz) [8.91, 22.09]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.21 rates (Hz) [5.4, 8.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.22 rates (Hz) [3.28, 14.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.23 rates (Hz) [1.99, 5.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.24 rates (Hz) [1.21, 1.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.25 rates (Hz) [93.67, 152.64]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.26 rates (Hz) [56.82, 56.15]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.27 rates (Hz) [34.46, 2920.5]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.28 rates (Hz) [20.9, 1074.39]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.29 rates (Hz) [12.68, 395.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.3 rates (Hz) [7.69, 145.4]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.31 rates (Hz) [4.66, 53.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.32 rates (Hz) [2.83, 19.68]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.32 rates (Hz) [1.72, 7.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.33 rates (Hz) [1.04, 2.66]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.34 rates (Hz) [42.27, 1.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.35 rates (Hz) [169.02, 9479.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.36 rates (Hz) [102.52, 3487.26]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.37 rates (Hz) [62.18, 1282.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.38 rates (Hz) [37.71, 471.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.39 rates (Hz) [22.87, 173.62]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.4 rates (Hz) [13.87, 63.87]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.41 rates (Hz) [8.42, 23.5]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.42 rates (Hz) [5.1, 8.64]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.43 rates (Hz) [3.1, 3.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.43 rates (Hz) [8.2, 348.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.44 rates (Hz) [4.97, 128.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.45 rates (Hz) [3.02, 47.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.46 rates (Hz) [1.83, 17.37]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.47 rates (Hz) [1.11, 6.39]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.48 rates (Hz) [0.67, 2.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.49 rates (Hz) [63.37, 0.86]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.5 rates (Hz) [203.03, 14260.6]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.51 rates (Hz) [123.14, 5246.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.52 rates (Hz) [74.69, 1929.96]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.53 rates (Hz) [45.3, 709.99]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.53 rates (Hz) [27.48, 261.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.54 rates (Hz) [16.67, 96.09]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.55 rates (Hz) [10.11, 35.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.56 rates (Hz) [6.13, 13.0]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.57 rates (Hz) [3.72, 4.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.58 rates (Hz) [2.26, 202.26]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.59 rates (Hz) [1.37, 74.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.6 rates (Hz) [0.83, 27.37]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.61 rates (Hz) [0.5, 10.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.62 rates (Hz) [0.31, 3.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.63 rates (Hz) [0.19, 1.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.64 rates (Hz) [130.61, 22.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.64 rates (Hz) [79.22, 25515.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.65 rates (Hz) [48.05, 9386.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.66 rates (Hz) [29.14, 3453.17]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.67 rates (Hz) [17.68, 1270.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.68 rates (Hz) [10.72, 467.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.69 rates (Hz) [6.5, 171.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.7 rates (Hz) [3.94, 63.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.71 rates (Hz) [2.39, 23.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.72 rates (Hz) [1.45, 8.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.73 rates (Hz) [0.88, 3.15]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.74 rates (Hz) [9.04, 1.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.75 rates (Hz) [149.99, 2040.72]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.75 rates (Hz) [90.97, 750.74]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.76 rates (Hz) [55.18, 276.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.77 rates (Hz) [33.47, 101.6]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.78 rates (Hz) [20.3, 37.38]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.79 rates (Hz) [12.31, 13.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.8 rates (Hz) [7.47, 525.82]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.81 rates (Hz) [4.53, 193.44]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.82 rates (Hz) [2.75, 71.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.83 rates (Hz) [1.67, 26.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.84 rates (Hz) [1.01, 9.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.85 rates (Hz) [0.61, 3.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.86 rates (Hz) [0.37, 1.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.86 rates (Hz) [134.73, 74.52]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.87 rates (Hz) [81.72, 17086.21]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.88 rates (Hz) [49.56, 6285.67]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.89 rates (Hz) [30.06, 2312.37]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.9 rates (Hz) [18.23, 850.67]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.91 rates (Hz) [11.06, 312.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.92 rates (Hz) [6.71, 115.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.93 rates (Hz) [4.07, 42.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.94 rates (Hz) [2.47, 15.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.95 rates (Hz) [1.5, 5.73]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.96 rates (Hz) [0.91, 2.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.97 rates (Hz) [80.09, 50.47]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.97 rates (Hz) [48.58, 9145.96]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.98 rates (Hz) [29.46, 3364.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 2.99 rates (Hz) [17.87, 1237.77]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.0 rates (Hz) [10.84, 455.35]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.01 rates (Hz) [6.57, 167.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.02 rates (Hz) [3.99, 61.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.03 rates (Hz) [2.42, 22.67]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.04 rates (Hz) [1.47, 8.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.05 rates (Hz) [0.89, 3.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.06 rates (Hz) [14.37, 1.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.07 rates (Hz) [155.39, 3237.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.07 rates (Hz) [94.25, 1191.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.08 rates (Hz) [57.16, 438.15]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.09 rates (Hz) [34.67, 161.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.1 rates (Hz) [21.03, 59.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.11 rates (Hz) [12.75, 21.81]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.12 rates (Hz) [7.74, 8.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.13 rates (Hz) [4.69, 523.2]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.14 rates (Hz) [2.85, 192.48]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.15 rates (Hz) [1.73, 70.81]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.16 rates (Hz) [1.05, 26.05]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.17 rates (Hz) [0.64, 9.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.18 rates (Hz) [0.39, 3.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.18 rates (Hz) [0.23, 1.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.19 rates (Hz) [135.26, 44.16]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.2 rates (Hz) [82.04, 22628.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.21 rates (Hz) [49.76, 8324.39]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.22 rates (Hz) [30.18, 3062.37]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.23 rates (Hz) [18.31, 1126.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.24 rates (Hz) [11.1, 414.45]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.25 rates (Hz) [6.73, 152.47]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.26 rates (Hz) [4.08, 56.09]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.27 rates (Hz) [2.48, 20.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.28 rates (Hz) [1.5, 7.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.29 rates (Hz) [0.91, 2.79]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.29 rates (Hz) [33.3, 1.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.3 rates (Hz) [173.59, 7497.81]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.31 rates (Hz) [105.29, 2758.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.32 rates (Hz) [63.86, 1014.72]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.33 rates (Hz) [38.73, 373.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.34 rates (Hz) [23.49, 137.33]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.35 rates (Hz) [14.25, 50.52]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.36 rates (Hz) [8.64, 18.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.37 rates (Hz) [5.24, 6.84]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.38 rates (Hz) [3.18, 176.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.39 rates (Hz) [1.93, 65.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.4 rates (Hz) [1.17, 23.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.4 rates (Hz) [0.71, 8.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.41 rates (Hz) [0.43, 3.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.42 rates (Hz) [2.91, 1.19]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.43 rates (Hz) [144.1, 664.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.44 rates (Hz) [87.4, 244.39]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.45 rates (Hz) [53.01, 89.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.46 rates (Hz) [32.15, 33.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.47 rates (Hz) [19.5, 1518.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.48 rates (Hz) [11.83, 558.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.49 rates (Hz) [7.17, 205.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.5 rates (Hz) [4.35, 75.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.5 rates (Hz) [2.64, 27.82]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.51 rates (Hz) [1.6, 10.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.52 rates (Hz) [0.97, 3.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.53 rates (Hz) [0.59, 1.38]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.54 rates (Hz) [129.39, 107.93]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.55 rates (Hz) [78.48, 9927.28]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.56 rates (Hz) [47.6, 3652.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.57 rates (Hz) [28.87, 1343.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.58 rates (Hz) [17.51, 494.25]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.59 rates (Hz) [10.62, 181.82]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.6 rates (Hz) [6.44, 66.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.61 rates (Hz) [3.91, 24.61]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.61 rates (Hz) [2.37, 9.05]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.62 rates (Hz) [1.44, 3.33]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.63 rates (Hz) [0.98, 1.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.64 rates (Hz) [140.52, 223.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.65 rates (Hz) [85.23, 82.17]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.66 rates (Hz) [51.7, 4640.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.67 rates (Hz) [31.36, 1707.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.68 rates (Hz) [19.02, 628.01]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.69 rates (Hz) [11.53, 231.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.7 rates (Hz) [7.0, 84.99]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.71 rates (Hz) [4.24, 31.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.72 rates (Hz) [2.57, 11.5]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.72 rates (Hz) [1.56, 4.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.73 rates (Hz) [21.09, 1.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.74 rates (Hz) [140.48, 4650.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.75 rates (Hz) [85.2, 1710.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.76 rates (Hz) [51.68, 629.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.77 rates (Hz) [31.34, 231.55]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.78 rates (Hz) [19.01, 85.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.79 rates (Hz) [11.53, 31.34]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.8 rates (Hz) [6.99, 11.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.81 rates (Hz) [4.24, 4.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.82 rates (Hz) [22.54, 415.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.83 rates (Hz) [13.67, 152.97]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.83 rates (Hz) [8.29, 56.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.84 rates (Hz) [5.03, 20.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.85 rates (Hz) [3.05, 7.62]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.86 rates (Hz) [1.97, 2.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.87 rates (Hz) [65.13, 163.36]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.88 rates (Hz) [39.5, 60.1]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.89 rates (Hz) [23.96, 22.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.9 rates (Hz) [14.53, 1635.2]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.91 rates (Hz) [8.81, 601.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.92 rates (Hz) [5.35, 221.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.93 rates (Hz) [3.24, 81.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.94 rates (Hz) [1.97, 29.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.94 rates (Hz) [1.19, 11.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.95 rates (Hz) [0.72, 4.05]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.96 rates (Hz) [24.43, 1.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.97 rates (Hz) [146.39, 5409.49]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.98 rates (Hz) [88.79, 1990.04]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 3.99 rates (Hz) [53.86, 732.1]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.0 rates (Hz) [32.66, 269.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.01 rates (Hz) [19.81, 99.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.02 rates (Hz) [12.02, 36.45]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.03 rates (Hz) [7.29, 13.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.04 rates (Hz) [4.42, 4.93]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.04 rates (Hz) [12.13, 331.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.05 rates (Hz) [7.36, 122.13]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.06 rates (Hz) [4.46, 44.93]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.07 rates (Hz) [2.71, 16.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.08 rates (Hz) [1.64, 6.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.09 rates (Hz) [2.8, 2.24]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.1 rates (Hz) [92.06, 447.4]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.11 rates (Hz) [55.84, 164.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.12 rates (Hz) [33.87, 60.55]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.13 rates (Hz) [20.54, 22.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.14 rates (Hz) [12.46, 841.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.15 rates (Hz) [7.56, 309.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.15 rates (Hz) [4.58, 113.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.16 rates (Hz) [2.78, 41.9]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.17 rates (Hz) [1.69, 15.41]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.18 rates (Hz) [1.02, 5.67]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.19 rates (Hz) [4.1, 2.09]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.2 rates (Hz) [100.51, 765.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.21 rates (Hz) [60.96, 281.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.22 rates (Hz) [36.98, 103.63]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.23 rates (Hz) [22.43, 38.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.24 rates (Hz) [13.6, 14.03]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.25 rates (Hz) [8.25, 762.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.26 rates (Hz) [5.0, 280.62]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.26 rates (Hz) [3.04, 103.23]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.27 rates (Hz) [1.84, 37.98]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.28 rates (Hz) [1.12, 13.97]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.29 rates (Hz) [0.68, 5.14]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.3 rates (Hz) [7.7, 1.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.31 rates (Hz) [113.28, 1601.37]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.32 rates (Hz) [68.71, 589.11]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.33 rates (Hz) [41.67, 216.72]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.34 rates (Hz) [25.28, 79.73]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.35 rates (Hz) [15.33, 29.33]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.36 rates (Hz) [9.3, 10.79]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.37 rates (Hz) [5.64, 377.29]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.37 rates (Hz) [3.42, 138.8]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.38 rates (Hz) [2.07, 51.06]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.39 rates (Hz) [1.26, 18.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.4 rates (Hz) [0.76, 6.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.41 rates (Hz) [0.89, 2.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.42 rates (Hz) [75.98, 8.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.43 rates (Hz) [46.1, 15686.59]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.44 rates (Hz) [27.96, 5770.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.45 rates (Hz) [16.96, 2122.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.46 rates (Hz) [10.29, 780.99]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.47 rates (Hz) [6.24, 287.31]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.48 rates (Hz) [3.78, 105.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.48 rates (Hz) [2.3, 38.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.49 rates (Hz) [1.39, 14.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.5 rates (Hz) [0.84, 5.26]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.51 rates (Hz) [6.74, 1.94]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.52 rates (Hz) [110.23, 1379.94]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.53 rates (Hz) [66.86, 507.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.54 rates (Hz) [40.55, 186.76]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.55 rates (Hz) [24.6, 68.7]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.56 rates (Hz) [14.92, 25.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.57 rates (Hz) [9.05, 9.3]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.58 rates (Hz) [5.49, 587.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.58 rates (Hz) [3.33, 216.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.59 rates (Hz) [2.02, 79.56]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.6 rates (Hz) [1.22, 29.27]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.61 rates (Hz) [0.74, 10.77]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.62 rates (Hz) [0.45, 3.96]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.63 rates (Hz) [0.27, 1.46]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.64 rates (Hz) [124.17, 24.72]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.65 rates (Hz) [75.31, 23615.51]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.66 rates (Hz) [45.68, 8687.66]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.67 rates (Hz) [27.71, 3196.01]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.68 rates (Hz) [16.8, 1175.75]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.69 rates (Hz) [10.19, 432.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.69 rates (Hz) [6.18, 159.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.7 rates (Hz) [3.75, 58.54]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.71 rates (Hz) [2.27, 21.53]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.72 rates (Hz) [1.38, 7.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.73 rates (Hz) [0.84, 2.91]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.74 rates (Hz) [24.94, 1.07]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.75 rates (Hz) [165.51, 5617.74]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.76 rates (Hz) [100.39, 2066.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.77 rates (Hz) [60.89, 760.28]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.78 rates (Hz) [36.93, 279.69]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.79 rates (Hz) [22.4, 102.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.8 rates (Hz) [13.59, 37.85]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.8 rates (Hz) [8.24, 13.92]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.81 rates (Hz) [5.0, 5.12]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.82 rates (Hz) [3.03, 428.31]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.83 rates (Hz) [1.84, 157.57]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.84 rates (Hz) [1.12, 57.97]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.85 rates (Hz) [0.68, 21.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.86 rates (Hz) [0.41, 7.84]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.87 rates (Hz) [0.25, 2.89]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.88 rates (Hz) [26.47, 1.06]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.89 rates (Hz) [167.2, 5962.97]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.9 rates (Hz) [101.41, 2193.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.91 rates (Hz) [61.51, 807.0]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.91 rates (Hz) [37.31, 296.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.92 rates (Hz) [22.63, 109.22]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.93 rates (Hz) [13.72, 40.18]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.94 rates (Hz) [8.32, 14.78]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.95 rates (Hz) [5.05, 5.44]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.96 rates (Hz) [3.06, 383.32]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.97 rates (Hz) [1.86, 141.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.98 rates (Hz) [1.13, 51.88]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 4.99 rates (Hz) [0.68, 19.08]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 5.0 rates (Hz) [0.41, 7.02]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 5.01 rates (Hz) [0.25, 2.58]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 5.01 rates (Hz) [47.26, 0.95]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 5.02 rates (Hz) [187.39, 10636.65]
  torch.Size([1, 1600])
  torch.Size([1, 1600])
  times (s) 5.03 rates (Hz) [113.66, 3913.01]
  Elapsed (with compilation) = 0.7964415792375803s
#+end_example

#+begin_src ipython
  plt.plot(model.ff_input.cpu().detach().numpy()[0,:, :10])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cfe1e4498d135a8c7fe1b256b0cb8e4e541f52d0.png]]

#+begin_src ipython
  print(rates.shape)
  plt.imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=10)
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Neuron #')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1, 551, 1600)
[[file:./.ob-jupyter/1ba8ab398d5f635ccf0464f958676c7bcc9d98c6.png]]
:END:

#+begin_src ipython
  idx = get_idx(model)
  ordered = rates[..., idx]
  print(ordered.shape)
#+end_src

#+RESULTS:
: (2, 2000)
: (1, 551, 1600)

#+begin_src ipython
  plt.imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=10.0)
  plt.yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
  plt.vlines((np.array(model.N_STIM_ON) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.vlines((np.array(model.N_STIM_OFF) - model.N_STEADY) / model.N_WINDOW, 0, 360, 'w', '--')
  plt.ylabel('Pref. Location (°)')
  plt.xlabel('Step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/83d8692b9187eb847411ba94da2dd9b503f7e15a.png]]

#+begin_src ipython
  print(model.N_STIM_ON)
#+end_src

#+RESULTS:
: [150, 450]

#+begin_src ipython
  y_pred = model.linear.weight.data.cpu().detach().numpy()[0]
  print(y_pred.shape)

  overlap = (rates @ y_pred) / rates.shape[-1]
  print(overlap.shape)
  plt.plot(overlap.T)
  plt.xlabel('Step')
  plt.ylabel('Overlap')
  
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1600,)
: (1, 551)
[[file:./.ob-jupyter/c35cbabea6102bf99a8b811e1c4d3cc09209f46e.png]]
:END:

#+begin_src ipython
  m0, m1, phi = decode_bump(ordered, axis=-1)
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  ax[0].plot(m0.T)
  #ax[0].set_ylim([0, 360])
  #ax[0].set_yticks([0, 90, 180, 270, 360])
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xlabel('Step')

  ax[1].plot(m1.T)
  # ax[1].set_ylim([0, 360])
  # ax[1].set_yticks([0, 90, 180, 270, 360])
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].plot(phi.T * 180 / np.pi)
  ax[2].set_ylim([0, 360])
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_ylabel('Phase (°)')
  ax[2].set_xlabel('Step')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/89903eb66e1ca91c00e67fe8fa660adf0c5719b9.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)

    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      cmean =  x - circmean(x)
      cmean[cmean > np.pi/2] = np.nan
      cmean[cmean < -np.pi/2] = np.nan   
      return cmean
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  def run_ini_phi(conf, name, ini_list, phi_list, **kwargs):
      LOAD_MAT = 0
      SAVE_MAT = 1

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')
              
              model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, LOAD_MAT=LOAD_MAT, SAVE_MAT=SAVE_MAT, PHI0=phi, **kwargs)

              model.run()

              LOAD_MAT = 1
              SAVE_MAT = 0
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  from scipy.stats import circmean
  
  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump
#+end_src

#+RESULTS:

* Single Trial
** Model

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  plt.plot(x, Activation()(x))
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2f3f21eeffb439beab3b1334d88d0852805f49a5.png]]

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  name = "odr_off"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda')
  rates_off = model.run()
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/NeuroTorch/conf/config_bump.yml
: Saving rates to: /home/leon/models/NeuroTorch/data/simul/odr_off.npy
: Elapsed (with compilation) = 3.3945585470064543s
: /home/leon/mambaforge/envs/torch/lib/python3.10/site-packages/torch/distributed/distributed_c10d.py:283: UserWarning: torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead
:   warnings.warn(

#+begin_src ipython
  name = "odr_on"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', Ja0=[24])
  rates_on = model.run()
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/NeuroTorch/conf/config_bump.yml
: Saving rates to: /home/leon/models/NeuroTorch/data/simul/odr_on.npy
: Elapsed (with compilation) = 3.8886125029966934s

** Analysis

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])
  times = np.linspace(0, 5.5, rates_off.shape[0])

  N_E = 1000
  r_min = 0
  r_max = 1.5 * np.max((np.mean(rates_off), np.mean(rates_on)))

  im = ax[0].imshow(rates_off.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_ylabel('Prefered Location (째)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[0].set_title('Control')

  im = ax[1].imshow(rates_on.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  # ax[1].set_ylabel('Prefered Location (째)')
  ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_title('NB Stim')

  cbar = plt.colorbar(im, ax=ax[1])
  cbar.set_label("Firing Rate (Hz)")
  # cbar.set_ticks([0,  , ])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4ecae957bded036287c00a814a92b4a0c5eaeb83.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_off[:, :N_E], axis=-1)  
  m0_on, m1_on, phi_on = decode_bump(rates_on[:, :N_E], axis=-1) 
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))

  times = np.linspace(0, 5.5, m0.shape[0])
  
  ax[0].plot(times, m0)
  ax[0].plot(times, m0_on)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].plot(times, m1_on / m0_on)

  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].plot(times, phi_on * 180 / np.pi)

  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([-180, -90, 0, 90, 180], [0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 1, 2, 3, 4, 5])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6818c716b62b5410352ff0d55f05399aec4c0c13.png]]

* Multiple Trials
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
  
  ini_list = np.arange(0, 20)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [0]
#+end_src

#+RESULTS:

** Simulation

#+begin_src ipython  
  name = 'odr_off'
  run_ini_phi(conf_name, name, ini_list, phi_list)
#+end_src

#+begin_src ipython  
  name = 'odr_on'
  run_ini_phi(conf_name, name, ini_list, phi_list, Ja0=[24])
#+end_src

** Load data

#+begin_src ipython
  name = 'odr_off'
  df = load_data_ini_phi(name, ini_list, phi_list)
  print(df.head())
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
: (20, 8, 5999, 1000)
:    trial  phi  neuron  time     rates
: 0      0    0       0     0  1.800453
: 1      0    0       1     0  1.639017
: 2      0    0       2     0  2.176969
: 3      0    0       3     0  1.300191
: 4      0    0       4     0  1.484071

#+begin_src ipython
  name = 'odr_on'
  df_on = load_data_ini_phi(name, ini_list, phi_list)
  print(df_on.head())
  df_code_on, end_point_on = get_code_ini_phi(df_on)
#+end_src

#+RESULTS:
: 53f76248-95e9-4dbf-b49f-5eaeb6b4e0d6

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(df_code, x='time', y=df_code['phase']*180/np.pi-90, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (째)')
  
  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, kde=False, bins='auto', stat='density', color='b', ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (째)')

  # sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins=10, stat='density', color='b')
  # print(end_point.head())
  theta = [np.cos(end_point['phase']-np.pi/2), np.sin(end_point['phase']-np.pi/2)]
  ax[2].plot(theta[0], theta[1], 'o')
  ax[2].set_xlim([-1.5, 1.5])
  ax[2].set_ylim([-1.5, 1.5])

  ax[2].set_xlabel('$ \\xi_S$')
  ax[2].set_ylabel('$ \\xi_D$')

  plt.show()
#+end_src

#+RESULTS:
: 67e1fcde-50f1-46fe-9b70-9f45d50edc14

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] * np.pi / 180) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
  
  print(end_point.head())
#+end_src

#+RESULTS:
: f203668e-1ae9-48c4-836f-0857e2243618

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins='auto', stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins='auto', stat='density', color='r')
  ax[0].set_xlabel('$\phi$(째)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([-180, -90 ,0, 90, 180], [0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins='auto', stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins='auto', stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (째)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (째)')
  ax[2].set_ylabel('Density')
  # ax[2].set_xlim([-30, 30])

  plt.show()  
#+end_src

#+RESULTS:
: ea289faa-08de-4d23-8945-45f493de7967

#+begin_src ipython

#+end_src

#+STARTUP: fold
#+TITLE: RNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session torch :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)
        
    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_times, n_neurons = rates.shape

      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi

      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi
      
      return cmean
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  def run_ini_phi(conf, name, ini_list, phi_list, **kwargs):
      LOAD_MAT = 0
      SAVE_MAT = 1

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')
              
              model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, LOAD_MAT=LOAD_MAT, SAVE_MAT=SAVE_MAT, PHI0=phi, **kwargs)

              model.run()

              LOAD_MAT = 1
              SAVE_MAT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
  from joblib import Parallel, delayed
  import torch
  import os
  import warnings
  warnings.filterwarnings("ignore")

  def run_simulation(conf, name, ini, phi, device, **kwargs):
      warnings.filterwarnings("ignore")

      torch.cuda.set_device(device)

      REPO_ROOT = "/home/leon/models/NeuroTorch"
      model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                      REPO_ROOT, PHI0=phi, device=device, **kwargs)
      # model.to(device)
      model.run()
      del model
      # Optionally clear this process's GPU memory
      torch.cuda.empty_cache()

  def run_ini_phi_parallel(batch_size, conf, name, ini_list, phi_list, available_gpu_memory=0, device='cuda:0', **kwargs):

      print('batch size', batch_size)

      # Run the simulations in parallel with optimal n_jobs
      Parallel(n_jobs=batch_size)(
          delayed(run_simulation)(conf, name, ini, phi, device=device, **kwargs)
          for ini, phi in [(ini, phi) for ini in ini_list for phi in phi_list]
      )
      
      torch.cuda.empty_cache()

      print("Done")
#+end_src

#+RESULTS:

#+begin_src ipython
  torch.cuda.empty_cache()
#+end_src

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  from scipy.stats import circmean
  
  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Single Trial
** Model

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  plt.plot(x, Activation()(x, func_name='erfc'))
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/2f3f21eeffb439beab3b1334d88d0852805f49a5.png]]

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  name = "odr_off"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=1, DEVICE='cuda', SIGMA=[.5], PHI=0)
  rates_off = model.run()
#+end_src

#+RESULTS:
#+begin_example
  Na tensor([1000], device='cuda:0', dtype=torch.int32) Ka tensor([1.], device='cuda:0') csumNa tensor([   0, 1000], device='cuda:0')
  Jab [-2.75]
  Ja0 [14.0]
  All to all connectivity 
  with heterogeneity, SIGMA tensor(0.5000, device='cuda:0')
  with strong cosine structure, KAPPA tensor(0.4000, device='cuda:0')
  times (s) 0.45 rates (Hz) [2.21]
  times (s) 0.91 rates (Hz) [2.21]
  STIM ON
  times (s) 1.36 rates (Hz) [2.79]
  STIM OFF
  times (s) 1.82 rates (Hz) [6.15]
  times (s) 2.27 rates (Hz) [5.85]
  times (s) 2.73 rates (Hz) [5.84]
  times (s) 3.18 rates (Hz) [5.83]
  times (s) 3.64 rates (Hz) [5.87]
  times (s) 4.09 rates (Hz) [5.88]
  Saving rates to: /home/leon/models/NeuroTorch/data/simul/odr_off.npy
  Elapsed (with compilation) = 257.64011599693913s
#+end_example

#+begin_src ipython
  name = "odr_on"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda', Ja0=[24], PHI=0, SIGMA=[0.5])
  rates_on = model.run()
#+end_src

#+RESULTS:
: Loading config from /home/leon/models/NeuroTorch/conf/config_bump.yml
: Saving rates to: /home/leon/models/NeuroTorch/data/simul/odr_on.npy
: Elapsed (with compilation) = 2.0769108480308205s

** Analysis

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])
  times = np.linspace(0, 5.5, rates_off.shape[0])

  N_E = 1000
  r_min = 0
  r_max = 1.5 * np.max((np.mean(rates_off), np.mean(rates_on)))

  im = ax[0].imshow(rates_off.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_ylabel('Prefered Location (°)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[0].set_title('Control')

  im = ax[1].imshow(rates_on.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  # ax[1].set_ylabel('Prefered Location (°)')
  ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_title('NB Stim')

  cbar = plt.colorbar(im, ax=ax[1])
  cbar.set_label("Firing Rate (Hz)")
  # cbar.set_ticks([0,  , ])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/eeee4932c6e4964608472e88d89e84b76c507736.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_off[:, :N_E], axis=-1)  
  m0_on, m1_on, phi_on = decode_bump(rates_on[:, :N_E], axis=-1) 
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))

  times = np.linspace(0, 5.5, m0.shape[0])

  ax[0].plot(times, m0)
  ax[0].plot(times, m0_on)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].plot(times, m1_on / m0_on)

  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].plot(times, phi_on * 180 / np.pi)

  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([-180, -90, 0, 90, 180], [0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 1, 2, 3, 4, 5])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0f8da428d9aacfee3ac4ca0d7a82869519b20c92.png]]

#+begin_src ipython
  smooth_off = circcvl(rates_off[-1, :N_E], windowSize=10, axis=-1)
  smooth_on = circcvl(rates_on[-1, :N_E], windowSize=10, axis=-1)

  theta = np.linspace(0, 360, rates_off.shape[-1])

  plt.plot(theta, smooth_off , 'b', label='off')
  plt.plot(theta, smooth_on, 'r', label='on')

  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  plt.legend(frameon=0, fontsize=12)
  # plt.yticks([5, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/4538bf88d62c858da81c47885a1cecb301e7dda5.png]]

* Multiple Trials
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"

  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [0]
#+end_src

#+RESULTS:

** Simulation

#+begin_src ipython
  name = 'odr_off'
  # run_ini_phi(conf_name, name, ini_list, phi_list)
  n_jobs = 10
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:1', SIGMA=[0.25])
#+end_src

#+RESULTS:
: batch size 10
: Done

#+begin_src ipython 
  name = 'odr_on'
  n_jobs = 70
  # run_ini_phi(conf_name, name, ini_list, phi_list, Ja0=[24])
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:1', Ja0=[24], SIGMA=[0.25])
#+end_src

#+RESULTS:
: batch size 70
: Done

** Load data

#+begin_src ipython
  name = 'odr_off'
  df = load_data_ini_phi(name, ini_list, phi_list)
  print(df.head())
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
#+begin_example
  (10, 8, 4999, 1000)
     trial  phi  neuron  time     rates
  0      0    0       0     0  1.765036
  1      0    0       1     0  1.784466
  2      0    0       2     0  2.211074
  3      0    0       3     0  2.293339
  4      0    0       4     0  0.493046
          trial  phi        m0        m1     phase
  399840      0    0  5.844668  4.591266  1.765271
  399841      0    1  5.888055  4.920009 -1.760381
  399842      0    2  5.887523  4.914284 -1.816917
  399843      0    3  5.886714  4.908570 -1.865067
  399844      0    4  5.883519  4.891546 -1.989697
#+end_example

#+begin_src ipython
  name = 'odr_on'
  df_on = load_data_ini_phi(name, ini_list, phi_list)
  print(df_on.head())
  df_code_on, end_point_on = get_code_ini_phi(df_on)
#+end_src

#+RESULTS:
#+begin_example
  (10, 8, 4999, 1000)
     trial  phi  neuron  time     rates
  0      0    0       0     0  0.900193
  1      0    0       1     0  1.376691
  2      0    0       2     0  0.984952
  3      0    0       3     0  2.110511
  4      0    0       4     0  1.425927
          trial  phi        m0        m1     phase
  399840      0    0  8.394988  4.664488 -0.501098
  399841      0    1  8.420703  5.301944 -1.765141
  399842      0    2  8.393543  5.280699 -1.903886
  399843      0    3  8.402927  5.430947 -1.959137
  399844      0    4  8.381710  5.441628 -1.992382
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2.5*width, height])

  # sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o')
  for phi in df_code.phi.unique():
      sns.lineplot(df_code, x='time', y=df_code[df_code.phi==phi]['phase']*180/np.pi, ax=ax[0], legend=False, hue='trial', lw=2, alpha=0.2)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Phase (°)')

  for phi in df_code.phi.unique():
      sns.histplot(data=end_point, x=end_point[end_point.phi==phi]['phase']*180/np.pi, kde=False, bins='auto', stat='density', ax=ax[1])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Phase (°)')

  # sns.histplot(data=end_point, x=end_point['phase']*180/np.pi,kde=False, bins=10, stat='density', color='b')
  # print(end_point.head())
  theta = [np.cos(end_point['phase']-np.pi/2), np.sin(end_point['phase']-np.pi/2)]
  ax[2].plot(theta[0], theta[1], 'o')
  ax[2].set_xlim([-1.5, 1.5])
  ax[2].set_ylim([-1.5, 1.5])

  ax[2].set_xlabel('$ \\xi_S$')
  ax[2].set_ylabel('$ \\xi_D$')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/75df0e4f530a3cdb125f9a56463e28de9e78c478.png]]

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] * np.pi / 180) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] * np.pi / 180) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
  
  print(end_point.head())
#+end_src

#+RESULTS:
:         trial  phi        m0        m1     phase  accuracy  precision
: 399840      0    0  5.844668  4.591266  1.765271  1.765271   0.060762
: 399841      0    1  5.888055  4.920009 -1.760381  4.505351  -0.020791
: 399842      0    2  5.887523  4.914284 -1.816917  4.431362  -0.052379
: 399843      0    3  5.886714  4.908570 -1.865067  4.365758  -0.047372
: 399844      0    4  5.883519  4.891546 -1.989697  4.223675  -0.060519

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  bins = 160
  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=bins, stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=bins, stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([-180, -90 ,0, 90, 180], [0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=bins, stat='density', color='b')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=bins, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  bins = 16
  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-30, 30])

  plt.show()  
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mKeyError[0m                                  Traceback (most recent call last)
  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/indexes/base.py:3790[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
  [1;32m   3789[0m [38;5;28;01mtry[39;00m:
  [0;32m-> 3790[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_engine[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
  [1;32m   3791[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

  File [0;32mindex.pyx:152[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

  File [0;32mindex.pyx:181[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

  File [0;32mpandas/_libs/hashtable_class_helper.pxi:7080[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

  File [0;32mpandas/_libs/hashtable_class_helper.pxi:7088[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

  [0;31mKeyError[0m: 'accuracy'

  The above exception was the direct cause of the following exception:

  [0;31mKeyError[0m                                  Traceback (most recent call last)
  Cell [0;32mIn[49], line 10[0m
  [1;32m      7[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_ylabel([38;5;124m'[39m[38;5;124mDensity[39m[38;5;124m'[39m)
  [1;32m      8[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xticks([[38;5;241m-[39m[38;5;241m180[39m, [38;5;241m-[39m[38;5;241m90[39m ,[38;5;241m0[39m, [38;5;241m90[39m, [38;5;241m180[39m], [[38;5;241m0[39m, [38;5;241m90[39m, [38;5;241m180[39m, [38;5;241m270[39m, [38;5;241m360[39m])
  [0;32m---> 10[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mend_point, x[38;5;241m=[39m[43mend_point[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43maccuracy[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m1[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39mbins, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mb[39m[38;5;124m'[39m)
  [1;32m     11[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mend_point_on, x[38;5;241m=[39mend_point_on[[38;5;124m'[39m[38;5;124maccuracy[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m1[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39mbins, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39m[38;5;124m'[39m[38;5;124mr[39m[38;5;124m'[39m)
  [1;32m     12[0m ax[[38;5;241m1[39m][38;5;241m.[39mset_xlabel([38;5;124m'[39m[38;5;124m$[39m[38;5;124m\[39m[38;5;124mphi - [39m[38;5;124m\[39m[38;5;124mphi_[39m[38;5;132;01m{stim}[39;00m[38;5;124m$ (°)[39m[38;5;124m'[39m)

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/frame.py:3896[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
  [1;32m   3894[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mcolumns[38;5;241m.[39mnlevels [38;5;241m>[39m [38;5;241m1[39m:
  [1;32m   3895[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_multilevel(key)
  [0;32m-> 3896[0m indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mkey[49m[43m)[49m
  [1;32m   3897[0m [38;5;28;01mif[39;00m is_integer(indexer):
  [1;32m   3898[0m     indexer [38;5;241m=[39m [indexer]

  File [0;32m~/mambaforge/envs/torch/lib/python3.10/site-packages/pandas/core/indexes/base.py:3797[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
  [1;32m   3792[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(casted_key, [38;5;28mslice[39m) [38;5;129;01mor[39;00m (
  [1;32m   3793[0m         [38;5;28misinstance[39m(casted_key, abc[38;5;241m.[39mIterable)
  [1;32m   3794[0m         [38;5;129;01mand[39;00m [38;5;28many[39m([38;5;28misinstance[39m(x, [38;5;28mslice[39m) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m casted_key)
  [1;32m   3795[0m     ):
  [1;32m   3796[0m         [38;5;28;01mraise[39;00m InvalidIndexError(key)
  [0;32m-> 3797[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
  [1;32m   3798[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
  [1;32m   3799[0m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
  [1;32m   3800[0m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
  [1;32m   3801[0m     [38;5;66;03m#  the TypeError.[39;00m
  [1;32m   3802[0m     [38;5;28mself[39m[38;5;241m.[39m_check_indexing_error(key)

  [0;31mKeyError[0m: 'accuracy'
#+end_example
[[file:./.ob-jupyter/3115319ed4c2713d5b93d561ce699513d1cb1dca.png]]
:END:

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:


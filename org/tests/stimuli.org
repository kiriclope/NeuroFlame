#+STARTUP: fold
#+TITLE: Stimuli Test
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session stim :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../../')

  import torch
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.decode import decode_bump
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      if GM:
          b = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)
      else:
          u=a
          v=b

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def normalize(v):
      return v / np.linalg.norm(v)

  def project(x, u):
      return x * u
  # return np.dot(x, u) * u

  def sort_by_angle(x, u, v):
      u_hat = normalize(u)
      v_hat = normalize(v)

      x_proj_u = project(x, u_hat)
      x_proj_v = project(x, v_hat)
      # x_proj = x_proj_u + x_proj_v
      theta = np.arctan2(x_proj_v, x_proj_u) + np.pi

      # cos_theta = np.dot(x_proj, u_hat) / np.linalg.norm(x_proj) * u_hat
      # sin_theta = np.dot(x_proj, v_hat) / np.linalg.norm(x_proj) * v_hat
      # theta = np.arctan2(sin_theta, cos_theta)

      # Pair up each element of x with the corresponding angle
      # x_angle_pairs = list(zip(x, theta))

      # Sort based on the angle
      # x_angle_pairs.sort(key=lambda pair: pair[1])

      # Extract the sorted elements
      # sorted_x = [pair[0] for pair in x_angle_pairs]

      return theta
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model):
      ksi = model.PHI0.cpu().detach().numpy()
      print(ksi.shape)

      idx = np.arange(0, len(ksi[0]))
      theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]

#+end_src

#+RESULTS:

* Stimuli
** Imports

#+begin_src ipython
  from src.stimuli import Stimuli
#+end_src

#+RESULTS:

** ODR

#+begin_src ipython
  ff_input = Stimuli(task='odr', size=(10, 1000))(1, 1, 0, rnd_phase=1).cpu().numpy()
  print(ff_input.shape)
  plt.plot(ff_input.T[:, :5])
  
  plt.xlabel('Neuron #')
  plt.ylabel('Input Strength')
  plt.title('ODR')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (10, 1000)
[[file:./.ob-jupyter/975d0e75646fd358685de805c19deecd7d46dc28.png]]
:END:

** Dual Task

#+begin_src ipython
  xi = torch.randn((2, 1000), device='cuda')
  ff_input = Stimuli(task='dual', size=(10, 1000))(1, 1, xi[0]).cpu().detach().numpy()

  print(ff_input.shape)

  theta = get_theta(xi[0].cpu().numpy(), xi[1].cpu().numpy(), GM=0, IF_NORM=0)
  theta = np.arctan2(xi[1].cpu().numpy(), xi[0].cpu().numpy())
  index_order = theta.argsort()
  
  ff_input = ff_input[index_order]
  plt.plot(ff_input)
  plt.xlabel('Neuron #')
  plt.ylabel('Input Strength')
  plt.title('Dual Task')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1000,)
[[file:./.ob-jupyter/6c8c2a76449636e0bfc500e60fec7139ad699adc.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

* FF Inputs
** SEQ FF UPDATE
*** ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr_rand', LIVE_FF_UPDATE=0, N_BATCH=30, seed=0)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.init_ff_input().cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([30, 1, 500])
: (30, 44400, 1000)

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_input[..., model.slices[0]])
  print(m0.shape)
#+end_src

#+RESULTS:
: (30, 44400)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].imshow(ff_input[0].T, cmap='jet', aspect='auto')
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_ylim([0, Ne])

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Phase (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/7bbda54d68ec6df61bf7677ad30d21d6cbf78030.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(360 - phase[:, model.N_STIM_ON[0]]* 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/97edbdc69846a716650db4b8fd248918ec293ec6.png]]

#+begin_src ipython
  
#+end_src

#+RESULTS:

*** Dual Task

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_EI.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='dual_rand', LIVE_FF_UPDATE=0, N_BATCH=10)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON
  
  ff_input = model.init_ff_input().cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 1, 2000])
: torch.Size([10, 1, 2000])
: (10, 4440, 2500)

#+begin_src ipython
  ksi = model.PHI0.cpu().numpy()
  theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)
  index_order = theta.argsort()
  ff_ordered = ff_input[..., index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_ordered)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 4440)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Pref Loc. (°)')
  ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ec111405d098b7648a7fa313515899e7e98f3b88.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/210bff636d9792c7c7f8b8ee758a4e79707419f0.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins=10, histtype='step')
  plt.hist(360-phase[:, model.N_STIM_ON[0]]* 180 / np.pi, bins=10, histtype='step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e8e1ec0f596be87f052080621893e997414f338f.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** LIVE FF UPDATE
*** ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr_rand', LIVE_FF_UPDATE=1, N_BATCH=10)
  rates = model(RET_FF=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON
  
  ff_input = model.ff_input.cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: (10, 101, 500)

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_input[..., model.slices[0]])
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 101)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  # ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  # ax[2].set_xlabel('Step')
  # ax[2].set_ylabel('Pref Loc. (°)')
  # ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8828654d37938943658f1e1768605391aaa9fe18.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')
  
  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/140c0bee0231159c8c6a9270ba32f156a8c731a2.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(360 - phase[:, model.N_STIM_ON[0] // model.N_WINDOW]* 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6eb383f6aed69dd097be003620504534f0ccda91.png]]

#+begin_src ipython
  

#+end_src

#+RESULTS:

*** Dual Task

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  model = Network('config_EI.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='dual_rand', LIVE_FF_UPDATE=1, N_BATCH=10)
  rates = model(RET_FF=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON
  
  ff_input = model.ff_input.cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: (10, 101, 2000)

#+begin_src ipython
  ksi = model.PHI0.cpu().numpy()
  theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)
  index_order = theta.argsort()
  ff_ordered = ff_input[..., index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_ordered)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 101)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Pref Loc. (°)')
  ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/94d807eb213f2f129cae73ee005ba5f9c27600e9.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')
  
  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ba2550fdd16c634d3b28f46c01e5ebae141ef1d1.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(phase[:, model.N_STIM_ON[0] // model.N_WINDOW] * 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/092a6401b9a721d207b793845be198f647e2b47a.png]]

#+begin_src ipython

#+end_src
#+RESULTS:

#+STARTUP: fold
#+TITLE: Stimuli Test
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session stim :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../../')

  import torch
  import pandas as pd
  from time import perf_counter

  from src.network import Network
  from src.decode import decode_bump, decode_bump_torch
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_theta(a, b, GM=0, IF_NORM=0):

      if GM:
          b = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)
      else:
          u=a
          v=b

      return np.arctan2(v, u)
#+end_src

#+RESULTS:

#+begin_src ipython
  def normalize(v):
      return v / np.linalg.norm(v)

  def project(x, u):
      return x * u
  # return np.dot(x, u) * u

  def sort_by_angle(x, u, v):
      u_hat = normalize(u)
      v_hat = normalize(v)

      x_proj_u = project(x, u_hat)
      x_proj_v = project(x, v_hat)
      # x_proj = x_proj_u + x_proj_v
      theta = np.arctan2(x_proj_v, x_proj_u) + np.pi

      # cos_theta = np.dot(x_proj, u_hat) / np.linalg.norm(x_proj) * u_hat
      # sin_theta = np.dot(x_proj, v_hat) / np.linalg.norm(x_proj) * v_hat
      # theta = np.arctan2(sin_theta, cos_theta)

      # Pair up each element of x with the corresponding angle
      # x_angle_pairs = list(zip(x, theta))

      # Sort based on the angle
      # x_angle_pairs.sort(key=lambda pair: pair[1])

      # Extract the sorted elements
      # sorted_x = [pair[0] for pair in x_angle_pairs]

      return theta
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_idx(model):
      ksi = model.PHI0.cpu().detach().numpy()
      print(ksi.shape)

      idx = np.arange(0, len(ksi[0]))
      theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_overlap(model, rates):
      ksi = model.PHI0.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]

#+end_src

#+RESULTS:

#+begin_src ipython
def get_fourier_moments(signal, axis=-1):
    # Perform the FFT
    fft_coeffs = np.fft.fft(signal, axis=axis)

    # Calculate the zero, first, and second Fourier moments
    zero_moment = fft_coeffs[..., 0]
    first_moment = fft_coeffs[..., 1]

    # Calculate magnitude m0, m1, and m2
    m0 = np.abs(zero_moment) / signal.shape[axis]  # Normalize m0 by the signal length
    m1 = 2.0 * np.abs(first_moment) / signal.shape[axis]

    # Calculate the phase of the signal
    phases = (np.angle(first_moment) + np.pi) % (2.0 * np.pi) - np.pi

    return m0, m1, phases
#+end_src

#+RESULTS:

#+begin_src ipython
def compute_fourier_moments(signal, dim=-1):
    # Perform the FFT
    fft_coeffs = torch.fft.fft(signal, dim=dim)

    # Calculate the zero, first, and second Fourier moments
    zero_moment = fft_coeffs[..., 0]
    first_moment = fft_coeffs[..., 1]
    # second_moment = fft_coeffs[..., 2]

    # Calculate magnitude m0, m1, and m2
    m0 = torch.abs(zero_moment) / signal.size(dim)  # Normalize m0 by the signal length
    m1 = 2.0 * torch.abs(first_moment) / signal.size(dim)
    # m2 = 2.0 * torch.abs(second_moment) / signal.size(dim)

    # Calculate the phase of the signal
    phases = torch.angle(first_moment) % (2.0 * torch.pi)

    return m0, m1, phases
#+end_src

#+RESULTS:

* Stimuli
** Imports

#+begin_src ipython
  from src.stimuli import Stimuli
#+end_src

#+RESULTS:

** ODR

#+begin_src ipython
  ff_input = Stimuli(task='odr', size=(10, 1000))(1, 1, np.pi/2, rnd_phase=0).cpu().numpy()
  print(ff_input.shape)
  plt.plot(ff_input.T[:, :5])
  plt.xticks(np.linspace(0, 1000, 5), np.linspace(0, 360, 5).astype(int))

  plt.xlabel('Neuron #')
  plt.ylabel('Input Strength')
  plt.title('ODR')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1, 1000)
[[./.ob-jupyter/4a19b57067626943679db7b0d4baf43c4198ac01.png]]
:END:

#+begin_src ipython
    m0, m1, phase = decode_bump(ff_input)
    print(phase * 180 / np.pi)
    #   print((360 - phase * 180 / np.pi))
#+end_src
#+RESULTS:
: [89.99999965]

** Dual Task

#+begin_src ipython
  xi = torch.randn((2, 1000), device='cuda')
  ff_input = Stimuli(task='dual', size=(10, 1000))(-1, 1, xi[1]).cpu().detach().numpy()

  print(ff_input.shape)

  theta = get_theta(xi[0].cpu().numpy(), xi[1].cpu().numpy(), GM=0, IF_NORM=0)
  theta = np.arctan2(xi[1].cpu().numpy(), xi[0].cpu().numpy())
  index_order = theta.argsort()

  ff_input = ff_input[index_order]
  plt.plot(ff_input)
  plt.xlabel('Neuron #')
  plt.ylabel('Input Strength')
  plt.title('Dual Task')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (1000,)
[[./.ob-jupyter/eda7fb9431e77cac311ea76e91119a752f3e23dc.png]]
:END:

#+begin_src ipython
    m0, m1, phase = decode_bump(ff_input)
    print(phase * 180 / np.pi)
#+end_src

#+RESULTS:
: 89.83281694304326

* FF Inputs
** SEQ FF UPDATE
*** ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('train_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr', N_BATCH=10, seed=0)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON
  print(model.PHI0.shape)

  model.PHI0 = torch.randint(0, 360, (model.N_BATCH, 2, 1)).to('cuda')

  ff_input = model.init_ff_input()
  print('ff', ff_input.shape)
  rates = model(ff_input=ff_input)
  print('rates', rates.shape)
#+end_src

#+RESULTS:
: torch.Size([1, 2])
: torch.Size([1, 1000]) torch.Size([10, 1])
: torch.Size([1, 1000]) torch.Size([10, 1])
: ff torch.Size([10, 405, 1000])
: rates torch.Size([10, 61, 1000])

#+begin_src ipython
  # m0, m1, phase = decode_bump(ff_input[..., model.slices[0]].cpu().numpy())
  # F0, F1, phi = decode_bump(rates.cpu().detach().numpy())

  m0, m1, phase = get_fourier_moments(ff_input[..., model.slices[0]].cpu().numpy())
  F0, F1, phi = get_fourier_moments(rates.cpu().detach().numpy())

  m0, m1, phase = decode_bump_torch(ff_input[..., model.slices[0]])
  F0, F1, phi = decode_bump_torch(rates)

  try:
      phase = phase.cpu().numpy()
      phi = phi.cpu().detach().numpy()
      m1 = m1.cpu().numpy()
      F1 = F1.cpu().detach().numpy()
  except:
      pass
  print(m0.shape, F0.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 405]) torch.Size([10, 61])

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.5*width, height))

  xtime = np.linspace(-model.T_STEADY, model.DURATION, ff_input.shape[1])
  idx = np.random.randint(model.N_BATCH)
  ax[0].imshow(ff_input[idx].T.cpu().numpy(),
               cmap='jet', aspect='auto',
               extent=[-model.T_STEADY, model.DURATION, 0, 1000])

  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_ylim([0, Ne])

  ax[1].plot(xtime, m1[idx].T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(xtime, phase[idx].T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Phase (°)')

  ax[2].axhline(model.PHI0.cpu().numpy()[idx, 0]*180/np.pi, color='k', ls='--', label='Stim 1')
  ax[2].axhline(model.PHI0.cpu().numpy()[idx, 1]*180/np.pi, color='r', ls='--', label='Stim 2')
  # plt.legend(fontsize=12)
  plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/004699938657f7e9e0ed4a46c5b1d07c46d1c127.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.5*width, height))

  xtime = np.linspace(0, model.DURATION, rates.shape[1])

  idx = np.random.randint(model.N_BATCH)
  ax[0].imshow(rates[idx].T.cpu().detach().numpy(),
               cmap='jet', aspect='auto',
               extent=[0, model.DURATION, 0, 1000])

  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_ylim([0, Ne])

  ax[1].plot(xtime, F1[idx].T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(xtime, phi[idx].T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Phase (°)')

  ax[2].axhline(model.PHI0.cpu().numpy()[idx, 0]*180/np.pi, color='k', ls='--', label='Stim 1')
  ax[2].axhline(model.PHI0.cpu().numpy()[idx, 1]*180/np.pi, color='r', ls='--', label='Stim 2')
  # plt.legend(fontsize=12)
  plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/65f767f85635fb094dbfbd8e3f9a140a8f2707c4.png]]

*** RANDOM ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr_rand', N_BATCH=10)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.init_ff_input().cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([1, 500]) torch.Size([10, 1])
: torch.Size([1, 500]) torch.Size([10, 1])
: (10, 222, 1000)

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_input[..., model.slices[0]])
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 222)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  idx = np.random.randint(model.N_BATCH)
  ax[0].imshow(ff_input[idx].T, cmap='jet', aspect='auto')
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_ylim([0, Ne])

  ax[1].plot(m1[idx].T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase[idx].T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Phase (°)')

  ax[2].axhline(model.phase.cpu().numpy()[idx]*180/np.pi, color='k', ls='--')
  print(model.phase[idx].item()*180/np.pi)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: 237.45950415644387
[[./.ob-jupyter/397d9bec0eb0c12cd7e3de024c982700d0dd688c.png]]
:END:

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins=20)
  plt.hist(phase[:, model.N_STIM_ON[0]]* 180 / np.pi, bins=20, histtype='step')
  plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/0198c215a7fffbd439038225c6e8df11cc67f19d.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

*** Dual Task

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_EI.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='dual_rand', LIVE_FF_UPDATE=0, N_BATCH=10)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
Cell In[23], line 2
      1 REPO_ROOT = "/home/leon/models/NeuroFlame"
----> 2 model = Network('config_EI.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='dual_rand', LIVE_FF_UPDATE=0, N_BATCH=10)

File ~/models/NeuroFlame/org/tests/../../src/network.py:44, in Network.__init__(self, conf_name, repo_root, **kwargs)
     41 self.__dict__.update(config.__dict__)
     43 # Initialize weight matrix
---> 44 self.initWeights()
     46 # Initialize low rank connectivity for training
     47 if self.LR_TRAIN:

File ~/models/NeuroFlame/org/tests/../../src/network.py:133, in Network.initWeights(self)
    131     self.Wab_T = self.Wab_T.T.to_sparse()
    132 elif self.SPARSE == "semi":
--> 133     self.Wab_T = to_sparse_semi_structured(self.Wab_T)
    134 else:
    135     self.Wab_T = self.Wab_T.T

File ~/mambaforge/envs/torch/lib/python3.10/site-packages/torch/sparse/semi_structured.py:515, in to_sparse_semi_structured(original_tensor, transposed)
    464 def to_sparse_semi_structured(
    465     original_tensor: torch.Tensor,
    466     transposed: bool = False,
    467 ) -> SparseSemiStructuredTensor:
    468     """
    469     This function converts a dense tensor into a sparse semi-structured tensor.
    470     It will return a SparseSemiStructuredTensor, a subclass of torch.Tensor.
   (...)
    513        dtype=torch.int16))
    514     """
--> 515     return SparseSemiStructuredTensor(
    516         original_tensor, original_shape=original_tensor.shape, transposed=transposed
    517     )

File ~/mambaforge/envs/torch/lib/python3.10/site-packages/torch/sparse/semi_structured.py:192, in SparseSemiStructuredTensor.__init__(self, original_tensor, original_shape, compressed_tensor_cusparselt, sparse_tensor_cutlass, meta_tensor_cutlass, transposed)
    187 min_cols = _DTYPE_TO_SEMI_STRUCTURED_SPARSE_CONFIG[
    188     original_tensor.dtype
    189 ].min_cols
    190 if m < min_rows or m % min_rows or n < min_cols or n % min_cols:
    191     # TODO in the future we can add in padding to support dimensions that aren't perfect multiples
--> 192     raise RuntimeError(
    193         f"Error original_tensor.shape {original_tensor.shape} is not supported! "
    194         f"Both dimensions must be larger or equal than and a multiple of ({min_rows}, {min_cols})"
    195     )
    197 compressed_tensor_cusparselt = None
    198 sparse_tensor_cutlass = None

RuntimeError: Error original_tensor.shape torch.Size([2500, 2500]) is not supported! Both dimensions must be larger or equal than and a multiple of (32, 64)
#+end_example
:END:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.init_ff_input().cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([10, 1, 2000])
: torch.Size([10, 1, 2000])
: (10, 4440, 2500)

#+begin_src ipython
  ksi = model.PHI0.cpu().numpy()
  theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)
  index_order = theta.argsort()
  ff_ordered = ff_input[..., index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_ordered)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 4440)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Pref Loc. (°)')
  ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ec111405d098b7648a7fa313515899e7e98f3b88.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/210bff636d9792c7c7f8b8ee758a4e79707419f0.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins=10, histtype='step')
  plt.hist(360-phase[:, model.N_STIM_ON[0]]* 180 / np.pi, bins=10, histtype='step')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e8e1ec0f596be87f052080621893e997414f338f.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** LIVE FF UPDATE
*** ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr_rand', LIVE_FF_UPDATE=1, N_BATCH=10)
  rates = model(RET_FF=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.ff_input.cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: (10, 101, 500)

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_input[..., model.slices[0]])
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 101)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  # ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  # ax[2].set_xlabel('Step')
  # ax[2].set_ylabel('Pref Loc. (°)')
  # ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8828654d37938943658f1e1768605391aaa9fe18.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/140c0bee0231159c8c6a9270ba32f156a8c731a2.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(360 - phase[:, model.N_STIM_ON[0] // model.N_WINDOW]* 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6eb383f6aed69dd097be003620504534f0ccda91.png]]

#+begin_src ipython


#+end_src

#+RESULTS:

*** Dual Task

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_EI.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='dual_rand', LIVE_FF_UPDATE=1, N_BATCH=10)
  rates = model(RET_FF=1)
#+end_src

#+RESULTS:

#+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.ff_input.cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: (10, 101, 2000)

#+begin_src ipython
  ksi = model.PHI0.cpu().numpy()
  theta = get_theta(ksi[0], ksi[2], GM=0, IF_NORM=0)
  index_order = theta.argsort()
  ff_ordered = ff_input[..., index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_ordered)
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 101)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(ff_input[0, :, :5])
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('FF Input')

  ax[1].imshow(ff_input[0].T, cmap='jet', vmin=0, vmax= 400, aspect='auto')
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('Neuron #')
  ax[1].set_ylim([0, Ne])

  ax[2].imshow(ff_ordered[0].T, cmap='jet', vmin=0, aspect='auto')
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Pref Loc. (°)')
  ax[2].set_yticks(np.linspace(0, 2000, 5), np.linspace(0, 360, 5).astype(int))

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dc49ab8273ccce1ba30881751907da3af0ebbe90.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  ax[0].plot(m0.T)
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('$\mathcal{F}_0$')

  ax[1].plot(m1.T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase.T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('$\Phi$ (°)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/96268c0aefcf268afa5522df0592cd738900ead0.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(phase[:, model.N_STIM_ON[0] // model.N_WINDOW] * 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fd236d4f77c1bdaa79c04f384bf8ff736a35cb6c.png]]

#+begin_src ipython

#+end_src
#+RESULTS:

* Random Delay
** SEQ FF UPDATE
*** ODR

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"
  model = Network('config_odr.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', TASK='odr_rand', LIVE_FF_UPDATE=0, N_BATCH=10, seed=0)
#+end_src

#+RESULTS:

   #+begin_src ipython
  Ne = model.Na[0].cpu().numpy()
  N = model.N_NEURON

  ff_input = model.init_ff_input().cpu().numpy()
  print(ff_input.shape)
#+end_src

#+RESULTS:
: (10, 222, 1000)

#+begin_src ipython
print(model.random_shifts)
#+end_src

#+RESULTS:
: tensor([118,  76,  88,  23,  44,  42,  34,  78,  29,  99], device='cuda:0')

#+begin_src ipython
  m0, m1, phase = decode_bump(ff_input[..., model.slices[0]])
  print(m0.shape)
#+end_src

#+RESULTS:
: (10, 222)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2.25*width, height))

  idx = np.random.randint(model.N_BATCH, size=(1,))

  ax[0].imshow(ff_input[idx].T, cmap='jet', aspect='auto')
  ax[0].set_xlabel('Step')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_ylim([0, Ne])

  ax[1].plot(m1[idx].T)
  ax[1].set_xlabel('Step')
  ax[1].set_ylabel('$\mathcal{F}_1$')

  ax[2].plot(phase[idx].T * 180 / np.pi)
  ax[2].set_xlabel('Step')
  ax[2].set_ylabel('Phase (°)')

  plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/1383096ed3bf0e6470d13981fcb5f52122f3cb87.png]]

#+begin_src ipython
  plt.hist(model.phase.cpu().numpy() * 180 / np.pi, bins='auto')
  plt.hist(360 - phase[:, model.N_STIM_ON[0]]* 180 / np.pi, bins='auto')
  plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/d9f17d4889abb55ddff1754b3fef53f2aede3c35.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

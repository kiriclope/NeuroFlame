#+Startup: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session test_dual_multi :kernel torch :exports results :output-dir ./figures/multi :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../../../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../../../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Utils

#+begin_src ipython :tangle ../src/torch/utils.py
import pickle as pkl

def pkl_save(obj, name, path="."):
      pkl.dump(obj, open(path + "/" + name + ".pkl", "wb"))


def pkl_load(name, path="."):
      return pkl.load(open(path + "/" + name + '.pkl', "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
def add_vlines(ax=None, mouse=""):
    t_BL = [0, 1]
    t_STIM = [1 , 2]
    t_ED = [2, 3]
    t_DIST = [3 , 4]
    t_MD = [4 , 5]
    t_CUE = [5 , 5.5]
    t_RWD = [5.5, 6.0]
    t_LD = [6.0 , 7.0]
    t_TEST = [7.0, 8.0]
    t_RWD2 = [11 , 12]

    # time_periods = [t_STIM, t_DIST, t_TEST, t_CUE, t_RWD, t_RWD2]
    # colors = ["b", "b", "b", "g", "y", "y"]

    time_periods = [t_STIM, t_DIST, t_TEST, t_CUE]
    colors = ["b", "b", "b", "g"]

    if ax is None:
        for period, color in zip(time_periods, colors):
            plt.axvspan(period[0], period[1], alpha=0.1, color=color)
    else:
        for period, color in zip(time_periods, colors):
            ax.axvspan(period[0], period[1], alpha=0.1, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import sem, t

def mean_ci(data):
  # Calculate mean and SEM
  mean = np.nanmean(data, axis=0)
  serr = sem(data, axis=0, nan_policy='omit')

  # Calculate the t critical value for 95% CI
  n = np.sum(~np.isnan(data), axis=0)
  t_val = t.ppf(0.975, df=n - 1)  # 0.975 for two-tailed 95% CI

  # Calculate 95% confidence intervals
  ci = t_val * serr

  return mean, ci
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlap_label(readout, y, task=0, label=['pair', 'unpair'], figname='fig.svg', title='first'):
    '''
    y[0] is pairs, y[1] is samples, y[2] is task if not None
    '''

    size = y.shape[0]
    if size ==2:
        ones_slice = np.zeros(y.shape)
        y_ = np.vstack((y.copy(), ones_slice))
        task = 0
    else:
        y_ = y.copy()
        tasks = [0, 1, -1]


    fig, ax = plt.subplots(1, 3, figsize=[3*width, height], sharey=True)

    time = np.linspace(0, 10, readout.shape[1])
    colors = ['r', 'b', 'g']
    ls = ['--', '-', '-.', ':']
    label = ['AD', 'AC', 'BD', 'BC']
    mean_overlaps = []
    for k in range(2): # readout
        for j in range(2): # sample
            for i in range(2): # pair
                data = readout[(y_[0]==i) & (y_[1]==j) & (y_[2]==task), :, k]
                mean, ci = mean_ci(data)
                mean_overlaps.append(mean)
                ax[k].plot(time, mean, ls=ls[i+2*j], label=label[i+2*j], color=colors[task], alpha=1-j/4)
                ax[k].fill_between(time, mean - ci, mean + ci, color=colors[task], alpha=0.1)

        add_vlines(ax[k])
        ax[k].set_xlabel('Time (s)')

        if k==0:
            ax[k].set_ylabel('A/B Overlap (Hz)')
        elif k==1:
            ax[k].set_ylabel('GNG Overlap (Hz)')
        else:
            ax[k].set_ylabel('Readout (Hz)')

        ax[k].axhline(0, color='k', ls='--')

    mean_overlaps = np.array(mean_overlaps).reshape((2, 2, 2, -1))

    for j in range(2): # sample
        for i in range(2): # pair
            ax[-1].plot(mean_overlaps[0, j, i], mean_overlaps[1, j, i], color=colors[task], ls=ls[i+2*j], label=label[i+2*j])

    ax[-1].set_xlabel('A/B Overlap (Hz)')
    ax[-1].set_ylabel('Choice Overlap (Hz)')

    plt.legend(fontsize=10)
    plt.savefig('../figures/dual/%s' % figname, dpi=300)
    plt.show()
#+end_src

#+RESULTS:

* Simulations

#+begin_src ipython
kwargs = {'VAR_FF': [.25, .25]}
#+end_src

#+RESULTS:

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:1'
thresh= 5
seed = 1
#+end_src

#+RESULTS:

#+begin_src ipython
sys.path.insert(0, '../../../src')
from src.train.dual.train_dual import test_dual
#+end_src

#+RESULTS:

#+begin_src ipython
accuracies = []
readouts = []
covariances = []
labels = []

for seed in range(100):
    acc_ = []
    cov_ = []
    readout_ = []
    labels_ = []
    for state in ['dpa', 'naive', 'train']:
        print(seed, state)
        with torch.no_grad():
            readout, y_labels, cov, accuracy = test_dual(REPO_ROOT, conf_name, seed, state, DEVICE, **kwargs)
        acc_.append(accuracy)
        cov_.append(cov)
        readout_.append(readout)
        labels_.append(y_labels)

    accuracies.append(acc_)
    readouts.append(readout_)
    covariances.append(cov_)
    labels.append(labels_)
#+end_src

#+RESULTS:
#+begin_example
0 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9719854  0.8544343  0.89523345] GoNoGo: 0.45070743560791016
0 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.72323275 0.5003316  0.7221671 ] GoNoGo: 0.6658124923706055
0 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9742526 0.9727127 0.8240143] GoNoGo: 0.6918336153030396
1 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9650977 0.9335029 0.9643479] GoNoGo: 0.41232845187187195
1 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8361955  0.3741459  0.82846665] GoNoGo: 0.60273677110672
1 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96805286 0.97411084 0.77595234] GoNoGo: 0.726879358291626
2 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96967155 0.7603887  0.9277709 ] GoNoGo: 0.563847541809082
2 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95991737 0.49927878 0.9138962 ] GoNoGo: 0.7069371342658997
2 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9736303  0.9770144  0.94699883] GoNoGo: 0.7635000348091125
3 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96064544 0.845211   0.5690593 ] GoNoGo: 0.5825099349021912
3 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9159057  0.5805405  0.56928396] GoNoGo: 0.6651349663734436
3 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9757895 0.9673014 0.7723745] GoNoGo: 0.7322511076927185
4 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9679702  0.85512996 0.96544814] GoNoGo: 0.4402255415916443
4 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9482969  0.52467346 0.94496864] GoNoGo: 0.6619415879249573
4 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9729981  0.96445197 0.6074947 ] GoNoGo: 0.7225600481033325
5 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.92989284 0.92445016 0.9298992 ] GoNoGo: 0.5554607510566711
5 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.90006536 0.8736409  0.89870316] GoNoGo: 0.6320368051528931
5 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96858555 0.9739787  0.97156125] GoNoGo: 0.6478664875030518
6 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96665657 0.72917724 0.91707724] GoNoGo: 0.6445116996765137
6 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94915456 0.64794564 0.87300944] GoNoGo: 0.7444586157798767
6 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9670398  0.97607476 0.9653487 ] GoNoGo: 0.7780267596244812
7 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97051406 0.95340747 0.7400522 ] GoNoGo: 0.6364392638206482
7 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95444185 0.68138635 0.94824654] GoNoGo: 0.6352556347846985
7 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9761212  0.96256757 0.8362552 ] GoNoGo: 0.7108845114707947
8 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96878606 0.75327885 0.7720787 ] GoNoGo: 0.5943742394447327
8 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9536235  0.6402507  0.84181416] GoNoGo: 0.7065411806106567
8 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9728112  0.96452427 0.71742827] GoNoGo: 0.7321588397026062
9 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.967898   0.66884    0.66656786] GoNoGo: 0.29412010312080383
9 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95708096 0.5        0.70198846] GoNoGo: 0.7286165952682495
9 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97277313 0.9635913  0.69630504] GoNoGo: 0.7203903198242188
10 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9654777 0.6011621 0.6606306] GoNoGo: 0.5105872750282288
10 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9581322  0.50126815 0.719543  ] GoNoGo: 0.759135901927948
10 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9252144  0.96198577 0.7533498 ] GoNoGo: 0.5930073857307434
11 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96880007 0.9690901  0.9474204 ] GoNoGo: 0.4732798933982849
11 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8465343 0.7337749 0.7962521] GoNoGo: 0.6423190236091614
11 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97442096 0.97214556 0.94331175] GoNoGo: 0.6962445378303528
12 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9628288  0.96193075 0.96313286] GoNoGo: 0.6177880167961121
12 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94446254 0.887645   0.88975143] GoNoGo: 0.6760905981063843
12 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9759168  0.96375626 0.6411613 ] GoNoGo: 0.6622673869132996
13 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9705     0.97056645 0.97014606] GoNoGo: 0.5789664387702942
13 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9684914  0.75420487 0.96859115] GoNoGo: 0.7021000385284424
13 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9742363 0.9725839 0.9681801] GoNoGo: 0.7257755994796753
14 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96941227 0.9675729  0.73451674] GoNoGo: 0.573140025138855
14 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8681046  0.7523577  0.85563993] GoNoGo: 0.6540969014167786
14 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97173756 0.9710875  0.8979031 ] GoNoGo: 0.7394116520881653
15 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9654558  0.58933586 0.62929696] GoNoGo: 0.3836267292499542
15 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7188425  0.5        0.48464823] GoNoGo: 0.6868980526924133
15 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9652418  0.96824473 0.8498037 ] GoNoGo: 0.7939406633377075
16 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9671413 0.5572208 0.6139937] GoNoGo: 0.6098323464393616
16 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9455361  0.5000054  0.61466557] GoNoGo: 0.7191556096076965
16 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97325116 0.9703599  0.78840184] GoNoGo: 0.7759043574333191
17 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96335673 0.93158513 0.93286395] GoNoGo: 0.5002058744430542
17 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9335297  0.57848716 0.83853835] GoNoGo: 0.6952837705612183
17 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9681672 0.963488  0.6706301] GoNoGo: 0.7436674237251282
18 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.970929   0.93601763 0.9516419 ] GoNoGo: 0.5550950169563293
18 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9265144  0.5000072  0.90274686] GoNoGo: 0.6895995736122131
18 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.972656  0.9696143 0.9361599] GoNoGo: 0.679870069026947
19 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9692828  0.95482284 0.775914  ] GoNoGo: 0.4688810706138611
19 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95764464 0.5005886  0.883965  ] GoNoGo: 0.6989960074424744
19 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.973183  0.9655043 0.720424 ] GoNoGo: 0.7130942940711975
20 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96696776 0.93403435 0.93780935] GoNoGo: 0.6071330308914185
20 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7271547 0.5169893 0.6999924] GoNoGo: 0.7121851444244385
20 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96798974 0.97048134 0.93202806] GoNoGo: 0.7272983193397522
21 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97025824 0.77910334 0.9703752 ] GoNoGo: 0.5910772681236267
21 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95390016 0.6704254  0.94800186] GoNoGo: 0.6708082556724548
21 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9727656  0.9646487  0.85577136] GoNoGo: 0.7090755701065063
22 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96689665 0.5743781  0.6844404 ] GoNoGo: 0.5016521215438843
22 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.92152524 0.4893709  0.5427843 ] GoNoGo: 0.7242493629455566
22 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9701837  0.97572887 0.8773803 ] GoNoGo: 0.7199424505233765
23 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97108877 0.9706201  0.9682392 ] GoNoGo: 0.5682672262191772
23 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.72442913 0.72672606 0.72539824] GoNoGo: 0.6607765555381775
23 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97194934 0.9742262  0.7578647 ] GoNoGo: 0.7128085494041443
24 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9701329  0.96818465 0.9446673 ] GoNoGo: 0.5675624012947083
24 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9620461  0.96382904 0.94402283] GoNoGo: 0.6242532134056091
24 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97113955 0.95985776 0.62775147] GoNoGo: 0.7097145915031433
25 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96790016 0.57107425 0.9309935 ] GoNoGo: 0.48636114597320557
25 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.93444693 0.5817946  0.90785474] GoNoGo: 0.6883425712585449
25 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97222716 0.96731055 0.705209  ] GoNoGo: 0.7064221501350403
26 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96809435 0.9679387  0.96756643] GoNoGo: 0.48569998145103455
26 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.87362176 0.50023115 0.8432549 ] GoNoGo: 0.6593442559242249
26 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97313964 0.9738615  0.76670754] GoNoGo: 0.7287710309028625
27 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97041553 0.93608105 0.9696311 ] GoNoGo: 0.4674912989139557
27 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9416     0.7192259  0.92250293] GoNoGo: 0.5557214617729187
27 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9719346  0.9714233  0.80664784] GoNoGo: 0.6976075768470764
28 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96788526 0.9549537  0.9563713 ] GoNoGo: 0.5046761631965637
28 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9083064  0.72182226 0.6343677 ] GoNoGo: 0.7045786380767822
28 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9730644  0.96919966 0.69058496] GoNoGo: 0.7498028874397278
29 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9704357  0.96891093 0.9575792 ] GoNoGo: 0.5177954435348511
29 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96059614 0.72697705 0.95285064] GoNoGo: 0.7411723136901855
29 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9656007  0.96685225 0.6567353 ] GoNoGo: 0.7424264550209045
30 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.90422934 0.8128364  0.82105166] GoNoGo: 0.46375730633735657
30 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.6627004 0.6730411 0.8012993] GoNoGo: 0.5185123085975647
30 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95340514 0.9656649  0.9620696 ] GoNoGo: 0.6922314763069153
31 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96948636 0.7352222  0.86986387] GoNoGo: 0.3366720974445343
31 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.93780476 0.7254689  0.867014  ] GoNoGo: 0.5996912121772766
31 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97251433 0.97331595 0.88543135] GoNoGo: 0.6856054663658142
32 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9673927 0.8581662 0.8748331] GoNoGo: 0.6174729466438293
32 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.93550146 0.70509154 0.78565127] GoNoGo: 0.7122810482978821
32 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96716654 0.9717911  0.77918035] GoNoGo: 0.780387818813324
33 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.91602623 0.515207   0.50686395] GoNoGo: 0.5369804501533508
33 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.89795744 0.6907936  0.51618487] GoNoGo: 0.6767268776893616
33 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9708941  0.97096765 0.9143024 ] GoNoGo: 0.7085339426994324
34 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.967982  0.8580908 0.8768784] GoNoGo: 0.5052579045295715
34 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9578032  0.50042534 0.61050975] GoNoGo: 0.7025732398033142
34 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9725109  0.964643   0.74322164] GoNoGo: 0.7504671216011047
35 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97037417 0.96976405 0.9697428 ] GoNoGo: 0.3556630611419678
35 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9573188 0.7288318 0.9538061] GoNoGo: 0.6596768498420715
35 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9713756  0.97347367 0.63679844] GoNoGo: 0.7091339230537415
36 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9720814  0.96769303 0.9651098 ] GoNoGo: 0.6305354237556458
36 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.64411825 0.6279054  0.6486947 ] GoNoGo: 0.6266053318977356
36 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9741794 0.9733181 0.806045 ] GoNoGo: 0.7250145077705383
37 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95767176 0.5666865  0.5382456 ] GoNoGo: 0.5575792789459229
37 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8748618  0.43319055 0.51611245] GoNoGo: 0.6648581624031067
37 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97500473 0.97091955 0.70021975] GoNoGo: 0.6853821873664856
38 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96440125 0.942848   0.9592184 ] GoNoGo: 0.498177170753479
38 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7228424 0.5140172 0.7203866] GoNoGo: 0.6281713843345642
38 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97195345 0.96359813 0.6501377 ] GoNoGo: 0.6921066641807556
39 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9714252 0.9593036 0.9622718] GoNoGo: 0.45567893981933594
39 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9602779 0.727178  0.8373046] GoNoGo: 0.5495362877845764
39 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9688072  0.97280955 0.79631656] GoNoGo: 0.7185708284378052
40 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9692455 0.9680176 0.9685594] GoNoGo: 0.4716472625732422
40 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96202224 0.9004243  0.9622704 ] GoNoGo: 0.7272966504096985
40 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97480845 0.964892   0.77835906] GoNoGo: 0.6311036348342896
41 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9707514 0.9615485 0.9673894] GoNoGo: 0.3224870562553406
41 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.91486174 0.5032448  0.89580154] GoNoGo: 0.6568810939788818
41 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9720424  0.9714264  0.71352184] GoNoGo: 0.7298796772956848
42 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96330035 0.6937046  0.6919005 ] GoNoGo: 0.47995927929878235
42 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9528329 0.6811955 0.6796488] GoNoGo: 0.6786794662475586
42 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9741101  0.97277325 0.9042628 ] GoNoGo: 0.7176408767700195
43 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96674615 0.82518655 0.95871735] GoNoGo: 0.6894243359565735
43 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96468955 0.72732204 0.9067792 ] GoNoGo: 0.6732426881790161
43 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9730239 0.9703729 0.8838418] GoNoGo: 0.715103030204773
44 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.964945   0.79593277 0.8232273 ] GoNoGo: 0.5234468579292297
44 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7241462  0.50014913 0.7916481 ] GoNoGo: 0.6891445517539978
44 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.965276  0.9645713 0.9709979] GoNoGo: 0.8227028846740723
45 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.968818   0.71028024 0.73304844] GoNoGo: 0.4587317109107971
45 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9686891  0.50000554 0.8199535 ] GoNoGo: 0.7447606325149536
45 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95113724 0.96780205 0.75840044] GoNoGo: 0.7052223682403564
46 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9513879  0.9310634  0.91936934] GoNoGo: 0.4137720465660095
46 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9416946 0.5441556 0.9381979] GoNoGo: 0.7451080679893494
46 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97196513 0.9719159  0.51353484] GoNoGo: 0.7375057935714722
47 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96675324 0.7978528  0.9501324 ] GoNoGo: 0.48423323035240173
47 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.964032   0.49999914 0.9601494 ] GoNoGo: 0.7143605351448059
47 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9715954 0.9724968 0.8378816] GoNoGo: 0.6953001022338867
48 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96028346 0.9167592  0.8931117 ] GoNoGo: 0.6325631737709045
48 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.73516107 0.51485395 0.6950002 ] GoNoGo: 0.6660802960395813
48 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9322049  0.9724646  0.69772375] GoNoGo: 0.6656674146652222
49 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96662486 0.9444744  0.9289127 ] GoNoGo: 0.5217118263244629
49 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8773003  0.73570144 0.7735071 ] GoNoGo: 0.6951889395713806
49 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97028285 0.97070026 0.92930514] GoNoGo: 0.7590044140815735
50 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96621776 0.85942644 0.8631803 ] GoNoGo: 0.45404475927352905
50 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.72524035 0.48015618 0.59693354] GoNoGo: 0.701411247253418
50 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.89708525 0.97362965 0.93056375] GoNoGo: 0.6574426293373108
51 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.87505144 0.54497826 0.51782537] GoNoGo: 0.5102277398109436
51 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8868777  0.500136   0.50940865] GoNoGo: 0.7221059203147888
51 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97550225 0.96208733 0.68986547] GoNoGo: 0.6876509189605713
52 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9597665 0.9608009 0.9604374] GoNoGo: 0.620622456073761
52 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95557404 0.5000145  0.939997  ] GoNoGo: 0.7455233335494995
52 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9641231  0.96039444 0.9640324 ] GoNoGo: 0.72989821434021
53 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9666071  0.59112656 0.55377936] GoNoGo: 0.45964235067367554
53 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9580134  0.5028568  0.62123567] GoNoGo: 0.766343891620636
53 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96510714 0.96847975 0.967926  ] GoNoGo: 0.7474979162216187
54 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9720089  0.9688333  0.97128147] GoNoGo: 0.5970686078071594
54 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7007664  0.70378923 0.70213366] GoNoGo: 0.6194947361946106
54 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9716455 0.9707529 0.8618314] GoNoGo: 0.720176637172699
55 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9678768  0.9454568  0.93819857] GoNoGo: 0.44113534688949585
55 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7401771  0.49820054 0.740333  ] GoNoGo: 0.6450496315956116
55 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97060996 0.96052897 0.7022778 ] GoNoGo: 0.7322636246681213
56 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9708824  0.67854184 0.71804553] GoNoGo: 0.5967991948127747
56 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.6303585  0.46351224 0.647789  ] GoNoGo: 0.6183067560195923
56 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96211314 0.96397805 0.9661905 ] GoNoGo: 0.8290374875068665
57 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9707774  0.9679598  0.91138184] GoNoGo: 0.3981938064098358
57 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8986664  0.67265844 0.8239308 ] GoNoGo: 0.5971639752388
57 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9596493 0.9658443 0.9467009] GoNoGo: 0.6901879906654358
58 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97157395 0.6441505  0.7316611 ] GoNoGo: 0.6253973245620728
58 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96133566 0.4999991  0.7162702 ] GoNoGo: 0.6483801603317261
58 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96997666 0.97595125 0.70580524] GoNoGo: 0.7497193217277527
59 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 1s
Dual accuracy: [0.96569353 0.9652466  0.9647411 ] GoNoGo: 0.5078139305114746
59 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9646276 0.8947403 0.9540892] GoNoGo: 0.6355812549591064
59 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.938827  0.9139451 0.9422606] GoNoGo: 0.7898731827735901
60 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9718738 0.9715503 0.5867039] GoNoGo: 0.5063296556472778
60 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9136707  0.7179837  0.55027074] GoNoGo: 0.6640868782997131
60 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94642144 0.9475229  0.57460344] GoNoGo: 0.6979082226753235
61 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9695265  0.9689754  0.96950257] GoNoGo: 0.5335408449172974
61 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.74018866 0.712152   0.8152449 ] GoNoGo: 0.5172678828239441
61 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96756446 0.9672163  0.93126744] GoNoGo: 0.7497677206993103
62 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96906614 0.9684855  0.96931744] GoNoGo: 0.4856100082397461
62 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.92609984 0.7356732  0.8383415 ] GoNoGo: 0.6264660954475403
62 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9689065 0.9699311 0.6393189] GoNoGo: 0.7678446769714355
63 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9698935  0.96900976 0.96821743] GoNoGo: 0.39952102303504944
63 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94637454 0.49999827 0.9512629 ] GoNoGo: 0.6539376974105835
63 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97138375 0.9750306  0.80289775] GoNoGo: 0.7152701020240784
64 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9655843 0.8434774 0.9016565] GoNoGo: 0.49595049023628235
64 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.93990815 0.49967363 0.76093006] GoNoGo: 0.7230944633483887
64 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97420144 0.9611435  0.5917657 ] GoNoGo: 0.6947569251060486
65 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.93656087 0.72235596 0.712498  ] GoNoGo: 0.49035897850990295
65 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.88676256 0.5016782  0.55120814] GoNoGo: 0.6687424778938293
65 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9623461  0.9527351  0.74855584] GoNoGo: 0.7365025281906128
66 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9707343 0.9597051 0.9637479] GoNoGo: 0.41360193490982056
66 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.71604896 0.5795592  0.7183137 ] GoNoGo: 0.6755724549293518
66 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97271687 0.9680861  0.9082078 ] GoNoGo: 0.6883980631828308
67 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96527344 0.9579684  0.95601946] GoNoGo: 0.34272852540016174
67 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.90166384 0.72656703 0.7207779 ] GoNoGo: 0.6212021112442017
67 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9706976  0.97631353 0.8042631 ] GoNoGo: 0.7299098372459412
68 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96669644 0.7455171  0.75308216] GoNoGo: 0.4747273623943329
68 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94707257 0.72088695 0.77663225] GoNoGo: 0.567927360534668
68 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97511333 0.96273726 0.6383465 ] GoNoGo: 0.7046486735343933
69 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96953887 0.9446467  0.94801784] GoNoGo: 0.5585307478904724
69 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96217895 0.6903423  0.8777739 ] GoNoGo: 0.7287556529045105
69 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9741631 0.9742364 0.8314408] GoNoGo: 0.7152069211006165
70 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9664576  0.6263285  0.65917736] GoNoGo: 0.5880247950553894
70 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9498799  0.7300769  0.67471486] GoNoGo: 0.7222363948822021
70 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9720133 0.967705  0.8486313] GoNoGo: 0.7577813267707825
71 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96935624 0.9520924  0.969807  ] GoNoGo: 0.6126964092254639
71 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9530569  0.6823942  0.93482053] GoNoGo: 0.7000759243965149
71 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9694248  0.9740182  0.83329064] GoNoGo: 0.7177799344062805
72 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97071284 0.9515846  0.9681569 ] GoNoGo: 0.29647380113601685
72 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94596744 0.71407276 0.94464505] GoNoGo: 0.6179385781288147
72 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9741144 0.9628005 0.62893  ] GoNoGo: 0.7110947966575623
73 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9707021 0.9706315 0.9706728] GoNoGo: 0.5241015553474426
73 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9619415  0.66194624 0.9522927 ] GoNoGo: 0.6977272033691406
73 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97605574 0.97387016 0.67268604] GoNoGo: 0.7328220009803772
74 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97099507 0.961118   0.9683855 ] GoNoGo: 0.5025447010993958
74 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95643353 0.7275448  0.943846  ] GoNoGo: 0.6316071152687073
74 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9600621 0.9297631 0.8212024] GoNoGo: 0.6658164858818054
75 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.965959   0.647376   0.88106686] GoNoGo: 0.5079408288002014
75 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94973075 0.5076084  0.9464373 ] GoNoGo: 0.6309191584587097
75 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97420436 0.96817076 0.7751776 ] GoNoGo: 0.6794810891151428
76 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97224426 0.97144157 0.9601014 ] GoNoGo: 0.6311176419258118
76 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9678695  0.67082787 0.93382376] GoNoGo: 0.6135180592536926
76 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9726363  0.97623855 0.97443926] GoNoGo: 0.7305727005004883
77 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9670202 0.954175  0.9530245] GoNoGo: 0.5936750769615173
77 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9517514  0.4999715  0.95369536] GoNoGo: 0.6563405990600586
77 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95426583 0.9730042  0.53368205] GoNoGo: 0.6972771883010864
78 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96297354 0.8902175  0.90057814] GoNoGo: 0.4787963926792145
78 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9151136  0.5000007  0.72747654] GoNoGo: 0.7052544951438904
78 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9575777 0.9675117 0.5649036] GoNoGo: 0.6480196714401245
79 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97160506 0.9693629  0.9700242 ] GoNoGo: 0.4712371826171875
79 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.72033817 0.72253466 0.71076334] GoNoGo: 0.5689637660980225
79 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97241056 0.97450113 0.781499  ] GoNoGo: 0.7499718070030212
80 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96816325 0.8198199  0.8053324 ] GoNoGo: 0.5141326785087585
80 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9621151  0.70223796 0.77594584] GoNoGo: 0.7186276316642761
80 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9721955  0.96319443 0.7052858 ] GoNoGo: 0.7634732127189636
81 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96798015 0.507917   0.5208216 ] GoNoGo: 0.4863545000553131
81 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94415736 0.50000066 0.59802896] GoNoGo: 0.7548306584358215
81 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94810086 0.9548506  0.9524969 ] GoNoGo: 0.7983821034431458
82 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9663555  0.6528176  0.75324076] GoNoGo: 0.5063676834106445
82 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9441011  0.5001641  0.72353613] GoNoGo: 0.7104538083076477
82 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97063124 0.97616714 0.73112875] GoNoGo: 0.7459893822669983
83 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9683518  0.62376183 0.56883913] GoNoGo: 0.40319791436195374
83 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95341647 0.49999574 0.75441235] GoNoGo: 0.7145408391952515
83 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.95738363 0.96798164 0.92575395] GoNoGo: 0.6832844018936157
84 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9695346  0.96910393 0.96956116] GoNoGo: 0.5991378426551819
84 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9586778  0.72373474 0.9564089 ] GoNoGo: 0.71601402759552
84 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.976286   0.97024125 0.90682536] GoNoGo: 0.6844573616981506
85 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97187954 0.9638169  0.9577804 ] GoNoGo: 0.4331837594509125
85 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9637847  0.50923365 0.9635305 ] GoNoGo: 0.708068311214447
85 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9632897 0.9734225 0.6513071] GoNoGo: 0.7594075798988342
86 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9561455 0.9542923 0.8573937] GoNoGo: 0.5335646867752075
86 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.6409539 0.6455648 0.6417226] GoNoGo: 0.599124014377594
86 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9746411 0.9604683 0.5823007] GoNoGo: 0.7075773477554321
87 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9695529  0.9695096  0.96597236] GoNoGo: 0.41307729482650757
87 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.72448933 0.7269302  0.7249933 ] GoNoGo: 0.6041863560676575
87 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8050157  0.95537657 0.9409497 ] GoNoGo: 0.6684401035308838
88 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96447736 0.7881547  0.60194695] GoNoGo: 0.6100548505783081
88 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9581834  0.5000145  0.58034056] GoNoGo: 0.6262083053588867
88 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9769667 0.9688764 0.6563808] GoNoGo: 0.6944282650947571
89 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97052705 0.96983176 0.97036636] GoNoGo: 0.44315090775489807
89 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7823551 0.6489797 0.904882 ] GoNoGo: 0.6201842427253723
89 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97038054 0.9723743  0.94735676] GoNoGo: 0.7110670804977417
90 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.965482   0.7297235  0.84814495] GoNoGo: 0.4687698185443878
90 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7317666  0.5000005  0.72186464] GoNoGo: 0.6872291564941406
90 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9737744  0.97677577 0.80755085] GoNoGo: 0.705880880355835
91 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.972546   0.899177   0.96850735] GoNoGo: 0.5797560214996338
91 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9688034 0.621145  0.9666845] GoNoGo: 0.6757426857948303
91 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9677497  0.97464246 0.8030719 ] GoNoGo: 0.7568714618682861
92 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96699804 0.8934922  0.91859883] GoNoGo: 0.46069398522377014
92 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.89028436 0.5001961  0.8411506 ] GoNoGo: 0.6496513485908508
92 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9712063  0.9735741  0.93352073] GoNoGo: 0.6982421278953552
93 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9706317  0.96979743 0.97016895] GoNoGo: 0.6270933151245117
93 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9667048  0.59952825 0.9355911 ] GoNoGo: 0.7135524749755859
93 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97223336 0.96864474 0.8813302 ] GoNoGo: 0.7770298719406128
94 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97054607 0.97032857 0.9705077 ] GoNoGo: 0.518635630607605
94 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.92208815 0.7315658  0.9175978 ] GoNoGo: 0.6344273686408997
94 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97137773 0.9695425  0.96852547] GoNoGo: 0.7215491533279419
95 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9696862  0.96815807 0.9687133 ] GoNoGo: 0.49830976128578186
95 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.6976739  0.5657859  0.69883883] GoNoGo: 0.6740455627441406
95 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9664155 0.9738386 0.969534 ] GoNoGo: 0.7023893594741821
96 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97159296 0.96959287 0.9713068 ] GoNoGo: 0.422659307718277
96 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9065549  0.6814974  0.89751714] GoNoGo: 0.5553210377693176
96 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9730382 0.9737315 0.9183402] GoNoGo: 0.7467948198318481
97 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97109693 0.9706257  0.9710634 ] GoNoGo: 0.6032138466835022
97 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9370427 0.7343394 0.9232613] GoNoGo: 0.6930593848228455
97 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.97115475 0.9769167  0.9734481 ] GoNoGo: 0.7443701028823853
98 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9703716 0.6776328 0.7191106] GoNoGo: 0.4158531427383423
98 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.8128443 0.7316282 0.732981 ] GoNoGo: 0.6681566834449768
98 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.9715883 0.9723305 0.7257978] GoNoGo: 0.6948660016059875
99 dpa
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.94984126 0.94974774 0.9496524 ] GoNoGo: 0.4645213484764099
99 naive
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.7703856  0.77575874 0.7798106 ] GoNoGo: 0.6533300280570984
99 train
Testing Dual
Elapsed (with compilation) = 0h 0m 0s
Dual accuracy: [0.96654266 0.9703342  0.7068726 ] GoNoGo: 0.732855498790741
#+end_example

#+RESULTS:

#+begin_src ipython
print(np.array(accuracies).shape)
acc = np.moveaxis(np.array(accuracies), 0, -1)
print(acc.shape)
#+end_src

#+RESULTS:
: (100, 3, 2, 4)
: (3, 2, 4, 100)

#+begin_src ipython
pkl_save(acc, 'acc', path="/home/leon")
#+end_src

#+RESULTS:

#+begin_src ipython
acc = pkl_load( 'acc', path="/home/leon")
print(acc.shape)
#+end_src

#+RESULTS:
: (3, 2, 4, 100)

#+begin_src ipython

#+end_src


#+RESULTS:

* Performance

#+begin_src ipython
fig, ax = plt.subplots(1, 2, figsize=[1.5*width, height])

rd = np.random.normal(size=(acc.shape[-1])) / 10

pal = ['r', 'b', 'g']
for j in range(3):
    for i in range(3):
        acc_mean = np.mean(acc[j][0][i], -1)
        acc_sem = np.std(acc[j][0][i], axis=-1, ddof=1) / np.sqrt(len(acc[j][0][i]))

        ax[0].errorbar(i+4*j, acc_mean, yerr=acc_sem, fmt='o', color=pal[i], ecolor=pal[i], elinewidth=3, capsize=5)
        ax[0].plot(i+rd + 4*j, acc[j][0][i], 'o', alpha=0.1, color=pal[i])

# ax[0].set_xlim(-1, 4)
# ax[0].set_ylim(0.4, 1.1)

ax[0].set_ylabel('DPA Performance')
ax[0].set_xticks([1, 5, 9], ['DPA', 'Naive', 'Expert'])
ax[0].axhline(y=0.5, color='k', linestyle='--')

# ax[1].errorbar(rd, acc[0][-1], yerr=acc[1][-1], fmt='o', label='Naive',
#              color='k', ecolor='k', elinewidth=3, capsize=5)

for i in range(3):
    acc_mean = np.mean(acc[i][0][-1], -1)
    acc_sem = np.std(acc[i][0][-1], axis=-1, ddof=1) / np.sqrt(len(acc[0][-1]))

    ax[1].errorbar(i+i*0.5, acc_mean, yerr=acc_sem, fmt='o', color='k', ecolor='k', elinewidth=3, capsize=5)
    ax[1].plot(rd+i+i*0.5, acc[i][0][-1], 'ko', alpha=.1)

ax[1].set_xlim(-1, 3.5)
ax[1].set_ylim(0.4, 1.1)

ax[1].set_ylabel('GoNoGo Performance')
ax[1].set_xticks([0, 1.5, 3], ['DPA', 'Naive', 'Expert'])
ax[1].axhline(y=0.5, color='k', linestyle='--')

plt.savefig('../figures/dual/dual_perf_%d.svg' % seed, dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/multi/figure_15.png]]

* Performance vs fixed points

 #+begin_src ipython
centers = pkl_load('fp_multi_auto', path="/home/leon/")
print(centers.shape)
#+end_src

#+RESULTS:
: (100, 3, 2, 5)

#+begin_src ipython
fp = np.moveaxis(centers, 0, -1)
print(fp.shape)

theta = np.arctan2(fp[:, 1], fp[:, 0])
radius = np.sqrt(fp[:, 0]**2+ fp[:, 1]**2)
idx = np.where(np.abs(fp[:, 0])<2)
theta[idx] = np.nan
# plt.hist(theta[0, 3])
# plt.show()
print(theta.shape, radius.shape)

fp = np.stack((np.cos(theta), np.sin(theta)), axis=1)
print(fp.shape)
fp = np.nanmean(fp, -2)
#+end_src

#+RESULTS:
: (3, 2, 5, 100)
: (3, 5, 100) (3, 5, 100)
: (3, 2, 5, 100)

#+begin_src ipython
def bin_loc(x, y, nbins=8):
    # Define number of bins (adjust nbins as needed)
    bins = np.linspace(np.min(x), np.max(x), nbins+1)
    # Get bin centers for plotting:
    bin_centers = (bins[:-1] + bins[1:]) / 2

    # Digitize the x values into bins
    bin_indices = np.digitize(x, bins, right=True)
    print(bin_indices.shape)
    # Compute the mean accuracy for each bin:
    mean_acc_bins = np.array([np.nanmean(y[bin_indices == i]) if np.any(bin_indices == i) else np.nan
                              for i in range(1, nbins + 1)])

    # Optionally remove bins with no data:
    valid = ~np.isnan(mean_acc_bins)

    return bin_centers[valid], mean_acc_bins[valid]
#+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np

def bin_loc(x, y, nbins=8):
    bins = np.linspace(np.min(x), np.max(x), nbins + 1)
    bin_centers = (bins[:-1] + bins[1:]) / 2

    # Digitize; 0 means left of bins[0], 1..nbins are the bins
    bin_indices = np.digitize(x, bins, right=True)

    mean_acc_bins = [
        np.nanmean(y[bin_indices == i]) if np.any(bin_indices == i) else np.nan
        for i in range(1, nbins + 1)
    ]
    mean_acc_bins = np.array(mean_acc_bins)

    valid = ~np.isnan(mean_acc_bins)
    return bin_centers[valid], mean_acc_bins[valid]
#+end_src

#+RESULTS:

#+begin_src ipython
x = np.linspace(0, 1, 11)  # 0, 0.1, ..., 1.0
y = x**2
centers, means = bin_loc(x, y, nbins=5)
print(centers, means)
#+end_src

#+RESULTS:
: [0.1 0.3 0.5 0.7 0.9] [0.025 0.125 0.305 0.565 0.905]

#+begin_src ipython
def bin_loc(x, y, nbins=8):
    bins = np.linspace(np.min(x), np.max(x), nbins + 1)
    bin_centers = (bins[:-1] + bins[1:]) / 2  # length: nbins
    bin_indices = np.digitize(x, bins, right=True)  # values: 1..nbins

    # Aggregate means for each bin (1-based bin indices)
    mean_acc_bins = np.full(nbins, np.nan)
    for i in range(1, nbins + 1):
        in_bin = bin_indices == i
        if np.any(in_bin):
            mean_acc_bins[i-1] = np.nanmean(y[in_bin])

    # mask bin_centers/mean_acc_bins together
    valid = ~np.isnan(mean_acc_bins)
    return bin_centers[valid], mean_acc_bins[valid]
#+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np
import matplotlib.pyplot as plt

nbins = 8
task = 1
print(fp.shape, acc.shape)

x = np.hstack((fp[task, 1], fp[task, 1], fp[task, 1]))
y = np.hstack(acc[task, 0])[:x.shape[0]]
#idx = np.where(np.abs(fp[task, 0])>=1)

x = fp[task, 1]
y = acc[task, 0, 0]

print(x.shape, y.shape)

bin_centers, mean_acc_bins = bin_loc(x, y, nbins)

fig, ax = plt.subplots(1, 2, figsize=[1.5*width, height])
ax[0].plot(bin_centers, mean_acc_bins, marker='o', linestyle='-')
ax[0].scatter(x, y)
ax[0].set_xlabel('y loc')
ax[0].set_ylabel('DPA Performance')

#ax[0].set_xlim([-1, 1])
ax[0].set_ylim([0.5, 1])

x = fp[task, 1]
y = acc[task, 0, -1]
bin_centers, mean_acc_bins = bin_loc(x, y, nbins)
ax[1].scatter(x, y)
ax[1].plot(bin_centers, mean_acc_bins, marker='o', linestyle='-')
ax[1].set_xlabel('y loc')
ax[1].set_ylabel('GoNoGo Performance')

# ax[1].set_xlim([-1, 1])
ax[1].set_ylim([0.5, 1])

plt.savefig('perf_yloc.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (3, 2, 100) (3, 2, 4, 100)
: (100,) (100,)
[[./figures/multi/figure_22.png]]
:END:

#+begin_src ipython
from scipy.stats import pearsonr

fig, ax = plt.subplots(1, 2, figsize=[1.5*width, height])

corr, p_value = pearsonr(fp[1, 1], acc[1, 0, 0])
ax[0].set_title("Corr: %.2f, p-value: %.3f" % (corr, p_value))
ax[0].scatter(fp[1, 1], acc[1, 0, 0])
ax[0].set_ylim([0.5, 1])

corr, p_value = pearsonr(fp[1, 1], acc[1, 0, -1])
ax[1].set_title("Corr: %.2f, p-value: %.3f" % (corr, p_value))
ax[1].scatter(fp[1, 1], acc[1, 0, -1])
ax[1].set_ylim([0.5, 1])

ax[0].set_xlabel('y loc')
ax[0].set_ylabel('DPA Performance')

ax[1].set_xlabel('y loc')
ax[1].set_ylabel('GoNoGo Performance')

plt.show()
#+end_src

#+RESULTS:
[[./figures/multi/figure_23.png]]

#+begin_src ipython
from scipy.stats import pearsonr

fig, ax = plt.subplots(1, 2, figsize=[1.5*width, height])

corr, p_value = pearsonr(fp[2, 1], np.nanmean(acc[-1, 0, :3], -2))
ax[0].set_title("Corr: %.2f, p-value: %.3f" % (corr, p_value))
ax[0].scatter(fp[2, 1], np.nanmean(acc[2, 0, :3], -2))

corr, p_value = pearsonr(fp[2, 1], acc[2, 0, -1])
ax[1].set_title("Corr: %.2f, p-value: %.3f" % (corr, p_value))
ax[1].scatter(fp[2, 1], acc[2, 0, -1])

ax[0].set_xlabel('y loc')
ax[0].set_ylabel('DPA Performance')

ax[1].set_xlabel('y loc')
ax[1].set_ylabel('GoNoGo Performance')

plt.show()
#+end_src

#+RESULTS:
[[./figures/multi/figure_25.png]]

* Overlaps

#+begin_src ipython
print(readout.shape, y_labels.shape)
#+end_src

#+RESULTS:
: (768, 101, 2) (3, 768)

#+begin_src ipython
plot_overlap_label(readout, y_labels, task=0, figname='overlaps_naive_dpa.svg')
#+end_src

#+RESULTS:
:RESULTS:
:END:

#+begin_src ipython
plot_overlap_label(readout, y_labels, task=1, figname='overlaps_naive_go.svg')
#+end_src

#+RESULTS:

#+begin_src ipython
plot_overlap_label(readout, y_labels, task=-1, figname='overlaps_naive_nogo.svg')
#+end_src

#+RESULTS:


#+begin_src ipython

#+end_src

#+RESULTS:

* Covariance

#+begin_src ipython
def plot_cov(cov_matrix, order=0, ax=None):

    if order==3:
        labels = ['$n_\\text{AB}$', '$n_\\text{Choice}$', 'Go', 'No Go']
    elif order==2:
        labels = ['$m_\\text{AB}$ $m_\\text{Choice}$', '$n_\\text{AB}$ $n_\\text{Choice}$', 'odor C', 'odor D']
    elif order==1:
        labels = ['$n_\\text{AB}$', '$n_\\text{Choice}$', 'A', 'B']
    elif order==0:
        labels = ['$m_\\text{AB}$', '$n_\\text{AB}$', '$m_\\text{Choice}$', '$n_\\text{Choice}$']

    num_vectors = cov_matrix.shape[0]
    mask = np.triu(np.ones_like(cov_matrix, dtype=bool))
    mask = np.ma.masked_array(cov_matrix, mask=mask)

    if ax is None:
        fig, ax = plt.subplots(figsize=(8, 6))

    # Plot the masked covariance matrix
    img = ax.imshow(mask, cmap='coolwarm', interpolation=None)
    # cbar = plt.colorbar(label='Angle (°)')
    # cbar.set_ticks([30, 90, 120])

    # Set axis labels on top and left
    ax.set_xticks(ticks=np.arange(num_vectors), labels=labels, fontsize=18)
    ax.set_yticks(ticks=np.arange(num_vectors), labels=labels, fontsize=18)

    # Invert y-axis
    ax.xaxis.set_ticks_position('top')
    ax.xaxis.set_label_position('top')

    # ax.yaxis.set_ticks_position('right')
    # ax.yaxis.set_label_position('right')
    ax.invert_yaxis()

    for i in range(num_vectors):
        for j in range(i + 1):
            ax.text(j, i, f'{cov_matrix[i, j]:.0f}', ha='center', va='center', color='black')
#+end_src

#+RESULTS:

#+begin_src ipython
cov = np.moveaxis(np.array(covariances), 0, -1)
print(cov.shape)
#+end_src

#+RESULTS:
: (3, 4, 4, 4, 20)

#+begin_src ipython
fig, ax = plt.subplots(1, 4, figsize=(4*8, 6))
plot_cov(cov[0][0].mean(-1), order=0, ax=ax[3])
plot_cov(cov[0][3].mean(-1), order=3, ax=ax[1])
plot_cov(cov[0][1].mean(-1), order=1, ax=ax[0])
plot_cov(cov[0][2].mean(-1), order=2, ax=ax[2])
plt.savefig('figures/covariances/cov_dpa.svg')
#+end_src

#+RESULTS:
[[./figures/multi/figure_29.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 4, figsize=(4*8, 6))
plot_cov(cov[1][0].mean(-1), order=0, ax=ax[3])
plot_cov(cov[1][3].mean(-1), order=3, ax=ax[1])
plot_cov(cov[1][1].mean(-1), order=1, ax=ax[0])
plot_cov(cov[1][2].mean(-1), order=2, ax=ax[2])
plt.savefig('figures/covariances/cov_dual_naive.svg')
#+end_src

#+RESULTS:
[[./figures/multi/figure_30.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 4, figsize=(4*8, 6))
plot_cov(cov[2][0].mean(-1), order=0, ax=ax[3])
plot_cov(cov[2][3].mean(-1), order=3, ax=ax[1])
plot_cov(cov[2][1].mean(-1), order=1, ax=ax[0])
plot_cov(cov[2][2].mean(-1), order=2, ax=ax[2])
plt.savefig('figures/covariances/cov_dual_train.svg')
#+end_src

#+RESULTS:
[[./figures/multi/figure_31.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=(3*8, 6))
plot_cov(cov[1][3].mean(-1), order=3, ax=ax[0])
plot_cov(cov[1][1].mean(-1), order=1, ax=ax[1])
plot_cov(cov[1][2].mean(-1), order=2, ax=ax[2])
#+end_src

#+RESULTS:
[[./figures/multi/figure_32.png]]

#+begin_src ipython
print(cov.shape)
cov_mean = np.mean(cov, -1)
cov_sem = np.std(cov, -1, ddof=1) / np.sqrt(cov.shape[-1])
print(cov_mean.shape)
#+end_src

#+RESULTS:
: (3, 4, 4, 4, 10)
: (3, 4, 4, 4)

#+begin_src ipython
confidence = 0.95
alpha = 1 - confidence
t_score = t.ppf(1 - alpha/2, df=cov.shape[-1]-1)

# Calculate confidence interval margin
cov_ci = t_score * cov_sem
#print(cov_mean[0])
#+end_src

#+RESULTS:

#+begin_src ipython
for i in [2, 3]:
    plt.errorbar(i, np.mean(cov[0][2][0][i]), yerr=cov_ci[0][2][0][i], color='k', elinewidth=3, capsize=5, fmt='o')
    plt.errorbar(i+.5, np.mean(cov[0][2][1][i]), yerr=cov_ci[0][2][1][i], color='k', elinewidth=3, capsize=5, fmt='o')

plt.ylabel('Angle (°)')
labels = ['C vs $m_\\text{AB}$ $m_\\text{Choice}$', 'C vs $n_\\text{AB}$ $n_\\text{Choice}$',
          'D vs $m_\\text{AB}$ $m_\\text{Choice}$', 'D vs $n_\\text{AB}$ $n_\\text{Choice}$']

plt.plot([2, 2.5], [75, 75], 'k--')
plt.plot([3, 3.5], [104.5, 104.5], 'k--')
plt.xticks([2, 2.5, 3, 3.5], labels, fontsize=14, rotation=45)
plt.show()
#+end_src

#+RESULTS:
[[./figures/multi/figure_35.png]]

#+begin_src ipython
x = np.linspace(-np.pi, np.pi, 100)
mc = np.cos(x)
ms = np.sin(x)
print(np.cov(ms, ms * ms))
#+end_src

#+RESULTS:
: [[5.00000000e-01 3.93283762e-19]
:  [3.93283762e-19 1.27500000e-01]]

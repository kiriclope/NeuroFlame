#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :var B0="1.0" :results both :exports both :async yes :session dual_flow :kernel torch :tangle ./train_dual.py

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../../../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../../../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Model

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual_flow.yml"
DEVICE = 'cuda:1'

seed = np.random.randint(0, 1e6)
# seed = 971646 # full lr
# seed = 295741 # not bad
seed= 332246 # china
seed = 0
print(seed)
#+end_src

#+RESULTS:
: 0

#+begin_src ipython
model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

* Flow field

#+begin_src ipython
task = 'dpa'

model_state_dict = torch.load('../models/dual/%s_%d.pth' % (task, seed))
model.load_state_dict(model_state_dict)
print(model.DURATION)
#+end_src

#+RESULTS:
: 10.0

#+begin_src ipython
model.LR_TYPE = 'full'

model.GRID_SIZE = 15
model.GRID_RANGE = 20.0
model.GRID_TEST = 0
model.GRID_INPUT = 0

model.N_BATCH = int(model.GRID_SIZE * model.GRID_SIZE)
window = int((model.N_STIM_OFF[model.GRID_INPUT] - model.N_STEADY) / model.N_WINDOW) + 1

ff_input = model.init_ff_input()
print(ff_input.shape, model.N_BATCH)
#+end_src

#+RESULTS:
: grid input
: torch.Size([225, 605, 1000]) 225

#+begin_src ipython
vec1 = model.low_rank.U.T[0]
vec2 = model.low_rank.U.T[1]

# vec2 = vec2 - (vec2 @ vec1) * vec1 / (vec1 @ vec1)

vec1 = vec1 / torch.linalg.norm(vec1)**2
vec2 = vec2 / torch.linalg.norm(vec2)**2

vec = torch.stack((vec1, vec2))
print(vec.shape)
#+end_src

#+RESULTS:
: torch.Size([2, 750])

#+begin_src ipython
rates = model(ff_input, RET_REC=1)
#+end_src

#+RESULTS:

#+begin_src ipython
overlaps = model.rec_input[0, :, :] @ vec.T

ff_overlaps = ff_input[..., model.N_STEADY: , model.slices[0]] @ vec.T
ff_overlaps = ff_overlaps[:, ::10]

# overlaps = rates[:, window:] @ vec.T / model.Na[0]
print(overlaps.shape, ff_overlaps.shape)
#+end_src

#+RESULTS:
: torch.Size([225, 101, 2]) torch.Size([225, 51, 2])

#+begin_src ipython
fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

for i in range(model.GRID_SIZE**2):
        ax[0].plot(ff_overlaps[i, :, 0].cpu().detach().numpy())
        ax[1].plot(overlaps[i, :, 0].cpu().detach().numpy())

ax[0].set_ylabel('$\\eta_{AB}$')
ax[1].set_ylabel('$\kappa_{AB}$')

ax[0].set_xlabel('Step')
ax[1].set_xlabel('Step')

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/fa45d591b72333fb418aa86c56f7e629c90934cc.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

for i in range(model.GRID_SIZE**2):
        ax[0].plot(ff_overlaps[i, :, 1].cpu().detach().numpy())
        ax[1].plot(overlaps[i, :, 1].cpu().detach().numpy())

ax[0].set_ylabel('$\\eta_{GnG}$')
ax[1].set_ylabel('$\kappa_{GnG}$')

ax[0].set_xlabel('Step')
ax[1].set_xlabel('Step')

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/13ff03114ce993fef8c22bd8338fae3512f7919c.png]]

#+begin_src ipython
for i in range(model.GRID_SIZE**2):
    plt.plot(overlaps[i, window:, 0].cpu().detach().numpy(), overlaps[i, window: , 1].cpu().detach().numpy())

plt.xlabel('$\\kappa_{AB}$')
plt.ylabel('$\\kappa_{GNG}$')
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/454f5ac5c5abec0a7c43282ab3b392aad3b3f28b.png]]

#+begin_src ipython
x = overlaps[:, window:, 0].cpu().detach().numpy()
y = overlaps[:, window:, 1].cpu().detach().numpy()

dx = np.gradient(x, axis=1)
dy = np.gradient(y, axis=1)

flow_magnitude = np.sqrt(dx**2 + dy**2)
print(flow_magnitude.shape)
#+end_src

#+RESULTS:
: (225, 80)

#+begin_src ipython
fig, ax = plt.subplots(figsize=[1.5*width, 1.5*height])

# plt.scatter(x, y, c=flow_magnitude, cmap='jet', label='Flow Magnitude')
plt.quiver(x[::2, ::2], y[::2, ::2], dx[::2, ::2], dy[::2, ::2], color='k', angles='xy', scale_units='xy', scale=1, label='Flow field')
# ax.quiver(x, y, dx, dy, color='k', angles='xy', scale_units='xy', scale=1, pivot='tip')

# plt.colorbar()
# plt.clim([0, 1.5])

plt.xlabel('$\\kappa_{AB}$')
plt.ylabel('$\\kappa_{GNG}$')

if model.GRID_TEST==1:
    plt.savefig('../figures/flow/flow_%s_test_C_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==-1:
    plt.savefig('../figures/flow/flow_%s_test_D_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==2:
    plt.savefig('../figures/flow/flow_%s_go_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==-2:
    plt.savefig('../figures/flow/flow_%s_nogo_%d.png' % (task, seed), dpi=300)
else:
    plt.savefig('../figures/flow/flow_%s_%d.png' % (task, seed), dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/64439e0ec9c46c8fbea664b67c01a94d4a0bc1d7.png]]

   #+begin_src ipython
# Assuming `x` and `y` are the positions of trajectories
# Flatten the arrays and find min/max for grid creation
x_min, x_max = np.min(x), np.max(x)
y_min, y_max = np.min(y), np.max(y)

# Create a dense grid
xi, yi = np.meshgrid(np.linspace(x_min, x_max, 200),
                     np.linspace(y_min, y_max, 200))
   #+end_src

#+RESULTS:

   #+begin_src ipython
from scipy.interpolate import griddata

# Flatten your dx and dy along with x and y for interpolation
points = np.vstack((x.flatten(), y.flatten())).T
dx_flat = dx.flatten()
dy_flat = dy.flatten()

# Interpolating on the grid
ui = griddata(points, dx_flat, (xi, yi), method='cubic', fill_value=0)
vi = griddata(points, dy_flat, (xi, yi), method='cubic', fill_value=0)
   #+end_src

#+RESULTS:

   #+begin_src ipython
import matplotlib as mpl
fig, ax = plt.subplots(figsize=[1.5*width, 1.5*height])

speed = np.sqrt(ui**2+vi**2)
print(speed.shape)
# speed /= speed.max()
norm = mpl.colors.Normalize(vmin=0, vmax=0.5, clip=False)

strm = ax.streamplot(xi, yi, ui, vi, density=1.5, arrowsize=1.5, color=speed, cmap='jet', norm=norm)
fig.colorbar(strm.lines)
plt.xlabel('$\\kappa_{AB}$')
plt.ylabel('$\\kappa_{GNG}$')

plt.show()
   #+end_src

#+RESULTS:
:RESULTS:
: (200, 200)
[[./.ob-jupyter/0801fa46855ddd98141071470bf664653562a4ba.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

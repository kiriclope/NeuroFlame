#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_flow :kernel torch :exports results :output-dir ./figures/flow :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../../../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../../../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

#+begin_src ipython :tangle ../src/torch/utils.py
import pickle as pkl

def pkl_save(obj, name, path="."):
      pkl.dump(obj, open(path + "/" + name + ".pkl", "wb"))


def pkl_load(name, path="."):
      return pkl.load(open(path + "/" + name + '.pkl', "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
def add_vlines(model, ax=None):

    if ax is None:
        for i in range(len(model.T_STIM_ON)):
            plt.axvspan(model.T_STIM_ON[i], model.T_STIM_OFF[i], alpha=0.25)
    else:
        for i in range(len(model.T_STIM_ON)):
            ax.axvspan(model.T_STIM_ON[i], model.T_STIM_OFF[i], alpha=0.25)

#+end_src

#+RESULTS:

* Model

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual_flow.yml"
DEVICE = 'cuda:1'

seed = np.random.randint(0, 1e6)
seed = 2
print(seed)


model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=1)

#+end_src

#+RESULTS:
: 2

* Flow field

#+begin_src ipython
task = 'dpa'

model_state_dict = torch.load('../models/dual/%s_%d.pth' % (task, seed))
model.load_state_dict(model_state_dict)
print(seed)
#+end_src

#+RESULTS:
: 2

#+begin_src ipython
model.LR_TYPE ='full'

model.GRID_SIZE = 20
model.GRID_RANGE = .10
model.GRID_TEST = 4
model.GRID_INPUT = 0

model.N_BATCH = int(model.GRID_SIZE * model.GRID_SIZE)
window = int((model.N_STIM_OFF[0] - model.N_STEADY) / model.N_WINDOW) + 1

ff_input = model.init_ff_input()
print(ff_input.shape, model.N_BATCH)
#+end_src

#+RESULTS:
: grid input
: torch.Size([400, 1105, 1000]) 400

#+begin_src ipython
def get_low_rank(model, IF_REC=0):
    if IF_REC:
        vec1 = model.low_rank.V.T[0]
        vec2 = model.low_rank.V.T[1]

        vec2 = vec2 - (vec2 @ vec1) * vec1 / (vec1 @ vec1)

        # vec1 = vec1 / torch.linalg.norm(vec1)
        # vec2 = vec2 / torch.linalg.norm(vec2)

        vec = torch.stack((vec1, vec2))
        overlaps = rates @ vec.T / model.Na[0]
    else:
        vec1 = model.low_rank.U.T[0]
        vec2 = model.low_rank.U.T[1]
        # vec2 = vec2 - (vec2 @ vec1) * vec1 / (vec1 @ vec1)
        vec1 = vec1 / torch.linalg.norm(vec1)**2
        vec2 = vec2 / torch.linalg.norm(vec2)**2

        vec = torch.stack((vec1, vec2))
        overlaps = model.rec_input[0, :, :] @ vec.T

    return overlaps, vec
#+end_src

#+RESULTS:

#+begin_src ipython
rates = model(ff_input, RET_REC=1)
#+end_src

#+RESULTS:

#+begin_src ipython
print(rates.shape)
plt.plot(rates[0].mean(dim=-1).cpu().detach().numpy())
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: torch.Size([400, 201, 750])
[[./figures/flow/figure_10.png]]
:END:

#+begin_src ipython
overlaps, vec = get_low_rank(model, IF_REC=1)

ff_overlaps = ff_input[..., model.N_STEADY: , model.slices[0]] @ vec.T
ff_overlaps = ff_overlaps[:, ::10]

print(overlaps.shape, ff_overlaps.shape)
#+end_src

#+RESULTS:
: torch.Size([400, 201, 2]) torch.Size([400, 101, 2])

#+begin_src ipython
palette = sns.color_palette('husl', model.GRID_SIZE**2)

fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

xtime = np.linspace(0, model.DURATION, overlaps.shape[1])

for i in range(model.GRID_SIZE**2):
        ax[0].plot(xtime, overlaps[i, :, 0].cpu().detach().numpy(), color=palette[i])
        ax[1].plot(xtime, overlaps[i, :, 1].cpu().detach().numpy(), color=palette[i])

ax[0].set_ylabel('$\\kappa_{AB}$')
ax[1].set_ylabel('$\kappa_{GnG}$')

ax[0].set_xlabel('Time (s)')
ax[1].set_xlabel('Time (s)')
# add_vlines(model, ax[0])
# add_vlines(model, ax[1])

plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_12.png]]

#+begin_src ipython
x = overlaps[:, window:, 0].cpu().detach().numpy()
y = overlaps[:, window:, 1].cpu().detach().numpy()

dx = np.gradient(x, axis=1)
dy = np.gradient(y, axis=1)

flow_magnitude = np.sqrt(dx**2 + dy**2)
#+end_src

#+RESULTS:

#+begin_src ipython
from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=10, random_state=42)

x_fp = x[:, -1]
y_fp = y[:, -1]
fp = np.stack((x_fp, y_fp)).T

print(fp.shape)
kmeans.fit(fp)
center = np.array(kmeans.cluster_centers_)

if model.GRID_TEST is None:
    pkl_save(center, 'center_%s' % task, path="/home/leon/")
else:
    center_ = pkl_load('center_%s' % task, path="/home/leon/")
#+end_src

#+RESULTS:
: (400, 2)

#+begin_src ipython
fig, ax = plt.subplots(figsize=[width, width])

for i in range(model.GRID_SIZE**2):
    ax.plot(overlaps[i, window:, 0].cpu().detach().numpy(), overlaps[i, window: , 1].cpu().detach().numpy(), color=palette[i])

for i in range(center.shape[0]):
    ax.plot(center[i][0], center[i][1], 'o', color='k', ms=10)
    if model.GRID_TEST is not None:
        ax.plot(center_[i][0], center_[i][1], 'o', color='b', ms=10)

# ax.set_aspect('equal')
# plt.plot(x_fp, y_fp, 'ko')
ax.set_xlabel('$\\kappa_{AB}$')
ax.set_ylabel('$\\kappa_{GNG}$')

if model.GRID_TEST==4:
    plt.savefig('../figures/flow/traject_%s_test_C_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==9:
    plt.savefig('../figures/flow/traject_%s_test_D_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==2:
    plt.savefig('../figures/flow/traject_%s_go_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==-2:
    plt.savefig('../figures/flow/traject_%s_nogo_%d.png' % (task, seed), dpi=300)
else:
    plt.savefig('../figures/flow/traject_%s_%d.png' % (task, seed), dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_15.png]]

#+begin_src ipython
fig, ax = plt.subplots(figsize=[width, width])

# plt.scatter(x, y, c=flow_magnitude, cmap='jet', label='Flow Magnitude')
plt.quiver(x[::2, ::2], y[::2, ::2], dx[::2, ::2], dy[::2, ::2], angles='xy', scale_units='xy', scale=1, color=palette)
# ax.quiver(x, y, dx, dy, angles='xy', scale_units='xy', scale=1)
# ax.set_aspect('equal')

# plt.colorbar()
# plt.clim([0, 1.5])

plt.xlabel('$\\kappa_{AB}$')
plt.ylabel('$\\kappa_{GNG}$')

if model.GRID_TEST==4:
    plt.savefig('../figures/flow/flow_%s_test_C_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==9:
    plt.savefig('../figures/flow/flow_%s_test_D_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==2:
    plt.savefig('../figures/flow/flow_%s_go_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==-2:
    plt.savefig('../figures/flow/flow_%s_nogo_%d.png' % (task, seed), dpi=300)
else:
    plt.savefig('../figures/flow/flow_%s_%d.png' % (task, seed), dpi=300)

plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_16.png]]

#+begin_src ipython
# Assuming `x` and `y` are the positions of trajectories
# Flatten the arrays and find min/max for grid creation
x_min, x_max = np.min(x), np.max(x)
y_min, y_max = np.min(y), np.max(y)

# Create a dense grid
xi, yi = np.meshgrid(np.linspace(x_min, x_max, 200),
                     np.linspace(y_min, y_max, 200))
   #+end_src

#+RESULTS:

#+begin_src ipython
from scipy.interpolate import griddata

# Flatten your dx and dy along with x and y for interpolation
points = np.vstack((x.flatten(), y.flatten())).T
dx_flat = dx.flatten()
dy_flat = dy.flatten()

# Interpolating on the grid
ui = griddata(points, dx_flat, (xi, yi), method='cubic', fill_value=0)
vi = griddata(points, dy_flat, (xi, yi), method='cubic', fill_value=0)
   #+end_src

#+RESULTS:

#+begin_src ipython
import matplotlib as mpl
fig, ax = plt.subplots(figsize=[1.2*width, width])

speed = np.sqrt(ui**2+vi**2)
print(speed.shape)
# speed /= speed.max()

norm = mpl.colors.Normalize(vmin=0, vmax=1, clip=False)

strm = ax.streamplot(xi, yi, ui, vi, density=1.5, arrowsize=1.5, color=speed, cmap='jet', norm=norm)
fig.colorbar(strm.lines)
# ax.set_aspect('equal')
plt.xlabel('$\\kappa_{AB}$')
plt.ylabel('$\\kappa_{GNG}$')

if model.GRID_TEST==4:
    plt.savefig('../figures/flow/field_%s_test_C_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==9:
    plt.savefig('../figures/flow/field_%s_test_D_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==2:
    plt.savefig('../figures/flow/field_%s_go_%d.png' % (task, seed), dpi=300)
elif model.GRID_TEST==-2:
    plt.savefig('../figures/flow/field_%s_nogo_%d.png' % (task, seed), dpi=300)
else:
    plt.savefig('../figures/flow/field_%s_%d.png' % (task, seed), dpi=300)

plt.show()
   #+end_src

#+RESULTS:
:RESULTS:
: (200, 200)
[[./figures/flow/figure_19.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:

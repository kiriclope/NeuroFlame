#+Startup: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_flow :kernel torch :exports results :output-dir ./figures/flow :file (lc/org-babel-tangle-figure-filename)

* TODO Urgent
** Model
 run multiple models see if there is a push down of the wells or diff strategies
 see how go affects models try to understand how it impairs pairing.
 plot task trajectories (DPA, GO, NOGO)

** Data
 try wells with sample LD and CHOICE if it works (push down that s gold)
 if not try to make dPCA better and get day by day wells
 if not go back to the go no go axis
 and plot trajectories

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../../../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

#+RESULTS:

: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
import gc
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../../../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

#+begin_src ipython :tangle ../src/torch/utils.py
import pickle as pkl

def pkl_save(obj, name, path="."):
      pkl.dump(obj, open(path + "/" + name + ".pkl", "wb"))


def pkl_load(name, path="."):
      return pkl.load(open(path + "/" + name + '.pkl', "rb"))

#+end_src

#+RESULTS:

#+begin_src ipython
def add_vlines(model, ax=None):

    if ax is None:
        for i in range(len(model.T_STIM_ON)):
            plt.axvspan(model.T_STIM_ON[i], model.T_STIM_OFF[i], alpha=0.25)
    else:
        for i in range(len(model.T_STIM_ON)):
            ax.axvspan(model.T_STIM_ON[i], model.T_STIM_OFF[i], alpha=0.25)

#+end_src

#+RESULTS:

* Utils

#+begin_src ipython
def init_model(task, seed, **kwargs):
    model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=1, **kwargs)
    model_state_dict = torch.load('../models/dual/%s_%d.pth' % (task, seed))
    model.load_state_dict(model_state_dict)
    # print('task', task, 'seed', seed)

    return model
#+end_src

#+RESULTS:

#+begin_src ipython
def del_tensor(tensor):
    DEVICE = tensor.device
    del tensor
    gc.collect()

    torch.cuda.empty_cache()
    torch.cuda.device(DEVICE)
    torch.cuda.synchronize()
    torch.cuda.reset_accumulated_memory_stats(DEVICE)
#+end_src

#+RESULTS:

#+begin_src ipython
def run_grid(GRID_RANGE, seed, task, **kwargs):

    GRID_LIST = [[-GRID_RANGE, 0], [0, GRID_RANGE]]

    rates_grid = []
    for GRID_X_RANGE in GRID_LIST:
        for GRID_Y_RANGE in GRID_LIST:
            model = init_model(task, seed, **kwargs)

            model.GRID_X_RANGE = GRID_X_RANGE
            model.GRID_Y_RANGE = GRID_Y_RANGE

            model.N_BATCH = int(model.GRID_SIZE * model.GRID_SIZE)

            ff_input = model.init_ff_input()
            # print(ff_input.shape, model.N_BATCH)

            rates = model(ff_input, RET_REC=0).cpu().detach().numpy()
            # print('rates', rates.shape)
            rates_grid.append(rates)

            del_tensor(ff_input)
            del_tensor(model)

    return np.vstack(rates_grid)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_low_rank(rates, model, IF_REC=0):
    if IF_REC==0:
        vec1 = model.low_rank.V.T[0]
        vec2 = model.low_rank.V.T[1]

        vec2 = vec2 - (vec2 @ vec1) * vec1 / (vec1 @ vec1)

        # vec1 = vec1 / torch.linalg.norm(vec1)
        # vec2 = vec2 / torch.linalg.norm(vec2)

        vec = torch.stack((vec1, vec2))
        overlaps = rates @ vec.T / model.Na[0]
    else:
        vec1 = model.low_rank.U.T[0]
        vec2 = model.low_rank.U.T[1]
        # vec2 = vec2 - (vec2 @ vec1) * vec1 / (vec1 @ vec1)
        vec1 = vec1 / torch.linalg.norm(vec1)**2
        vec2 = vec2 / torch.linalg.norm(vec2)**2

        vec = torch.stack((vec1, vec2))
        overlaps = model.rec_input[0, :, :] @ vec.T

    return overlaps.cpu().detach().numpy(), vec.cpu().detach().numpy()
#+end_src

#+RESULTS:

#+begin_src ipython
import numpy as np

def get_bissec(point1, point2, length=100):
    # Calculate the directional vector of the original line
    direction = point2 - point1
    print(direction.shape)
    # Midpoint of the line segment
    midpoint = (point1 + point2) / 2

    # Direction of the orthogonal line (perpendicular vector)
    orthogonal_direction = np.array([-direction[1], direction[0]])

    # Normalize the orthogonal direction
    orthogonal_direction = orthogonal_direction / np.linalg.norm(orthogonal_direction)

    # Calculate the endpoints of the orthogonal line segment
    endpoint1 = midpoint - (length / 2) * orthogonal_direction
    endpoint2 = midpoint + (length / 2) * orthogonal_direction

    return np.array([endpoint1, endpoint2])
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_spaghetti(overlaps, ax, window, IF_FP=0, step=1, color=None):

    palette = sns.color_palette('husl', overlaps.shape[0])

    for i in range(overlaps.shape[0]):
        x = overlaps[i, window:, 0]
        y = overlaps[i, window:, 1]

        ax.plot(x[::step], y[::step], color=palette[i], alpha=.25)
        # ax.plot(x[::step], y[::step], color='w', alpha=.25)

        # for j in range(0, len(x)-1, 10):
        #     plt.annotate('', xy=(x[j+1], y[j+1]), xytext=(x[j], y[j]),
        #                  arrowprops=dict(arrowstyle='->', lw=1.5))

    if IF_FP:
        center, center_ = get_fp(overlaps, window, task, GRID_TEST=0)

        for i in range(center.shape[0]):
            ax.plot(center[i][0], center[i][1], 'o', color='k', ms=10)

        # bissec = get_bissec(center[0], center[1], length=10)
        # ax.plot(bissec[:, 0], bissec[:, 1], 'w--')

    # if IF_FP:
    #     ax.plot(center_[i][0], center_[i][1], 'o', color='b', ms=10)

    # ax.plot([-10, 10], [-10, 10], '--k', alpha=.5)
    # ax.plot([-10, 10], [10, -10], '--k', alpha=.5)
    # ax.set_aspect('equal')

    ax.set_xlabel('A/B Overlap (Hz)')
    ax.set_ylabel('Choice Overlap (Hz)')
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_ring(overlaps, ax, window, IF_FP=0):
    palette = sns.color_palette('husl', overlaps.shape[0])
    # for i in range(overlaps.shape[0]):
    #     ax.plot(overlaps[i, window:, 0], overlaps[i, window: , 1], color=palette[i])

    center, center_ = get_fp(overlaps, window, task, GRID_TEST=0)

    for i in range(center.shape[0]):
        ax.plot(center[i][0], center[i][1], 'o', color='k', ms=10)
        # if IF_FP:
        #     ax.plot(center_[i][0], center_[i][1], 'o', color='b', ms=10)

    ax.plot([-10, 10], [-10, 10], '--k', alpha=.5)
    ax.plot([-10, 10], [10, -10], '--k', alpha=.5)
    # ax.set_aspect('equal')

    ax.set_xlabel('A/B Overlap (Hz)')
    ax.set_ylabel('Choice Overlap')
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_quiver(overlaps, ax, window, step=2, IF_FP=0, scale=1, headwidth=6, headlength=10, headaxislength=9, width=0):
    palette = sns.color_palette('husl', overlaps.shape[0])
    x = overlaps[:, window:, 0]
    y = overlaps[:, window:, 1]

    dx = np.gradient(x, axis=1)
    dy = np.gradient(y, axis=1)

    # flow_magnitude = np.sqrt(dx**2 + dy**2)

    # ax.quiver(x[::step, ::step], y[::step, ::step], dx[::step, ::step], dy[::step, ::step], angles='xy', scale_units='xy', scale=scale, color='k',
    # headwidth, headlength, headaxislength, width)
    ax.quiver(x[::step, ::step], y[::step, ::step], dx[::step, ::step], dy[::step, ::step], color='k', pivot='mid', units='inches')
    # ax.plot([-10, 10], [10, -10], '--k', alpha=.5)

    # ax.plot([-10, 10], [-10, 10], '--k', alpha=.5)

    # plt.colorbar()
    # plt.clim([0, 1.5])

    ax.set_xlabel('$\\kappa_{AB}$')
    ax.set_ylabel('$\\kappa_{GNG}$')
#+end_src

#+RESULTS:

#+begin_src ipython
from scipy.interpolate import griddata

def create_mesh(x, y, size=100):
    x_min, x_max = np.min((x, y)) - 1, np.max((x, y)) + 1
    y_min, y_max = np.min((x, y)) - 1, np.max((x, y)) + 1

    dx = np.gradient(x, axis=1)
    dy = np.gradient(y, axis=1)

    # Create a dense grid
    xi, yi = np.meshgrid(np.linspace(x_min, x_max, size),
                         np.linspace(y_min, y_max, size))

    # Flatten your dx and dy along with x and y for interpolation
    points = np.vstack((x.flatten(), y.flatten())).T
    dx_flat = dx.flatten()
    dy_flat = dy.flatten()

    # Interpolating on the grid
    ui = griddata(points, dx_flat, (xi, yi), method='cubic', fill_value=0)
    vi = griddata(points, dy_flat, (xi, yi), method='cubic', fill_value=0)

    return xi, yi, ui, vi
#+end_src

#+RESULTS:

#+begin_src ipython
import matplotlib as mpl

def plot_field(overlaps, ax, window, IF_FP=0, task=0):
    x = overlaps[:, window:, 0]
    y = overlaps[:, window:, 1]

    xi, yi, ui, vi = create_mesh(x, y, size=200)
    speed = np.sqrt(ui**2+vi**2)
    # speed = (speed - np.mean(speed)) / (np.std(speed) + 1e-6)

    center, center_ = get_fp(overlaps, window, task, GRID_TEST=0)
    ax.plot(center.T[0], center.T[1], 'o', color='k', ms=14)

    norm = mpl.colors.Normalize(vmin=0, vmax=1, clip=False)

    # strm = ax.streamplot(xi, yi, ui, vi, density=1.5, arrowsize=1.5, color=speed, cmap='jet', norm=norm)
    heatmap = ax.pcolormesh(xi, yi, speed, cmap='jet', shading='gouraud', norm=norm)
    # heatmap = ax.imshow(speed, extent=(yi.min(), yi.max(), yi.min(), yi.max()), cmap='jet', norm=norm, origin='lower', aspect='auto')

    ax.set_aspect('equal')
    # ax.set_xlim([yi.min(), yi.max()])
    # ax.set_ylim([yi.min(), yi.max()])

    cbar = plt.colorbar(heatmap, ax=ax)
    cbar.set_label('Speed')

    ax.set_xlabel('A/B Overlap')
    ax.set_ylabel('Choice Overlap')
#+end_src

#+RESULTS:

#+begin_src ipython
def save_fig(figname, GRID_TEST):

    if GRID_TEST==4:
        plt.savefig('../figures/flow/%s_test_C_%d.png' % (figname, seed), dpi=300)
    elif GRID_TEST==9:
        plt.savefig('../figures/flow/%s_test_D_%d.png' % (figname, seed), dpi=300)
    elif GRID_TEST==1:
        plt.savefig('../figures/flow/%s_go_%d.png' % (figname, seed), dpi=300)
    elif GRID_TEST==6:
        plt.savefig('../figures/flow/%s_nogo_%d.png' % (figname, seed), dpi=300)
    elif GRID_TEST==0:
        plt.savefig('../figures/flow/%s_sample_A_%d.png' % (figname, seed), dpi=300)
    elif GRID_TEST==5:
        plt.savefig('../figures/flow/%s_sample_B_%d.png' % (figname, seed), dpi=300)
    else:
        plt.savefig('../figures/flow/%s_%d.png' % (figname, seed), dpi=300)

   #+end_src

#+RESULTS:

* Model

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
kwargs = {
    'DURATION': 10.0,
    'TASK': 'dual_flow',
    'T_STIM_ON': [1.0, 2.0],
    'T_STIM_OFF': [2.0, 300.0],
    'I0': [1.0, 1.0],
    'GRID_SIZE': 15,
    'GRID_TEST': None,
    'GRID_INPUT': 0,
}
#+end_src

#+RESULTS:

#+begin_src ipython
tasks = ['dpa']
tasks = ['dpa', 'dual_naive', 'dual_train']
seed = 31 # 10
GRID_RANGE = .4
#+end_src

#+RESULTS:

* Flow

#+begin_src ipython
rates = []
for task in tasks:
        rates.append(run_grid(GRID_RANGE, seed, task, **kwargs))
rates = np.array(rates)
#+end_src


#+RESULTS:

#+begin_src ipython
rates_tensor = torch.tensor(rates).to(DEVICE)
print(rates_tensor.shape)
#+end_src

#+RESULTS:
: torch.Size([3, 900, 101, 750])

#+begin_src ipython
model = init_model(task, seed, **kwargs)
overlaps, vec = get_low_rank(rates_tensor, model, IF_REC=0)
print(overlaps.shape)

window = int((model.N_STIM_OFF[0] - model.N_STEADY) / model.N_WINDOW) + 3

# ff_overlaps = ff_input[..., model.N_STEADY: , model.slices[0]] @ vec.T
# ff_overlaps = ff_overlaps[:, ::10]
# print(overlaps.shape, ff_overlaps.shape)
#+end_src

#+RESULTS:
: (3, 900, 101, 2)

* Plots

#+begin_src ipython
palette = sns.color_palette('husl', overlaps.shape[1])
window = int((model.N_STIM_OFF[0] - model.N_STEADY) / model.N_WINDOW) + 3

fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

xtime = np.linspace(0, model.DURATION, overlaps.shape[2])
for i in range(overlaps.shape[1]):
       ax[0].plot(xtime, overlaps[0, i, :, 0], color=palette[i])
       ax[1].plot(xtime, overlaps[0, i, :, 1], color=palette[i])

ax[0].set_ylabel('$\\kappa_{AB}$')
ax[1].set_ylabel('$\kappa_{GnG}$')

ax[0].set_xlabel('Time (s)')
ax[1].set_xlabel('Time (s)')

plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_22.png]]

#+begin_src ipython
from sklearn.cluster import KMeans
def get_fp(overlaps, window, task, GRID_TEST=0, x=None, y=None):
    kmeans = KMeans(n_clusters=5, random_state=None)

    if x is None:
        x = overlaps[:, window:, 0]
        y = overlaps[:, window:, 1]

    x_fp = x[:, -1]
    y_fp = y[:, -1]
    fp = np.stack((x_fp, y_fp)).T

    # print(fp.shape)
    kmeans.fit(fp)
    center = np.array(kmeans.cluster_centers_)
    center_ = []

    if GRID_TEST==0:
        pkl_save(center, 'center_%s' % task, path="/home/leon/")
    else:
        center_ = pkl_load('center_%s' % task, path="/home/leon/")

    return center, center_
#+end_src

#+RESULTS:

** traj

#+begin_src ipython

# fig, ax = plt.subplots(1, 3, figsize=[3*width, width])
# for i in range(overlaps.shape[0]):
#     plot_spaghetti(overlaps[i], ax[i], window, IF_FP=1)
# save_fig('traj', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])
# for i in range(overlaps.shape[0]):
plot_spaghetti(overlaps[0], ax, window, IF_FP=1)
save_fig('traj', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_25.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])
# for i in range(overlaps.shape[0]):
plot_spaghetti(overlaps[0], ax, window, IF_FP=1)
save_fig('traj_dpa', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_26.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])
# for i in range(overlaps.shape[0]):
plot_spaghetti(overlaps[1], ax, window, IF_FP=1)
save_fig('traj_dual_naive', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_27.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])
# for i in range(overlaps.shape[0]):
plot_spaghetti(overlaps[-1], ax, window, IF_FP=1)
save_fig('traj_dual_train', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_28.png]]

** field

#+begin_src ipython
# fig, ax = plt.subplots(1, 3, figsize=[3*width, width])
# for i in range(overlaps.shape[0]):
# plot_quiver(overlaps[i], ax[i], window, IF_FP=1)
# save_fig('quiver', GRID_TEST=model.GRID_TEST)
# plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])

plot_field(overlaps[0], ax, window, IF_FP=1, task=0)

save_fig('field_dpa', GRID_TEST=model.GRID_TEST)
plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_30.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])

plot_field(overlaps[1], ax, window, IF_FP=1, task=1)

save_fig('field_dual_naive', GRID_TEST=model.GRID_TEST)
plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_31.png]]

#+begin_src ipython
fig, ax = plt.subplots(1, 1, figsize=[width, width])

plot_field(overlaps[-1], ax, window, IF_FP=1, task=2)
# plot_spaghetti(overlaps[0], ax, window, IF_FP=0, step=100, color=1)
# plot_quiver(overlaps[0], ax, window, IF_FP=1, step=5, scale=1)

# center, center_ = get_fp(overlaps[2], window, task, GRID_TEST=0)
# ax.plot(center.T[0], center.T[1], 'o', color='k', ms=14)

save_fig('field_dual_expert', GRID_TEST=model.GRID_TEST)
plt.show()
#+end_src

#+RESULTS:
[[./figures/flow/figure_32.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

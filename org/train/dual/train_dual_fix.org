#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :var B0="1.0" :results both :exports both :async yes :session dual_fix :kernel torch :tangle ./train.py

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run ../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'

REPO_ROOT = "/home/leon/models/NeuroFlame"
pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../')

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:

* Helpers
** Other

#+begin_src ipython
def angle_AB(A, B):
      A_norm = A / (np.linalg.norm(A) + 1e-5)
      B_norm = B / (np.linalg.norm(B) + 1e-5)

      return int(np.arccos(A_norm @ B_norm) * 180 / np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:
          v = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u) % (2.0 * np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_idx(model, rank=2):
      ksi = torch.hstack((model.low_rank.U, model.low_rank.V)).T
      ksi = ksi[:, :model.Na[0]]

      try:
            readout = model.low_rank.linear.weight.data
            ksi = torch.vstack((ksi, readout))
      except:
            pass

      ksi = ksi.cpu().detach().numpy()
      theta = get_theta(ksi[0], ksi[rank])

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
def get_overlap(model, rates):
      ksi = model.odors.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
#+end_src

#+RESULTS:

#+begin_src ipython
import scipy.stats as stats

def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)
      ci = smooth.std(axis=0, ddof=1) * 1.96

      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

** plots

#+begin_src ipython
def add_vlines(ax=None, mouse=""):
    t_BL = [0, 1]
    t_STIM = [1 , 2]
    t_ED = [2, 3]
    t_DIST = [3 , 4]
    t_MD = [4 , 5]
    t_CUE = [5 , 5.5]
    t_RWD = [5.5, 6.0]
    t_LD = [6.0 , 7.0]
    t_TEST = [7.0, 8.0]
    t_RWD2 = [11 , 12]

    time_periods = [t_STIM, t_DIST, t_TEST, t_CUE]
    colors = ["b", "b", "b", "g"]

    if ax is None:
        for period, color in zip(time_periods, colors):
            plt.axvspan(period[0], period[1], alpha=0.1, color=color)
    else:
        for period, color in zip(time_periods, colors):
            ax.axvspan(period[0], period[1], alpha=0.1, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def plot_rates_selec(rates, idx, thresh=0.5, figname='fig.svg'):
        ordered = rates[..., idx]
        fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
        r_max = thresh * np.max(rates[0])

        ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[0].set_ylabel('Neuron #')
        ax[0].set_xlabel('Step')

        ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
        ax[1].set_ylabel('Pref. Location (°)')
        ax[1].set_xlabel('Step')
        plt.savefig(figname, dpi=300)
        plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlap(readout, labels=['A', 'B'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

      time = np.linspace(0, 8, readout.shape[1])
      size = readout.shape[0] // 2
      print(readout.shape[0], size)

      for i in range(readout.shape[-1]):
            ax[i].plot(time, readout[:size, :, i].T, ls='-', label=labels[0])
            ax[i].plot(time, readout[size:, :, i].T, ls='--', label=labels[0])

            add_vlines(ax[i])
            ax[i].set_xlabel('Time (s)')

      ax[0].set_ylabel('Sample Overlap (Hz)')
      ax[1].set_ylabel('Dist Overlap (Hz)')
      ax[2].set_ylabel('Readout (Hz)')

      # plt.legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_m0_m1_phi(rates, figname='fig.svg'):

      m0, m1, phi = decode_bump(rates, axis=-1)
      fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

      time = np.linspace(0, 20, m0.T.shape[0])

      ax[0].plot(time, m0[:2].T)
      ax[0].plot(time, m0[2:].T, '--')
      #ax[0].set_ylim([0, 360])
      #ax[0].set_yticks([0, 90, 180, 270, 360])
      ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
      ax[0].set_ylabel('Activity (Hz)')
      ax[0].set_xlabel('Time (s)')

      ax[1].plot(time, m1[:2].T)
      ax[1].plot(time, m1[2:].T, '--')
      # ax[1].set_ylim([0, 360])
      # ax[1].set_yticks([0, 90, 180, 270, 360])
      ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
      ax[1].set_ylabel('Bump Amplitude (Hz)')
      ax[1].set_xlabel('Time (s)')


      ax[2].plot(time, phi[:2].T * 180 / np.pi)
      ax[2].plot(time, phi[2:].T * 180 / np.pi, '--')
      ax[2].set_ylim([0, 360])
      ax[2].set_yticks([0, 90, 180, 270, 360])
      ax[2].set_ylabel('Bump Center (°)')
      ax[2].set_xlabel('Time (s)')

      plt.savefig(figname, dpi=300)
      plt.show()
    #+end_src

#+RESULTS:

#+begin_src ipython
from matplotlib.patches import Circle

def plot_fix_points(rates, ax, title=''):
    m0, m1, phi = decode_bump(rates[:, -1], axis=-1)

    x = np.cos(phi)
    y = np.sin(phi)

    # rad = np.max(np.sqrt(x**2+y**2))

    ax.plot(x, y, 'o', ms=15)
    circle = Circle((0., 0.), 1, fill=False, edgecolor='k')
    ax.add_patch(circle)

    # Set the aspect of the plot to equal to make the circle circular
    ax.set_aspect('equal')
    ax.set_title(title)
    # plt.savefig('fp_dpa.svg', dpi=300)
    # plt.show()
#+end_src

#+RESULTS:

* Model

#+begin_src ipython
import os

model_directory = "./models/dual/"
dual_train_files = [f for f in os.listdir(model_directory) if f.startswith("dual_train_") and f.endswith(".pth")]
dpa_files = [f for f in os.listdir(model_directory) if f.startswith("dpa_") and f.endswith(".pth")]
dual_naive_files = [f for f in os.listdir(model_directory) if f.startswith("dual_naive_") and f.endswith(".pth")]
  #+end_src

#+RESULTS:

#+begin_src ipython
import re
# print(dpa_files)
seeds = [int(re.search(r'_(\d+)\.pth$', name).group(1)) for name in dpa_files]
print(seeds)
#+end_src

#+RESULTS:
: ['dpa_naive_853062.pth', 'dpa_849760.pth', 'dpa_naive_231526.pth', 'dpa_naive_291378.pth', 'dpa_500816.pth', 'dpa_258855.pth', 'dpa_756582.pth', 'dpa_231526.pth', 'dpa_62401.pth', 'dpa_naive_849760.pth', 'dpa_naive_62401.pth', 'dpa_853062.pth', 'dpa_naive_756582.pth', 'dpa_naive_258855.pth', 'dpa_naive_500816.pth', 'dpa_291378.pth']
: [853062, 849760, 231526, 291378, 500816, 258855, 756582, 231526, 62401, 849760, 62401, 853062, 756582, 258855, 500816, 291378]

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:1'

model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython
DURATION=20
model.DURATION = DURATION
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
def get_input(model):
    model.N_BATCH = 1

    model.I0[0] = 1.0
    model.I0[1] = 0
    model.I0[2] = 0
    model.I0[3] = 0
    model.I0[4] = 0

    A_pair = model.init_ff_input()

    model.I0[0] = -1.0
    model.I0[1] = 0
    model.I0[2] = 0
    model.I0[3] = 0
    model.I0[4] = 0

    B_pair = model.init_ff_input()

    ff_input = torch.cat((A_pair, B_pair))

    return ff_input
#+end_src

#+RESULTS:

#+begin_src ipython
def get_fix_points(model, task, seed):
    model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, N_BATCH=1, seed=seed)
    model_state_dict = torch.load('models/dual/%s_%d.pth' % (task, seed))
    model.load_state_dict(model_state_dict)

    DURATION=20
    model.DURATION = DURATION
    model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW

    ff_input = get_input(model)
    rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
    idx = get_idx(model, rank=1)
    return rates[..., idx]
#+end_src

#+RESULTS:

#+begin_src ipython
dpa, dual_naive, dual_train = [], [], []
for seed in seeds:
    dpa.append(get_fix_points(model, 'dpa', seed))
    dual_naive.append(get_fix_points(model, 'dual_naive', seed))
    dual_train.append(get_fix_points(model, 'dual_train', seed))
#+end_src

#+RESULTS:

#+begin_src ipython
print(np.array(dpa).shape)
#+end_src

#+RESULTS:
: (16, 20, 201, 750)

#+begin_src ipython
fig, ax = plt.subplots(1, 3, figsize=[3*height, height])

for i, seed in enumerate(seeds):
    plot_fix_points(dpa[i], ax[0], 'DPA')
    plot_fix_points(dual_naive[i], ax[1], 'Dual Naive')
    plot_fix_points(dual_train[i], ax[2], 'Dual Expert')
#+end_src

#+RESULTS:
[[./.ob-jupyter/bfe61c1c47a0b65e1b197789d97ad8e6e6a82190.png]]

 #+begin_src ipython
plot_m0_m1_phi(dpa[8])
#+end_src

#+RESULTS:
[[./.ob-jupyter/1be95d1ad2591f262009407cfda42bea360c8c8a.png]]

#+begin_src ipython
model.J_STP
#+end_src

#+RESULTS:
: b52d017e-6861-4725-b62e-543b1d712080

#+Startup: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session train_dual_multi :kernel torch :exports results :output-dir ./figures/multi :file (lc/org-babel-tangle-figure-filename)

* Notebook Settings

#+begin_src ipython :tangle no
%load_ext autoreload
%autoreload 2
%reload_ext autoreload
%run ../../../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython :tangle ./run_dual_multi.py
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

REPO_ROOT = "/home/leon/models/NeuroFlame"

import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

pal = sns.color_palette("tab10")
DEVICE = 'cuda:0'
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ./run_dual_multi.py
import sys
sys.path.insert(0, '../../../')

from notebooks.setup import *

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Train

#+begin_src ipython :tangle ./run_dual_multi.py
sys.path.insert(0, '../../../src')
# import src.train
from src.train.dual.train_dpa import train_dpa
from src.train.dual.train_gng import train_gng
from src.train.dual.train_dual import train_dual
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ./run_dual_multi.py
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:0'

# seed = np.random.randint(0, 1e6)
#+end_src

#+RESULTS:

#+begin_src ipython :tangle ./run_dual_multi.py

#+end_src

#+RESULTS:

#+begin_src ipython :tangle ./run_dual_multi.py
for ite in range(0, 1):
    seed = ite
    print('model', seed)
    train_dpa(REPO_ROOT, conf_name, seed, DEVICE)
    train_gng(REPO_ROOT, conf_name, seed, DEVICE)
    train_dual(REPO_ROOT, conf_name, seed, DEVICE)
#+end_src

#+RESULTS:
: model 0
: ff_input torch.Size([1024, 605, 1000]) labels torch.Size([1024, 2, 60])
: training DPA
:   7% 1/15 [02:03<28:42, 123.02s/it]

#+begin_src ipython :tangle ./run_dual_multi.py

#+end_src

#+RESULTS:
: 4f63c8c5-7750-49ef-b125-b7ced0f615e2

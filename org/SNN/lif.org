#+STARTUP: fold
#+TITLE: SNN with pytorch
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session lif :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import torch
  import gc
  import pandas as pd
  from time import perf_counter

  from src.lif import LIFNetwork
  from src.plot_utils import plot_con
  from src.decode import decode_bump
  from src.utils import clear_cache
#+end_src

#+RESULTS:
* Helpers

#+begin_src ipython
  def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

* RNN with torch
** Single Neuron

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"

  start = perf_counter()

  model = LIFNetwork('config_2pop.yml', REPO_ROOT, VERBOSE=0, DEVICE='cuda', LIVE_FF_UPDATE=0, N_NEURON=100)
  model.Wab_T = torch.zeros((model.N_NEURON, model.N_NEURON),  device=model.device)
  model.Ka = torch.ones(2)
#+end_src

#+RESULTS:

#+begin_src ipython
  Je0_list = np.linspace(0, 5, 100)
  
  ff_inputs = []
  for i in Je0_list:

      model.Ja0[:, 0] = i # here we set the ff input to E to value i in 0 .. 10
      model.Ja0[:, 1] = i # here we set the ff input to E to value i in 0 .. 10
      model.Ja0.mul_((model.V_THRESH - model.V_REST))
      model.VAR_FF[:, 0] = np.sqrt(i) # / (model.V_THRESH - model.V_REST))
      model.VAR_FF[:, 1] = np.sqrt(i) # / (model.V_THRESH - model.V_REST))
      ff_inputs.append(model.init_ff_input())

  ff_inputs = torch.vstack(ff_inputs)  
#+end_src

#+RESULTS:

#+begin_src ipython
  rates, volts, spikes = model(ff_input=ff_inputs)

  rates = rates.cpu().numpy()
  volts = volts.cpu().numpy()
  spikes = spikes.cpu().numpy()

  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  print('rates', rates.shape)
#+end_src

#+RESULTS:
: Elapsed (with compilation) = 0h 0m 2s
: rates (100, 101, 100)

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

  ax[0].plot(Je0_list, rates[:, -1].mean(-1))
  ax[0].set_xlabel('Input')
  ax[0].set_ylabel('Rates (Hz)')

  ax[1].plot(Je0_list, volts[:, -1].mean(-1))
  ax[1].set_xlabel('Input')
  ax[1].set_ylabel('Volts (mV)')

  ax[2].plot(Je0_list, volts.std(1).mean(-1))
  ax[2].set_xlabel('Input')
  ax[2].set_ylabel('std(Volts) (mV)')
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6efd294d9589cf5837036f7ed20476c78c50af69.png]]

#+begin_src ipython
  print(spikes.shape)
#+end_src

#+RESULTS:
: (100, 101, 100)

#+begin_src ipython
  plt.plot(volts[10, :, 0], alpha=.5)
  plt.plot(volts[-1, :, 0], alpha=.5)
  plt.ylabel('Volt (mV)')
  # plt.ylim([0.4, .5])
  # plt.plot(volts[50, :, 0], alpha=.5)
  # plt.plot(volts[-1, :, 0], alpha=.5)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/b4b95228e3b07369c72cce71683b8505b36afaad.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Single Trial
*** Model

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroFlame"

  start = perf_counter()

  model = LIFNetwork('config_2pop.yml', REPO_ROOT, VERBOSE=1, DEVICE='cuda', LIVE_FF_UPDATE=0)

  rates, volts, spikes = model(RET_FF=1)

  rates = rates.cpu().numpy()
  volts = volts.cpu().numpy()
  spikes = spikes.cpu().numpy()
  
  end = perf_counter()
  print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

  Ne = model.Na[0].detach().cpu().numpy()
  N = model.N_NEURON

  print('rates', rates.shape)
#+end_src

#+RESULTS:
#+begin_example
  Na tensor([5000, 5000], device='cuda:0', dtype=torch.int32) Ka tensor([500., 500.], device='cuda:0') csumNa tensor([    0,  5000, 10000], device='cuda:0')
  Jab [1.0, -1.5, 1, -1]
  Ja0 [2.0, 1.0]
  Generating ff input
  times (s) 0.0 rates (Hz) [13.49, 12.48]
  times (s) 0.09 rates (Hz) [13.5, 12.3]
  times (s) 0.18 rates (Hz) [13.75, 12.45]
  times (s) 0.27 rates (Hz) [13.68, 12.3]
  times (s) 0.36 rates (Hz) [13.59, 12.44]
  times (s) 0.45 rates (Hz) [13.62, 12.29]
  times (s) 0.54 rates (Hz) [13.46, 12.45]
  times (s) 0.63 rates (Hz) [13.69, 12.3]
  times (s) 0.72 rates (Hz) [13.77, 12.42]
  times (s) 0.81 rates (Hz) [13.58, 12.3]
  times (s) 0.9 rates (Hz) [13.45, 12.43]
  times (s) 0.99 rates (Hz) [13.68, 12.32]
  times (s) 1.08 rates (Hz) [13.65, 12.42]
  times (s) 1.17 rates (Hz) [13.68, 12.31]
  times (s) 1.26 rates (Hz) [13.65, 12.42]
  times (s) 1.35 rates (Hz) [13.48, 12.31]
  times (s) 1.44 rates (Hz) [13.56, 12.44]
  times (s) 1.53 rates (Hz) [13.81, 12.31]
  times (s) 1.62 rates (Hz) [13.63, 12.42]
  times (s) 1.71 rates (Hz) [13.53, 12.3]
  times (s) 1.8 rates (Hz) [13.57, 12.45]
  times (s) 1.89 rates (Hz) [13.62, 12.31]
  times (s) 1.98 rates (Hz) [13.64, 12.43]
  times (s) 2.07 rates (Hz) [13.8, 12.3]
  times (s) 2.16 rates (Hz) [13.46, 12.42]
  times (s) 2.25 rates (Hz) [13.49, 12.3]
  times (s) 2.34 rates (Hz) [13.75, 12.44]
  times (s) 2.43 rates (Hz) [13.66, 12.31]
  times (s) 2.52 rates (Hz) [13.63, 12.43]
  times (s) 2.61 rates (Hz) [13.62, 12.3]
  times (s) 2.7 rates (Hz) [13.45, 12.43]
  times (s) 2.79 rates (Hz) [13.68, 12.32]
  times (s) 2.88 rates (Hz) [13.76, 12.42]
  times (s) 2.97 rates (Hz) [13.63, 12.31]
  times (s) 3.06 rates (Hz) [13.46, 12.42]
  times (s) 3.15 rates (Hz) [13.62, 12.31]
  times (s) 3.24 rates (Hz) [13.67, 12.44]
  times (s) 3.33 rates (Hz) [13.65, 12.3]
  times (s) 3.42 rates (Hz) [13.72, 12.43]
  times (s) 3.51 rates (Hz) [13.45, 12.31]
  times (s) 3.6 rates (Hz) [13.52, 12.44]
  times (s) 3.69 rates (Hz) [13.83, 12.32]
  times (s) 3.78 rates (Hz) [13.61, 12.41]
  times (s) 3.87 rates (Hz) [13.59, 12.3]
  times (s) 3.96 rates (Hz) [13.56, 12.44]
  times (s) 4.05 rates (Hz) [13.59, 12.32]
  times (s) 4.14 rates (Hz) [13.66, 12.42]
  times (s) 4.23 rates (Hz) [13.77, 12.31]
  times (s) 4.32 rates (Hz) [13.51, 12.42]
  times (s) 4.41 rates (Hz) [13.48, 12.31]
  times (s) 4.5 rates (Hz) [13.71, 12.44]
  times (s) 4.59 rates (Hz) [13.69, 12.32]
  times (s) 4.68 rates (Hz) [13.61, 12.42]
  times (s) 4.77 rates (Hz) [13.65, 12.3]
  times (s) 4.86 rates (Hz) [13.46, 12.43]
  times (s) 4.95 rates (Hz) [13.63, 12.32]
  times (s) 5.05 rates (Hz) [13.8, 12.42]
  times (s) 5.14 rates (Hz) [13.62, 12.31]
  times (s) 5.23 rates (Hz) [13.47, 12.42]
  times (s) 5.32 rates (Hz) [13.63, 12.31]
  times (s) 5.41 rates (Hz) [13.63, 12.43]
  times (s) 5.5 rates (Hz) [13.67, 12.32]
  times (s) 5.59 rates (Hz) [13.73, 12.42]
  times (s) 5.68 rates (Hz) [13.48, 12.31]
  times (s) 5.77 rates (Hz) [13.49, 12.43]
  times (s) 5.86 rates (Hz) [13.81, 12.32]
  times (s) 5.95 rates (Hz) [13.64, 12.41]
  times (s) 6.04 rates (Hz) [13.6, 12.3]
  times (s) 6.13 rates (Hz) [13.57, 12.42]
  times (s) 6.22 rates (Hz) [13.56, 12.33]
  times (s) 6.31 rates (Hz) [13.65, 12.42]
  times (s) 6.4 rates (Hz) [13.79, 12.31]
  times (s) 6.49 rates (Hz) [13.55, 12.42]
  times (s) 6.58 rates (Hz) [13.45, 12.31]
  times (s) 6.67 rates (Hz) [13.7, 12.44]
  times (s) 6.76 rates (Hz) [13.67, 12.31]
  times (s) 6.85 rates (Hz) [13.62, 12.43]
  times (s) 6.94 rates (Hz) [13.69, 12.3]
  times (s) 7.03 rates (Hz) [13.43, 12.44]
  times (s) 7.12 rates (Hz) [13.62, 12.31]
  times (s) 7.21 rates (Hz) [13.79, 12.43]
  times (s) 7.3 rates (Hz) [13.63, 12.31]
  times (s) 7.39 rates (Hz) [13.5, 12.42]
  times (s) 7.48 rates (Hz) [13.61, 12.31]
  times (s) 7.57 rates (Hz) [13.62, 12.43]
  times (s) 7.66 rates (Hz) [13.66, 12.32]
  times (s) 7.75 rates (Hz) [13.74, 12.42]
  times (s) 7.84 rates (Hz) [13.51, 12.31]
  times (s) 7.93 rates (Hz) [13.45, 12.43]
  times (s) 8.02 rates (Hz) [13.81, 12.32]
  times (s) 8.11 rates (Hz) [13.63, 12.42]
  times (s) 8.2 rates (Hz) [13.62, 12.3]
  times (s) 8.29 rates (Hz) [13.59, 12.43]
  times (s) 8.38 rates (Hz) [13.49, 12.31]
  times (s) 8.47 rates (Hz) [13.66, 12.43]
  times (s) 8.56 rates (Hz) [13.8, 12.32]
  times (s) 8.65 rates (Hz) [13.56, 12.41]
  times (s) 8.74 rates (Hz) [13.47, 12.31]
  times (s) 8.83 rates (Hz) [13.65, 12.44]
  times (s) 8.92 rates (Hz) [13.69, 12.32]
  times (s) 9.01 rates (Hz) [13.63, 12.42]
  Elapsed (with compilation) = 0h 0m 23s
  rates (1, 101, 10000)
#+end_example
#+RESULTS:

#+begin_src ipython
  print(torch.cuda.memory_allocated()/100000)
  # del model
  clear_cache()
  print(torch.cuda.memory_allocated()/100000)
#+end_src

#+RESULTS:
: 26292.8384
: 26292.8384

*** Dynamics

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

  r_max = 30

  ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].plot(rates[0,:, model.slices[0]].mean(-1), 'r')
  ax[1].plot(rates[0,:, model.slices[1]].mean(-1), 'b')
  for i in range(5):
      ax[1].plot(rates[0, :, i], alpha=.2)
      
  ax[1].set_ylabel('Rates (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].hist(rates[0, -1, model.slices[0]], bins='auto', density='True', color='r')
  ax[2].hist(rates[0, -1, model.slices[1]], bins='auto', density='True', color='b')
  ax[2].set_xlabel('Rates (Hz)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f03c49d79bd774b19c23be48cce189765e8fb208.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(3*width, height))

  r_max = 30

  ax[0].imshow(volts[0].T, aspect='auto', cmap='jet', origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].plot(volts[0,:, model.slices[0]].mean(-1), 'r')
  ax[1].plot(volts[0,:, model.slices[1]].mean(-1), 'b')
  for i in range(5):
      ax[1].plot(volts[0, :, i], alpha=.2)

  ax[1].set_ylabel('Volts (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].hist(volts[0, -1, model.slices[0]], bins='auto', density='True', color='r')
  ax[2].hist(volts[0, -1, model.slices[1]], bins='auto', density='True', color='b')
  ax[2].set_xlabel('Volts (Hz)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fde23c54b719e76329b9631cc3386a73a19bf861.png]]

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(3*width, height))
  
  ax[0].imshow(spikes[0].T, aspect='auto', cmap='jet', origin='lower')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_xlabel('Step')

  ax[1].plot(spikes[0, :, model.slices[0]].mean(-1) / model.DT, 'r')
  ax[1].plot(spikes[0, :, model.slices[1]].mean(-1) / model.DT, 'b')
  for i in range(5):
      ax[1].plot(spikes[0, :, i], alpha=.2)

  ax[1].set_ylabel('Spikes (Hz)')
  ax[1].set_xlabel('Step')

  ax[2].hist(spikes[0, :, model.slices[0]].mean(0), bins='auto', density='True', color='r')
  ax[2].hist(spikes[0, :, model.slices[1]].mean(0), bins='auto', density='True', color='b')
  ax[2].set_xlabel('Spikes (Hz)')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/068006dc962339ad03443833439466bfa0fb7db8.png]]

#+begin_src ipython
  spike_time = np.argwhere(spikes==1)
  print(spike_time.shape)
#+end_src

#+RESULTS:
: (27610, 3)

#+begin_src ipython
  spike_times = [np.flatnonzero(spikes[0, :, neuron].T) for neuron in range(100)]

  # Create the raster plot
  plt.eventplot(spike_times, lw=1)
  plt.xlabel('Time (a.u.)')
  plt.ylabel('Neuron')
  plt.title('Raster plot of spike trains')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d1caba520a1bdaadf6be601f983d321464e5c315.png]]

#+begin_src ipython
  plt.hist(spikes[0, :, model.slices[0]].sum(0), bins='auto', color='r')
  plt.hist(spikes[0, :, model.slices[1]].sum(0), bins='auto', color='b')
  plt.xlabel('Spike Count/s')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/175e669d9f13fbc0e1a73e3c37bb251c57f061e5.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

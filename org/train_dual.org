#+STARTUP: fold
#+TITLE: Training Low Rank RNNs
#+PROPERTY: header-args:ipython :var B0="1.0" :results both :exports both :async yes :session dual :kernel torch :tangle ./train.py

* Notebook Settings

#+begin_src ipython
%load_ext autoreload
%autoreload 2
%reload_ext autoreload

%run ../notebooks/setup.py
%matplotlib inline
%config InlineBackend.figure_format = 'png'

REPO_ROOT = "/home/leon/models/NeuroFlame"
pal = sns.color_palette("tab10")
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Imports

#+begin_src ipython
import torch
import torch.nn as nn
import torch.optim as optim
import torchmetrics
from torch.utils.data import Dataset, TensorDataset, DataLoader

DEVICE = 'cuda:1'
#+end_src

#+RESULTS:

#+begin_src ipython
import sys
sys.path.insert(0, '../')

import pandas as pd
import torch.nn as nn
from time import perf_counter
from scipy.stats import circmean

from src.network import Network
from src.plot_utils import plot_con
from src.decode import decode_bump, circcvl
from src.lr_utils import masked_normalize, clamp_tensor, normalize_tensor
#+end_src

#+RESULTS:

* Helpers
** Data Split

#+begin_src ipython
from sklearn.model_selection import train_test_split, StratifiedShuffleSplit

def split_data(X, Y, train_perc=0.8, batch_size=32):

    if Y.ndim==3:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0, 0].cpu().numpy(),
                                                          shuffle=True)
    else:
      X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                          train_size=train_perc,
                                                          stratify=Y[:, 0].cpu().numpy(),
                                                          shuffle=True)

    print(X_train.shape, X_test.shape)
    print(Y_train.shape, Y_test.shape)

    train_dataset = TensorDataset(X_train, Y_train)
    val_dataset = TensorDataset(X_test, Y_test)

    # Create data loaders
    train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(dataset=val_dataset, batch_size=batch_size, shuffle=False)

    return train_loader, val_loader
#+end_src

#+RESULTS:

** Optimization

#+begin_src ipython
def torch_angle_AB(U, V):
      # Calculate the dot product
      dot_product = torch.dot(U, V)

      # Calculate the magnitudes of U and V
      magnitude_U = torch.linalg.norm(U)
      magnitude_V = torch.linalg.norm(V)

      # Compute the cosine of the angle
      cos_theta = dot_product / (magnitude_U * magnitude_V + .00001)

      # Calculate the angle in radians, then convert to degrees
      angle_radians = torch.acos(cos_theta)
      return torch.round(torch.rad2deg(angle_radians))
#+end_src

#+RESULTS:

#+begin_src ipython
def training_step(dataloader, model, loss_fn, optimizer, penalty=None, lbd=1, clip_grad=0, zero_grad=None):

      model.train()
      for batch, (X, y) in enumerate(dataloader):
          X, y = X.to(model.device), y.to(model.device)

          rates = model(X)
          loss = loss_fn(model.readout, y)

          loss.backward()

          if zero_grad is not None:
              try:
                  model.low_rank.U.grad[:, zero_grad] = 0
                  model.low_rank.V.grad[:, zero_grad] = 0
              except:
                  pass

          if clip_grad:
              torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=10.0)
              #torch.nn.utils.clip_grad_value_(model.parameters(), clip_value=1.0)

          optimizer.step()
          optimizer.zero_grad()

      return loss
#+end_src

#+RESULTS:

#+begin_src ipython
def validation_step(dataloader, model, loss_fn):
      num_batches = len(dataloader)
      model.eval()

      val_loss = 0.0
      with torch.no_grad():
          for X, y in dataloader:
              X, y = X.to(model.device), y.to(model.device)

              rates = model(X)
              loss = loss_fn(model.readout, y)
              val_loss += loss.item()

          val_loss /= num_batches

      return val_loss
#+end_src

#+RESULTS:

#+begin_src ipython
def optimization(model, train_loader, val_loader, loss_fn, optimizer, num_epochs=100, penalty=None, lbd=1, thresh=.005, zero_grad=None):
      scheduler = optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)
      # scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, 'min', patience=10, factor=0.1, verbose=True)
      # scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=30, gamma=0.1)

      device = torch.device(DEVICE if torch.cuda.is_available() else 'cpu')
      model.to(device)

      loss_list = []
      val_loss_list = []
      angle_list = []

      for epoch in range(num_epochs):
          loss = training_step(train_loader, model, loss_fn, optimizer, penalty, lbd, zero_grad=zero_grad)
          val_loss = validation_step(val_loader, model, loss_fn)

          scheduler.step(val_loss)
          loss_list.append(loss.item())
          val_loss_list.append(val_loss)

          memory = model.low_rank.U[model.slices[0], 0]
          readout = model.low_rank.V[model.slices[0], 1]

          angle = torch_angle_AB(memory, readout).item()
          angle_list.append(angle)

          print(f'Epoch {epoch+1}/{num_epochs}, Training Loss: {loss.item():.4f}, Validation Loss: {val_loss:.4f}, Angle(U, W) : {angle} Â°')

          if val_loss < thresh and loss < thresh:
              print(f'Stopping training as loss has fallen below the threshold: {loss}, {val_loss}')
              break

          if val_loss > 300:
              print(f'Stopping training as loss is too high: {val_loss}')
              break

          if torch.isnan(loss):
              print(f'Stopping training as loss is NaN.')
              break

      return loss_list, val_loss_list
#+end_src

#+RESULTS:

** Loss

#+begin_src ipython
def imbalance_func(target, imbalance):
    output = torch.zeros_like(target)

    output[target == 0] = imbalance
    output[target == 1] = 1

    return output
#+end_src

#+RESULTS:

#+begin_src ipython
import torch
import torch.nn as nn
import torch.nn.functional as F

class SignBCELoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=4.0, imbalance=0):
            super(SignBCELoss, self).__init__()
            self.alpha = alpha
            self.thresh = thresh

            self.imbalance = imbalance
            self.bce_with_logits = nn.BCEWithLogitsLoss()

      def forward(self, readout, targets):
            if self.alpha != 1.0:
                  bce_loss = self.bce_with_logits(readout, targets)
            else:
                  bce_loss = 0.0

            # average readout over bins
            mean_readout = readout.mean(dim=1).unsqueeze(-1)

            # only penalizing not licking when pair
            if self.imbalance == -1:
                  sign_overlap = torch.sign(targets) * mean_readout
                  self.imbalance = 0
            else:
                  sign_overlap = torch.sign(2 * targets - 1) * mean_readout

            if self.imbalance > 1.0:
                  sign_loss = F.relu(torch.sign(targets) * self.thresh - imbalance_func(targets, self.imbalance) * sign_overlap)
            elif self.imbalance == 0:
                  sign_loss = F.relu(imbalance_func(targets, self.imbalance) * self.thresh - sign_overlap)
            else:
                  sign_loss = F.relu(self.thresh - sign_overlap)

            combined_loss = (1-self.alpha) * bce_loss + self.alpha * sign_loss

            return combined_loss.mean()

#+end_src

#+RESULTS:

#+begin_src ipython
class DualLoss(nn.Module):
      def __init__(self, alpha=1.0, thresh=4.0, cue_idx=[], rwd_idx=-1, zero_idx=[], read_idx=-1, imbalance=0):
            super(DualLoss, self).__init__()
            self.alpha = alpha
            self.thresh = thresh

            self.imbalance = imbalance

            # BL idx
            self.zero_idx = zero_idx
            # rwd idx for DRT
            self.cue_idx = torch.tensor(cue_idx, dtype=torch.int, device=DEVICE)
            # rwd idx for DPA
            self.rwd_idx = torch.tensor(rwd_idx, dtype=torch.int, device=DEVICE)

            # readout idx
            self.read_idx = read_idx

            self.loss = SignBCELoss(self.alpha, self.thresh, self.imbalance)
            self.l1loss = nn.SmoothL1Loss()
            # self.l1loss = nn.MSELoss()

      def forward(self, readout, targets):

            zeros = torch.zeros_like(readout[:, self.zero_idx, 0])
            BL_loss = self.l1loss(readout[:, :9, 0], zeros[:, :9])

            if self.read_idx == 1:
                  BL_loss += self.l1loss(readout[:, self.zero_idx, 1], zeros)
            else:
                  BL_loss += self.l1loss(readout[:, :9, 1], zeros[:,:9])

            try:
                  if (self.read_idx == 2) or (self.read_idx==-1):
                        BL_loss += self.l1loss(readout[:, self.zero_idx, 2], zeros)
                  else:
                        BL_loss += self.l1loss(readout[:, :9, 2], zeros[:,:9])
            except:
                  pass

            is_empty = (self.cue_idx.numel() == 0)

            if is_empty:
                  DPA_loss = self.loss(readout[:,  self.rwd_idx, self.read_idx], targets)
                  return DPA_loss + BL_loss
            else:
                  self.loss.imbalance = self.imbalance[0]
                  DPA_loss = self.loss(readout[:,  self.rwd_idx, self.read_idx], targets[:, 0, :self.rwd_idx.shape[0]])

                  self.loss.imbalance = self.imbalance[1]
                  DRT_loss = self.loss(readout[:, self.cue_idx, self.read_idx], targets[:, 1, :self.cue_idx.shape[0]])

                  return DPA_loss + DRT_loss + BL_loss
#+end_src

#+RESULTS:

** Other

#+begin_src ipython
def angle_AB(A, B):
      A_norm = A / (np.linalg.norm(A) + 1e-5)
      B_norm = B / (np.linalg.norm(B) + 1e-5)

      return int(np.arccos(A_norm @ B_norm) * 180 / np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_theta(a, b, GM=0, IF_NORM=0):

      u, v = a, b

      if GM:
          v = b - np.dot(b, a) / np.dot(a, a) * a

      if IF_NORM:
          u = a / np.linalg.norm(a)
          v = b / np.linalg.norm(b)

      return np.arctan2(v, u) % (2.0 * np.pi)
#+end_src

#+RESULTS:

#+begin_src ipython
def get_idx(model, rank=2):
      ksi = torch.hstack((model.low_rank.U, model.low_rank.V)).T
      ksi = ksi[:, :model.Na[0]]

      try:
            readout = model.low_rank.linear.weight.data
            ksi = torch.vstack((ksi, readout))
      except:
            pass

      print('ksi', ksi.shape)

      ksi = ksi.cpu().detach().numpy()
      theta = get_theta(ksi[0], ksi[rank])

      return theta.argsort()
#+end_src

#+RESULTS:

#+begin_src ipython
def get_overlap(model, rates):
      ksi = model.odors.cpu().detach().numpy()
      return rates @ ksi.T / rates.shape[-1]
#+end_src

#+RESULTS:

#+begin_src ipython
import scipy.stats as stats

def plot_smooth(data, ax, color):
      mean = data.mean(axis=0)
      ci = smooth.std(axis=0, ddof=1) * 1.96

      # Plot
      ax.plot(mean, color=color)
      ax.fill_between(range(data.shape[1]), mean - ci, mean + ci, alpha=0.25, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def convert_seconds(seconds):
      h = seconds // 3600
      m = (seconds % 3600) // 60
      s = seconds % 60
      return h, m, s
#+end_src

#+RESULTS:

** plots

#+begin_src ipython
def add_vlines(ax=None, mouse=""):
    t_BL = [0, 1]
    t_STIM = [1 , 2]
    t_ED = [2, 3]
    t_DIST = [3 , 4]
    t_MD = [4 , 5]
    t_CUE = [5 , 5.5]
    t_RWD = [5.5, 6.0]
    t_LD = [6.0 , 7.0]
    t_TEST = [7.0, 8.0]
    t_RWD2 = [11 , 12]

    time_periods = [t_STIM, t_DIST, t_TEST, t_CUE]
    colors = ["b", "b", "b", "g"]

    if ax is None:
        for period, color in zip(time_periods, colors):
            plt.axvspan(period[0], period[1], alpha=0.1, color=color)
    else:
        for period, color in zip(time_periods, colors):
            ax.axvspan(period[0], period[1], alpha=0.1, color=color)

#+end_src

#+RESULTS:

#+begin_src ipython
def plot_rates_selec(rates, idx, thresh=0.5, figname='fig.svg'):
        ordered = rates[..., idx]
        fig, ax = plt.subplots(1, 2, figsize=[2*width, height])
        r_max = thresh * np.max(rates[0])

        ax[0].imshow(rates[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[0].set_ylabel('Neuron #')
        ax[0].set_xlabel('Step')

        ax[1].imshow(ordered[0].T, aspect='auto', cmap='jet', vmin=0, vmax=r_max)
        ax[1].set_yticks(np.linspace(0, model.Na[0].cpu().detach(), 5), np.linspace(0, 360, 5).astype(int))
        ax[1].set_ylabel('Pref. Location (Â°)')
        ax[1].set_xlabel('Step')
        plt.savefig(figname, dpi=300)
        plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_overlap(readout, labels=['A', 'B'], figname='fig.svg'):
      fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

      time = np.linspace(0, 8, readout.shape[1])
      size = readout.shape[0] // 2
      print(readout.shape[0], size)

      for i in range(readout.shape[-1]):
            ax[i].plot(time, readout[:size, :, i].T, ls='-', label=labels[0])
            ax[i].plot(time, readout[size:, :, i].T, ls='--', label=labels[0])

            add_vlines(ax[i])
            ax[i].set_xlabel('Time (s)')

      ax[0].set_ylabel('Sample Overlap (Hz)')
      ax[1].set_ylabel('Dist Overlap (Hz)')
      ax[2].set_ylabel('Readout (Hz)')

      # plt.legend(fontsize=10, frameon=False)
      plt.savefig(figname, dpi=300)
      plt.show()
#+end_src

#+RESULTS:

#+begin_src ipython
def plot_m0_m1_phi(rates, idx, figname='fig.svg'):

      m0, m1, phi = decode_bump(rates[..., idx], axis=-1)
      fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

      time = np.linspace(0, 8, m0.T.shape[0])

      ax[0].plot(time, m0[:2].T)
      ax[0].plot(time, m0[2:].T, '--')
      #ax[0].set_ylim([0, 360])
      #ax[0].set_yticks([0, 90, 180, 270, 360])
      ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
      ax[0].set_ylabel('Activity (Hz)')
      ax[0].set_xlabel('Time (s)')
      add_vlines(ax[0])

      ax[1].plot(time, m1[:2].T)
      ax[1].plot(time, m1[2:].T, '--')
      # ax[1].set_ylim([0, 360])
      # ax[1].set_yticks([0, 90, 180, 270, 360])
      ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
      ax[1].set_ylabel('Bump Amplitude (Hz)')
      ax[1].set_xlabel('Time (s)')
      add_vlines(ax[1])

      ax[2].plot(time, phi[:2].T * 180 / np.pi)
      ax[2].plot(time, phi[2:].T * 180 / np.pi, '--')
      ax[2].set_ylim([0, 360])
      ax[2].set_yticks([0, 90, 180, 270, 360])
      ax[2].set_ylabel('Bump Center (Â°)')
      ax[2].set_xlabel('Time (s)')
      add_vlines(ax[2])

      plt.savefig(figname, dpi=300)
      plt.show()
    #+end_src

#+RESULTS:

* Model

#+begin_src ipython
REPO_ROOT = "/home/leon/models/NeuroFlame"
conf_name = "train_dual.yml"
DEVICE = 'cuda:1'

seed = np.random.randint(0, 1e6)
# seed = 820829
# seed = 801613
print(seed)
seed = 712979

A0 = 1.0 # sample/dist
B0 = 1.0 # cue
C0 = 0.0 # DRT rwd
#+end_src

#+RESULTS:
: 201454

#+begin_src ipython
model = Network(conf_name, REPO_ROOT, VERBOSE=0, DEVICE=DEVICE, SEED=seed, N_BATCH=1)
#+end_src

#+RESULTS:

#+begin_src ipython

#+end_src

#+RESULTS:

* Sample Classification
** Training
*** Parameters

#+begin_src ipython
for name, param in model.named_parameters():
    if param.requires_grad:
        print(name, param.shape)
#+end_src

#+RESULTS:
: J_STP torch.Size([])
: low_rank.U torch.Size([750, 2])
: low_rank.V torch.Size([750, 2])
: low_rank.lr_kappa torch.Size([1])
: low_rank.linear.weight torch.Size([1, 750])
: low_rank.linear.bias torch.Size([1])

Testing the network on steps from sample odor offset to test odor onset

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

mask = (steps >= (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
rwd_idx = np.where(mask)[0]
print('rwd', rwd_idx)

model.lr_eval_win = rwd_idx.shape[0]

stim_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY))

zero_idx = np.where(~mask & ~stim_mask )[0]
print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
:  44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
:  68 69 70 71 72 73 74 75 76 77 78 79 80]
: zero [0 1 2 3 4 5 6 7 8 9]

*** Inputs and Labels

#+begin_src ipython
model.N_BATCH = 256

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

A = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([512, 505, 1000])

#+begin_src ipython
labels_A = torch.ones((model.N_BATCH, rwd_idx.shape[0]))
labels_B = torch.zeros((model.N_BATCH, rwd_idx.shape[0]))
labels = torch.cat((labels_A, labels_B))

print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([512, 61])

*** Run

#+begin_src ipython
batch_size = 16
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([409, 505, 1000]) torch.Size([103, 505, 1000])
: torch.Size([409, 61]) torch.Size([103, 61])

#+begin_src ipython
criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=1, read_idx=0)
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
num_epochs = 15
start = perf_counter()
loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=1)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
Epoch 1/15, Training Loss: 2.0114, Validation Loss: 1.9947, Angle(U, W) : 89.0 Â°
Epoch 2/15, Training Loss: 2.0086, Validation Loss: 1.9984, Angle(U, W) : 91.0 Â°
Epoch 3/15, Training Loss: 2.0098, Validation Loss: 2.0048, Angle(U, W) : 91.0 Â°
Epoch 4/15, Training Loss: 1.9685, Validation Loss: 1.9799, Angle(U, W) : 90.0 Â°
Epoch 5/15, Training Loss: 2.0773, Validation Loss: 1.9993, Angle(U, W) : 91.0 Â°
Epoch 6/15, Training Loss: 1.9636, Validation Loss: 1.9700, Angle(U, W) : 90.0 Â°
Epoch 7/15, Training Loss: 1.9076, Validation Loss: 1.9378, Angle(U, W) : 90.0 Â°
Epoch 8/15, Training Loss: 1.0070, Validation Loss: 1.0417, Angle(U, W) : 90.0 Â°
Epoch 9/15, Training Loss: 0.3064, Validation Loss: 0.2639, Angle(U, W) : 90.0 Â°
Epoch 10/15, Training Loss: 0.1032, Validation Loss: 0.1096, Angle(U, W) : 90.0 Â°
Epoch 11/15, Training Loss: 0.0262, Validation Loss: 0.1200, Angle(U, W) : 90.0 Â°
Epoch 12/15, Training Loss: 0.0666, Validation Loss: 0.0866, Angle(U, W) : 90.0 Â°
Epoch 13/15, Training Loss: 0.0460, Validation Loss: 0.0880, Angle(U, W) : 90.0 Â°
Epoch 14/15, Training Loss: 0.0283, Validation Loss: 0.0870, Angle(U, W) : 90.0 Â°
Epoch 15/15, Training Loss: 0.0522, Validation Loss: 0.1335, Angle(U, W) : 90.0 Â°
Elapsed (with compilation) = 0h 7m 37s
#+end_example

#+begin_src ipython
torch.save(model.state_dict(), 'models/dpa_naive_%d.pth' % seed)
#+end_src

#+RESULTS:

** Testing

          #+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 10

model.I0[0] = 2
model.I0[1] = 0
model.I0[2] = 0

A = model.init_ff_input()

model.I0[0] = -2
model.I0[1] = 0
model.I0[2] = 0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([20, 505, 1000])

#+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print('rates', rates.shape)
#+end_src

#+RESULTS:
: rates (20, 81, 750)

#+begin_src ipython
readout = model.readout.cpu().detach().numpy()
print('readout', readout.shape)
plot_overlap(readout, labels=['A', 'B'])
#+end_src

#+RESULTS:
:RESULTS:
: readout (20, 81, 3)
: 20 10
[[./.ob-jupyter/ba8b47db3f695b7583cd50497af18d64fbd6205f.png]]
:END:

#+begin_src ipython
idx = get_idx(model, 1)
plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 750])
[[./.ob-jupyter/36dc0a3ff11053a9b853e04f873a2abf7209f602.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[./.ob-jupyter/df54c591fcd3a9093d1aa66f17763b07c3dd180c.png]]

* DPA

#+begin_src ipython
model_state_dict = torch.load('models/dpa_naive_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: <All keys matched successfully>

** Training
*** Parameters

#+begin_src ipython
model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = True
# model.low_rank.U.data[:, 1] = torch.randn(model.low_rank.U.T.data[1].shape) * 0.001
# model.low_rank.V.data[:, 1] = torch.randn(model.low_rank.U.T.data[1].shape) * 0.001

# import torch.nn.init as init

# if model.LR_FIX_READ==0:
#     init.xavier_uniform_(model.low_rank.linear.weight)
#     if model.low_rank.linear.bias is not None:
#         model.low_rank.linear.bias.data.zero_()  # Common practice is to set biases to zero
#+end_src

#+RESULTS:

Here we only evaluate performance from test onset to test offset

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
# mask = (steps >= (model.N_STIM_OFF[2] - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
mask = (steps >= (model.N_STIM_ON[4].cpu().numpy() - model.N_STEADY)) & (steps <= (model.N_STEPS - model.N_STEADY))
rwd_idx = np.where(mask)[0]
print('rwd', rwd_idx)

model.lr_eval_win = rwd_idx.shape[0]

stim_mask = (steps >= (model.N_STIM_ON[0].cpu().numpy() - model.N_STEADY)) & (steps < (model.N_STIM_OFF[0].cpu().numpy() - model.N_STEADY))

stim_mask1 = (steps >= (model.N_STIM_ON[4].cpu().numpy() - model.N_STEADY))

mask_zero = ~mask  & ~stim_mask & ~stim_mask1
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [70 71 72 73 74 75 76 77 78 79 80]
: zero [ 0  1  2  3  4  5  6  7  8  9 20 21 22 23 24 25 26 27 28 29 30 31 32 33
:  34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57
:  58 59 60 61 62 63 64 65 66 67 68 69]

*** Inputs and Labels

#+begin_src ipython
model.N_BATCH = 256

model.I0[0] = A0 # sample
model.I0[1] = 0 # distractor
model.I0[2] = 0 # cue
model.I0[3] = 0 # drt rwd
model.I0[4] = A0 # test

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([1024, 505, 1000])

 #+begin_src ipython
labels_pair = torch.ones((2 * model.N_BATCH, model.lr_eval_win))
labels_unpair = torch.zeros((2 * model.N_BATCH, model.lr_eval_win))

labels = torch.cat((labels_pair, labels_unpair))
print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([1024, 11])

*** Run

#+begin_src ipython
batch_size = 16
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([819, 505, 1000]) torch.Size([205, 505, 1000])
: torch.Size([819, 11]) torch.Size([205, 11])

  #+begin_src ipython
# set imbalance to -1 to penalize only pair trials: Loss->0 if overlap>0 during pair trial
criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=-1, read_idx=-1)
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('training DPA')
num_epochs = 30
start = perf_counter()
loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=0)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
#+begin_example
training DPA
Epoch 1/30, Training Loss: 0.3972, Validation Loss: 0.4384, Angle(U, W) : 129.0 Â°
Epoch 2/30, Training Loss: 0.0767, Validation Loss: 0.1045, Angle(U, W) : 93.0 Â°
Epoch 3/30, Training Loss: 0.0090, Validation Loss: 0.0826, Angle(U, W) : 99.0 Â°
Epoch 4/30, Training Loss: 0.2464, Validation Loss: 0.0727, Angle(U, W) : 100.0 Â°
Epoch 5/30, Training Loss: 0.0273, Validation Loss: 0.0679, Angle(U, W) : 103.0 Â°
Epoch 6/30, Training Loss: 0.0845, Validation Loss: 0.0640, Angle(U, W) : 104.0 Â°
Epoch 7/30, Training Loss: 0.0482, Validation Loss: 0.0670, Angle(U, W) : 105.0 Â°
Epoch 8/30, Training Loss: 0.0293, Validation Loss: 0.0726, Angle(U, W) : 107.0 Â°
Epoch 9/30, Training Loss: 0.0225, Validation Loss: 0.0522, Angle(U, W) : 108.0 Â°
Epoch 10/30, Training Loss: 0.0086, Validation Loss: 0.0499, Angle(U, W) : 109.0 Â°
Epoch 11/30, Training Loss: 0.0893, Validation Loss: 0.0449, Angle(U, W) : 110.0 Â°
Epoch 12/30, Training Loss: 0.0162, Validation Loss: 0.0428, Angle(U, W) : 110.0 Â°
Epoch 13/30, Training Loss: 0.0273, Validation Loss: 0.0416, Angle(U, W) : 111.0 Â°
Epoch 14/30, Training Loss: 0.0078, Validation Loss: 0.0375, Angle(U, W) : 112.0 Â°
Epoch 15/30, Training Loss: 0.0087, Validation Loss: 0.0405, Angle(U, W) : 113.0 Â°
Epoch 16/30, Training Loss: 0.0351, Validation Loss: 0.0341, Angle(U, W) : 114.0 Â°
Epoch 17/30, Training Loss: 0.0161, Validation Loss: 0.0325, Angle(U, W) : 114.0 Â°
Epoch 18/30, Training Loss: 0.0057, Validation Loss: 0.0333, Angle(U, W) : 116.0 Â°
Epoch 19/30, Training Loss: 0.0111, Validation Loss: 0.0342, Angle(U, W) : 116.0 Â°
Epoch 20/30, Training Loss: 0.0110, Validation Loss: 0.0286, Angle(U, W) : 116.0 Â°
Epoch 21/30, Training Loss: 0.0158, Validation Loss: 0.0261, Angle(U, W) : 116.0 Â°
Epoch 22/30, Training Loss: 0.0075, Validation Loss: 0.0258, Angle(U, W) : 116.0 Â°
Epoch 23/30, Training Loss: 0.0064, Validation Loss: 0.0258, Angle(U, W) : 117.0 Â°
Epoch 24/30, Training Loss: 0.0084, Validation Loss: 0.0259, Angle(U, W) : 117.0 Â°
Epoch 25/30, Training Loss: 0.0141, Validation Loss: 0.0243, Angle(U, W) : 118.0 Â°
Epoch 26/30, Training Loss: 0.0162, Validation Loss: 0.0352, Angle(U, W) : 119.0 Â°
Epoch 27/30, Training Loss: 0.0075, Validation Loss: 0.0246, Angle(U, W) : 118.0 Â°
Epoch 28/30, Training Loss: 0.0083, Validation Loss: 0.0215, Angle(U, W) : 118.0 Â°
Epoch 29/30, Training Loss: 0.0055, Validation Loss: 0.0244, Angle(U, W) : 118.0 Â°
Epoch 30/30, Training Loss: 0.0203, Validation Loss: 0.0208, Angle(U, W) : 118.0 Â°
Elapsed (with compilation) = 0h 28m 31s
#+end_example

#+begin_src ipython
torch.save(model.state_dict(), 'models/dpa_%d.pth' % seed)
#+end_src

#+RESULTS:

#+begin_src ipython
plt.plot(loss)
plt.plot(val_loss)
plt.xlabel('epochs')
plt.ylabel('Loss')
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/536088d7ff1ed7f68e5622176127e5fcc2ff94e9.png]]

#+begin_src ipython
odors = model.odors.cpu().numpy()
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]
W = V
# W = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]

print('   U  V  W  S  D')
print('U ', angle_AB(U, U), angle_AB(U, V), angle_AB(U, W), angle_AB(U, odors[0]), angle_AB(U, odors[1]))
print('V ', 'XXX', angle_AB(V, V), angle_AB(V, W), angle_AB(V, odors[0]), angle_AB(V, odors[1]))
print('W ', 'XXX', 'XXX', angle_AB(W, W), angle_AB(W, odors[0]), angle_AB(W, odors[1]))
print('S ', 'XXX', 'XXX', 'XXX', angle_AB(odors[0], odors[0]), angle_AB(odors[0], odors[1]))
print('D ', 'XXX', 'XXX', 'XXX', 'XXX', angle_AB(odors[1], odors[1]))

#+end_src

#+RESULTS:
:    U  V  W  S  D
: U  0 143 143 59 91
: V  XXX 0 0 106 89
: W  XXX XXX 0 106 89
: S  XXX XXX XXX 0 89
: D  XXX XXX XXX XXX 0

#+begin_src ipython

#+end_src

#+RESULTS:

** Testing

#+begin_src ipython
model.DURATION = 8
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 1
A0 = 1

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 505, 1000])

 #+begin_src ipython
labels_pair = torch.ones((2 * model.N_BATCH, 2))
labels_unpair = torch.zeros((2 * model.N_BATCH, 2))

labels = torch.cat((labels_pair, labels_unpair))
print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach().cpu().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: (4, 81, 750)

#+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['pair', 'unpair'], figname='dpa_overlap.svg')
#+end_src

#+RESULTS:
:RESULTS:
: 4 2
[[./.ob-jupyter/b8135b3a70a9d2bfe54ea800e5e8253eb4656976.png]]
:END:

#+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx, figname='dpa_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 750])
[[./.ob-jupyter/46b530b680ef3cd23064c01eaf6e2e60a959b972.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx, figname='dpa_fourier.svg')
#+end_src

#+RESULTS:
[[./.ob-jupyter/5c36adcd55bdd7254f653034b39427ccecee5890.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Fixed points

#+begin_src ipython
model.DURATION = 20
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
model.IF_RL = 0
#+end_src

#+RESULTS:

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )


#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape, ff_input[0, 0, :4])
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 1105, 1000]) tensor([37.8684, -9.6749, 20.0976, 46.2414], device='cuda:1')

#+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: (4, 201, 750)

#+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['pair', 'unpair'])
#+end_src

#+RESULTS:
:RESULTS:
: 4 2
[[./.ob-jupyter/7d32ed17bc135f2a497346ed536c0bf3512af559.png]]
:END:

#+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 750])
[[./.ob-jupyter/24db42048796901654f2d8480fcd34e0039da8eb.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[./.ob-jupyter/e8d47c46ddf74cbf7a573aa50451377081dad015.png]]

#+begin_src ipython
from matplotlib.patches import Circle
m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

x = m1 / m0 * np.cos(phi)
y = m1 / m0 * np.sin(phi)

xA = x
yA = y

fig, ax = plt.subplots(1, 1, figsize=[height, height])

# ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
# ax.plot(xA.T, yA.T, '-', alpha=.5)
ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=20)
# ax.set_xlim([-.9, .9])
# ax.set_ylim([-.9, .9])
circle = Circle((0., 0.), 1.8, fill=False, edgecolor='k')
ax.add_patch(circle)

# Set the aspect of the plot to equal to make the circle circular
ax.set_aspect('equal')
plt.savefig('fp_dpa.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/13a971aa3cfe4673cf9590982ead68c46600676d.png]]


#+begin_src ipython

#+end_src

#+RESULTS:

* Go/NoGo

#+begin_src ipython
model_state_dict = torch.load('models/dpa_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: <All keys matched successfully>

** Training

#+begin_src ipython
model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = False

# for param in model.low_rank.linear.parameters():
#     param.requires_grad = False

# model.low_rank.linear.bias.requires_grad = False
# model.low_rank.linear.bias.data.zero_()  # Common practice is to set biases to zero
#+end_src

#+RESULTS:

#+begin_src ipython
for name, param in model.named_parameters():
      if param.requires_grad:
            print(name, param.shape)
#+end_src

#+RESULTS:
: low_rank.U torch.Size([750, 2])
: low_rank.V torch.Size([750, 2])
: low_rank.linear.weight torch.Size([1, 750])
: low_rank.linear.bias torch.Size([1])

#+begin_src ipython
model.DURATION = 4.0
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW

model.T_STIM_ON =  [1.0, 3.0]
model.T_STIM_OFF =  [2.0, 4.0]

# model.T_STIM_ON =  [1.0, 3.0, 3.5]
# model.T_STIM_OFF =  [2.0, 3.5, 4.0]

model.N_STIM_ON = np.array(
    [int(i / model.DT) + model.N_STEADY for i in model.T_STIM_ON]
)

model.N_STIM_OFF = [int(i / model.DT) + model.N_STEADY for i in model.T_STIM_OFF]
#+end_src

#+RESULTS:

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)
# mask = (steps >= (model.N_STIM_OFF[0] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[1] - model.N_STEADY))
mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) # & (steps <= (model.N_STIM_OFF[0] - model.N_STEADY))
# mask = (steps >= (model.N_STIM_ON[1] - model.N_STEADY))

rwd_idx = np.where(mask)[0]
print('rwd', rwd_idx)

mask_cue = (steps >= (model.N_STIM_ON[1] - model.N_STEADY))
# mask_cue = (steps >= (model.N_STIM_OFF[0] - model.N_STEADY))  & (steps < (model.N_STIM_ON[1] - model.N_STEADY))
cue_idx = np.where(mask_cue)[0]

cue_idx = []

print('cue', cue_idx)

stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY)) # & (steps < (model.N_STIM_OFF[0] - model.N_STEADY))

mask_zero = ~mask & ~stim_mask
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)

# model.lr_eval_win = rwd_idx.shape[0]
if len(cue_idx)!=0:
    model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))
else:
    model.lr_eval_win = rwd_idx.shape[0]
#+end_src

#+RESULTS:
: rwd [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
:  34 35 36 37 38 39 40]
: cue []
: zero [0 1 2 3 4 5 6 7 8 9]

#+begin_src ipython
# switching sample and distractor odors
odors = model.odors.clone()
model.odors[0] = odors[1] # distractor Go
model.odors[5] = odors[5+1] # distractor NoGo

model.odors[1] = odors[2] # cue same as Go
model.odors[2] = odors[3] # rwd

model.N_BATCH = 128

model.I0[0] = A0
model.I0[1] = float(B0) # cue
model.I0[2] = 0.0 # float(C0) * model.IF_RL  # reward
model.I0[3] = 0
model.I0[4] = 0

Go = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = float(B0) # cue
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

NoGo = model.init_ff_input()

ff_input = torch.cat((Go, NoGo))
print(ff_input.shape)
#+end_src

#+RESULTS:
: torch.Size([256, 305, 1000])

#+begin_src ipython
labels_Go = torch.ones((model.N_BATCH, model.lr_eval_win))
labels_NoGo = torch.zeros((model.N_BATCH, model.lr_eval_win))
labels = torch.cat((labels_Go, labels_NoGo))
print(labels.shape)
# print(labels)
if len(cue_idx)!=0:
    labels =  labels.repeat((2, 1, 1))
    labels = torch.transpose(labels, 0, 1)
print('labels', labels.shape)
#+end_src

#+RESULTS:
: torch.Size([256, 31])
: labels torch.Size([256, 31])

#+begin_src ipython
batch_size = 16
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([204, 305, 1000]) torch.Size([52, 305, 1000])
: torch.Size([204, 31]) torch.Size([52, 31])

#+begin_src ipython
# criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, cue_idx=cue_idx, imbalance=[1.0, -1.0], read_idx=-1)
criterion = DualLoss(alpha=1.0, thresh=2.0, rwd_idx=rwd_idx, zero_idx=zero_idx, cue_idx=cue_idx, imbalance=1.0, read_idx=-1)

# SGD, Adam, Adam
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('training DRT')
num_epochs = 15
start = perf_counter()

loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=0)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))

# switching back sample and distractor odors
model.odors = odors
#+end_src

#+RESULTS:
#+begin_example
training DRT
Epoch 1/15, Training Loss: 0.0889, Validation Loss: 0.1714, Angle(U, W) : 113.0 Â°
Epoch 2/15, Training Loss: 0.1621, Validation Loss: 0.1678, Angle(U, W) : 113.0 Â°
Epoch 3/15, Training Loss: 0.1042, Validation Loss: 0.1576, Angle(U, W) : 113.0 Â°
Epoch 4/15, Training Loss: 0.1328, Validation Loss: 0.1432, Angle(U, W) : 113.0 Â°
Epoch 5/15, Training Loss: 0.1081, Validation Loss: 0.1653, Angle(U, W) : 113.0 Â°
Epoch 6/15, Training Loss: 0.0998, Validation Loss: 0.1628, Angle(U, W) : 113.0 Â°
Epoch 7/15, Training Loss: 0.0886, Validation Loss: 0.1675, Angle(U, W) : 113.0 Â°
Epoch 8/15, Training Loss: 0.0803, Validation Loss: 0.1297, Angle(U, W) : 113.0 Â°
Epoch 9/15, Training Loss: 0.0749, Validation Loss: 0.1322, Angle(U, W) : 113.0 Â°
Epoch 10/15, Training Loss: 0.0669, Validation Loss: 0.1334, Angle(U, W) : 113.0 Â°
Epoch 11/15, Training Loss: 0.0516, Validation Loss: 0.1361, Angle(U, W) : 113.0 Â°
Epoch 12/15, Training Loss: 0.0640, Validation Loss: 0.1630, Angle(U, W) : 113.0 Â°
Epoch 13/15, Training Loss: 0.0598, Validation Loss: 0.1436, Angle(U, W) : 113.0 Â°
Epoch 14/15, Training Loss: 0.0524, Validation Loss: 0.1310, Angle(U, W) : 113.0 Â°
Epoch 15/15, Training Loss: 0.0759, Validation Loss: 0.1302, Angle(U, W) : 113.0 Â°
Elapsed (with compilation) = 0h 1m 40s
#+end_example

:RESULTS:

#+begin_src ipython
torch.save(model.state_dict(), 'models/dual_naive_%d.pth' % seed)
#+end_src

#+RESULTS:

** Test

  #+begin_src ipython
model.eval()
  #+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )

 #+begin_src ipython
odors = model.odors.clone()
model.odors[0] = odors[1] # distractor Go
model.odors[5] = odors[5+1] # distractor NoGo

model.odors[1] = odors[2] # cue
model.odors[2] = odors[3] # rwd
  #+end_src

#+RESULTS:

  #+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0 # Go
model.I0[1] = float(B0) # cue
model.I0[2] = 0.0 # float(C0) * model.IF_RL # rwd
model.I0[3] = 0.0
model.I0[4] = 0.0

A = model.init_ff_input()

model.I0[0] = -A0 # NoGo
model.I0[1] = float(B0) # cue
model.I0[2] = 0.0 # rwd
model.I0[3] = 0.0
model.I0[4] = 0.0

B = model.init_ff_input()

ff_input = torch.cat((A, B))
print('ff_input', ff_input.shape)
  #+end_src

#+RESULTS:
: ff_input torch.Size([2, 505, 1000])

  #+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
model.odors = odors
print(rates.shape)
  #+end_src

#+RESULTS:
: (2, 81, 750)

  #+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['Go', 'NoGo'])
  #+end_src

#+RESULTS:
:RESULTS:
: 2 1
[[./.ob-jupyter/f17b56634d8bab037b58d5a540ef760ec07969f1.png]]
:END:

  #+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx)
  #+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 750])
[[./.ob-jupyter/6667b779739c6ad1a9532cf2de8985bd0d3817db.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[./.ob-jupyter/3aa6d544b2cd7905ad5934da8f66188305ad2023.png]]

* Dual

#+begin_src ipython
model_state_dict = torch.load('models/dual_naive_%d.pth' % seed)
model.load_state_dict(model_state_dict)
#+end_src

#+RESULTS:
: <All keys matched successfully>

** Parameters

#+begin_src ipython
model.DURATION = 8
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
model.T_STIM_ON = [1.0, 3.0, 5.0, 5.5, 7.0]
model.T_STIM_OFF = [2.0, 4.0, 5.5, 6.0, 8.0]

model.N_STIM_ON = np.array(
    [int(i / model.DT) + model.N_STEADY for i in model.T_STIM_ON]
)

model.N_STIM_OFF = [int(i / model.DT) + model.N_STEADY for i in model.T_STIM_OFF]
#+end_src

#+RESULTS:

** Testing

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0 # sample A
model.I0[1] = A0 # distractor Go
model.I0[2] = float(B0) # cue
model.I0[3] = 0.0 # float(C0) * model.IF_RL # rwd
model.I0[4] = A0 # test

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 505, 1000])

#+begin_src ipython
labels_pair = torch.ones((2 * model.N_BATCH, 2))
labels_unpair = torch.zeros((2 * model.N_BATCH, 2))

labels = torch.cat((labels_pair, labels_unpair))
print('labels', labels.shape)
#+end_src

#+RESULTS:
: labels torch.Size([4, 2])

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach()
rates = rates.cpu().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: (4, 81, 750)

#+begin_src ipython
plot_overlap(model.readout.cpu().detach().numpy(), labels=['pair', 'unpair'], figname='dual_naive_overlap.svg')
#+end_src

#+RESULTS:
:RESULTS:
: 4 2
[[./.ob-jupyter/ed6b338b489f7d29dbb90d9525631da5d410bf30.png]]
:END:

#+begin_src ipython
idx = get_idx(model, -1)
plot_rates_selec(rates, idx, figname='dual_naive_raster.svg')
#+end_src

#+RESULTS:
:RESULTS:
: ksi torch.Size([5, 750])
[[./.ob-jupyter/0c7704b358f3f58176cc5f49740d7aa713121f1c.png]]
:END:

#+begin_src ipython
plot_m0_m1_phi(rates, idx, figname='dual_naive_fourier.svg')
#+end_src

#+RESULTS:
[[./.ob-jupyter/6d61843b7054360d9c45ca206e4adc85d140b338.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Fixed points

#+begin_src ipython
model.DURATION = 20
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: Network(
:   (low_rank): LowRankWeights(
:     (linear): Linear(in_features=750, out_features=1, bias=True)
:   )
:   (dropout): Dropout(p=0.0, inplace=False)
: )

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape, ff_input[0, 0, :4])
#+end_src

#+RESULTS:
: ff_input torch.Size([4, 1105, 1000]) tensor([  2.1704,  33.4726,  -7.7988, -10.7525], device='cuda:1')

#+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: (4, 201, 750)

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
[[./.ob-jupyter/32fc46d3b8e30b7460cdab7ba699dfada5d05920.png]]

#+begin_src ipython
from matplotlib.patches import Circle
m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

x = m1 / m0 * np.cos(phi)
y = m1 / m0 * np.sin(phi)

xA = x
yA = y

fig, ax = plt.subplots(1, 1, figsize=[height, height])

# ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
# ax.plot(xA.T, yA.T, '-', alpha=.5)
ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=20)
# ax.set_xlim([-.9, .9])
# ax.set_ylim([-.9, .9])
circle = Circle((0., 0.), 1.8, fill=False, edgecolor='k')
ax.add_patch(circle)

# Set the aspect of the plot to equal to make the circle circular
ax.set_aspect('equal')
plt.savefig('fp_dual_naive.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
[[./.ob-jupyter/e97ba5f42ac9aa16bfa8c1617b6427ef9681b39f.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

** Training

#+begin_src ipython
# for param in model.low_rank.linear.parameters():
#     param.requires_grad = False

model.J_STP.requires_grad = False
model.low_rank.lr_kappa.requires_grad = False

model.low_rank.U.requires_grad = True
model.low_rank.V.requires_grad = True

# init.xavier_uniform_(model.low_rank.linear.weight)
# if model.low_rank.linear.bias is not None:
#     model.low_rank.linear.bias.data.zero_()  # Common practice is to set biases to zero
  #+end_src

#+RESULTS:

#+begin_src ipython
model.DURATION = 8
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
model.IF_RL = 0 # 1

model.LR_TRAIN = 1
model.LR_READOUT = 0
#+end_src

#+RESULTS:

#+begin_src ipython
steps = np.arange(0, model.N_STEPS - model.N_STEADY, model.N_WINDOW)

mask_rwd = (steps >= (model.N_STIM_ON[-1] - model.N_STEADY))
rwd_idx = np.where(mask_rwd)[0]
print('rwd', rwd_idx)

# mask_dist = (steps >= (model.N_STIM_ON[1] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[-1] - model.N_STEADY))
# # mask_dist = (steps >= (model.N_STIM_ON[1] - model.N_STEADY))
# dist_idx = np.where(mask_dist)[0]
# print('dist', dist_idx)

mask_cue = (steps >= (model.N_STIM_ON[2] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[-1] - model.N_STEADY))
# mask_cue = (steps >= (model.N_STIM_ON[1] - model.N_STEADY)) & (steps <= (model.N_STIM_ON[-1] - model.N_STEADY))
# mask_cue = (steps >= (model.N_STIM_ON[1] - model.N_STEADY))
cue_idx = np.where(mask_cue)[0]
print('cue', cue_idx)

stim_mask = (steps >= (model.N_STIM_ON[0] - model.N_STEADY))

mask_zero = ~mask_rwd & ~mask_cue & ~stim_mask
zero_idx = np.where(mask_zero)[0]
print('zero', zero_idx)
#+end_src

#+RESULTS:
: rwd [70 71 72 73 74 75 76 77 78 79 80]
: cue [50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70]
: zero [0 1 2 3 4 5 6 7 8 9]

#+begin_src ipython
model.N_BATCH = 256

model.lr_eval_win = np.max( (rwd_idx.shape[0], cue_idx.shape[0]))
# model.lr_eval_win = np.max( (rwd_idx.shape[0], dist_idx.shape[0], cue_idx.shape[0]))

ff_input = []
labels = np.zeros((2, 12, model.N_BATCH, model.lr_eval_win))
# labels = np.zeros((3, 12, model.N_BATCH, model.lr_eval_win))

# if model.IF_RL==0:
#     B0 = 0

print(float(B0), float(C0))

l=0
for i in [-1, 1]:
    for j in [-1, 0, 1]:
        for k in [-1, 1]:

            model.I0[0] = i # sample
            model.I0[1] = j # distractor
            model.I0[4] = k # test

            if i==k: # Pair Trials
                labels[0, l] = np.ones((model.N_BATCH, model.lr_eval_win))

            if j==1: # Go
                model.I0[2] = float(B0) # cue
                model.I0[3] = float(C0) * model.IF_RL # rwd

                labels[1, l] = np.ones((model.N_BATCH, model.lr_eval_win))
            elif j==-1: # NoGo
                model.I0[2] = float(B0) # cue
                model.I0[3] = 0.0 # rwd
            else: # DPA
                model.I0[2] = 0 # cue
                model.I0[3] = 0 # rwd

            l+=1

            ff_input.append(model.init_ff_input())

labels = torch.tensor(labels, dtype=torch.float, device=DEVICE).reshape(2, -1, model.lr_eval_win).transpose(0, 1)
# labels = torch.tensor(labels, dtype=torch.float, device=DEVICE).reshape(3, -1, model.lr_eval_win).transpose(0, 1)
ff_input = torch.vstack(ff_input)
print('ff_input', ff_input.shape, 'labels', labels.shape)
#+end_src

#+RESULTS:
: 1.0 0.0
: ff_input torch.Size([3072, 505, 1000]) labels torch.Size([3072, 2, 21])

#+begin_src ipython
batch_size = 16
train_loader, val_loader = split_data(ff_input, labels, train_perc=0.8, batch_size=batch_size)
#+end_src

#+RESULTS:
: torch.Size([2457, 505, 1000]) torch.Size([615, 505, 1000])
: torch.Size([2457, 2, 21]) torch.Size([615, 2, 21])

#+begin_src ipython
criterion = DualLoss(alpha=1.0, thresh=2.0, cue_idx=cue_idx, rwd_idx=rwd_idx, zero_idx=zero_idx, imbalance=[1.0, 0.0], read_idx=-1)

# SGD, Adam, Adam
learning_rate = 0.1
optimizer = optim.Adam(model.parameters(), lr=learning_rate)
#+end_src

#+RESULTS:

#+begin_src ipython
print('training Dual')
num_epochs = 15
start = perf_counter()

loss, val_loss = optimization(model, train_loader, val_loader, criterion, optimizer, num_epochs, zero_grad=None)
end = perf_counter()
print("Elapsed (with compilation) = %dh %dm %ds" % convert_seconds(end - start))
#+end_src

#+RESULTS:
: training Dual
: Epoch 1/15, Training Loss: 1.8708, Validation Loss: 2.0734, Angle(U, W) : 104.0 Â°
: Epoch 2/15, Training Loss: 2.1221, Validation Loss: 2.0941, Angle(U, W) : 101.0 Â°
: Epoch 3/15, Training Loss: 1.6427, Validation Loss: 1.9733, Angle(U, W) : 98.0 Â°
: Epoch 4/15, Training Loss: 2.0969, Validation Loss: 1.9296, Angle(U, W) : 97.0 Â°
: Epoch 5/15, Training Loss: 1.3830, Validation Loss: 1.7169, Angle(U, W) : 95.0 Â°

#+begin_src ipython
torch.save(model.state_dict(), 'models/dual_train_%d.pth' % seed)
#+end_src

#+RESULTS:
: fd295872-6489-4940-bc08-ef2f6ff44ee0

#+begin_src ipython
odors = model.odors.cpu().numpy()
U = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
V = model.low_rank.V.cpu().detach().numpy()[model.slices[0], 0]
# W = model.low_rank.linear.weight.data.cpu().detach().numpy()[0]

print('   U  V  W  S  D')
print('U ', angle_AB(U, U), angle_AB(U, V), angle_AB(U, W), angle_AB(U, odors[0]), angle_AB(U, odors[1]))
print('V ', 'XXX', angle_AB(V, V), angle_AB(V, W), angle_AB(V, odors[0]), angle_AB(V, odors[1]))
print('W ', 'XXX', 'XXX', angle_AB(W, W), angle_AB(W, odors[0]), angle_AB(W, odors[1]))
print('S ', 'XXX', 'XXX', 'XXX', angle_AB(odors[0], odors[0]), angle_AB(odors[0], odors[1]))
print('D ', 'XXX', 'XXX', 'XXX', 'XXX', angle_AB(odors[1], odors[1]))

#+end_src

#+RESULTS:
: b72d667e-ad27-42cf-86e3-ac677cf96d0e

#+begin_src ipython

#+end_src

#+RESULTS:
: da97a2f6-0934-4f70-b804-c65a865b00ca

** Re-Testing

#+begin_src ipython
model.DURATION = 8
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
#+end_src

#+RESULTS:
: 1827b3a2-be44-4525-bf11-593acfd04692

    #+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: b9b52bc2-c7c8-4f8b-887b-66a7859c5dfd

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = A0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = A0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = A0
model.I0[2] = float(B0)
model.I0[3] = float(C0) * model.IF_RL # rwd
model.I0[4] = -A0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape)
#+end_src

#+RESULTS:
: 0c2e8336-f609-4b82-8954-6a200a780ef5

#+begin_src ipython
labels_A = torch.ones((2*model.N_BATCH, 2))
labels_B = torch.zeros((2*model.N_BATCH, 2))
labels = torch.cat((labels_A, labels_B))

print('labels', labels.shape)
#+end_src

#+RESULTS:
: 9e603e18-abd5-49ba-911d-72ede2735a5f

#+begin_src ipython
rates = model.forward(ff_input=ff_input).detach()
print(rates.shape)
#+end_src

#+RESULTS:
: 2b552eb2-b32b-4fa2-b4a1-d9cc05e08cad

 #+begin_src ipython
rates = rates.cpu().detach().numpy()
memory = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 0]
readout = model.low_rank.U.cpu().detach().numpy()[model.slices[0], 1]
plot_overlap(rates, memory, readout, labels=['pair', 'unpair'], figname='dual_train_overlap.svg')
#+end_src

#+RESULTS:
: 178c9143-ede6-472a-a369-421ecda4ddab


#+begin_src ipython
idx = get_idx(model, 1)
plot_rates_selec(rates, idx, figname='dual_train_raster.svg')
#+end_src

#+RESULTS:
: c710070a-fa2c-4062-bb78-196548f83af8

#+begin_src ipython
plot_m0_m1_phi(rates, idx, figname='dual_train_fourier.svg')
#+end_src

#+RESULTS:
: 02f0c514-bedc-4dc3-bf45-039dc7388448


#+begin_src ipython

#+end_src

#+RESULTS:
: 52d3a8c5-e227-413c-a914-8f52007601db

** Fixed points

#+begin_src ipython
model.DURATION = 20
model.N_STEPS = int(model.DURATION / model.DT) + model.N_STEADY + model.N_WINDOW
model.IF_RL = 0
#+end_src

#+RESULTS:
: 969362e8-3166-4a8d-bd9d-b84a86f19cd1

#+begin_src ipython
model.eval()
#+end_src

#+RESULTS:
: 349c6c10-ace4-4764-a360-28b21342801f

#+begin_src ipython
model.N_BATCH = 1

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AC_pair = model.init_ff_input()

model.I0[0] = A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

AD_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BC_pair = model.init_ff_input()

model.I0[0] = -A0
model.I0[1] = 0
model.I0[2] = 0
model.I0[3] = 0
model.I0[4] = 0

BD_pair = model.init_ff_input()

ff_input = torch.cat((AC_pair, BD_pair, AD_pair, BC_pair))
print('ff_input', ff_input.shape, ff_input[0, 0, :4])
#+end_src

#+RESULTS:
: d571ee78-c99a-4fe6-8c2a-431c7cc3cb08

#+begin_src ipython
rates = model.forward(ff_input=ff_input).cpu().detach().numpy()
print(rates.shape)
#+end_src

#+RESULTS:
: 571e8973-2ae5-43a6-8794-814e162a7139

#+begin_src ipython
idx = get_idx(model, 1)
plot_rates_selec(rates, idx)
#+end_src

#+RESULTS:
: 1d941f90-b0bb-44c9-9c83-624c5d5a9ea8

#+begin_src ipython
plot_m0_m1_phi(rates, idx)
#+end_src

#+RESULTS:
: e062c6a9-0737-47ab-8f57-10188bc91a1b

#+begin_src ipython
from matplotlib.patches import Circle
m0, m1, phi = decode_bump(rates[..., idx], axis=-1)

x = m1 / m0 * np.cos(phi)
y = m1 / m0 * np.sin(phi)

xA = x
yA = y

fig, ax = plt.subplots(1, 1, figsize=[height, height])

# ax.plot(xA.T[0], yA.T[0], 'x', alpha=.5, ms=10)
# ax.plot(xA.T, yA.T, '-', alpha=.5)
ax.plot(xA.T[-1], yA.T[-1], 'o', alpha=.5, ms=20)
# ax.set_xlim([-.9, .9])
# ax.set_ylim([-.9, .9])
circle = Circle((0., 0.), 1.7, fill=False, edgecolor='k')
ax.add_patch(circle)

# Set the aspect of the plot to equal to make the circle circular
ax.set_aspect('equal')
plt.savefig('fp_dual_train.svg', dpi=300)
plt.show()
#+end_src

#+RESULTS:
: 7e358eff-a241-4950-9555-dcc8912dec13

    #+begin_src ipython

  #+end_src

  #+RESULTS:
  : d6085819-3aea-4087-aa15-2171f7a6d409

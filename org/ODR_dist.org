#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr :kernel torch

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run ../notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'

  REPO_ROOT = "/home/leon/models/NeuroTorch"
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/torch/bin/python

* Helpers
** Data
#+begin_src ipython
  def get_rates_ini_phi(name, ini_list, phi_list):
    rates_list = []
    for ini in ini_list:
      for phi in phi_list:
        rates = np.load(REPO_ROOT + '/data/simul/%s_ini_%d_phi_%d.npy' % (name, ini, phi))
        rates_list.append(rates)
        
    rates_list = np.array(rates_list).reshape(len(ini_list), len(phi_list), rates.shape[0], rates.shape[1])
    print(rates_list.shape)
    return rates_list  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_phi(rates, phi_list):
      n_trials, n_phi, n_times, n_neurons = rates.shape
      
      # Create indices
      trials_ind, phi_ind, times_ind, neurons_ind = np.indices((n_trials, n_phi, n_times, n_neurons))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'phi' : phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates, phi_list)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code_ini_phi(df):
      df_code = df.groupby(['time', 'trial', 'phi'] )['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi
      
      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi

      return cmean
#+end_src

#+RESULTS:

** Simul

#+begin_src ipython
  def run_ini_phi(conf, name, ini_list, phi_list, **kwargs):

      df_list = []
      for ini in ini_list:
          for phi in phi_list:

              print('##########################################')
              print("trial", ini, "phi", phi)
              print('##########################################')
              
              model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                              REPO_ROOT, PHI1=phi, **kwargs)

              model.run()

#+end_src

#+RESULTS:

#+begin_src ipython
  from joblib import Parallel, delayed
  import torch
  import os
  import warnings
  warnings.filterwarnings("ignore")

  def run_simulation(conf, name, ini, phi, device, **kwargs):
      warnings.filterwarnings("ignore")

      torch.cuda.set_device(device)

      REPO_ROOT = "/home/leon/models/NeuroTorch"
      model = Network('%s' % conf, '%s_ini_%d_phi_%d' % (name, ini, phi),
                      REPO_ROOT, PHI1=phi, device=device, **kwargs)
      # model.to(device)
      model.run()
      del model
      # Optionally clear this process's GPU memory
      torch.cuda.empty_cache()

  def run_ini_phi_parallel(batch_size, conf, name, ini_list, phi_list, available_gpu_memory=0, device='cuda:0', **kwargs):

      print('batch size', batch_size)

      # Run the simulations in parallel with optimal n_jobs
      Parallel(n_jobs=batch_size)(
          delayed(run_simulation)(conf, name, ini, phi, device=device, **kwargs)
          for ini, phi in [(ini, phi) for ini in ini_list for phi in phi_list]
      )
      
      torch.cuda.empty_cache()

      print("Done")
#+end_src

#+RESULTS:

#+begin_src ipython
  torch.cuda.empty_cache()
#+end_src

#+RESULTS:

* Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '../')

  import pandas as pd
  from scipy.stats import circmean
  
  from src.network import Network
  from src.plot_utils import plot_con
  from src.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

* Single Trial
** Model

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  fig, ax = plt.subplots(figsize=(0.65 *  width, 0.75 * height))
  ax.plot(x, Activation()(torch.tensor(x), func_name='relu'), 'k')
  ax.xaxis.set_visible(False)
  ax.yaxis.set_visible(False)
  ax.set_title('Linear I/O Function')
  for spine in ax.spines.values():
      spine.set_visible(False)
  plt.savefig('relu.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/25c72a47fb96f9fd18c24a18346a5cb88bb22229.png]]

#+begin_src ipython
  from src.activation import Activation
  x = np.arange(-5, 5, .1)
  fig, ax = plt.subplots(figsize=(0.65 *  width, 0.75 * height))
  ax.plot(x, Activation()(x, func_name='erfc'), 'k')
  ax.xaxis.set_visible(False)
  ax.yaxis.set_visible(False)
  ax.set_title('Saturating I/O Function')
  for spine in ax.spines.values():
      spine.set_visible(False)
  plt.savefig('saturating.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ba4e6a5dabc40bac45a143f665ccfffbfe756551.png]]

** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
#+end_src

#+RESULTS:

#+begin_src ipython
  name = "odr_off"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda:1', PHI0=180)
  rates_off = model.run()
#+end_src

#+RESULTS:

#+begin_src ipython
  name = "odr_on"
  model = Network(conf_name, name, REPO_ROOT, VERBOSE=0, DEVICE='cuda:1', Ja0=[24], PHI0=180)
  rates_on = model.run()
#+end_src

#+RESULTS:

** Analysis

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])
  times = np.linspace(0, 5., rates_off.shape[0])

  N_E = 1000
  r_min = 0
  r_max = 1.5 * np.max((np.mean(rates_off), np.mean(rates_on)))
  r_max=15
  im = ax[0].imshow(rates_off.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_ylabel('Prefered Location (°)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[0].set_title('Control')

  im = ax[1].imshow(rates_on.T, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])
  # ax[1].set_ylabel('Prefered Location (°)')
  ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_title('NB Stimulation')

  fig.subplots_adjust(right=1.0)  # Create space on the right side of the subplots

  # Define the new axis for the colorbar
  cbar_ax = fig.add_axes([1.0, 0.29, 0.02, 0.55])  # This adds a new axes for the colorbar
  # [left, bottom, width, height] in normalized (0,1) units

  # Create the colorbar in the new axes
  cbar = fig.colorbar(im, cax=cbar_ax)

  cbar.set_label("Activity (Hz)")
  cbar.set_ticks([0,  5, 10, 15 ])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/f937c4d8bd9d2c6af7c8a423d2fae4062d884fd9.png]]

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_off[:, :N_E], axis=-1)  
  m0_on, m1_on, phi_on = decode_bump(rates_on[:, :N_E], axis=-1) 
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))

  times = np.linspace(0, 5.5, m0.shape[0])

  ax[0].plot(times, m0)
  ax[0].plot(times, m0_on)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 1, 2, 3, 4, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].plot(times, m1_on / m0_on)

  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 1, 2, 3, 4, 5])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].plot(times, phi_on * 180 / np.pi)

  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([-180, -90, 0, 90, 180], [0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 1, 2, 3, 4, 5])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/56259783e2e08cd5f8a5cf64207ec5686619bc1e.png]]

#+ATTR_ORG: :width 900
#+RESULTS:

#+begin_src ipython
  smooth_off = circcvl(rates_off[-1, :N_E], windowSize=10, axis=-1)
  smooth_on = circcvl(rates_on[-1, :N_E], windowSize=10, axis=-1)

  theta = np.linspace(0, 360, rates_off.shape[-1])

  plt.plot(theta, smooth_off , 'b', label='off')
  plt.plot(theta, smooth_on, 'r', label='on')

  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  plt.legend(frameon=0, fontsize=12)
  # plt.yticks([5, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+ATTR_ORG: :width 300
#+RESULTS:
[[file:./.ob-jupyter/a0f4e056c26cb30cbff26270a1064b00b53a07d6.png]]

* Multiple Trials
** Parameters

#+begin_src ipython
  REPO_ROOT = "/home/leon/models/NeuroTorch"
  conf_name = "config_bump.yml"
  n_jobs = 32
  ini_list = np.arange(0, 64)
  phi_list = [45, 90, 180]
  I1 = [0.1, 0.1]
  SIGMA1 = 1.0
#+end_src

#+RESULTS:

** Simulation

#+begin_src ipython
  name = 'dist_off'
  # run_ini_phi(conf_name, name, ini_list, phi_list)
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:0', REC_LAST_ONLY=1, I1=I1, SIGMA1=SIGMA1)
#+end_src

#+RESULTS:
: batch size 32
: Done

#+begin_src ipython 
  name = 'dist_on'
  # run_ini_phi(conf_name, name, ini_list, phi_list, Ja0=[24])
  run_ini_phi_parallel(n_jobs, conf_name, name, ini_list, phi_list, device='cuda:0', Ja0=[24], REC_LAST_ONLY=1, I1=I1, SIGMA1=SIGMA1)
#+end_src

#+RESULTS:
: batch size 32
: Done

** Load data

#+begin_src ipython
  name = 'dist_off'
  df = load_data_ini_phi(name, ini_list, phi_list)
  df_code, end_point = get_code_ini_phi(df)
#+end_src

#+RESULTS:
: (64, 3, 1, 1000)
:    trial  phi        m0        m1     phase
: 0      0    0  5.879601  5.544836  5.763794
: 1      0    1  5.888238  5.434023  5.758510
: 2      0    2  5.863462  5.461840  5.960012
: 3      1    0  5.879601  5.544836  5.763794
: 4      1    1  5.877421  5.542322  5.430148

#+begin_src ipython
  name = 'dist_on'
  df_on = load_data_ini_phi(name, ini_list, phi_list)
  df_code_on, end_point_on = get_code_ini_phi(df_on)
#+end_src

#+RESULTS:
: (64, 3, 1, 1000)
:    trial  phi        m0        m1     phase
: 0      0    0  8.378881  6.448724  6.073249
: 1      0    1  8.380089  6.449301  6.016002
: 2      0    2  8.379140  6.441780  6.203864
: 3      1    0  8.378881  6.448724  6.073249
: 4      1    1  8.380089  6.449301  6.016002

#+begin_src ipython
  end_point.phi[end_point.phi==0] = 45
  end_point.phi[end_point.phi==1] = 90
  end_point.phi[end_point.phi==2] = 180

  end_point_on.phi[end_point_on.phi==0] = 45
  end_point_on.phi[end_point_on.phi==1] = 90
  end_point_on.phi[end_point_on.phi==2] = 180
#+end_src

#+RESULTS:

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point.phi * np.pi / 180)
  end_point['precision'] = end_point.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on.phi * np.pi / 180) 
  end_point_on['precision'] = end_point_on.groupby(['phi'], group_keys=False)['phase'].apply(get_precision)
#+end_src

#+RESULTS:

#+begin_src ipython
   fig, ax = plt.subplots(1, 2, figsize=(1.5 * width, height))

   sns.lineplot(end_point, x='phi', y=end_point['accuracy'].abs() * 180 / np.pi, marker='o', ax=ax[0], err_style='bars')
   sns.lineplot(end_point_on, x='phi', y=end_point_on['accuracy'].abs() * 180 / np.pi, marker='o', ax=ax[0], err_style='bars')
   ax[0].set_xticks([0, 1, 2 ], [45, 90, 180])
   ax[0].set_xlabel('Distance btw S1 and S2')
   ax[0].set_ylabel('Error (°)')

   sns.lineplot(end_point, x='phi', y=end_point['precision'].abs() * 180 / np.pi, marker='o', ax=ax[1], err_style='bars')
   sns.lineplot(end_point_on, x='phi', y=end_point_on['precision'].abs() * 180 / np.pi, marker='o', ax=ax[1], err_style='bars')
   ax[1].set_xticks([0, 1, 2], [45, 90, 180])
   ax[1].set_xlabel('Distance btw S1 and S2')
   ax[1].set_ylabel('Angular Deviation (°)')

  plt.show()
#+end_src
#+RESULTS:
[[file:./.ob-jupyter/d365c90ea458c99cde451334dff3831c6c877b12.png]]

#+begin_src ipython

#+end_src

#+RESULTS:

